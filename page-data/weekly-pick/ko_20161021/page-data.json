{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20161021","result":{"data":{"post":{"html":"<h1 id=\"react\" style=\"position:relative;\"><a href=\"#react\" aria-label=\"react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React</h1>\n<p>FE-Weekly-Pick에서는 최근에 팀 내에서 진행했던 스터디 내용을 정리하는 의미에서, 4회에 걸쳐 자바스크립트 (프론트엔드) 프레임워크를 소개하는 시리즈를 연재할 예정입니다. 금주부터 아래와 같은 목차로 진행되니 많은 관심 부탁드립니다.</p>\n<ol>\n<li>Cycle.js</li>\n<li>Angular 2</li>\n<li>Vue.js</li>\n<li><strong>React</strong></li>\n</ol>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<ol>\n<li>소개</li>\n<li>개발/구동 환경</li>\n<li>아키텍쳐</li>\n<li>컴포넌트</li>\n<li>테스트</li>\n<li>\n<p>성능</p>\n<ol>\n<li>렌더링</li>\n<li>Selector</li>\n</ol>\n</li>\n<li>\n<p>기타</p>\n<ol>\n<li>redux-saga</li>\n<li>normalizr</li>\n</ol>\n</li>\n<li>결론</li>\n</ol>\n<h2 id=\"소개\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EA%B0%9C\" aria-label=\"소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소개</h2>\n<p>React는 Facebook에서 개발해 Facebook과 Instagram, Airbnb 등에서 사용하고 있는 오픈소스 UI 프레임웍이다.</p>\n<p>사용자 액션에 따라 DOM을 일일이 다루었던 과거 개발 방식(jQuery와 같은 라이브러리만을 사용하는)과는 달리 개발자가 DOM을 직접 다루지 않고 React가 데이터 상태에 따라 자동으로 UI를 관리하기 때문에, 개발자는 단순히 특정 상태에 대한 뷰의 변화만 구현하면 된다.</p>\n<p>React는 다음의 세 가지 특징을 갖고 있다.</p>\n<ul>\n<li>UI 컴포넌트를 만들기 위한 라이브러리이며 React의 컴포넌트는 트리형태로 구성된다.</li>\n<li>Virtual DOM을 사용하여 변경된 부분에 대한 최소한의 DOM 처리로 UI를 업데이트하여 애플리케이션의 성능을 향상한다.</li>\n<li>부모 컴포넌트에서 하위 컴포넌트로 전달하는 단방향의 단순한 데이터 흐름을 갖고 있어 데이터 추적과 디버깅을 쉽게 해준다.</li>\n</ul>\n<br />\n<h2 id=\"개발-환경\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD\" aria-label=\"개발 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발 환경</h2>\n<h3 id=\"기본-구현\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EA%B5%AC%ED%98%84\" aria-label=\"기본 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">var</span> HelloReact <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">DOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>HelloReact<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"React\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 \"Hello React\" 라는 문구를 보여주는 간단한 예제다.</p>\n<p><code class=\"tui-language-text\">React.createClass()</code>는 뷰의 최소 단위인 컴포넌트를 만드는 API이다. 예제 컴포넌트는 <code class=\"tui-language-text\">DOM.p()</code> API로 <code class=\"tui-language-text\">&lt;p&gt;Hello React&lt;/p&gt;</code> 를 렌더링하도록 구현했으며, <code class=\"tui-language-text\">ReactDOM.render()</code> 로 컴포넌트를 DOM에 직접 렌더링 한다.</p>\n<p>여기서 ReactDOM은 DOM과 React를 연결해주는 역할을 하는 객체로 컴포넌트를 렌더링 하거나 DOM을 직접 탐색하는 데 사용한다.</p>\n<blockquote>\n<p>ReactDOM은 원래 React에 포함되어 있었지만 react-native, react-canvas와 같은 다른 플랫폼의 뷰 모듈과 같은 관계에 위치하도록 0.14버전부터 별도의 모듈로 분리했다. <a href=\"https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#two-packages-react-and-react-dom\">관련 문서</a></p>\n</blockquote>\n<p>HelloReact 컴포넌트의 반환 엘리먼트의 형태를 약간 바꿔보자. <code class=\"tui-language-text\">&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;React&lt;/span&gt;&lt;/p&gt;</code>와 같이 Hello와 React를 두 개의 span 엘리먼트로 구분하여 표시하고 싶다면 아래와 같이 코드를 수정해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">var</span> HelloReact <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">DOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      React<span class=\"token punctuation\">.</span><span class=\"token constant\">DOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">span</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      React<span class=\"token punctuation\">.</span><span class=\"token constant\">DOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">span</span><span class=\"token punctuation\">(</span>nul<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그런데, 코드만 보고 어떤 컴포넌트가 어떤 엘리먼트를 반환하는지 파악이 되는가?</p>\n<h3 id=\"jsx\" style=\"position:relative;\"><a href=\"#jsx\" aria-label=\"jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX</h3>\n<p>React에서는 UI 표현의 편의를 위해 XML 형태의 구문을 자바스크립트 구문 사이에 사용할 수 있는 JSX 문법을 제공한다. JSX를 사용하면 기존의 어려웠던 중첩 엘리먼트 표현도 보다 쉽게 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">var</span> HelloReact <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HelloReact</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>React<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>이 JSX 문법을 사용한 파일은 일반적으로 *.jsx 라는 확장자로 저장하고 배포 전 트랜스파일을 통해 js로 변환하는 과정을 거친다. 개발 환경 구성은 뒤에서 다룬다.</p>\n</blockquote>\n<h3 id=\"es6-문법\" style=\"position:relative;\"><a href=\"#es6-%EB%AC%B8%EB%B2%95\" aria-label=\"es6 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>es6 문법</h3>\n<p>플랫폼이나 개발환경이 이미 구축된 경우 <code class=\"tui-language-text\">React.createClass()</code>의 사용보다 es6의 <code class=\"tui-language-text\">class</code> 키워드를 사용하는 것을 권장한다. 이 <code class=\"tui-language-text\">class</code>키워드는 0.13 버전부터 지원하기 시작했는데 es7의 property initializer 와 함께 사용하면 편리하게 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token comment\">// es6의 class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloReact</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// es7의 property initializer</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"hello world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"john\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// es7의 decorator</span>\n  @autobind\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>당장 <code class=\"tui-language-text\">class</code> 키워드 사용에 큰 장점은 없지만 추후 <code class=\"tui-language-text\">class</code> 키워드가 native로 지원될 경우 조금 더 빠른 성능을 지원하게 될 것이고 추가로 es6의 여러 편리한 문법(spread)을 이용하면 코드량을 상당히 줄일 수 있다.</p>\n<p><code class=\"tui-language-text\">class</code> 키워드는 지금 필요의 경우 this 바인딩을 직접 해야 한다는 것과 mixin을 사용할 수 없다는 이슈가 있지만, this바인딩은 앞으로 추가될 <a href=\"http://technologyadvice.github.io/es7-decorators-babel6/\">decorator</a> 로 간단하게 해결할 수 있고 mixin은 포럼에서 코드의 복잡도를 증가시킨다는 의견이 많아 <a href=\"https://www.sitepoint.com/react-higher-order-components/\">HOC(High Order Component)</a> 로 대체될 가능성이 높다. 조심스럽게 예측해보건대 <code class=\"tui-language-text\">React.createClass()</code>는 추후 사라질 가능성이 있다.</p>\n<h3 id=\"개발-환경-구성\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"개발 환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발 환경 구성</h3>\n<p>JSX와 es6 문법을 사용하려면 별도의 변환 과정이 필요하다. 이를 위해선 <a href=\"https://babeljs.io/\">Babel</a> 인터프리터가 필요하며, 이를 사용하려면 <a href=\"http://webpack.github.io/\">webpack</a>과 같은 번들링 도구가 필요하다.</p>\n<p>Babel, webpack을 사용하기 위해선 관련된 npm 모듈들을 모두 설치해야 하고 몇몇 설정 파일들을 하나하나 작성해야 한다. 어찌 보면 매우 귀찮은 일인데 다행히도 React에서는 이와 같은 과정을 한 번에 처리해주는 <a href=\"https://github.com/facebookincubator/create-react-app\">Create React APP</a>이라는 npm 모듈을 제공하고 있다. 모듈 설치 후 <code class=\"tui-language-text\">create-react-app</code> 명령어 하나로 로컬 서버 실행부터 자동 번들링까지 지원하는 개발 환경을 정말 쉽게 구성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install -g create-react-app\n$ create-react-app my-app</code></pre></div>\n<blockquote>\n<p>npm 패키지를 이용해 직접 개발 환경을 만들고 싶다면 <a href=\"https://facebook.github.io/react/docs/package-management.html\">패키지 관리</a> 페이지를 참고하길 바란다.\nReact는 npm에 익숙하지 않은 사용자를 위해 <a href=\"https://facebook.github.io/react/downloads/react-15.3.2.zip\">초심자용 키트</a>도 제공하고 있다.</p>\n</blockquote>\n<br />\n<h2 id=\"react의-구조\" style=\"position:relative;\"><a href=\"#react%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"react의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React의 구조</h2>\n<p>React 애플리케이션의 전체 구조는 컴포넌트의 트리 형태이다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2888775/19619602/5d883f86-98a6-11e6-9444-4a15d340d46c.png\" alt=\"image\"></p>\n<h3 id=\"props\" style=\"position:relative;\"><a href=\"#props\" aria-label=\"props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props</h3>\n<p>부모 컴포넌트는 하위 컴포넌트로 데이터를 전달하기 위해 <code class=\"tui-language-text\">props</code>를 사용하고 있는데,\n데이터를 전달받은 하위 컴포넌트에서 <code class=\"tui-language-text\">this.props</code>라는 구문으로 사용할 수 있다.</p>\n<p>'props'는 'Hello React' 예제에서 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">var</span> HelloReact <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HelloReact</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>React<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>부모로부터 변경된 props를 전달받게 되면 해당 컴포넌트와 모든 자식 컴포넌트들을 다시 렌더링 한다.</p>\n<h3 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state</h3>\n<p>컴포넌트 자체의 상태를 관리하기 위해 <code class=\"tui-language-text\">state</code>를 사용한다. <code class=\"tui-language-text\">state</code>의 데이터를 이용해 하위 컴포넌트에 <code class=\"tui-language-text\">props</code>로 전달하기도 한다. state를 변경하려면 <code class=\"tui-language-text\">setState()</code>를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LikeButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      liked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> liked<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>liked <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">setState()</code> 메서드가 호출될 때에도 해당 컴포넌트와 모든 자식 컴포넌트들을 다시 렌더링 한다.</p>\n<h3 id=\"컴포넌트-생명주기lifecycle\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0lifecycle\" aria-label=\"컴포넌트 생명주기lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 생명주기(lifecycle)</h3>\n<p>컴포넌트가 페이지의 DOM 트리에 실제로 추가될 때 마운트(mount) 된다고 하고 DOM 트리에서 삭제될 때를 언마운트(unmount) 된다고 정의할때 컴포넌트의 마운트와 언마운트 사이에는 다음과 같은 생명주기(lifecycle) 함수들이 동작한다.</p>\n<ul>\n<li>componentWillMount() - 마운트 직전에 한번 발생</li>\n<li>componentDidMount() - 마운트 직후 한번 발생</li>\n<li>componentWillReceiveProps() - 새로운 props를 전달받기 전에 발생</li>\n<li>componentWillUpdate() - props, state 업데이트 직전에 발생</li>\n<li>componentDidUpdate() - props, state 업데이트 직후에 발생</li>\n<li>componentWillUnmount() - 언마운트 직전에 발생</li>\n</ul>\n<p>생명주기 함수가 동작할 때 각 주기에 해당하는 props와 state 정보를 제공하고 있어 이를 바탕으로 원하는 작업을 진행할 수 있다.</p>\n<h3 id=\"컴포넌트-간-데이터-전달\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC\" aria-label=\"컴포넌트 간 데이터 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 간 데이터 전달</h3>\n<p>React는 단방향 데이터 흐름을 갖고 있기 때문에 부모 컴포넌트에서 하위 컴포넌트로 데이터(props)를 전달할 수 있다.</p>\n<p>만약 상하 관계가 아닌 컴포넌트 간에 데이터를 전달해야 한다면 어떻게 처리해야 할까? 부모가 같은 컴포넌트 사이라면 부모의 state를 이용할 수 있다. 부모 컴포넌트가 자신의 state를 변경할 수 있는 함수를 props를 통해 하위 컴포넌트에 내려주고 하위 컴포넌트는 해당 함수를 통해 상태를 변경하거나 공유할 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2888775/19619680/0c7d0386-98a8-11e6-9523-30a32bc309cf.png\" alt=\"image\"></p>\n<p>그렇다면 컴포넌트 간의 거리가 먼 경우는 어떻게 처리해야 할까? props를 재귀적으로 넘겨주면서 처리하면 어찌어찌 가능할 것 같은데...</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2888775/19619676/fc451634-98a7-11e6-9b62-942d22ec079f.png\" alt=\"image\"></p>\n<p>별로 좋은 방법은 아닌 것 같다.</p>\n<p>어떻게 하면 이 문제를 해결할 수 있을까? 데이터 공유가 필요한 컴포넌트가 공통된 모델을 바라볼 수 있다면 이런 문제를 해결할 수 있지 않을까? React와 같이 단방향 데이터 흐름을 갖고 있으면 더욱 좋을 것 같다.</p>\n<p>이런 고민을 해결할 수 있는 것이 바로 Redux다.</p>\n<br />\n<h2 id=\"redux와-react\" style=\"position:relative;\"><a href=\"#redux%EC%99%80-react\" aria-label=\"redux와 react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux와 React</h2>\n<p>Redux는 Facebook에서 개발한 단방향 흐름 아케텍처인 <a href=\"https://facebook.github.io/flux/\">Flux</a>의 구현체로, 자바스크립트 애플리케이션을 위한 예측 가능한 상태 컨테이너다.</p>\n<p>Redux는 Store, Action creator, Reducer로 구성되어있고,</p>\n<ol>\n<li>Store의 데이터로 뷰 렌더링</li>\n<li>뷰에서 발생한 이벤트로 Action(Action creator로 생성)을 생성</li>\n<li>Reducer는 생성된 Action으로 Store를 갱신</li>\n<li>갱신된 Store로 뷰 렌더링</li>\n</ol>\n<p>과 같은 단방향 흐름을 갖는다.</p>\n<p>단방향 흐름 하면 React 아닌가, 둘을 같이 사용해보자. React를 Redux와 같이 사용한다면 다음 그림과 같은 흐름을 보일 것이다.</p>\n<p><img src=\"http://www.theodo.fr/uploads/blog//2016/03/ui_workflow.png\" alt=\"redux and react data flow\"></p>\n<p><em>출처 : <a href=\"https://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/\">Getting Started with React, Redux and Immutable: a Test-Driven Tutorial (Part 2)</a></em></p>\n<p>그림 상으로는 완벽하다. 그런데 Redux를 사용하더라도 최상단 컴포넌트에만 Redux store가 연결되면, 이전과 차이가 없지 않은가? 이전 챕터에서 질문했던 거리가 먼 컴포넌트 간의 데이터 전달 문제는 해결되지 않는다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2888775/19589525/8e8f54e8-97a7-11e6-9d4e-129be73fb95d.png\" alt=\"with redux\"></p>\n<p><em>출처: <a href=\"https://css-tricks.com/learning-react-redux/\">https://css-tricks.com/learning-react-redux/</a></em></p>\n<p>다행스럽게도 컴포넌트의 깊이와 관계없이 Redux store에 접근할 수 있는 방법을 제공하고 있다. Redux는 react-redux라는 npm 모듈을 이용해 React에서 사용할 수 있는데, react-redux 모듈의 connect라는 메서드를 이용하면 React 컴포넌트에서 Redux store에 접근할 수 있는 스마트(smart) 컴포넌트를 만들 수 있다. 이 때 connect 메서드의 인자로 <code class=\"tui-language-text\">mapStateToProps</code> <code class=\"tui-language-text\">mapDispatchToProps</code> 개념의 두 가지 인자를 전달하는데 각각의 역할은 다음과 같다.</p>\n<ul>\n<li><strong>mapStateToProps</strong>: 그림에서 파란색 화살표의 역할을 하는 함수로 컴포넌트에 필요한 값을 store로부터 직접 조회하는 역할을 한다.</li>\n<li><strong>mapDispatchToProps</strong>: 그림에서 녹색 화살표의 역할을 하는 함수로 사용자의 액션에서 발생하는 store의 변화를 구현한다.</li>\n</ul>\n<blockquote>\n<p>Redux 없이 부모 컴포넌트로부터 props만 전달받는 컴포넌트를 덤(dumb) 컴포넌트라고 부른다.</p>\n</blockquote>\n<p>바로 이 스마트 컴포넌트를 이용하면 컴포넌트 간의 데이터 전달 문제를 해결할 수 있다. 데이터 전달을 해야 하는 컴포넌트 모두를 스마트 컴포넌트로 만들면 컴포넌트 간에 Redux store를 통해 데이터를 공유하기 때문에 문제가 해결된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// DUMB COMPONENT</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Store 에서 컴포넌트에 필요한 값을 props으로 조회한다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `bindActionCreators()`로 단순한 action creator함수를 store 와 직접 연결한다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> newName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">\"CHANGE_NAME\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> newName<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    dispatch\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SMART COMPONENT</span>\n<span class=\"token keyword\">const</span> Container <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HelloWorld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<h2 id=\"이벤트-핸들링\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81\" aria-label=\"이벤트 핸들링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 핸들링</h2>\n<h3 id=\"reactdom에서-이벤트-바인딩\" style=\"position:relative;\"><a href=\"#reactdom%EC%97%90%EC%84%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"reactdom에서 이벤트 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ReactDOM에서 이벤트 바인딩</h3>\n<p>ReactDOM에서 DOM에 할당할 수 있는 속성을 정의할 때에는 JSX 엘리먼트에 <code class=\"tui-language-text\">&lt;button class=&quot;btn&quot; /&gt;</code>와 같이 속성으로 정의하는데\n이벤트 핸들러도 마찬가지로 JSX 엘리먼트에 카멜 케이스(camel case)로(<code class=\"tui-language-text\">&lt;button onClick=&#39;...&#39; /&gt;</code>) 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Btn</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"이벤트-위임delegation\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84delegation\" aria-label=\"이벤트 위임delegation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 위임(delegation)</h3>\n<p>JSX 엘리먼트에 이벤트를 할당하면 React는 이벤트를 해당 엘리먼트에 바인딩 하지 않고 document.body에 위임된 형태로 동작하게 한다. 이벤트 위임의 이점은 <a href=\"/test123/weekly-pick/ko_20160826/\">왜 이벤트 위임(delegation)을 해야 하는가?</a> 문서를 참고하기 바란다.</p>\n<h3 id=\"통합적인synthetic-이벤트\" style=\"position:relative;\"><a href=\"#%ED%86%B5%ED%95%A9%EC%A0%81%EC%9D%B8synthetic-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"통합적인synthetic 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>통합적인(Synthetic) 이벤트</h3>\n<p>React의 할당된 이벤트 핸들러에는 브라우저 네이티브 이벤트의 크로스 브라우저 래퍼(wrapper)인 <code class=\"tui-language-text\">SyntheticEvent</code>의 인스턴스가 전달된다. <code class=\"tui-language-text\">SyntheticEvent</code>는 네이티브 이벤트와 같은 인터페이스를 갖고 있다. 네이티브 이벤트가 필요하다면 <code class=\"tui-language-text\">.nativeEvent</code>를 사용할 수도 있다.</p>\n<p><code class=\"tui-language-text\">SyntheticEvent</code>는 풀링(pooling, 이벤트 객체를 재사용하기 위해 이벤트 객체 pool을 관리) 되기 때문에 이벤트 핸들러 내부에서 비동기로 이벤트 객체에 접근하면 <code class=\"tui-language-text\">null</code>을 반환하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => nullified object.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"click\"</span>\n  <span class=\"token keyword\">var</span> eventType <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"click\"</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => null</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"click\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Won't work. this.state.clickEvent will only contain null values.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clickEvent<span class=\"token operator\">:</span> event <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// You can still export event properties.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> eventType<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>비동기로 이벤트 객체에 접근하려면 예제와 같이 변수에 캐싱(<code class=\"tui-language-text\">var eventType = event.type</code>) 한 후 사용해야 한다.</p>\n<br />\n<h2 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h2>\n<h3 id=\"테스트-도구\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8F%84%EA%B5%AC\" aria-label=\"테스트 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 도구</h3>\n<p>일반적으로 웹 애플리케이션의 테스트는 렌더링 이후의 마크업을 검사하는 형태로 수행한다. 이 개념만 알고 있다면 별도의 도구 없이도 테스트할 수 있다. 먼저 HTML 페이지와 테스트 코드를 준비한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token comment\">&lt;!-- 1. HTML 문서 준비 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>service.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// 2. 테스트 실행</span>\n  <span class=\"token function\">shouldRenderListProperly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">shouldRenderListProperly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 3. root 엘리먼트 준비</span>\n    <span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4. mock 데이터 준비</span>\n    <span class=\"token keyword\">var</span> mockList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 5. 컴포넌트 렌더링</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>MyComponent list<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mockList<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      document<span class=\"token punctuation\">.</span>query<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selector</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 6. 결과 확인</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>query<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selector</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>컴포넌트가 렌더링 될 컨테이너 엘리먼트를 만들고 렌더링 후 마크업을 조사하는 2 ~ 6의 과정을 반복해 테스트 커버리지를 올릴 수 있다. 하지만 이 방법은 생산성은 매우 떨어진다. 이때 사용하는 도구가 <a href=\"http://karma-runner.github.io\">karma</a>, <a href=\"http://jasmine.github.io/\">jasmine</a> <a href=\"http://airbnb.io/enzyme/\">enzyme</a> 이다.</p>\n<p><a href=\"http://karma-runner.github.io\">karma</a>는 웹서버를 내장하고 있는 실행 프로그램이다. [설정 파일]을 읽어 필요한 소스가 포함된 HTML 파일을 만들거나 브라우저로 열어 특정 JS 함수를 자동으로 실행해주는 기능을 가지고 있다. 또 6번 결과 항목을 원하는 형태 (console, junit, teamcity)의 포맷으로도 출력하는 것도 가능하다. (CI에 응용할 수 있다)</p>\n<p><a href=\"http://jasmine.github.io/\">jasmine</a> 은 <code class=\"tui-language-text\">describe()</code>, <code class=\"tui-language-text\">it()</code> 메서드를 제공하는 테스트 도구이다. 3 ~ 5번 코드가 테스트마다 포함되어 있으면 테스트의 의도가 희석되고 불필요한 코드량 증가를 일으키는데 <code class=\"tui-language-text\">beforeEach()</code>, <code class=\"tui-language-text\">beforeAll()</code> 과 같은 API를 사용하면 중복을 제거하고 깔끔한 테스트를 작성할 수 있다.</p>\n<p><a href=\"http://airbnb.io/enzyme/\">enzyme</a>은 React 컴포넌트 테스팅 도구로 컴포넌트의 마크업이 복잡할수록 테스트 코드도 복잡해지기 마련인데 추상화 API를 통해 깔끔하게 마크업을 확인할 수 있는 API를 제공한다.</p>\n<p>설명했던 도구를 사용한 테스트 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>mount<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyComponent'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> component<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        mockList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      component <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render list properly.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"shallow-rendering\" style=\"position:relative;\"><a href=\"#shallow-rendering\" aria-label=\"shallow rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shallow Rendering</h3>\n<p>위의 예제에서 리스트의 항목 하나하나가 특정한 <code class=\"tui-language-text\">props</code>를 요구하는 React 컴포넌트일 때를 생각해 보자(가칭 <code class=\"tui-language-text\">ListItem</code> 컴포넌트). 오류 없이 렌더링하기 위해서는 <code class=\"tui-language-text\">MyComponent</code>를 렌더링할 때 <code class=\"tui-language-text\">ListItem</code>에 필요한 값까지 mocking 해야 하는 번거로움이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이 mockList를 매 it 구문에서 준비하는 것은 번거롭고 테스트의 의도를 희석시킨다.</span>\n  <span class=\"token keyword\">const</span> mockList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'a.txt'</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token string\">'900'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'b.txt'</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token string\">'1222'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">MyComponent</code>의 기능만을 테스트하고 싶은데, <code class=\"tui-language-text\">ListItem</code>까지 테스트를 하게 되는 상황이다. 이때 유용한 기능이 바로 <code class=\"tui-language-text\">Shallow Rendering</code>이다.</p>\n<p><code class=\"tui-language-text\">Shallow Rendering</code> 된 컴포넌트는 자식 컴포넌트를 가지고는 있지만 실제로 렌더링을 하지 않는다. 따라서 자식 컴포넌트의 props를 mocking 할 필요가 없게 된다. <code class=\"tui-language-text\">MyComponent</code>를 렌더링한 결과를 보면 다음과 같이 출력된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> mockList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// shallow rendering</span>\n<span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component mockList<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mockList<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 출력:</span>\n<span class=\"token comment\">//&lt;ul id=\"comp\"></span>\n<span class=\"token comment\">//  &lt;ListItem /></span>\n<span class=\"token comment\">//  &lt;ListItem /></span>\n<span class=\"token comment\">//&lt;/ul></span></code></pre></div>\n<p><code class=\"tui-language-text\">component.find(&#39;ListItem&#39;).length</code> 를 검사하는 것으로 목록 개수를 맞게 렌더링하는지 테스트할 수 있다. v15.0.0 기준으로 일반 React 컴포넌트에 대해서는 별다른 설정 없이 렌더링할 수 있고, <a href=\"https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components\">SFC(Stateless Functional Component)</a>의 경우 <code class=\"tui-language-text\">displayName</code> 값을 적어주어야 컴포넌트 이름으로 탐색할 수 있게 된다.</p>\n<br />\n<h2 id=\"성능---렌더링\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5---%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"성능   렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 - 렌더링</h2>\n<p>React 애플리케이션은 여러 컴포넌트들이 트리 형태로 구성되어 있다. 특정 컴포넌트의 상태가 변경될 때 하위 컴포넌트들이 연쇄적으로 렌더링 되며 운영되는 구조다.</p>\n<p>React는 기본적으로 실제로 변경된 부분만을 가려내어 DOM을 조작하도록 하는 최적화된 렌더링 엔진을 가지고 있다. 공식 사이트에 있는 <a href=\"https://facebook.github.io/react/docs/reconciliation.html\">O(n3)의 복잡도를 O(n)으로 줄이려는 방법</a>문서는 상당히 흥미진진한데 기본적인 가이드 문서만 잘 따르면 자연스럽게 이 알고리즘이 적용돼 서비스에 문제가 없는 성능을 보장한다.</p>\n<p>오히려 React 공식 문서에는 어설픈 최적화는 디버깅을 어렵게 할 수 있으니 꼭 필요한 곳에서만 최적화를 적용하라고 가이드하고 있다.</p>\n<p>그럼 정말 필요한 경우가 어디에 있을까? 사실 어떠한 상황이 그러하다고 딱 집어 말하기는 어렵다. 다만 이 글에서 제시하는 상황을 생각해 보면 어느 정도 판단이 설 것이다.</p>\n<p>앞서 React 애플리케이션의 전체 구조는 컴포넌트의 트리라고 이야기했다. 특정 부모 컴포넌트의 상태가 변경될 때 모든 하위 컴포넌트가 렌더링 되는데 이때 몇몇 컴포넌트는 렌더링 되지 않아도 되거나 <code class=\"tui-language-text\">(A)</code>, 어떤 조건에서만 렌더링 되면 되는 경우<code class=\"tui-language-text\">(B)</code>가 있다. 이 부분이 바로 최적화 포인트이다.</p>\n<p>가장 간단한 예를 들어보면 <code class=\"tui-language-text\">(A)</code>는 마크업만 포함하는 컴포넌트를 들 수 있다. 물론 오버헤드가 크지 않겠지만 앱의 성능에 문제가 있는 경우 비슷한 컴포넌트 여럿에 적용해서 도움이 될 수도 있다.</p>\n<p>반복적인 목록을 렌더링하는 경우 <code class=\"tui-language-text\">(B)</code> 최적화는 큰 도움이 될 수 있다. 예를 들어 할 일 내용, 마감 시간, 선택 여부를 관리할 수 있는 TODO 목록이 있다고 하자. 3 가지 상태 중 뷰에 나타나는 것은 오직 할 일의 내용과 선택 여부뿐이다. 마감 시간의 변경은 웹 페이지에 나타나지 않아도 된다. 그렇다면 할 일 내용, 선택 여부 두 가지 상태의 변경만 DOM 조작으로 이어지면 된다. 그 조건을 <a href=\"https://facebook.github.io/react/docs/advanced-performance.html#shouldcomponentupdate-in-action\">shouldComponentUpdate</a> 에 구현하면 목록의 양에 비례한 엄청난 성능 향상을 이룰 수 있다.</p>\n<p>훌륭한 설계자는 조급하게 코드 최적화를 하지 않는다. React의 트리 렌더링 성능 최적화 방식은 이 말에 충실한 계획적 최적화를 가능하게 한다. 개인적으로 React를 선호하는 이유이기도 하다.</p>\n<br />\n<h2 id=\"성능---selector\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5---selector\" aria-label=\"성능   selector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 - Selector</h2>\n<p>Redux의 API 명세 중 사용자가 직접 구현하는 <code class=\"tui-language-text\">mapStateToProps</code>함수는 <code class=\"tui-language-text\">Store</code>에서 컴포넌트에 필요한 특정 값을 선택하는 데 사용한다. 역할 때문에 <code class=\"tui-language-text\">Selector</code>라고 부르기도 하는데 이 <code class=\"tui-language-text\">Selector</code>는 <code class=\"tui-language-text\">Store</code>가 변경될때마다 계속 실행되어 컴포넌트에게 새 상태를 알려준다. 하지만 파라미터가 같을 때도 값을 계산하는 오버헤드가 있다.</p>\n<p><code class=\"tui-language-text\">Selector</code>는 보통 파라미터가 같으면 반환되는 값도 같은 순수함수의 특성이 있다. 따라서 앞서 언급한 오버헤드를 줄이려는 방법으로 <a href=\"https://en.wikipedia.org/wiki/Memoization\">메모이제이션 패턴</a>을 적용할 수 있는데 <a href=\"https://github.com/reactjs/reselect\">Reselect</a>는 간단하게 이 기능을 구현할 수 있는 API를 제공한다. 또 만들어진 <code class=\"tui-language-text\">Selector</code>끼리 조합할 수 있는 기능도 제공해 훨씬 유연한 설계를 할 수 있다.</p>\n<p><code class=\"tui-language-text\">Store</code>가 다음의 코드와 같은 React 애플리케이션이 있다고 가정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/* STORE */</span>\n<span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'albert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* COMPONENT */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>greetings<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getGreetings</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 비용이 소요되는 계산이라 가정</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello i'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>greetings<span class=\"token operator\">:</span> <span class=\"token function\">getGreetings</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">getGreetings</code>의 템플릿 연산은 <code class=\"tui-language-text\">name</code>, <code class=\"tui-language-text\">age</code>가 변경되었을 때만 수행되면 된다. 하지만 지금 상태에서는 <code class=\"tui-language-text\">friends</code>만 변경되어도 실행된다. <a href=\"https://github.com/reactjs/reselect\">Reselect</a>를 통해 리팩토링해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAge</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getGreetings <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Reselect 에서 아래 함수들을 Input `Selector`라 부른다</span>\n  <span class=\"token punctuation\">[</span>getName<span class=\"token punctuation\">,</span> getAge<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Reselect 에서 아래 함수는 Result `Selector`라 부른다</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello i'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greetings<span class=\"token operator\">:</span> <span class=\"token function\">getGreetings</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code class=\"tui-language-text\">getGreetings</code>는 <a href=\"https://github.com/reactjs/reselect\">Reselect</a>의 API <code class=\"tui-language-text\">createSelector()</code>를 통해 최적화되었다. 파라미터가 같으면 템플릿 연산을 하지 않고 캐시된 이전 실행의 결과를 반환한다. <code class=\"tui-language-text\">friends</code>만 변경된 경우 <code class=\"tui-language-text\">getGreetings</code>의 템플릿 연산은 하지 않는다.</p>\n<p>가이드 문서에 따르면 파라미터 비교는 <code class=\"tui-language-text\">===</code> 연산자로 수행하며 API를 통해 얼마든지 변경할 수 있다. 만약 <code class=\"tui-language-text\">getGreetings</code>가 프로젝트 전체에서 유틸적인 성격으로 쓰이는 경우 별도의 모듈로 만들면 프로젝트 전체에서 성능 향상 효과를 얻을 수 있다.</p>\n<br />\n<h2 id=\"기타---redux-saga\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80---redux-saga\" aria-label=\"기타   redux saga permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 - redux-saga</h2>\n<blockquote>\n<p>'기타' 섹션에서는 필수는 아니지만, 상황에 따라 유용하게 사용할 수 있는 도구를 소개한다.\n간혹 가이드에서 권장하는 방향보다 더 효율적이라 생각하는 방법으로 구현하는 경우가 있는데 이때 해결하기 어려운 문제가 생길 수 있다. 실제 필자가 겪었던 어려움을 해결했던 도구들이라 도움이 될 것이라 믿는다.</p>\n</blockquote>\n<p>React로 게시판 애플리케이션을 만든다고 할 때 <code class=\"tui-language-text\">Store</code>의 구조를 다음과 같은 두 가지로 설계한다.</p>\n<h3 id=\"데이터를-쌓고-뷰에-노출되는-게시물은-id로-참조\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%8C%93%EA%B3%A0-%EB%B7%B0%EC%97%90-%EB%85%B8%EC%B6%9C%EB%90%98%EB%8A%94-%EA%B2%8C%EC%8B%9C%EB%AC%BC%EC%9D%80-id%EB%A1%9C-%EC%B0%B8%EC%A1%B0\" aria-label=\"데이터를 쌓고 뷰에 노출되는 게시물은 id로 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터를 쌓고 뷰에 노출되는 게시물은 id로 참조</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  currentContentId<span class=\"token operator\">:</span> <span class=\"token string\">'id1'</span><span class=\"token punctuation\">,</span>\n  contents<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id1<span class=\"token operator\">:</span> <span class=\"token string\">'게시글 본문...'</span><span class=\"token punctuation\">,</span>\n    id2<span class=\"token operator\">:</span> <span class=\"token string\">'게시글 본문...'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>본문을 클라이언트에 쌓고 뷰에 노출되는 본문은 id를 사용하는 방법이다. 예전보다 컴퓨팅 파워가 좋아지는 추세에 따른 설계다. 게시글을 보면 볼수록 데이터가 쌓이는 단점이 있어 잘 사용하지는 않지만, 이후에 언급할 문제에 대해서는 자유롭다.</p>\n<h3 id=\"프로퍼티를-직접-사용\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-%EC%A7%81%EC%A0%91-%EC%82%AC%EC%9A%A9\" aria-label=\"프로퍼티를 직접 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티를 직접 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> <span class=\"token string\">\"게시글 본문...\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단하게 내용을 곧바로 뷰에 노출하는 형태이다. 일반적으로 최소한의 정보를 유지하는 설계를 선호하기 때문에 이 방식으로 구현한다. 하지만 content를 변경시키는 action이 비동기로 dispatch 될 경우 문제가 발생한다.</p>\n<p>사용자가 빠르게 수행할 수 있는 동작에 API 호출을 구현할 경우 응답 순서에 따라 원하지 않는 결과가 발생할 수 있다. 예를 들어 SPA(Single Page Application) 형태의 애플리케이션에서 일관된 사용자 경험을 위해 브라우저의 앞, 뒤 기능을 구현하는 경우가 있다.</p>\n<p>content가 실제 변경되는 시점은 API응답이 도착하는 시점 즉 비동기 시점이다. 브라우저의 앞, 뒤, 앞 단축키를 이용해 빠르게 이동한 경우 순서대로 API요청을 할 진 몰라도 응답(앞(1), 뒤(2), 앞(3))의 순서는 네트워크 환경과 같은 여러 요인에 따라 보장되지 않는다. 결국 사용자는 브라우저의 URL과 전혀 관련없는 페이지를 보게 될 수 있다.</p>\n<p>이를 해결하기 위해서는 일부 action의 dispatch 순서에 동시성 제어가 필요하다. 이때 redux-saga 도구가 큰 도움이 된다. 사실 saga 패턴은 트랜잭션 처리에서 원자성과 가용성을 트레이드오프로 일련의 서브 트랜젝션을 완전히 성공하거나 또는 중도 실패 시 완전 복구를 보장하기 위한 패턴이다. (자세한 소개는 <a href=\"http://yelouafi.github.io/redux-saga/docs/introduction/SagaBackground.html\">Saga background</a>을 참고 바란다)</p>\n<p>redux-saga는 이 패턴에서 아이디어를 채용해 일련의 action dispatching이 완전히 끝나거나 중도 실패 시 하나도 dispatching 되지 않음 (<code class=\"tui-language-text\">Store</code>가 변하지 않았음)을 보장하는 기능을 제공한다. 이 기능을 이용하면 앞서 언급했던 요청과 응답의 순서에 따른 문제를 해결할 수 있다.</p>\n<p>아래는 TOASTDrive 프로젝트에 사용된 소스를 알기 쉽게 수정한 예제다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> takeLatest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga/effects\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 함수를 직접 실행하지 않고 call, put과 같은 redux-saga의 API이용하여\n * 동시성 기능을 이용함. (이런 메서드들을 side effect라 부른다)\n */</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">routeToFileList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 로딩 이미지 출력을 위한 action</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_FILES_REQUEST\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// API호출</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 데이터를 받았음을 알리는 action</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_FILES_SUCCESS\"</span><span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 파일목록 받는 과업의 끝을 알리는 action</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_FILDS_DONE\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * redux-saga는 한 애플리케이션에 main saga 하나를 지원한다\n * Generator의 특성에 따라 이 main은 임베디드 프로그래밍의\n * void main() 처럼 끝나지 않고 계속 실행된다.\n */</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * takeLatest는 가장 마지막에 시작된 saga에\n   * 대해서만 dispatching 을 보장한다.\n   */</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ROUTE_TO_FILE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> routeToFileList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 도구는 현재도 정말 활발하게 유지 보수되고 있다. 그리고 '아직' <a href=\"https://github.com/yelouafi/redux-saga/issues/367\">질문성 이슈</a>에도 정말 친절하게 답변을 해 주고 있다. 그래서 더욱 더 애착이 가는 도구이다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/151614/15804101/3b94db22-2b38-11e6-8f99-84bf68772055.jpg\" alt=\"그림설명\"></p>\n<blockquote>\n<p><code class=\"tui-language-text\">takeLatest()</code> 에 대해 질문한 이슈에 그림으로 설명해주었다.</p>\n</blockquote>\n<p><code class=\"tui-language-text\">takeLatest()</code> 뿐만 아니라, <code class=\"tui-language-text\">takeEvery()</code>, <code class=\"tui-language-text\">throttle()</code>과 같은 고급 동시성 제어 기능과 프로세스 블록 없이 saga를 수행하는 fork, 각 saga 간 데이터 통신을 위한 channel 등의 API를 제공한다. 전부가 아니더라도 동시성 제어용 high level 함수만으로도 충분히 가치 있는 도구이다.</p>\n<br />\n<h2 id=\"기타---normalizr\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80---normalizr\" aria-label=\"기타   normalizr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 - normalizr</h2>\n<p><code class=\"tui-language-text\">Store</code>는 가능한 얇게 설계하는 것이 좋다. 만약 아래와 같이 author 라는 모델이 depth가 이는 경우 articles Reducer는 author 수정을 위해 3-depth 이상의 값을 수정하기 위한 복잡한 구현을 할 수 밖에 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/* STORE */</span>\n<span class=\"token punctuation\">{</span>\n  articles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'Some Article'</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Dan'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* COMPONENT */</span>\n<span class=\"token keyword\">const</span> articles <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'UPDATE_AUTHOR'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">,</span> newName<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 모든 article을 순회하며 author를 찾아야 함</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> article <span class=\"token keyword\">of</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          article<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 아래와 같이 <code class=\"tui-language-text\">Store</code>를 최적화 할 경우 Reducer를 정말 간편하게 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/* STORE */</span>\n<span class=\"token punctuation\">{</span>\n  articles<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">'Some Article'</span><span class=\"token punctuation\">,</span>\n      author<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  authors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Dan'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* COMPONENT */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">articles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* articles 값만 신경쓰면 된다. */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">author</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'UPDATE_AUTHOR'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">,</span> newName<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> newName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따라서 가능하면 도메인 모델을 정의해 <code class=\"tui-language-text\">Store</code> 가 깊어지지 않도록 관리하는 것이 중요하다. 그런데 간혹 외부 API를 연동하는 경우 그 사이트의 정책에 따라 데이터의 형태가 복잡한 경우가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// API 응답 결과</span>\n<span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Some Article'</span><span class=\"token punctuation\">,</span>\n  author<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Dan'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  contributors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Abe'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우 앞서 언급했던 이상적인 <code class=\"tui-language-text\">Store</code>설계에 데이터를 반영하기 위해서는 선처리를 따로 해 주어야 하는데, <a href=\"https://github.com/paularmstrong/normalizr\">normalizr</a>는 스키마 정의를 통해 이를 쉽게 정규화할 수 있는 기능을 제공한다. 예제 코드를 실행하면 함수가 만들어지는데, 이 함수에 JSON응답 데이터를 파라미터로 실행하면 바로 정규화 된 데이터를 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> article <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"articles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\narticle<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  author<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n  contributors<span class=\"token operator\">:</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   result: 1,                    // &lt;--- Note object is referenced by ID</span>\n<span class=\"token comment\">//   entities: {</span>\n<span class=\"token comment\">//     articles: {</span>\n<span class=\"token comment\">//       1: {</span>\n<span class=\"token comment\">//         author: 7,              // &lt;--- Same happens for references to</span>\n<span class=\"token comment\">//         contributors: [10, 15]  // &lt;--- other entities in the schema</span>\n<span class=\"token comment\">//         ...}</span>\n<span class=\"token comment\">//     },</span>\n<span class=\"token comment\">//     users: {</span>\n<span class=\"token comment\">//       7: { ... },</span>\n<span class=\"token comment\">//       10: { ... },</span>\n<span class=\"token comment\">//       15: { ... }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>정규화 연산에 대한 오버헤드를 트레이드오프로 Reducer에서 다루기 쉽게 데이터를 만들 수 있다.</p>\n<br />\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>지금까지 React의 기본 내용부터 성능 최적화까지 다뤘다. React는 웹 애플리케이션 개발의 가장 큰 걸림돌인 성능 문제를 Virtual DOM을 통해 쉽게 해결할 수 있는 설루션을 제공한다. 특히 JSX 문법을 이용하면 기존 HTML 마크업을 작성하듯 컴포넌트를 만들 수 있다는 점은 좋은 장점이다.</p>\n<p>특히 비슷한 웹 애플리케이션 프레임웍 중 사용자층이 가장 두텁고 오래되었다. 복잡하고 어려운 일을 간단하게 풀어낼 수 있는 수 많은 도구가 있다. 잘 선택해 사용한다면 전문 지식이 없어도 고 품질의 애플리케이션을 개발할 수 있다. 그리고 '기타' 항목에서 소개한 도구들 모두 React의 개발자 <a href=\"https://github.com/gaearon\">Dan Abramov</a>가 기여하고 또 권장하고 있다.</p>\n<p>현재 TOASTDrive 웹 사이트는 React로 개발되고 있다. 프로젝트에 도입을 고려하고 있거나 궁금한 사항이 있다면 언제든지 dl_javascript@nhn.com 으로 문의 바란다.</p>","frontmatter":{"id":"ko_20161021","title":"자바스크립트 프레임워크 소개 4 - React","description":"React는 Facebook에서 개발해 Facebook과 Instagram, Airbnb 등에서 사용하고 있는 오픈소스 UI 프레임웍이다. 사용자 액션에 따라 DOM을 일일이 다루었던 과거 개발 방식(jQuery와 같은 라이브러리만을 사용하는)과는 달리 개발자가 DOM을 직접 다루지 않고 React가 데이터 상태에 따라 자동으로 UI를 관리하기 때문에, 개발자는 단순히 특정 상태에 대한 뷰의 변화만 구현하면 된다.","date":"2016.10.21","author":"김민형","tags":["React","framework"],"thumbnail":"https://cloud.githubusercontent.com/assets/2888775/19619602/5d883f86-98a6-11e6-9444-4a15d340d46c.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20161021","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}