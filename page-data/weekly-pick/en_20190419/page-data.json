{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/en_20190419","result":{"data":{"post":{"html":"<h1 id=\"pragmatic-front-end-testing-strategies-3\" style=\"position:relative;\"><a href=\"#pragmatic-front-end-testing-strategies-3\" aria-label=\"pragmatic front end testing strategies 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pragmatic Front-End Testing Strategies (3)</h1>\n<blockquote>\n<p>This article is the last of a series of three articles.<br/><br/>\n<a href=\"/test123/weekly-pick/en_20190405\">Part 1: Necessity of Pragmatic Front-End Testing Strategies</a><br/>\n<a href=\"/test123/weekly-pick/en_20190412\">Part 2: Testing Visual Components Using Storybook</a><br/>\n<strong>Part 3: Testing Logic in State Management Using Cypress</strong></p>\n</blockquote>\n<p>In <a href=\"/test123/weekly-pick/en_20190412\">part two of this series</a>, we’ve dealt with using Storybook to automate portions of the visual testing. To refresh our memory, let’s recapitulate our Todo application’s processing stages. </p>\n<ol>\n<li><del>Display the default UI when the application executed.</del></li>\n<li>Retrieve the “Todo List” from the API server, and save it in the Redux store. </li>\n<li><del>Display the Todo List on the UI according to the value saved in the store.</del></li>\n<li>The user clicks on the input box, types in “Take a Nap,” and hits enter.</li>\n<li>Add “Take a Nap” to the Todo List in Redux store.</li>\n<li><del>Update the UI according to the new store value.</del> </li>\n<li>Transmit the new store state over the server to synchronize. </li>\n</ol>\n<p>These stages can mainly be categorized into two based on the “state of the application.” First, the stages 1,3, and display the current state of the application to the UI. In part two of this series, we discussed why complete automation of such stages is difficult, and how we can use Storybook to facilitate the process. </p>\n<p>Now, the remaining 2,4,5, and 7 compose the manipulation stages of the application’s state. Such stages can, again, be categorized into manipulating the state with the user input (4,5,) and synchronizing the state of the client and the state of the server (2,7.) The part three of this series will explore the traditional testing methods for such stages, and how <a href=\"https://www.cypress.io/\">Cypress</a> fares against the traditional methods. </p>\n<p><em>(Every code I wrote for this series can be found in my <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress\">Github Repository</a>. While the article will include all of codes that I think are critical for understanding, you can check out the repository if you are curious about the entire code.)</em></p>\n<h2 id=\"writing-modular-level-tests\" style=\"position:relative;\"><a href=\"#writing-modular-level-tests\" aria-label=\"writing modular level tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Modular Level Tests</h2>\n<p>React applications that use Redux often consist of action creators, reducers, container components, and the presentational components. Also, if the project calls for additional functionalities like local storage or network IO, middleware codes to implement said items are included as well. For the purpose of this article, Redux-Thunk will be used to deal with the asynchronous communication between the server, so codes that deal with such additional features can be handled within the action creator. </p>\n<p>Each module has its own unique role within the application, and are usually well defined and separated into functions or classes, which makes writing modular level tests extremely easy. Writing modular level tests is also explained in great detail in <a href=\"https://redux.js.org/recipes/writing-tests\">Redux’s Official Tutorial</a>, and even <a href=\"https://airbnb.io/enzyme\">Enzyme</a>, the most widely used testing library for React, recommends following this method. </p>\n<p>However, as I hopefully made it clear in the first and the second parts of this series, splitting the tests into levels that are too small indubitably increase the number of mock objects, and makes it harder to test intermodular functionalities. Furthermore, smaller units are much more prone to breakage due to refactoring because of increased dependency on the implementation detail. For example, if you were to write modular level tests to validate “addTodo” feature, you would end up writing four individual tests as below. </p>\n<p><em>(While this article makes use of <a href=\"https://jestjs.io\">Jest</a> and Enzyme, does not explain detailed usage of each tool. Most testing frameworks using JavaScript have similar APIs, so I believe that people who have not used Jest should still be able to follow along. For information on using Enzyme, refer to the <a href=\"https://airbnb.io/enzyme/docs/api/\">official API documentation.</a>)</em></p>\n<h3 id=\"1-container-component-header\" style=\"position:relative;\"><a href=\"#1-container-component-header\" aria-label=\"1 container component header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Container Component (Header)</h3>\n<p>Validates that the container component, that connects <code class=\"tui-language-text\">Header</code> component with the store, successfully connects the action creator <code class=\"tui-language-text\">addTodo()</code> function to the store and that it passes the <code class=\"tui-language-text\">addTodo</code> prop to the child component. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Header'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> configureStore <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-mock-store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>shallow<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>configure<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme-adapter-react-16'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>addTodo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>adapter<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../actions'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  addTodo<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockStore <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>thunk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should pass addTodo action to child component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">mockStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> todoText <span class=\"token operator\">=</span> 'Hava a Lunch<span class=\"token punctuation\">;</span>\n\n  component<span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addTodo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>todoText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>todoText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-presentational-component-header\" style=\"position:relative;\"><a href=\"#2-presentational-component-header\" aria-label=\"2 presentational component header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Presentational Component (Header)</h3>\n<p>Validates that changing the value of <code class=\"tui-language-text\">input</code> element in the <code class=\"tui-language-text\">Header</code> component and pressing enter actually executes the <code class=\"tui-language-text\">addTodo()</code> function that is given as a prop. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>configure<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme-adapter-react-16'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>shallow<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Header<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Header'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>adapter<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should dispatch addTodo when input text'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> addTodo <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header addTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTodo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> todoText <span class=\"token operator\">=</span> 'Have a Lunch<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> todoText<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>keyCode<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>todoText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-asynchronous-action-creator\" style=\"position:relative;\"><a href=\"#3-asynchronous-action-creator\" aria-label=\"3 asynchronous action creator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. (Asynchronous) Action Creator</h3>\n<p>Validates that running the asynchronous action creator <code class=\"tui-language-text\">addTodo()</code> function that uses <a href=\"https://github.com/reduxjs/redux-thunk\">Redux-Thunk</a> actually dispatches the <code class=\"tui-language-text\">ADD_TODO</code> action and sends synchronization request to the server. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>addTodo<span class=\"token punctuation\">,</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../src/actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should dispatch ADD_TODO action and update Server data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> thunkAction <span class=\"token operator\">=</span> <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Have Lunch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thunkAction</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Lunch'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"4-reducer\" style=\"position:relative;\"><a href=\"#4-reducer\" aria-label=\"4 reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Reducer</h3>\n<p>Validates that the <code class=\"tui-language-text\">todos</code> reducer actually returns a new array by handling <code class=\"tui-language-text\">ADD_TODO</code> action and adding to the original array of Todo list.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../src/reducers'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should handle ADD_TODO'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Lunch'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">todos</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Lunch'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tests written in such patterns make use of numerous mock objects in order to independently test each module. This increases the number of unnecessary codes, and makes it so that we cannot test for intermodular connectivity. For example, even if we change the name of <code class=\"tui-language-text\">addTodo</code> function that the container component <code class=\"tui-language-text\">Header</code> uses to pass a value to its child component, to <code class=\"tui-language-text\">appendTodo</code>, tests regarding the <code class=\"tui-language-text\">Header</code> (presentational) component does not fail. Furthermore, since we separated the <code class=\"tui-language-text\">todos</code> reducer, if we decide to create a root reducer by using <code class=\"tui-language-text\">combineReducers</code>, we will not be able to make certain that <code class=\"tui-language-text\">todos</code> reducer was included. </p>\n<p>For these reasons, I strongly recommend that you use a congregate of modules to write tests instead of writing tests based on each module. In order to maintain the consistency of vocabulary, I will refer to using a relatively large collection of modules as a testing unit as <em>integration testing.</em></p>\n<p>_(Because the vocabularies used to describe different tests are not strictly defined, different people have different references as to what they mean. I recommend that you check out explanations by Martin Fowler on <a href=\"https://martinfowler.com/bliki/UnitTest.html\">Unit Test</a> and <a href=\"https://martinfowler.com/bliki/IntegrationTest.html\">Integration Test</a>.</p>\n<h2 id=\"writing-integration-tests\" style=\"position:relative;\"><a href=\"#writing-integration-tests\" aria-label=\"writing integration tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Integration Tests</h2>\n<p>Before we can start writing integration tests, we, first, have to define the border of our testing units. For example, we could test action creators, reducers, and store at once, or we could also just test the store and container component together. Different groupings have different pros and cons, so it is up to the tester to decide it for oneself. In this article, I will group every module except for the main module that creates the store and the router, in order to make clear the differences between unit testing and integration testing. </p>\n<p>Since we already tested how state changes in store affect the visual components in part 2, we’re already halfway done! Now, the remaining half has to do with writing test codes to manipulate the store according to the user input. To make it easier to compare integration testing with unit testing, I will again test “addTodo” feature. First, let’s take a look at the finished test code. (I have added annotations to help with understanding.) </p>\n<p><em>(In the code below, I am using the react-testing-library to compose the integration test. Unlike Enzyme, it provides numerous useful APIs to deal with bigger units. I wholeheartedly recommend that you take your time to learn the library’s philosophies and usage by reading the <a href=\"https://github.com/kentcdodds/dom-testing-library\">official documentation</a>.)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>render<span class=\"token punctuation\">,</span> fireEvent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-testing-library'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>StaticRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Provider<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MockAdapter <span class=\"token keyword\">from</span> <span class=\"token string\">'axios-mock-adapter'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'jest-dom/extend-expect'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should append todo item when input new todo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// (1-1) Configuring the store's current state</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">,</span>\n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// (1.2)  Creating a mock of axios to validate the server synchronization request</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// (1.3) Actual rendering of the application</span>\n  cosnt <span class=\"token punctuation\">{</span>getByTestId<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token string\">\"/All\"</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// (2) Type in the text in the input, and press enter.</span>\n  <span class=\"token keyword\">const</span> todoInput <span class=\"token operator\">=</span> <span class=\"token function\">getByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>todoInput<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'Have Coffee'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>todoInput<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>keyCode<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// (3-1) Validating the store's current state.</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>initialState<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Coffee'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// (3-2) Validate that the application has made a synchronization request to the server</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code above looks incredibly long considering the fact that it only tests a single feature, but when you break down the code into segments--preparation (1), execution (2), and validation (3) --the intent becomes crystal clear. First, you configure the store’s state in the preparation stage (1-1), mock the server synchronization request (1-2), and render the component (1-3.) During the execution stage, provide the input box displayed on the screen with user input, and hit enter (2.) Finally, validate the store’s current state (3-1), and validate whether or not the server synchronization request has been made (3-2.)</p>\n<p>Let’s compare this to the previous unit test. For starters, now that we got rid of the unnecessary mockery, the load of the entire test code became lighter, and the intent of every piece of code became much clearer. Also, because we eliminated the need for dependencies in terms of implementation details, the test will not be affected even if we alter the component’s structure or props. Contrarily, if the props delivered by the parent is not equal to the props the child component is trying to use, the test fails, rendering the intermodular testing moot.</p>\n<p><em>(<a href=\"https://kentcdodds.com/blog/testing-implementation-details\">Testing Implementation Details</a> written by Kent C. Dodds, the author of react-testing-libraries, does an excellent job explaining the disadvantages of testing implementation details.)</em></p>\n<h2 id=\"validating-the-state-of-the-application-on-the-dom\" style=\"position:relative;\"><a href=\"#validating-the-state-of-the-application-on-the-dom\" aria-label=\"validating the state of the application on the dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validating the State of the Application on the DOM</h2>\n<p>We have successfully tested our application, as of the current state of the application, for components that visually display the current state and components that retrieve user input to change the state of the application. Can we now confidently say that we have written every single test necessary for the application? Not quite. We actually have one more test we can automate: the DOM. </p>\n<p>“Now hold on a minute. Didn’t someone say that it’s more efficient to visually validate the DOM with your own eyes given how difficult it is to automate tests regarding the DOM?” Well, I said that, and it’s only half true. The reason is that DOM is not just composed of visual elements. To be more specific, the parts that are difficult to automate, the visual elements like layout, color, font, and images, are combinations of the DOM tree and the style information (CSS). If we remove these visual elements of the DOM, text, the order of the DOM, states of certain DOM elements are still logically verifiable, and therefore, automatable.  </p>\n<p>For example, let’s say that there is a feature that paints our Todo list on the screen according to the state of store’s <code class=\"tui-language-text\">todos</code> array. Initially using Storybook, I asked that developers validate all parts of the UI using their eyes. However, to be technical, parts of the DOM, including whether the Todo list’s DOM element has been displayed in the correct sequence, or whether the text value of the Todo element matches that of the corresponding element saved in the store, can be automated. If these portions of the testing are automated, we don’t have to worry about data, and can focus purely on the visual aspects when we are testing the application using Storybook. </p>\n<p>Let’s get back to the code, to better illustrate my point. The following code is an example of validating the state of the Todo list displayed on the screen using the DOM. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render todo items'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">,</span>\n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Lunch'</span><span class=\"token punctuation\">,</span>\n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getAllByTestId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token string\">'/All'</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token function\">getAllByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todo-item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveTextContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveTextContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Have Lunch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The test code above validates the sequence, length, text, and check-state of the Todo elements. The most important tip to keep in mind when writing such tests is that you should always minimize the test’s dependency on the DOM structure. For example, codes involving “parent of” a certain DOM element or which “tag or class” was used are more deeply rooted with validating visual components. It is pivotal that, for stable testing, you are not noticeably affected by the changes in such properties when traversing the DOM, and you do not use selectors like tag selectors, child selectors, or class selectors. </p>\n<p>The <em>react-testing-library</em> suggests that the tests be written based on information that is revealed to the users (mostly text,) and if that is not enough, to use <code class=\"tui-language-text\">data-testid</code> property instead of classes. For this test, because we have to check that the items are in the correct order, and that we left nothing behind, it can be a little bit difficult test by using only the text. Therefore, I assigned <code class=\"tui-language-text\">data-testid</code> properties with <code class=\"tui-language-text\">todo-item</code> values for the purpose of this test. </p>\n<p>However, I did use the <code class=\"tui-language-text\">completed</code> class in order to validate the <em>checked</em> state of each item, and this is because the <code class=\"tui-language-text\">completed</code> class deals not only with the visual aspect, but also takes on the role of representing the state of the item. While I still recommend that you refrain from using classes for DOM traversal, for cases like this, where you have to validate the state of a class, classes can be effective. If you are a fan of more strict distinction, you can use separate classes for visual presentations and states.</p>\n<h2 id=\"integration-test-jest-vs-e2e-test-cypress\" style=\"position:relative;\"><a href=\"#integration-test-jest-vs-e2e-test-cypress\" aria-label=\"integration test jest vs e2e test cypress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration Test (Jest) vs. E2E Test (Cypress)</h2>\n<p>Now, all tests have ran. I hope that these examples clearly illustrated the advantages integration testing have over unit testing. However, the problem is that I have yet to mention Cypress that I promised to discuss. Truthfully, Jest and react-testing-library are both extremely powerful tools, and when these tools are handled efficiently, you can write effective tests without using Cypress. Then, why would we even need Cypress?</p>\n<p>First, Jest is limited by the fact that it runs not on the real browser, but on the virtual browser environment rendered by JSDom. To further illustrate, because we cannot use the browser’s rendering engine, we cannot retrieve pixel information from the actually rendered product, and it is difficult to test that the router is functioning properly because JSDom does not perfectly mock necessary objects like <code class=\"tui-language-text\">history</code> and <code class=\"tui-language-text\">location</code>. (7)The reason we had to manually inject the <code class=\"tui-language-text\">StaticRouter</code> at every turn in the example is due to the fact that we cannot directly use the <code class=\"tui-language-text\">BrowserRouter</code>. Cypress, on the other hand, runs directly on the browser, so can be executed without such restrictions. </p>\n<p>Second, and the most important in my opinion, point is how Cypress makes debugging extremely easy. Jest’s interactive CLI environment is quite powerful in that it provides the users with useful information regarding failed tests. However, it does not allow us to see the problem on the UI. Trying to write or debug a front-end application without being able to see the UI itself can be as painful as programming with a blindfold over your eyes. Especially when you are trying to validate the application’s state using the DOM, as we had to do in the previous code, without access to the UI, we have no other option but to simply <code class=\"tui-language-text\">console.log()</code> the heck out of the program or stare at the complicated HTML with our eyes watering. </p>\n<p>However, luckily for us, Cypress executes on the browser, so we actually have access to what the product looks like in the UI when we are writing or debugging. There’s more! Because the states of the application at every point of the test are recorded on the <a href=\"https://docs.cypress.io/guides/core-concepts/test-runner.html#Command-Log\">command log</a>, debugging with Cypress is just as easy as rewinding a video tape. Furthermore, because we also have access to the browser’s developer tools, we can debug in a much more interactive environment than console logging. </p>\n<p>These are just few features Cypress offers, and there are much more functionalities like API to simulate the user input so that we don’t have to actually trigger an event in the DOM, which makes testing a lot easier. Also, Cypress provides an API to mock server data to enable developers to test server-data-interaction without the restriction of different libraries. </p>\n<h2 id=\"e2e-testing-and-cypress\" style=\"position:relative;\"><a href=\"#e2e-testing-and-cypress\" aria-label=\"e2e testing and cypress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>E2E Testing and Cypress</h2>\n<p>As I illustrated above, Cypress provides a more thorough testing environment compared to the original integration testing based on Jest. However, before we get into using Cypress, let’s first discuss the difference between a traditional E2E test and Cypress. </p>\n<p>E2E testing, short for End-to-End testing, is a test that tests the entire system from the user’s perspective. Traditionally, E2E testing meant using the web browser to run tests on every single parts of the system, and Selenium WebDriver was the most widely used tool for such tests. However, Selenium WebDriver, while ground breaking, was difficult to configure and to write test codes, and was also extremely slow. For these reasons, it was often only used by organizations that specialized in QA. </p>\n<p>However, the creators of Cypress built Cypress for a different reason from that of original E2E testing tools. Cypress was built to be used by front-end developers during the development cycle. Since prompt feedback is absolutely critical during the development cycle, Cypress, with structures directly integrated onto the browser, provided the speed that simply could not be matched by Selenium WebDriver. Also, Cypress recommends developers to mock the backend API rather than testing the entire system, and provides necessary <a href=\"https://docs.cypress.io/guides/guides/network-requests.html\">mocking functionalities</a> to go with it. By using the aforementioned command log feature, you can use Cypress to create your project without the help of other IDEs, and dare I say that Cypress is a simply a more progressive TDD development environment. </p>\n<p><em>(To be completely honest, E2E test with mocked backend is more of an integration test than an E2E test. However, as I mentioned earlier, the field of testing is not set in stone, but is more flexibly defined. Furthermore, while Cypress is mainly advertised for integration testing with mocked backend, it can also be used for purely traditional E2E tests. Therefore, for the duration of this article, I will categorize it as an E2E testing tool)</em></p>\n<p>Other key characteristics are thoroughly explained in the <a href=\"https://docs.cypress.io/guides/overview/why-cypress.html\">official documentation</a>, and <a href=\"https://docs.cypress.io/guides/overview/key-differences.html\">differences between Cypress and traditional E2E testing tools</a>, as well as other <a href=\"https://docs.cypress.io/guides/references/trade-offs.html#Permannent-trade-offs-1\">tradeoffs</a> are also explained in detail. I wholeheartedly recommend that you take a look at it.</p>\n<h2 id=\"starting-cypress\" style=\"position:relative;\"><a href=\"#starting-cypress\" aria-label=\"starting cypress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Starting Cypress</h2>\n<p>Cypress can be installed easily using npm.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install cypress --save-dev</code></pre></div>\n<p>When the installation finishes, you can run the next command without any other configuration. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npx cypress open</code></pre></div>\n<p>When you run Cypress for the first time, a <code class=\"tui-language-text\">cypress</code> folder will be created in the project folder, and included are numerous sample files for users who are new to Cypress. For this article, let’s delete all of the sample files, and let’s get to writing our first Cypress test. </p>\n<p>First, let’s create a <code class=\"tui-language-text\">todo.spec.js</code> file in the <code class=\"tui-language-text\">cypress/integration</code> folder to start our simple test. Most of APIs in Cypress are based on <a href=\"https://mochajs.org/\">Mocha</a> and <a href=\"https://www.chaijs.com\">Chai</a>, and provides APIs consisting of the intuitive BDD style so that novice users can easily become acclimated.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true is true\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When the file is created, you will be able to see that the file has automatically been included in the Cypress test runner. Clicking on the file will open the Chrome browser modified with the Cypress extension, and you will be able to visually validate the test results. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/54794018-c1ab4100-4c88-11e9-971f-119ee9fa6fde.png\" alt=\"cypress-start\"></p>\n<h2 id=\"writing-cypress-tests\" style=\"position:relative;\"><a href=\"#writing-cypress-tests\" aria-label=\"writing cypress tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Cypress Tests</h2>\n<p>Now let’s get to writing actual tests. Cypress tests are often ran by running a separate local server, and directly connecting to the corresponding URL. In this example, we are using not only the development server, but also the API server, so both must be up and running before we begin testing. </p>\n<p>You can connect to the API server on port 8081 by typing <code class=\"tui-language-text\">node server</code> onto the command line. Next, enter <code class=\"tui-language-text\">npm start</code> on the command line to run the <code class=\"tui-language-text\">webpack-dev-server</code> at port 3000, which will connect the API server as a Proxy according to the configuration. </p>\n<p>Before we start with actual test codes, let’s add some configurations. If you define the <code class=\"tui-language-text\">baseURL</code> in the config file, you can use relative directory without having to write out the full URL every time. In order to do so, add <code class=\"tui-language-text\">baseURL</code> in the <code class=\"tui-language-text\">cypress.json</code> file in the project root. </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"tui-language-json\"><code class=\"tui-language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:3000\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let’s write a code that tests the feature that paints the Todo list on the screen according to the state of the store. In order to mock the server’s response, run <code class=\"tui-language-text\">cy.server()</code> and <code class=\"tui-language-text\">cy.route()</code> to define the desired URL and response. Then, to connect to a certain URL, use <code class=\"tui-language-text\">cy.visit()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render todo items\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have Breakfast\"</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have Lunch\"</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// /Change the response value of todos GET request.</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/All\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Connect to the actual local server.</span>\n\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=todo-item]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Breakfast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Lunch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/54794024-c40d9b00-4c88-11e9-9646-3546d1f93b3c.png\" alt=\"cypress-integ1\"></p>\n<p>One of the advantages in using Cypress is that you can view the process logs and the actual application at the same time. In the image above, command log that contains every command executed to run the test is displayed on the left, and the actual application is displayed on the right. By clicking on each element in the command log, you will be able to see the corresponding view of what the application looked like at that moment. Also, Cypress displays other useful information like which network requests were mocked, and when a particular network request occurred. </p>\n<h2 id=\"testing-the-state-of-the-dom-according-to-the-browser-url\" style=\"position:relative;\"><a href=\"#testing-the-state-of-the-dom-according-to-the-browser-url\" aria-label=\"testing the state of the dom according to the browser url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing the State of the DOM According to the Browser URL</h2>\n<p>As you have seen in the previous example, in Cypress, using a mock of the server data is much more convenient than actually creating a store in order to manipulate it. The same goes for the router, and instead of injecting a mock router just to manipulate the state of the router every time, you can just change the browser’s URL directly. Let’s improve the previous example by monitoring how the Todo list is filtered with different URLs. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have Breakfast\"</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have Lunch\"</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial Render\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/All\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=todo-item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Breakfast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Lunch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Active\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Active\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=todo-item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Lunch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-testid=todo-item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Breakfast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Aside from grouping the common initializing codes with <code class=\"tui-language-text\">beforeEach()</code> in order to eliminate redundant tasks, and defining an aggregate using <code class=\"tui-language-text\">describe()</code>, not much has changed. As such, by changing the input of the <code class=\"tui-language-text\">cy.visit()</code> function to change the target URL, we can easily validate different states of the DOM under different router states.</p>\n<h2 id=\"adding-todo\" style=\"position:relative;\"><a href=\"#adding-todo\" aria-label=\"adding todo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding Todo</h2>\n<p>Now, let’s test adding an additional Todo element. In order to validate the value of the sync request to the server, we will use object options found in <code class=\"tui-language-text\">cy.stub()</code> and <code class=\"tui-language-text\">cy.route()</code>. For detailed explanation on options of <code class=\"tui-language-text\">cy.route()</code>, refer to the <a href=\"https://docs.cypress.io/api/commands/route.html\">official API documentation</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add Todo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1-1. Creating and mocking the stub to validate the sync request to the server</span>\n  <span class=\"token keyword\">const</span> reqStub <span class=\"token operator\">=</span> cy<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">,</span>\n    onRequest<span class=\"token operator\">:</span> reqStub<span class=\"token punctuation\">,</span>\n    status<span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sync\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 1-2. Connecting to the application server</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/All\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 2. Press enter after providing the input</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"todo-input\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have Coffee{enter}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3-1. Verify that a todo-item has been added.</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-testid=\"todo-item\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have a Coffee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3-2. Validate that the sync request has been sent to the server.</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@sync\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>reqStub<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>todos<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have Coffee\"</span><span class=\"token punctuation\">,</span>\n        \n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I have annotated the code using the same numbering system that was used to annotate integration testing example. In the preparation stage (1), we can now directly mock the network requests without being bound by the <code class=\"tui-language-text\">axios</code> library, and we can also connect directly to the server URL without having to render. In the execution stage (2), we no longer have to emit <code class=\"tui-language-text\">change</code> and <code class=\"tui-language-text\">keydown</code> events, and can simply write our inputs like an actual user is typing by using <code class=\"tui-language-text\">cy.type()</code>. Lastly, during the validation stage (3), we are validating the state of the application using the state of the DOM, instead of directly validating the value of the store. </p>\n<h2 id=\"writing-balanced-e2e-tests\" style=\"position:relative;\"><a href=\"#writing-balanced-e2e-tests\" aria-label=\"writing balanced e2e tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Balanced E2E Tests</h2>\n<p>So far, we started from testing units, and continually broadened the scope of the test to integration tests and, eventually, E2E tests. As the testing scope widens, the necessity of unnecessary mocks decreases, and the test coverage goes up. While many mistakenly think that unit tests have simpler structures and are easier to write, E2E are often much simpler due to the lack of mocking codes. Furthermore, since E2E tests are barely affected by the state of the implementation detail, as long as the functionality itself remains the same, the test will still pass even if we change the inner codes entirely. Therefore, with well written E2E tests, we can be more trusting and bolder with our refactoring.  </p>\n<p>However, this does not mean that all tests should be written in E2E form, without mocks. Given certain situations, you may be required to verify the value of the inner store or to mock the module in charge of actual communication in order to control particular network requests (WebSockets, etc.) There are some cases where it is much more efficient and reasonable to test certain components of the application instead of testing the entire UI. Also, for scenarios that involve complex operations therefore requiring numerous complex inputs, unit testing is much more effective. </p>\n<p>Luckily, Cypress also offers ways to conduct unit testing and integration testing. Actually, if you decide to <code class=\"tui-language-text\">import</code> certain modules instead of using <code class=\"tui-language-text\">cy.visit()</code>, you can write unit tests that are similar to tests written using Jest. I recommend that you take your time to read articles like <a href=\"https://www.cypress.io/blog/2018/04/02/sliding-down-the-testing-pyramid/\">Sliding Down the Testing Pyramid</a> and <a href=\"https://www.cypress.io/blog/2018/11/14/testing-redux-store/\">Testing Redux Store</a> in Cypress’s blog, for they include comprehensive discussions on such testing methods. </p>\n<p><em>(While you <strong>can</strong> write unit tests using Cypress, it cannot be said that Cypress <strong>officially</strong> supports unit testing. This topic is still hotly debated on <a href=\"https://github.com/cypress-io/cypress/issues/318\">this Github issue</a>)</em></p>\n<h2 id=\"storybook-and-cypress-the-grey-areas\" style=\"position:relative;\"><a href=\"#storybook-and-cypress-the-grey-areas\" aria-label=\"storybook and cypress the grey areas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storybook and Cypress: The Grey Areas</h2>\n<p>Now, we are truly done. To recapitulate, the strategy I recommend is as follows. Use Storybook to test the components that are in charge of visually presenting the current state of the application, and use Cypress to test the components that manipulate current state of the application with user inputs, server data, and so on. When I put it like that, it may come across as I am drawing a hard line to completely distinguish the two, but there actually is a grey area that overlaps. Storybook can, to some degree, be used to validate user actions, and Cypress can be used to validate visual aspects of the application. While I personally believe that it is better to treat them separately, I will briefly elaborate for those who feel threatened by the idea of having to deal with two testing tools. </p>\n<p>First, let’s look at Storybook. The Storybook’s official guide document includes <a href=\"https://storybook.js/org/docs/testing/interaction-testing/\">interaction testing</a>. As the article explains, using Storybook’s <a href=\"https://github.com/mthuret/storybook-addon-specifications\">Specs</a> addon, you can write tests using Jest and Mocha APIs in individual stories. Also, the <a href=\"https://github.com/storybooks/storybook/tree/next/addons/actions\">Actions</a> addon allows users to monitor which actions were triggered by the user input in the component, so it can be used to validate simple cases involving user inputs. </p>\n<p>Secondly, since Cypress itself is a visual tool, you could test the visual components without the Storybook. However, because Cypress has yet to implement Storybook’s characteristic overview where every scenario is clearly presented, for comparing the products manually, it is much more difficult than using Storybook. It is true that you could efficiently use the <a href=\"https://docs.cypress.io/guides/guides/screenshots-and-videos.html#Screenshots\">screenshots</a> to conduct regression tests, but since Cypress does not provide a feature that allows image comparison, you would either have to implement it yourself or use plugins like <a href=\"https://github.com/palmerhq/cypress-image-snapshot\">cypress-image-snapshot</a>.</p>\n<p><em>(Visual testing tools I mentioned in the second part of this series are compatible not only with Storybook, but also with Cypress. If you are interested, refer to the official documentations of <a href=\"https://applitools.com/cypress\">Applitools</a> and <a href=\"https://docs.percy.io/docs/cypress-tutorial\">Percy</a>.)</em></p>\n<h2 id=\"closing-remarks\" style=\"position:relative;\"><a href=\"#closing-remarks\" aria-label=\"closing remarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing Remarks</h2>\n<p>Throughout this series of three articles, I have shared my thoughts on front-end testing strategies. I have discussed numerous topics like qualities of a good test, automating visual tests, Storybook tests, unit testing, integration testing, E2E testing, and Cypress, and I sincerely hope that you have found the contents of this series useful. </p>\n<p>In normal depiction of the testing pyramids, they often suggest that the tests be conducted in the order of “Unit > Integration > E2E.” The intent behind it is that you should mainly utilize unit testing with results of integration and E2E testing as supporting arguments. However, I prefer the complete opposite approach--mainly utilize the E2E test, while using unit and integration tests to support your cases. Also, they recommend that you ignore the visual component of testing when discussing automation, and simply use the Storybook to validate the results using your own eyes alone. </p>\n<p>Front-end codes do not simply deal with data, but deals also with display that will be shown to the users. Such codes demand the responsibility of testing strategies that is different from regular testing methods. By mindlessly following the well-known convention of testing of trying to test purely from the data perspective with unit and integration testing, it could lead to slowing down the development process while lowering the quality of the code at the same time. </p>\n<p>Amazing tools like Storybook and Cypress have opened the gates of a brave new world for strategic front-end testing. During the short period of time of having existed, they are greatly changing the way developers test the front-end codes, and I believe that there is still much more we can expect from them. While I acknowledge that the methods discussed in this guide may not be suitable for everyone, I sincerely hope that I have inspired developers to strive for better testing strategies and to attempt the new with different tools.</p>","frontmatter":{"id":"en_20190419","title":"Pragmatic Front-End Testing Strategies (3)","description":"React applications that use Redux often consist of action creators, reducers, container components, and the presentational components. Also, if the project calls for additional functionalities like local storage or network IO, middleware codes to implement said items are included as well.","date":"2019.04.19","author":"DongWoo Kim","tags":["test"],"thumbnail":"https://cdn-images-1.medium.com/max/800/1*jYHepkLchSmgG1LJMMTzYA.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_20190419","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}