{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20191002","result":{"data":{"post":{"html":"<h1 id=\"처음-만나는-svelte\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EC%9D%8C-%EB%A7%8C%EB%82%98%EB%8A%94-svelte\" aria-label=\"처음 만나는 svelte permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처음 만나는 Svelte</h1>\n<blockquote>\n<p>원문: <a href=\"https://daveceddia.com/svelte-intro/\">https://daveceddia.com/svelte-intro/</a></p>\n</blockquote>\n<p><img src=\"https://daveceddia.com/images/intro-to-svelte.png\" alt=\"image.png\"></p>\n<p>몇 달 전, Svelte 3가 릴리즈되었다.</p>\n<p>Svelte를 사용해 몇 가지를 시험해 봤고, 튜토리얼을 참고해 몇 가지 작은 앱들을 제작했다. 솔직히 말하면, Svelte를 사용하는것이 React 보다 훨씬 빠르고 쉽게 느껴졌다. 나는 처음 React에서 받았던 놀라움을 Svelte에게서 똑같이 느꼈다.</p>\n<p>나는 이 글에서 Svelte에 대한 간략한 소개와, 몇 가지 예제를 통해 이것이 어떻게 동작하는지, 어떻게 시작하는지를 이야기하려 한다.</p>\n<h2 id=\"svelte는-무엇인가\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"svelte는 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 무엇인가?</h2>\n<p>현재 세 번째 개정판인 Svelte는(일부는 SvelteJS라 부르지만, 공식적으로는 \"Svelte\"라고 한다.) React, Vue.js, Angular와 같은 종류의 프론트엔드 프레임워크다. 웹페이지에서 픽셀을 그리는데 도움을 준다는 점에서 비슷하지만, 다른 면에서는 매우 다르다.</p>\n<h2 id=\"svelte는-빠르다\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-%EB%B9%A0%EB%A5%B4%EB%8B%A4\" aria-label=\"svelte는 빠르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 빠르다.</h2>\n<p>처음 알게 된 것 중 하나는 Svelte의 속도가 매우 빠르다는 것이었다.</p>\n<p>Svelte는 DOM의 변화가 있을 때 그 부분만 업데이트하므로 실행 속도가 매우 빠르다. React, Vue.js 같이 가상 DOM을 사용하는 프레임워크와 대조적으로 Svelte는 가상 DOM을 사용하지 않는다.</p>\n<p>가상 DOM 프레임워크는 실제 DOM에 변경을 커밋하기 전 보이지 않는 트리에서 컴포넌트를 그리기 위한 시간을 소비하는 반면, Svelte는 이런 중간 단계를 뛰어넘고 바로 변경한다. DOM 업데이트가 느릴수는 있지만, Svelte는 어떤 요소에 변화가 일어났는지 정확하게 알고 있기 때문에 빠르게 처리할 수 있다.</p>\n<p>또한, Svelte는 개발 속도를 매우 빠르게 할 수 있다. 일반적으로 같은 내용의 컴포넌트를 만들 때 Svelte 컴포넌트는 React보다 적은 코드로 생성할 수 있다. 잠시 후 좀 더 많은 예제를 살펴 보기로 하고, 우선 \"Hello world\"로 비교해보자. 아래는 Svelte 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello {name}!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이게 전부다. 이건 <code class=\"tui-language-text\">Hello</code> 컴포넌트다. <code class=\"tui-language-text\">name</code> 변수는 일반적인 script 태그 내에 작성한다. 그러면 변수는 아래 HTML 내부에서 사용할 수 있게 된다. 전체적으로 HTML 파일과 매우 비슷한 모습이다.</p>\n<p>비교를 위해 <code class=\"tui-language-text\">React</code>로 <code class=\"tui-language-text\">Hello</code> 컴포넌트를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hello<span class=\"token punctuation\">;</span></code></pre></div>\n<p>React로 작성된 코드 또한 짧지만, 이 코드를 이해하기 위해 몇 가지 특별한 구문들을 알아야 한다.</p>\n<h2 id=\"svelte는-작다\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-%EC%9E%91%EB%8B%A4\" aria-label=\"svelte는 작다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 작다.</h2>\n<p>Svelte의 컴파일된 번들 크기는 다른 인기 있는 프레임워크들과 비교해보면 매우 작은 크기를 갖는다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/65843372-4d0a3b00-e36c-11e9-8461-f92d60ab747f.png\" alt=\"image\">\n<br/><em>👆 &#x3C;그림1> 실제 Svelte 앱이다. (역주: 현재는 이미지이지만, 원문에서는 글 내에 실제 앱이 있는 것을 볼 수 있다.)</em></p>\n<p>\"Hello World!\" 앱의 <code class=\"tui-language-text\">bundle.js</code> 파일의 크기는 <strong>2.3KB</strong>이다. 이 번들 파일은 하나의 JS 파일로 Svelte를 모두 포함하고 있다!</p>\n<p>이 결과는 React 호환 라이브러리인 작고 멋진 <a href=\"https://preactjs.com/\">Preact</a>보다 작은 결과이다. Preact는 라이브러리 자체를 위해 용량이 3kb로 시작하게 된다. 그리고 위 예제를 <a href=\"https://github.com/facebook/create-react-app\">Create React App</a>을 통해 빌드 했을 때 124KB의 자바스크립트 파일이 결과로 나오게 된다.</p>\n<p>그래, 그래. gzip을 한 결과가 아니다. gzip을 적용해보면..</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">$ gzip -c hello-svelte/public/bundle.js | wc -c\n    1190\n$ gzip -c hello-react/build/static/js/*.js | wc -c\n    38496</code></pre></div>\n<p>각 파일은 1.16KB vs 37.6KB 로 작동하게 된다. unzip이 된 이후에도, 브라우저는 여전히 2.3KB vs 124KB를 파싱해야 한다. 작은 번들은 모바일 환경에서 큰 이점이다.</p>\n<p>다른 좋은 점은, <code class=\"tui-language-text\">node_modules</code> 의 폴더 개수는 Hello World Svelte 앱을 띄울 때 단지 29MB, 242개의 패키지뿐이었다. Create React App 프로젝트는 204MB, 1017개의 패키지가 포함되어 있었다.</p>\n<blockquote>\n<p>그래 어쨌든 Dave. 그런 숫자들은 의미가 없어. 그건 작위적인 예시야.</p>\n</blockquote>\n<p>맞다. 물론, 현재 제공되고 있는 큰 규모의 앱들은 1KB든 38KB든 앱을 작동시키는 프레임워크의 크기를 왜소하게 만들 것이다. 하지만 그것이 <em>기본</em>이며, 개인적으로 작고 빠른 환경에서 시작하는 것이 더 좋다고 생각한다.</p>\n<p>그리고 심지어 규모가 더 큰 앱의 경우일지라도, Svelte가 더 큰 장점을 누릴 수 있을 것으로 생각한다. 그 이유를 살펴보자.</p>\n<h2 id=\"svelte는-컴파일된다\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%90%9C%EB%8B%A4\" aria-label=\"svelte는 컴파일된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 컴파일된다.</h2>\n<p>번들 크기가 이렇게 작을 수 있는 이유는 Svelte는 프레임워크이자, 컴파일러이기 때문이다.</p>\n<p>아마 당신은 React Project를 컴파일하기 위해 <code class=\"tui-language-text\">yarn build</code>를 실행하는데 익숙할 것이다. Webpack과 Babel을 호출하여 프로젝트 파일을 번들링 한 뒤, 최소화(minify) 하고, <code class=\"tui-language-text\">react</code>와 <code class=\"tui-language-text\">react-dom</code> 라이브러리를 번들에 추가한 뒤, 그 파일을 최소화(minify)하고, 하나의 출력 파일을(혹은 몇 개의 chunk로 분리된 파일을) 생성한다.</p>\n<p>반면 Svelte는, 자체적으로 컴포넌트를 컴파일할 수 있다. 결과는 <code class=\"tui-language-text\">(앱)</code> + <code class=\"tui-language-text\">(Svelte 런타임 환경)</code>이 아닌, <code class=\"tui-language-text\">(Svelte가 독자적으로 실행하는 방법을 알려준 앱)</code> 이다. Svelte는 <a href=\"https://rollupjs.org/guide/en/\">Rollup</a>(혹은 Webpack)의 트리 쉐이킹 이점을 가져와 이용하여 내 코드에서 사용하는 프레임워크의 부분만을 포함해 자체적으로 만든다.</p>\n<p>컴파일 된 앱은 여전히 작성한 컴포넌트를 구동시키기 위해 조금의 Svelte 코드를 갖게 된다. 마법처럼 그 코드는 전부 사라지지 않는다. 하지만 이런 부분은 다른 프레임워크들이 작동하는 방법과 반대이다. 대부분의 프레임워크는 실제로 앱을 실행하고, 나타내기 위해 존재해야한다.</p>\n<h2 id=\"svelte로-쇼핑-리스트-만들기\" style=\"position:relative;\"><a href=\"#svelte%EB%A1%9C-%EC%87%BC%ED%95%91-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"svelte로 쇼핑 리스트 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte로 쇼핑 리스트 만들기</h2>\n<p>좋다. Svelte가 얼마나 빠르고, 작고, 멋진지 충분히 이야기했다. 그럼 이제 쇼핑 리스트를 만들어 보면서 코드가 어떻게 작성되는지 알아보자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/65845073-a6299d00-e373-11e9-98a8-6a89c4c36f23.png\" alt=\"image\">\n<br/><em>👆 &#x3C;그림2> (역주: 번역 글 내에서는 이미지이지만 원문에서 실제 작동하는 앱을 확인할 수 있다.)</em></p>\n<p>리스트에 물건을 추가하고, 실수로 추가한 물건을 지우고, 구매한 것을 체크하면서 확인할 수 있다.</p>\n<p>여기, 하드코딩된 구매할 물건 목록이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Bread\"</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Things to Buy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    {#each items as item}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>{item.name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    {/each}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>상단에는 <code class=\"tui-language-text\">&lt;script&gt;</code> 태그가 있고, 하단에는 HTML 마크업이 있다. 모든 Svelte 컴포넌트는 <code class=\"tui-language-text\">&lt;script&gt;</code>, <code class=\"tui-language-text\">&lt;style&gt;</code>, 그리고 마크업 코드를 가질 수 있다.</p>\n<p><code class=\"tui-language-text\">&lt;script&gt;</code> 코드 안에는 일반적인 자바스크립트 코드가 있다. 이 부분에서 <code class=\"tui-language-text\">items</code>라 불리는 배열 변수를 선언하면, 하단 마크업 부분에서 해당 변수를 사용할 수 있게 된다.</p>\n<p>마크업 코드에선, 이 부분을 제외하고는 일반적인 HTML처럼 느껴졌을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">{#each items as item}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>{item.name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n{/each}</code></pre></div>\n<p>이 코드는 list를 렌더링 하기 위한 Svelte의 템플릿 구문이다. <code class=\"tui-language-text\">#each</code>를 사용해 <code class=\"tui-language-text\">items</code> 배열의 요소(<code class=\"tui-language-text\">item</code>)를 <code class=\"tui-language-text\">&lt;li&gt;</code> 태그에 <code class=\"tui-language-text\">item</code>의 <code class=\"tui-language-text\">name</code>과 함께 렌더링한다.</p>\n<p>React를 알고 있다면, <code class=\"tui-language-text\">{item.name}</code> 형태는 친숙하게 보일 것이다. 템플릿 내에서 자바스크립트 표현식을 사용하는 방식이며, React와 동일하게 작동한다. Svelte는 표현식을 평가한 뒤 <code class=\"tui-language-text\">&lt;li&gt;</code>에 값을 넣을 것이다.</p>\n<h2 id=\"리스트에서-아이템-지우기\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%95%84%EC%9D%B4%ED%85%9C-%EC%A7%80%EC%9A%B0%EA%B8%B0\" aria-label=\"리스트에서 아이템 지우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트에서 아이템 지우기</h2>\n<p>몇 가지 기능들을 추가해보자. 다음은 리스트에서 아이템을 제거하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Bread\"</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">!==</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">li button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">.done span</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.4<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Things to Buy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    {#each items as item}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{item.name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        &lt;button on:click={() => remove(item)}>❌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    {/each}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>여기 몇 가지 코드를 추가했다.</p>\n<p>먼저, script 태그 안에 <code class=\"tui-language-text\">remove</code> 함수를 추가했다. item을 가져와 배열을 필터링하고, 결정적으로 <strong><code class=\"tui-language-text\">items</code> 변수에 재할당한다.</strong></p>\n<h2 id=\"svelte는-반응형이다\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-%EB%B0%98%EC%9D%91%ED%98%95%EC%9D%B4%EB%8B%A4\" aria-label=\"svelte는 반응형이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 반응형이다.</h2>\n<p>변수에 재할당을 할 때, Svelte는 이 변수가 사용되고 있는 템플릿 부분을 리렌더링 할 것이다.</p>\n<p>위 예에서 <code class=\"tui-language-text\">items</code> 재할당은 Svelte가 리스트를 리렌더링 하는 원인이 된다. 만약 리스트에 item을 푸시한다면(<code class=\"tui-language-text\">items.push(newThing)</code>) 리렌더링을 발생시킬 수 없었을 것이다. <code class=\"tui-language-text\">items = something</code> 같은 형태가 Svelte의 재계산을 발생시킬 것이다. (또한, <code class=\"tui-language-text\">items[0] = thing</code> 혹은 <code class=\"tui-language-text\">items.foo = 7</code> 같이 프로퍼티에 할당하는 것 또한 발생할 것이다.)</p>\n<p><img src=\"https://daveceddia.com/images/svelte-variables-highlighted.png\" alt=\"image3.png\"></p>\n<p>Svelte는 컴파일러이다. 이런 사실은 컴파일 할 때, 템플릿과 script 사이의 관계를 살필 수 있게 되고 \"<code class=\"tui-language-text\">items</code>와 관련된 모든 것을 리렌더링 하라\" 같은 적은 양의 코드를 삽입할 수 있게 한다. 실제 컴파일된 버전의 <code class=\"tui-language-text\">remove</code> 함수를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"items\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">!==</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>원래 작성했던 코드와의 유사한 점들과, Svelte가 업데이트를 하도록 하는<code class=\"tui-language-text\">$$invalidate</code>로 어떻게 래핑되었는지를 확인할 수 있다. 컴파일 된 코드의 가독성이 매우 좋다.</p>\n<h2 id=\"on으로-시작하는-이벤트-핸들러\" style=\"position:relative;\"><a href=\"#on%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC\" aria-label=\"on으로 시작하는 이벤트 핸들러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>'on:'으로 시작하는 이벤트 핸들러</h2>\n<p>그럼, 클릭 이벤트가 존재하는 버튼 또한 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">&lt;button on:click={() => remove(item)}>\n  ❌\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>함수를 위 처럼 전달하는 방식이 React와 유사하다 느낄 수 있지만, 이벤트 핸들러 구분은 약간 다르다.</p>\n<p>모든 Svelte의 이벤트 핸들러는 <code class=\"tui-language-text\">on:click</code>, <code class=\"tui-language-text\">on:mousemove</code>, <code class=\"tui-language-text\">on:dblclick</code> 처럼 <code class=\"tui-language-text\">on:</code>으로 시작한다. 또한, Svelte는 표준 DOM 이벤트 이름들을 모두 소문자로 하여 작성한다.</p>\n<h2 id=\"svelte는-css-또한-컴파일한다\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-css-%EB%98%90%ED%95%9C-%EC%BB%B4%ED%8C%8C%EC%9D%BC%ED%95%9C%EB%8B%A4\" aria-label=\"svelte는 css 또한 컴파일한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 CSS 또한 컴파일한다.</h2>\n<p>작성된 <code class=\"tui-language-text\">&lt;style&gt;</code> 태그를 살펴보자. <code class=\"tui-language-text\">&lt;style&gt;</code> 태그 내부에는 표준 CSS를 작성할 수 있다.</p>\n<p>하지만 반전이 존재한다. Svelte는 특정 컴포넌트 범위의 클래스명을 전부 고유한 이름으로 컴파일할 것이다. 즉, <code class=\"tui-language-text\">li</code>나 <code class=\"tui-language-text\">div</code>, <code class=\"tui-language-text\">li button</code> 같은 단순 선택자를 사용하여 앱 전체에 영향을 준다는 걱정 없이 사용할 수 있다는 것을 의미한다.</p>\n<ul>\n<li>리스트가 존재한다.</li>\n<li>Grocery 리스트 앱과 같은 페이지의 상단부에 작성된다.</li>\n<li>스타일은 충돌 나지 않는다.</li>\n</ul>\n<p>CSS 이야기가 나온 김에, 몇가지를 고칠 필요가 있다.</p>\n<h2 id=\"동적으로-클래스-변경하기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"동적으로 클래스 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적으로 클래스 변경하기</h2>\n<p>위 앱에서 버그를 알아차렸는지 모르겠지만, 아이템이 \"done\"으로 표시되어 있지만, 목록에는 그렇게 나타나지 않았다. 그럼 \"done\"이 된 아이템에 클래스를 적용해보자.</p>\n<p>여기, React와 비슷한 한가지 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">{#each items as item}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{item.done</span> <span class=\"token attr-name\">?</span> <span class=\"token attr-name\">'done'</span> <span class=\"token attr-name\">:</span> <span class=\"token attr-name\">''}</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{item.name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    &lt;button on:click={() => remove(item)}>❌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n{/each}</code></pre></div>\n<p>Svelte는 CSS Class를 나타낼때(React의 <code class=\"tui-language-text\">className</code>과 다르게) <code class=\"tui-language-text\">class</code>를 사용한다. 여기서 우리는 class를 계산하기 위해 중괄호를 작성해 자바스크립트 표현식을 작성했다.</p>\n<p>같은 동작을 하는 좀 더 나은 방식을 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>#each items <span class=\"token keyword\">as</span> item<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">:</span>done<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>❌<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 <code class=\"tui-language-text\">class:done={item.done}</code> 구문은 <code class=\"tui-language-text\">done</code> 클래스를 <code class=\"tui-language-text\">item.done</code>이 truthy 일 때 적용하라는 의미이다.</p>\n<h2 id=\"svelte는-사용하지-않는-css를-탐지한다\" style=\"position:relative;\"><a href=\"#svelte%EB%8A%94-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-css%EB%A5%BC-%ED%83%90%EC%A7%80%ED%95%9C%EB%8B%A4\" aria-label=\"svelte는 사용하지 않는 css를 탐지한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte는 사용하지 않는 CSS를 탐지한다.</h2>\n<p>Svelte가 CSS를 컴파일함으로써 얻을 수 있는 좋은 점은 일부 사용하지 않는 CSS 선택자를 찾아준다는 것이다. VSCode에서는, 선택자에 노란 줄로 해당 줄이 나타난다.</p>\n<p>사실, 이 블로그 글을 작성하면서, 이 기능은 버그를 잡는 데 도움이 되었다. 나는 아이템이 \"done\"이 되었을 때 <code class=\"tui-language-text\">{item.name}</code>를 흐리게 처리하고 싶었고, 이 텍스트를 <code class=\"tui-language-text\">span</code> 태그로 감싸려 했다. 하지만 태그를 추가하는 것을 잊었고, 존재하지 않는 <code class=\"tui-language-text\">span</code>을 타겟으로 <code class=\"tui-language-text\">.done span</code> 선택자를 사용했다. 다음 스크린샷이 내가 에디터에서 본 내용이다.</p>\n<p><img src=\"https://daveceddia.com/images/svelte-unused-css-warning.png\" alt=\"a.png\"></p>\n<p>Problem 탭에 다음과 같은 경고가 나타났다.</p>\n<p><img src=\"https://daveceddia.com/images/vscode-unused-css-selector.png\" alt=\"b.png\"></p>\n<p>이런 문제를 발견하는 일은 컴파일러에게 맡기는 것이 좋다. 사용하지 않는 CSS 탐지는 컴파일러들이 항상 해결해 줄 수 있는 문제처럼 보였다.</p>\n<h2 id=\"완료-상태done-표시하기\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C-%EC%83%81%ED%83%9Cdone-%ED%91%9C%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-label=\"완료 상태done 표시하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료 상태(Done) 표시하기</h2>\n<p><code class=\"tui-language-text\">item</code>에 완료 상태를 나타내는 \"done\"을 켜거나 끄는 기능을 추가해보자. 가장 먼저 체크박스를 추가할 것이다.</p>\n<p>한 가지 방법은, React와 비슷하게 change 핸들러를 사용해서 값을 동기화하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token operator\">&lt;</span>input\n  type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span>\n  on<span class=\"token operator\">:</span>change<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p><em>Svelte</em> 방식으로는 <code class=\"tui-language-text\">bind</code>를 사용하는 방식이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>checked</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{item.done}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>체크박스를 선택하고 해제할 때, <code class=\"tui-language-text\">bind:checked</code>는 체크박스의 <code class=\"tui-language-text\">item.done</code> 값과 동기화가 유지되도록 한다. 이것은 <strong>양방향 바인딩</strong>이며 Angular나 Vue를 사용한다면 익숙할 것이다.</p>\n<h2 id=\"form-input-그리고-preventdefault\" style=\"position:relative;\"><a href=\"#form-input-%EA%B7%B8%EB%A6%AC%EA%B3%A0-preventdefault\" aria-label=\"form input 그리고 preventdefault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>form, input, 그리고 preventDefault</h2>\n<p>여전히 추가되지 않은 한가지 큰 기능은 항목을 리스트에 추가하는 것이다.</p>\n<p>우리는 input과, input을 감싼 form(Enter키로 항목을 추가 할 수 있게), 그리고 항목을 리스트에 추가하기 위한 제출(submit) 핸들러 필요하다. 코드를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// ... 기존 코드 ...</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>submit|preventDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{addItem}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add an item<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{name}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"tui-language-text\">addItem</code> 함수를 이용하여 새로운 항목을 리스트에 추가할 수 있다. <code class=\"tui-language-text\">items.push()</code> 대신 <code class=\"tui-language-text\">items</code>를 재할당하여 이름을 재설정한다. 이 변경을 통해 Svelte는 관련된 부분의 UI를 다시 렌더링한다.</p>\n<p>우리는 아직 <code class=\"tui-language-text\">on:submit</code>과 <code class=\"tui-language-text\">bind:value</code>를 다루지는 않았지만, 이전에 본 것과 비슷한 패턴을 따른다. <code class=\"tui-language-text\">on:submit</code>은 폼에서 제출 했을 때 <code class=\"tui-language-text\">addItem</code>함수를 호출하고 <code class=\"tui-language-text\">bind:value={name}</code>는 <code class=\"tui-language-text\">name</code>과 input의 값을 동기화 된 상태로 유지한다.</p>\n<p>여기서 흥미로운 구문은 <code class=\"tui-language-text\">on:submit|preventDefault</code> 이다. <strong>이벤트 수식어(Event Modifier)</strong> 를 호출하며 <code class=\"tui-language-text\">addItem</code> 함수 내에서 <code class=\"tui-language-text\">event.preventDefault()</code>를 호출하지 않아도 호출 된 것 처럼 작동하게 해주는 축약형 표현이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... 이전 코드 ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>submit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{addItem}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- 이전 코드 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이로써 앱을 완성했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/65850669-bd27b980-e38a-11e9-890e-db3a25f9673e.png\" alt=\"image\">\n<br/><em>👆 &#x3C;그림3> (역주: <a href=\"https://daveceddia.com/svelte-intro/\">원문</a> 에서 완성된 앱을 체험할 수 있다.)</em></p>\n<h2 id=\"더-자세히-알아보려면\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%9E%90%EC%84%B8%ED%9E%88-%EC%95%8C%EC%95%84%EB%B3%B4%EB%A0%A4%EB%A9%B4\" aria-label=\"더 자세히 알아보려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 자세히 알아보려면</h2>\n<p>Svelte에는 이 포스트에 작성하지 못했지만, 훨씬 더 멋진 것들이 있다.</p>\n<ul>\n<li>추가적인 컴포넌트를 만든다거나</li>\n<li>컴포넌트로 Props를 넘겨주거나</li>\n<li>slots (React의 <code class=\"tui-language-text\">children</code>처럼 동작하는)</li>\n<li>반응형을 이용해서 \"<code class=\"tui-language-text\">firstName</code>이나 <code class=\"tui-language-text\">lastName</code>이 변경되었을 때 <code class=\"tui-language-text\">name</code>을 재계산하기\"나 \"변화가 있을 때 <code class=\"tui-language-text\">firstName</code>을 console에 출력하기\" 같은 작업 해보기</li>\n<li><code class=\"tui-language-text\">{#await somePromise}</code> 템플릿 사용하기</li>\n<li>빌트인 애니메이션과 트랜지션 이용하기</li>\n<li><code class=\"tui-language-text\">onMount</code>나 <code class=\"tui-language-text\">onDestroy</code>같은 lifecycle 메서드 이용하기</li>\n<li>컴포넌트 간 데이터를 넘겨주는 Context API</li>\n<li>전역 데이터를 관리해주는 반응형 \"stores\"</li>\n</ul>\n<p>공식 <a href=\"https://svelte.dev/tutorial/basics\">Svelte 튜토리얼</a>은 위에서 언급한 모든 정보, 그 이상을 다루며 각 개념을 \"레슨\" 형태로 훌륭하게 전달한다. 꼭 확인해 보라.</p>\n<p>Svelte 사이트에는 브라우저에서 여러 가지를 해볼 수 있는 REPL이 존재한다. 여기 우리가 만든 <a href=\"https://svelte.dev/repl/9983c53df057451db328b94553b88202?version=3.6.8\">리스트 예제</a> 앱이다. 직접 해보고 싶다면 <a href=\"https://svelte.dev/repl/hello-world\">svelte.dev/repl 에서 시작해 볼 수 있다.</a></p>\n<p>하나 더! Svelte의 제작자인 Rich Harris는 Rethinking Reactivity라는 제목으로 Svelte를 만든 동기와 멋진 데모와 함께 강연했다. 아직 보지 못했다면 꼭 확인해보라.</p>\n<p>\n        <div class=\"embedVideo-container\">\n            <iframe\n              title=\"\"\n              width=\"560\"\n              height=\"316\"\n              src=\"https://www.youtube.com/embed/AdNJ3fydeao?rel=0\"\n              class=\"embedVideo-iframe\"\n              style=\"border:0\"\n              allowfullscreen\n            ></iframe>\n        </div></p>\n<ul>\n<li>Rethinking reactivity - Rich Harris</li>\n</ul>","frontmatter":{"id":"ko_20191002","title":"처음 만나는 Svelte","description":"몇 달 전, Svelte 3가 릴리즈되었다. Svelte를 사용해 몇 가지를 시험해 봤고, 튜토리얼을 참고해 몇 가지 작은 앱들을 제작했다. 솔직히 말하면, Svelte를 사용하는것이 React 보다 훨씬 빠르고 쉽게 느껴졌다. 나는 처음 React에서 받았던 놀라움을 Svelte에게서 똑같이 느꼈다.","date":"2019.10.02","author":"한정","tags":["svelte"],"thumbnail":"https://daveceddia.com/images/intro-to-svelte.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20191002","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}