{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190826","result":{"data":{"post":{"html":"<h1 id=\"asyncawait로-자바스크립트에서-여러-functions를-제대로-체이닝-해보기\" style=\"position:relative;\"><a href=\"#asyncawait%EB%A1%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EC%97%AC%EB%9F%AC-functions%EB%A5%BC-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%B2%B4%EC%9D%B4%EB%8B%9D-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"asyncawait로 자바스크립트에서 여러 functions를 제대로 체이닝 해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async/await로 자바스크립트에서 여러 Functions를 제대로 체이닝 해보기</h1>\n<blockquote>\n<p>원문 : <a href=\"https://nikodunk.com/how-to-chain-functions-with-await-async/\">https://nikodunk.com/how-to-chain-functions-with-await-async/</a></p>\n</blockquote>\n<p>필자는 <a href=\"https://www.electrade.app/\">electrade</a>를 빌드하고 운영하면서 친구들이 진행하는 프로젝트를 도와준 적이 있다. 최근에는, Craiglist 스타일의 익명 이메일 전송 기능을 서버리스(serverless) <a href=\"https://cloud.google.com/functions/\">Google Firebase Functions</a>(AWS Lambda, MS Azure Functions 등과 비슷하다.)로 개발하고 싶어졌다. <code class=\"tui-language-text\">.then()</code> 콜백을 이용해서 비동기 처리를 쉽게 설계할 수 있겠다는 생각이 들었지만, <code class=\"tui-language-text\">async/await</code>을 이용해서 더 가독성 있고 깔끔한 코드를 짜기로 결심했다. Functions의 다중 체이닝을 다루는 여러 아티클을 읽어보았지만, 대부분은 MSDN에서 그대로 퍼온 미완성의 예제코드여서 도움이 되지 않았다. 그런 예제 중에서는 <code class=\"tui-language-text\">async/await</code>으로 디버그 하기 힘든 함정들이 있었는데, 필자는 거의 모든 함정들에 빠져본 것 같다. 그래서 지금부터는 완성된 코드를 사용해서 필자가 배운 것을 설명하려고 한다. </p>\n<p>여기 잘 동작하는 Functions 다중 체이닝 코드가 있다. 이 코드는 모든 async 함수들이 resolve되길 기다렸다가 결과를 전송한다. 그동안 했던 가장 큰 실수는 다음과 같다. </p>\n<ol>\n<li><code class=\"tui-language-text\">async function myFunction(){ &lt;your code here&gt; }</code>처럼 정의한 모든 함수는 자동적으로 함수의 코드 전체(<code class=\"tui-language-text\">&lt;your code here&gt;</code>)를 <code class=\"tui-language-text\">new Promise</code>로 감싸고, <code class=\"tui-language-text\">return x</code>를 <code class=\"tui-language-text\">resolve(x)</code>로 바꾼다. <strong>그러므로, await을 통해서 호출</strong>(<code class=\"tui-language-text\">let y = await myFunction()</code>)해야 한다. 그렇지 않으면 실제로 기다려지지않는다. </li>\n<li>추가적으로, <a href=\"https://cloud.google.com/functions/\">Cloud Functions</a>에서는 반드시 <code class=\"tui-language-text\">res.send()</code>를 통해서 응답을 보내야 한다. 그렇지 않으면, function이 이를 실패로 간주해서 해당 요청을 재실행 한다. 프로미스 내의 모든것이 정상적으로 실행되지 않는다면, 그 프로미스는 취소될 것이다.</li>\n</ol>\n<p>아래의 코드를 설명하면 다음과 같다.</p>\n<ul>\n<li>일반 함수인 <code class=\"tui-language-text\">getFieldsFromRequest()</code>와 <code class=\"tui-language-text\">extractCourseIdFromEmailAddress()</code>는 아무런 문제가 없다.</li>\n<li><code class=\"tui-language-text\">getEmailOfCourseWithCourseId()</code> 는 비동기 함수이고, 코스의 이메일 주소를 Firetore로부터 가져온다. Firestore 에서 가져오는 일이 얼마나 오래 걸릴 지 알 수 없으므로, 이 함수는 비동기 함수로 되어있다. 가져오기가 완료되면 다음 2개의 함수의 실행에 필요한 <code class=\"tui-language-text\">courseEmail</code>을 반환(혹은 resolve)할 것이다. </li>\n<li>다음의 두 함수 <code class=\"tui-language-text\">saveToCloudFirestore()</code>와 <code class=\"tui-language-text\">sendEmailInSendgrid()</code>는 반드시 <code class=\"tui-language-text\">getEmailOfCourseWithCourseId()</code>가 실행되어 <code class=\"tui-language-text\">courseEmail</code>을 반환한 뒤에 실행되어야 한다. <code class=\"tui-language-text\">courseEmail</code>이 <code class=\"tui-language-text\">undefined</code>인 상태로 실행된다면 모든 것이 물거품이 될 것이다. 앞서 설명한 <code class=\"tui-language-text\">getEmailOfCourseWithCourseId()</code>함수를 기다려서(await) <code class=\"tui-language-text\">courseEmail</code>을 넘겨야 하므로, 이 함수들은 그 비동기 동작이 완료되길(프로미스가 resolve되길) 기다릴 것이고, 완료된 뒤에 각 함수들이 실행될 것이다.</li>\n<li>마지막으로, <code class=\"tui-language-text\">saveToCloudFirestore()</code>와 <code class=\"tui-language-text\">sendEmailInSendgrid()</code>가 실행되고 각자의 반환값을 반환한 다음에 <code class=\"tui-language-text\">res.send()</code>가 실행되어야 한다. 그렇지 않으면, 작업이 완료되기 전에 Cloud Functions 전체가 중단될 것이다. 이 문제를 해결하기 위해 <code class=\"tui-language-text\">saveToCloudFireStore()</code>와 <code class=\"tui-language-text\">sendEmailInSendgrid()</code>의 응답(그들이 반환하는 것들)을 변수로 저장한다. 이 변수들은 단순히 <em>해당 비동기 작업이 완료되었음</em> 을 나타내기 위해서 사용된다. 이를 통해 <code class=\"tui-language-text\">.then()</code>을 대체하기 위해 쓴 것이다. 두 변수가 모두 반환(두 프로미스가 모두 resolve)되길 기다렸다가 모두 완료되면, 그 변수들로 <code class=\"tui-language-text\">res.send()</code>를 실행한다.</li>\n<li>가독성을 더 좋게 하기 위해 <code class=\"tui-language-text\">try/catch</code> 블록을 모두 제거했다. 이 예제 코드를 실행하려 할 때는 반드시 추가해야 한다. 서버로 비동기 요청시 반드시 에러를 처리해야 하지만, <code class=\"tui-language-text\">try/catch</code> 블록이 없는 편이 <code class=\"tui-language-text\">async/await</code> 개념을 이해하기 쉽게 만들어 주기 때문에 제거했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// 이것은 HTTP를 통해 호출할 수 있는 Cloud Functon이다.</span>\n<span class=\"token comment\">// 이 Cloud Function은 sendgrid에서 email을 받아온 뒤, fields를 파싱해서 courseId로 실제 email 주소를 조회하여,</span>\n<span class=\"token comment\">// Firestore에 email을 저장하고 sendgrid를 이용해서 email을 전송한다. </span>\n<span class=\"token comment\">// 마지막으로, `res.send()`로 Cloud Function이 끝났음을 알린다.</span>\n\n<span class=\"token comment\">// {* import들.. *}</span>\n\n<span class=\"token comment\">// 메인 함수</span>\nexports<span class=\"token punctuation\">.</span>emailFunction <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> fields <span class=\"token operator\">=</span> <span class=\"token function\">getFieldsFromRequest</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동기</span>\n  <span class=\"token keyword\">let</span> courseId <span class=\"token operator\">=</span> <span class=\"token function\">extractCourseIdFromEmailAddress</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동기</span>\n  <span class=\"token keyword\">let</span> courseEmail <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getEmailOfCourseWithCourseId</span><span class=\"token punctuation\">(</span>courseId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 비동기</span>\n  <span class=\"token keyword\">let</span> savedToCloud <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">saveToCloudFirestore</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">,</span> courseEmail<span class=\"token punctuation\">,</span> courseId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 비동기</span>\n  <span class=\"token keyword\">let</span> sentEmail <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">sendEmailWithSendgrid</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">,</span> courseEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 비동기</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>savedToCloud<span class=\"token punctuation\">,</span> sentEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sentEmail과 saveToCloud이 반환되면(프로미스가 resolve되면 혹은, 각 함수들이 실행되면), res.send()가 실행된다. Firebase와 SendGrid에게 이 Function이 완료되었음을 알려주게 된다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 헬퍼 함수들</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFieldsFromRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 동기</span>\n    <span class=\"token keyword\">let</span> fields <span class=\"token operator\">=</span> <span class=\"token function\">readTheFieldsFromReqWithBusboy</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fields<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">extractCourseIdFromEmailAddress</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 동기</span>\n    <span class=\"token keyword\">let</span> courseId <span class=\"token operator\">=</span> fields<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> courseId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getEmailOfCourseWithCourseId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">courseId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 비동기</span>\n    <span class=\"token keyword\">let</span> courseData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>courseId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> courseEmail <span class=\"token operator\">=</span> courseData<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> courseEmail<span class=\"token punctuation\">;</span> <span class=\"token comment\">// async라는 라벨이 함수 옆에 붙어 있으므로, 함수 내부의 모든 코드를 'return new Promise(resolve) => {}' 로 감싼 것과 똑같이 동작한다. 'return result'는 'resolve(result)'로 바뀐다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendEmailWithSendgrid</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fields<span class=\"token punctuation\">,</span> courseEmail</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 비동기</span>\n    <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>to<span class=\"token operator\">:</span> courseEmail<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> fields<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> fields<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> sentEmail <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sendgrid<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> sentEmail<span class=\"token punctuation\">;</span> <span class=\"token comment\">// async라는 라벨이 함수 옆에 붙어 있으므로, 함수 내부의 모든 코드를 'return new Promise(resolve) => {}' 로 감싼 것과 똑같이 동작한다. 'return result'는 'resolve(result)'로 바뀐다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">saveToCloudFirestore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fields<span class=\"token punctuation\">,</span> courseEmail<span class=\"token punctuation\">,</span> courseId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 비동기</span>\n    <span class=\"token keyword\">let</span> savedToCloud <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">,</span> courseEmail<span class=\"token punctuation\">,</span> courseId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> savedToCloud<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 말하지만, 실제 개발 시 주의해야할 내용이 있다. 하단의 비동기 함수 3개와 메인 함수를 <code class=\"tui-language-text\">try/catch</code>로 감싸서 에러를 처리해야 한다. 그리고 데이터베이스 코드는 비동기 체이닝의 모습을 보여주기 위한 용도이므로 그대로 복사 붙여넣기 하면 안된다.</p>","frontmatter":{"id":"ko_20190826","title":"async/await로 자바스크립트에서 여러 Functions를 제대로 체이닝 해보기","description":"필자는 electrade를 빌드하고 운영하면서 친구들이 진행하는 프로젝트를 도와준 적이 있다. 최근에는, Craiglist 스타일의 익명 이메일 전송 기능을 서버리스(serverless) Google Firebase Functions로 개발하고 싶어졌다. '.then()' 콜백을 이용해서 비동기 처리를 쉽게 설계할 수 있겠다는 생각이 들었지만, 'async/await'을 이용해서 더 가독성 있고 깔끔한 코드를 짜기로 결심했다. Functions의 다중 체이닝을 다루는 여러 아티클을 읽어보았지만, 대부분은 MSDN에서 그대로 퍼온 미완성의 예제코드여서 도움이 되지 않았다. 그런 예제 중에서는 'async/await'으로 디버그 하기 힘든 함정들이 있었는데, 필자는 거의 모든 함정들에 빠져본 것 같다. 그래서 지금부터는 완성된 코드를 사용해서 필자가 배운 것을 설명하려고 한다.","date":"2019.08.26","author":"박정환","tags":["es6","etc"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190826","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}