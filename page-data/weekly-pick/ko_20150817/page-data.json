{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20150817","result":{"data":{"post":{"html":"<h1 id=\"map--reduce에서부터-자바스크립트-함수형-개발까지\" style=\"position:relative;\"><a href=\"#map--reduce%EC%97%90%EC%84%9C%EB%B6%80%ED%84%B0-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%95%A8%EC%88%98%ED%98%95-%EA%B0%9C%EB%B0%9C%EA%B9%8C%EC%A7%80\" aria-label=\"map  reduce에서부터 자바스크립트 함수형 개발까지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map / Reduce에서부터 자바스크립트 함수형 개발까지</h1>\n<blockquote>\n<p>원문<br>\nGreg Weng, <a href=\"https://hacks.mozilla.org/2015/01/from-mapreduce-to-javascript-functional-programming/\">https://hacks.mozilla.org/2015/01/from-mapreduce-to-javascript-functional-programming/</a></p>\n</blockquote>\n<p><br><br>\nECMASript 5.1버전 이후로 <code class=\"tui-language-text\">Array.prototype.map</code>과 <code class=\"tui-language-text\">Array.prototype.reduce</code>는 주요 브라우저에서 도입하게 되었다. 이 두 함수는 개발자가 계산을 더 명확하게 설명하게 하는 것 뿐만 아니라 배열 탐색을 위한 반복문 작성을 단순화 시키는 역할을 한다. 이는 특히, 반복 코드가 실제로 새로운 배열에 배열을 <strong>맵핑(mapping)</strong> 하는 경우나 수집(accumulation), 검사(checksum) 그리고 다른 유사한 <strong>리듀스(축소, reducing)</strong> 연산의 반복문 작성에서 더욱 그러하다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/mapreduce_vs_for1.png\"><br>\n<em>좌측: 일반적인 반복문 사용; 우측: map, reduce 사용</em></p>\n<h3 id=\"map--reduce\" style=\"position:relative;\"><a href=\"#map--reduce\" aria-label=\"map  reduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map / Reduce</h3>\n<p>Map은 실제로 결과물을 위해 구조적인 변경 없이 원래의 배열로 계산하는 것을 의미한다. 예를들면, map이 배열을 전달 받았을 때, 결과물은 또 다른 배열이 되는 것을 확인 할 수 있는데, 기존 배열과의 유일한 차이는 내부요소가 원래의 값이나 타입에서 다른 값이나 타입으로 변형될 것이라는 점이다. 그래서 우리는 위의 예시로 부터 doMap 함수를 다음과 같은 <strong>타입 시그니처(type signature)</strong>로 표현할 수 있다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/doampsig.png\"></p>\n<p>위의 시그니처는 <code class=\"tui-language-text\">[Number]</code>가 숫자 배열을 의미한다는 것을 나타낸다. 그래서 우리는 시그니처를 아래와 같이 읽을 수 있다.</p>\n<blockquote>\n<p><code class=\"tui-language-text\">doMap</code>은 숫자 배열을 불린형 배열로 바꿔주는 함수다.</p>\n</blockquote>\n<p>반면에, <strong>리듀스(reducing)</strong> 연산은 새로운 하나를 위해 입력 데이터 형식의 구조를 변경할 수 있다는 것을 의미한다. 예를 들면, <code class=\"tui-language-text\">doReduce</code>의 시그니처는 다음과 같다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/doreducesig.png\"></p>\n<p>여기서는 <code class=\"tui-language-text\">[Number]</code> 배열이 사라졌다. 이를 통해 우리는 <code class=\"tui-language-text\">map</code>과 <code class=\"tui-language-text\">reduce</code> 사이의 주요한 차이를 볼 수 있다.</p>\n<h3 id=\"함수형-개발\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EA%B0%9C%EB%B0%9C\" aria-label=\"함수형 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 개발</h3>\n<p>사실,  <code class=\"tui-language-text\">map</code>과 <code class=\"tui-language-text\">reduce</code>의 개념은 자바스크립트 보다 더 오래됐고, 리스프(Lisp)나 하스켈(Haskell)과 같은 다른 함수형 개발 언어에서 널리 사용되고 있다. 이에 대한 논평은 더글라스 크락포드가 작성한 유명한 자바스크립트 아티클인 ‘<a href=\"http://javascript.crockford.com/javascript.html\">JavaScript: The World’s Most Misunderstood Programming Language</a>’에 기록되어있다.</p>\n<blockquote>\n<p>중괄호와 투박한 for 문이 포함된 자바스크립트의 C와 같은 문법은, 자바스크립트가 일반적인 프로시저형 언어로 보이게 한다. <strong>이는 잘못된 오해인데, 자바스크립트가 C나 자바(Java)보다는 리스프나 스킴(Scheme)과 같은 함수형 언어와 더 유사점이 많이 때문이다.</strong></p>\n</blockquote>\n<p>이것은 자바스크립트가 함수형 언어와 같은(다른 직교 OOP언어가 할 수 없거나 하지 않는) 일을 할 수 있는 이유중에 하나다. 예를 들면, 자바8 이전의 자바에서 자바스크립트에서 일반적인 ‘콜백(callback)’과 같은 것을 원했다면, 불필요한 ‘익명 클래스’를 생성해야만 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"tui-language-java\"><code class=\"tui-language-java\"><span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>물론 자바스크립트에서 익명 콜백을 사용하는 것에 대해서는 항상 논란이 많다. 특히 구성요소가 계속해서 성장 할 때에는 콜백 지옥을 경험 하기도 한다. 그러나 일급 함수(first-class function)는 콜백의 넘어서는 많은 것을 할 수 있다. 하스켈에서는 함수만으로 퀘이크(Quake) 같은 게임과 유사한 전체 GUI 프로그램을 구성 할 수 있다. 즉, 심지어 일반적으로 프로그램이 구성될 때 필요할 것으로 예상되는 클래스, 메소드, 인터페이스, 탬플릿 및 기타 요소들 없이도 만들 수 있다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/Frag1.png\"><br>\n<em>하스켈로 개발한 퀘이크와 유사한 게임의 일부분</em></p>\n<p>따라서, 자바스크립트 세계에서는 ‘클래스'와 ‘클래스 시스템'을 황급히 구현하는 것이 아닌(개발자가 문제에서 시작할 때 종종 행하는), 프로그램 구성을 하기 위한 유사한 패턴을 따라하는 것이 가능하다. 자바스크립트에서 <strong>함수형 스타일</strong>로 추가하는 것은 전체적으로(특히 네이티브 API에서 지원하는  map, reduce와 같은 기능을 사용할 때) 그렇게 나쁘지 않다. 이 방법을 받아들이는 것은 기능을 재정의 하는 대신 그들을 결합하여 보다 간결한 코드를 작성할 수 있다는 것을 의미한다. 유일한 한계는 언어 자체가 아직 충분히 함수형스럽지 않다는 것이다. 그러기에 우리가 올바른 라이브러리로 해결할 수 있을 지라도 너무 많은 트릭을 사용하게 된다면 아마도 문제가 생길 것이다.</p>\n<p><code class=\"tui-language-text\">map</code>과 <code class=\"tui-language-text\">reduce</code>는 인자나 그에 대한 결과물로 다른 함수를 전달 받는다. 이러한 방법들은 함수형 세계의 연산을 구성하는 기본 개념을 제시하고, 유연성 및 확장성과 함께 작은 조각을 붙일 수 있기 때문에 중요하다. 예를들어, 위에서 언급한 <code class=\"tui-language-text\">map</code>의 표현 시그니처를 살펴보자.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/mapsig.png\"></p>\n<p>두번째 인수가 “Number -> Boolean’유형의 함수를 나타내는 것을 알수 있다. 실은, ‘a -> b’ 유형이라면 어떤 함수든 다 가능하다. 이것은 아마도 자바스크립트 세계에서는 그리 특이한 일은 아닐 것이다(우리는 일상 개발업무에서 다수의 콜백을 사용한다). 그러나 요점은 고차 함수 역시 함수라는 것이다. 일급함수와 id, reduce, curry, uncurry, arrow, bind와 같은 몇몇 강력한 고차함수만을 가진 완전한 프로그램을 생성 할 때 까지 그들은 더 큰 것들로 구성될 수 있다.</p>\n<h3 id=\"map--reduce-연습\" style=\"position:relative;\"><a href=\"#map--reduce-%EC%97%B0%EC%8A%B5\" aria-label=\"map  reduce 연습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map / Reduce 연습</h3>\n<p>언어의 한계가 발생할 수 있기에, 자바스크립트 코드를 완전한 함수형 스타일로 작성할 수는 없다. 그러나 유형의 발상과 더 많은 것을 하기 위한 구성은 <em>차용</em> 할 수 있다. 예를 들면, 유형에 대해 생각할때, <code class=\"tui-language-text\">map</code>은 단지 데이터 처리를 위해서만 사용되는게 아니라는 것을 발견 할 것이다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/realmapfold.png\"></p>\n<p>이 <code class=\"tui-language-text\">map</code>과 <code class=\"tui-language-text\">reduce</code> 타입 시그니처는 하스켈인 것 처럼 보인다. 어떤 것으로든 <code class=\"tui-language-text\">a</code>와 <code class=\"tui-language-text\">b</code>를 대신할 수 있다. 그래서 <code class=\"tui-language-text\">a</code>가 <code class=\"tui-language-text\">SQL</code>이 되고 <code class=\"tui-language-text\">b</code>가 <code class=\"tui-language-text\">IO x</code>가 된다면 어떨까? 유형으로 생각하고 있으면, <code class=\"tui-language-text\">IO x</code>는 정수(Int)나 <code class=\"tui-language-text\">URL</code>과 같은 일반 적인 형식에 불과하다는 것을 기억해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"tui-language-haskell\"><code class=\"tui-language-haskell\"><span class=\"token comment\">-- Let's construct queries from SQL statements.</span>\n<span class=\"token hvariable\">makeQueries</span> <span class=\"token hvariable\">strs</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span> <span class=\"token hvariable\">str</span>  <span class=\"token hvariable\">prepare</span> <span class=\"token hvariable\">conn</span> <span class=\"token hvariable\">str</span>\n<span class=\"token hvariable\">doQuery</span> <span class=\"token hvariable\">qrys</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">foldl</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">results</span> <span class=\"token hvariable\">query</span>  <span class=\"token hvariable\">results</span> <span class=\"token operator\">>></span> <span class=\"token hvariable\">query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">qrys</span> \n<span class=\"token comment\">-- Do query and get results.</span>\n<span class=\"token keyword\">let</span> <span class=\"token hvariable\">stmts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"INSERT INTO Articles ('Functional JavaScript')\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token string\">\"INSERT INTO Gecko VALUES ('30.a1')\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE FROM Articles WHERE version='deprecated'\"</span>\n            <span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">execute</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">doQuery</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">makeQuery</span> <span class=\"token hvariable\">stmts</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>`</code></pre></div>\n<p>(이 단순한 하스켈 예제는 오직 데모를 위해서 작성었다. 실제로 실행되지 않을 수 있다.)</p>\n<p>예제에서는 <code class=\"tui-language-text\">map</code>을 사용하여 <code class=\"tui-language-text\">IO()</code>로 <code class=\"tui-language-text\">SQL</code>를 바꾸는 <code class=\"tui-language-text\">makeQueries</code>함수를 생성했는데, 이는 또한 몇몇 실행 가능한 행동들을 생성했음을 의미한다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/makeQueries.png\"></p>\n<p>그리고 <code class=\"tui-language-text\">doQuery</code>함수는 실제 리듀스 연산이며, 쿼리를 실행할 것이다.</p>\n<p><img src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/01/doQueries.png\"></p>\n<p>리듀스 연산은 특정 모나드(Monad) <code class=\"tui-language-text\">bind</code> 함수(<code class=\"tui-language-text\">&gt;&gt;</code>)의 도움으로 IO 행위가 수행됨을 알아야 한다. 이 주제는 이번 아티클에서 다루지는 않지만, 독자는 프라미스(Promise)를 하는 것 처럼 한단계씩 실행하며 함수를 결합하는 방법을 상상해야 한다.</p>\n<p>이 기술은 하스켈에서 뿐만이 아니라 자바스크립트에서도 유용하다. 유사한 계산을 구성하기 위해 프라미스, ES6 에로우(arrow)함수와 함께 이 개념을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// Use a Promise-based library to do IO.</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q-io/http\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">,</span>noop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">,</span><span class=\"token function-variable function\">prepare</span> <span class=\"token operator\">=</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> http<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.example.com/'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// the 'then' is equal to the '>>'</span>\n   <span class=\"token punctuation\">,</span><span class=\"token function-variable function\">makeQuery</span> <span class=\"token operator\">=</span> \n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">strs</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> strs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">,</span><span class=\"token function-variable function\">doQuery</span> <span class=\"token operator\">=</span> \n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">qrys</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> qrys<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results<span class=\"token punctuation\">,</span> qry</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> results<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>qry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> noop<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">,</span>stmts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"articles/FunctionalJavaScript\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token string\">\"blob/c745ef73-ece9-46da-8f66-ebes574789b1\"</span>\n            <span class=\"token punctuation\">,</span> <span class=\"token string\">\"books/language/Haskell\"</span>\n            <span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">,</span>main <span class=\"token operator\">=</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeQuery</span><span class=\"token punctuation\">(</span>stmts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(Node.js에서, map/reduce와 프라미스로 개발한 유사 쿼리 코드는 늦은(Lazy) 프라미스와 늦은 평가 때문에 하스켈 버전 처럼 실행되지는 않을 것이다.)</p>\n<p>함수로 계산을 정의하고 나중에 수행하기 위해 그들을 결합하는 것에서, 우리가 원하는 것에 상당부분 접근했다고 볼 수 있다(자바스크립트에서는 늦은 평가를 하지 않기 때문에, 실제로 나중에 수행되지는 않는다). 이것은 프라미스 미완료를 유지하는 트릭을 사용한다면 수행되어질 수 있다(<code class=\"tui-language-text\">resolve</code> 함수는 오직 우리가 원할 때에만 수행할 수 있다). 그러나 트릭을 사용한다 해도 몇몇 해결되지 않는 이슈는 여전히 남아있다.</p>\n<p>주목해야 할 또 다른 것은 우리 프로그램은 가변적인 변수들을 필요로 하지 않지만, 몇가지 계산 결과는 변경되었고 프로그램의 모든 단계에 전달 된다는 것이다. 사실상, 이것은 함수형 언어가 순수하게 머물 수 있는 유일한 이유다. 그에 따라 함수형 언어들은 최적화와 얘기치 않은 부작용(side-effects)의 제거에서 득을 볼 수 있다.</p>\n<h3 id=\"함수형-개발에-대한-더-많은-것\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EA%B0%9C%EB%B0%9C%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8D%94-%EB%A7%8E%EC%9D%80-%EA%B2%83\" aria-label=\"함수형 개발에 대한 더 많은 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 개발에 대한 더 많은 것</h3>\n<p>Map / reduce는 자바스크립트에서 가장 일반적인 함수형 기능이다. 프라미스 같은 다른 함수형이 아닌 기능들과 함께, 모나드-스타일(Monad-style) 계산 제어와 같은 트릭을 사용할 수 있고 ES6의 에로우 함수로 커리함수를 쉽게 정의할 수 있으며 기타 등등의 것들을 할 수 있다. 또한, 좋은 함수형 기능을 제공하는 몇몇 훌륭한 라이브러리도 있다. 그리고 몇몇 특정 도메인 언어(DSLs, Domain Specific Languages)는 심지어 함수형 스피릿을 갖고 있다. 물론, 함수형 개발을 이해하는 제일 좋은 방법은 하스켈, ML, 오카멜(OCamel)과 같은 함수형 개발을 위해 디자인된 언어를 배우는 것이다. 스칼라(Scala), F#, 얼랭(Erlang) 또한 좋은 선택이다.</p>\n<br>\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"크리에이티브 커먼즈 라이선스\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br />이 저작물은 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">크리에이티브 커먼즈 저작자표시-동일조건변경허락 4.0 국제 라이선스</a>에 따라 이용할 수 있습니다.","frontmatter":{"id":"ko_20150817","title":"Map / Reduce에서부터 자바스크립트 함수형 개발까지","description":"ECMASript 5.1버전 이후로 Array.prototype.map과 Array.prototype.reduce는 주요 브라우저에서 도입하게 되었다. 이 두 함수는 개발자가 계산을 더 명확하게 설명하게 하는 것 뿐만 아니라 배열 탐색을 위한 반복문 작성을 단순화 시키는 역할을 한다.","date":"2015.08.17","author":"강지웅","tags":["es6"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20150817","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}