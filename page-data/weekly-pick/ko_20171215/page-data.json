{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20171215","result":{"data":{"post":{"html":"<h1 id=\"웹-컴포넌트5---lit-html로-react-처럼-코딩하기\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B85---lit-html%EB%A1%9C-react-%EC%B2%98%EB%9F%BC-%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0\" aria-label=\"웹 컴포넌트5   lit html로 react 처럼 코딩하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 컴포넌트(5) - lit-html로 React 처럼 코딩하기</h1>\n<ul>\n<li><a href=\"/test123/weekly-pick/ko_20170428\">웹 컴포넌트(1) - Keep calm and #UseThePlatform</a></li>\n<li><a href=\"/test123/weekly-pick/ko_20170609\">웹 컴포넌트(2) - 커스텀 엘리먼트</a></li>\n<li><a href=\"/test123/weekly-pick/ko_20170721\">웹 컴포넌트(3) - 쉐도우 돔</a></li>\n<li><a href=\"/test123/weekly-pick/ko_20170901\">웹 컴포넌트(4) - Template Element &#x26; HTML Imports</a></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/34079127-7bb3c5d8-e36a-11e7-9acf-29526b803654.png\" alt=\"image\"></p>\n<p>이번 글은 웹 컴포넌트 소개 연재 5번째로 웹 컴포넌트를 react처럼 코딩하기를 해보겠다.\n사용하는 예제 전체 코드는 <a href=\"https://github.com/kyuwoo-choi/todo-web-components\">Todo Web Components</a>에서 참조할 수 있다.\n이 예제를 통해 지난 연재에서 알아보았던 커스텀 엘리먼트, 쉐도우 돔 그리고 <a href=\"https://github.com/PolymerLabs/lit-html\">lit-HTML</a>을 사용하여 웹 컴포넌트 애플리케이션을 어떻게 만들 수 있는지 확인해보자.</p>\n<h2 id=\"웹-컴포넌트-todo-app\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-todo-app\" aria-label=\"웹 컴포넌트 todo app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 컴포넌트 TODO APP</h2>\n<p>글을 읽기 전에 아래의 링크에서 예제 페이지를 열어두고 시작하자.</p>\n<blockquote>\n<p><a href=\"https://github.com/kyuwoo-choi/todo-web-components\">Todo Web Components 앱 저장소</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://kyuwoo-choi.github.io/todo-web-components/\">Todo Web Components 앱 데모</a></p>\n</blockquote>\n<p>이번 글에서 사용하는 <a href=\"https://github.com/kyuwoo-choi/todo-web-components\">Todo Web Components</a> 예제는 <a href=\"http://todomvc.com/\">TodoMVC</a>를 따라 만들었다.\n<a href=\"http://todomvc.com/\">TodoMVC</a>는 수 많은 프론트엔드 프레임워크 중에 선택을 해야 하는 개발자를 돕기 위해 만들어졌다.\n이곳에서 같은 TODO 앱을 각 프레임워크를 이용하여 어떻게 구현할 수 있는지, 예제들을 확인하여 비교해 볼 수 있다.\n<a href=\"http://todomvc.com/\">TodoMVC</a> 예제는 어떠한 프레임워크의 강점을 보여주기 위해 지나치게 간략화되고 편중된 예제가 아니라, 어느 정도 실제 애플리케이션을 구성하는 것과 같이 구성되어 있으므로 객관적으로 비교해 볼 수 있는 장점이 있다.\n위의 이유로 예제 코드가 이번 설명에서 필요한 것보다 다소 길다. 그러므로 이번 글에서는 전체 코드가 아닌 일부 코드들만 떼어 설명하도록 하겠다.\n또한, 이 예제는 준비가 되면 <a href=\"http://todomvc.com/\">TodoMVC</a>에 제출할 예정이므로, 여러분이 코드 리뷰를 겸해주어도 좋겠다.</p>\n<h2 id=\"프로젝트-구조\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"프로젝트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 구조</h2>\n<p>이 프로젝트는 지난 연재에서 알아보았던 커스텀 엘리먼트, 쉐도우 돔 그리고 <strong>lit-HTML</strong>을 사용하고 있다.\n커스텀 엘리먼트를 사용하기 위해서는 ES6 Class 문법이 필수이다. 더 많은 브라우저를 지원하기 위해서 babel을 통해 ES5 문법으로 src에 있는 소스 파일들을 트랜스파일링 하며, 그 툴링은 webpack을 통해 dist에 저장하고 있다.\n프로젝트 디렉터리 구조는 아래와 같다.</p>\n<ul>\n<li>\n<p><em>src</em>: 소스 파일들</p>\n<ul>\n<li><em>components</em>: 커스텀 엘리먼트들</li>\n<li><em>todoApp.js</em>: 애플리케이션 메인 커스텀 엘리먼트</li>\n<li><em>todoInput.js</em>: 상단 TODO 아이템 입력창</li>\n<li><em>todoItem.js</em>: 입력된 하나의 TODO</li>\n<li><em>todoList.js</em>: todoItem들을 리스트 형태로 보여줌</li>\n<li><em>todoToolbar</em>: 하단 툴바. 남은 TODO 개수, 상태에 따른 TODO 아이템 노출 토글 버튼들</li>\n<li><em>libs</em>: 이외의 소스들</li>\n<li><em>actions.js</em>: redux-zero 액션들. TODO 앱에서 사용되어 상태를 업데이트 할 수 있는 액션들이 정의</li>\n<li><em>litRender.js</em>: <strong>lit-HTML</strong> 컴포넌트 헬퍼. 커스텀 엘리먼트에서 <code class=\"tui-language-text\">invalidate</code>를 호출하면 화면 업데이트를 스케줄</li>\n<li><em>store.js</em>: redux-zero 스토어, 기본값 설정</li>\n<li><em>index.js</em>: index</li>\n</ul>\n</li>\n<li><em>index.html</em>: index HTML</li>\n<li><em>webpack.config.js</em>: 웹팩 설정</li>\n<li><em>package.json</em>: 패키지 설정과 스크립트</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/34096443-a03d2e7c-e418-11e7-852c-4e3fd845d032.png\" alt=\"image\"></p>\n<h2 id=\"프로젝트-사용\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"프로젝트 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 사용</h2>\n<p>이번 글을 따라가는데 반드시 로컬에서 이 프로젝트를 실행해야 하는 것은 아니므로, 원치 않는 독자는 이 섹션을 넘어가도 무방하다.\n위에서 알려준 <a href=\"https://github.com/kyuwoo-choi/todo-web-components\">Todo Web Components 앱 저장소</a>와 <a href=\"https://github.com/kyuwoo-choi/todo-web-components\">데모 페이지</a>만 참조해도 충분하다.</p>\n<p>로컬에서 확인하고자 한다면 우선 git 커맨드로 <a href=\"https://github.com/kyuwoo-choi/todo-web-components\">Todo Web Components 앱 저장소</a>에서 전체 프로젝트를 가져오자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">git clone git@github.com:kyuwoo-choi/todo-web-components.git</code></pre></div>\n<p>그다음 <code class=\"tui-language-text\">yarn</code> 커맨드로 필요한 디펜던시 패키지들을 설치한다. <code class=\"tui-language-text\">yarn</code>이 설치되어 있지 않다면 물론 <code class=\"tui-language-text\">npm</code>을 사용하여도 무방하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">yarn install\n혹은\nnpm install</code></pre></div>\n<p>이제 필요한 준비가 끝났으므로 <em>package.json</em>에 정의된 <code class=\"tui-language-text\">serve</code> 스크립트를 실행하여 브라우저로 확인해보자. <a href=\"http://localhost:8080/\">http://localhost:8080/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">yarn run serve\n혹은\nnpm run serve</code></pre></div>\n<h2 id=\"indexhtml-커스텀-엘리먼트-사용\" style=\"position:relative;\"><a href=\"#indexhtml-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"indexhtml 커스텀 엘리먼트 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.html: 커스텀 엘리먼트 사용</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n      <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.20/custom-elements-es5-adapter.js<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">defer</span>\n    <span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n      <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.20/webcomponents-sd-ce.js<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">defer</span>\n    <span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./dist/TodoApp.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    ...\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"tui-language-text\">&lt;head&gt;</code>에는 트랜스파일 된 <em>TodoApp.js</em>파일 그리고 두 개의 웹 컴포넌트 폴리필 <em>custom-elements-es5-adapter.js</em>, <em>webcomponents-sd-ce.js</em> 스크립트가 포함되었다.\n현재 크롬과 사파리 브라우저에서는 폴리필 없이 확인할 수 있으며, 두 폴리필을 사용하면 파이어폭스, 엣지, IE11도 지원할 수 있다.</p>\n<p><a href=\"https://github.com/WebComponents/webcomponentsjs\">웹 컴포넌트 폴리필</a> 중 이 프로젝트에서는 <strong>Shadow DOM</strong>, <strong>Custom Elements</strong>를 사용하므로, <em>webcomponents-sd-ce.js</em>를 선택했다. (폴리필 파일 이름에 포함된 <code class=\"tui-language-text\">sd</code>, <code class=\"tui-language-text\">ce</code>는 <code class=\"tui-language-text\">Shadow DOM</code>, <code class=\"tui-language-text\">Custom Elements</code>의 약자이다)\n또한 커스텀 엘리먼트가 필요로 하는 ES6문법을 ES5문법으로 트랜스파일하고 있으므로 <em>custom-elements-es5-adapter.js</em>가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">&lt;body&gt;\n  &lt;todo-app&gt;&lt;/todo-app&gt;\n  ...\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre></div>\n<p><code class=\"tui-language-text\">&lt;body&gt;</code>는 간략히 <code class=\"tui-language-text\">&lt;todo-app&gt;</code>태그를 포함하고 있다. 이 태그는 <em>TodoApp.js</em>에 포함된 커스텀 엘리먼트가 정의하고 있다.\n이처럼 커스텀 엘리먼트를 사용하는 입장에서는 자바스크립트 파일과 태그를 하나를 사용하는 것뿐으로 매우 편리하다.</p>\n<h2 id=\"todoappjs-애플리케이션-컴포넌트\" style=\"position:relative;\"><a href=\"#todoappjs-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"todoappjs 애플리케이션 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>todoApp.js: 애플리케이션 컴포넌트</h2>\n<p><em>todoApp.js</em>는 <em>src/components</em>에서 찾을 수 있으며, 위 <em>index.html</em>에서 사용한 <code class=\"tui-language-text\">&lt;todo-app&gt;</code>태그를 커스텀 엘리먼트로 정의한다.\n더불어 하나의 애플리케이션으로서 필요한 <strong>API</strong>도 제공하고 있다.</p>\n<h3 id=\"imports\" style=\"position:relative;\"><a href=\"#imports\" aria-label=\"imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>imports</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> html <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lit-html\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> LitRender <span class=\"token keyword\">from</span> <span class=\"token string\">\"../libs/litRender\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"../libs/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  add<span class=\"token punctuation\">,</span>\n  toggle<span class=\"token punctuation\">,</span>\n  remove<span class=\"token punctuation\">,</span>\n  toggleAll<span class=\"token punctuation\">,</span>\n  clearCompleted<span class=\"token punctuation\">,</span>\n  replace\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../libs/actions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./todoInput\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./todoToolbar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./todoList\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드 상단에서 필요한 디펜던시들을 가져온다. html렌더링에 필요한 <strong>lit-HTML</strong>과 이것을 커스텀 엘리먼트에서 편하게 사용하기 위해 정의한 <code class=\"tui-language-text\">LitRender</code>믹스인 헬퍼.\n애플리케이션 상태와 액션을 관리하기 위한 <strong>Redux-Zero</strong>(Redux 미니미라고 생각하면 된다) <code class=\"tui-language-text\">store</code>와 <code class=\"tui-language-text\">add</code>, <code class=\"tui-language-text\">toggle</code>같은 액션들.\n마지막으로 애플리케이션의 컴포넌트를 구성하는 <code class=\"tui-language-text\">todoInput</code>, <code class=\"tui-language-text\">todoToolbar</code>, <code class=\"tui-language-text\">todoList</code>를 가져온다.</p>\n<p><code class=\"tui-language-text\">import &#39;./todoInput&#39;</code>의 문법이 의문스러운 독자도 있을 것이라 본다. 이것은 가져온 모듈을 저장하지 않고 모듈을 로드만 위한 방법이다.\n<code class=\"tui-language-text\">import TodoInput from &#39;./todoInput&#39;</code>도 올바른 사용법이지만, 코드에서 <code class=\"tui-language-text\">TodoInput</code>을 사용하지 않는 경우 웹팩이 <strong>Tree Shaking</strong>으로 디펜던시를 제거해 버린다.\n이를 피하기 위한 문법이며, 딱히 컴포넌트 클래스들을 직접 사용하지도 않으므로 현재의 형태가 되었다고 이해하면 되겠다.</p>\n<h3 id=\"커스텀-엘리먼트-클래스\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"커스텀 엘리먼트 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 엘리먼트 클래스</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoApp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitRender</span><span class=\"token punctuation\">(</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>ES6 class문법으로 <code class=\"tui-language-text\">TodoApp</code> 커스텀 엘리먼트를 정의한다. 이 클래스는 <code class=\"tui-language-text\">HTMLElement</code>과 <code class=\"tui-language-text\">LitRender</code>믹스인을 확장한다.\n<code class=\"tui-language-text\">constructor</code>에서는 쉐도우 돔을 <code class=\"tui-language-text\">open</code>모드로 이 커스텀 엘리먼트에 생성한다.\n마지막으로 <code class=\"tui-language-text\">invalidate()</code>를 하고 있는데, 이는 <code class=\"tui-language-text\">LitRender</code>에 정의된 함수로 이 컴포넌트를 렌더링 하도록 해준다.\n<code class=\"tui-language-text\">LitRender</code>와 <code class=\"tui-language-text\">invalidate</code>에 대해서는 이후 더 자세히 알아보고, 여기서는 직관적으로 <code class=\"tui-language-text\">invalidate</code>의 효용만 떠올리면 충분하다.</p>\n<h3 id=\"커스텀-엘리먼트-api\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-api\" aria-label=\"커스텀 엘리먼트 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 엘리먼트 API</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token operator\">...</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todoList <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>todoList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> todoList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><strong>API</strong>를 정의한다. <a href=\"https://github.com/kyuwoo-choi/todo-web-components\">데모 페이지</a> 혹은 로컬 서버 <a href=\"http://localhost:8080%EC%97%90\">http://localhost:8080에</a> 접속해서 <strong>API</strong>를 사용해보자.\n<code class=\"tui-language-text\">document.querySelector(&#39;todo-app&#39;).add(&#39;hello&#39;)</code>, <code class=\"tui-language-text\">document.querySelector(&#39;todo-app&#39;).length</code> 의 커맨드로 사용할 수 있다.\n편하지 않은가?! 우리는 커스텀 엘리먼트 클래스에 함수를 정의해 주는 것으로 이처럼 직관적인 <strong>API</strong>를 제공해 줄 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/34096577-3b27076e-e419-11e7-9d5c-b778fe52dbbc.png\" alt=\"image\"></p>\n<h3 id=\"html-렌더링\" style=\"position:relative;\"><a href=\"#html-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"html 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 렌더링</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token operator\">...</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>\n        host: {\n          display: block;\n        }\n        section {\n          background: #fff;\n          margin: 130px 0 40px 0;\n          position: relative;\n          box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);\n        }\n      &lt;/style>\n      &lt;section>\n        &lt;todo-input>&lt;/todo-input>\n        &lt;todo-list>&lt;/todo-list>\n        &lt;todo-toolbar>&lt;/todo-toolbar>\n      &lt;/section>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"tui-language-text\">render</code> 함수는 위의 <code class=\"tui-language-text\">invalidate</code>와 쌍을 이루는 함수로 <code class=\"tui-language-text\">LitRender</code>를 통해 호출된다.\n이 함수가 호출되면 <strong>lit-HTML</strong>의 <code class=\"tui-language-text\">html</code> <strong>Template Literal</strong> 함수를 사용해 이 커스텀 엘리먼트의 하위 엘리먼트를 렌더링한다.\n오오! 제법 <strong>React</strong> 같은 모양새가 되었지 않은가?</p>\n<h3 id=\"커스텀-엘리먼트-등록\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EB%93%B1%EB%A1%9D\" aria-label=\"커스텀 엘리먼트 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 엘리먼트 등록</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todo-app\"</span><span class=\"token punctuation\">,</span> TodoApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 커스텀 엘리먼트를 정의한 클래스를 <code class=\"tui-language-text\">todo-app</code>태그로 정의한다.\n커스텀 엘리먼트를 작성할 때 <code class=\"tui-language-text\">todo-app</code>처럼 태그 이름은 반드시 <code class=\"tui-language-text\">-</code>를 하나 이상 포함해야 함을 기억하자.\n브라우저는 HTML을 파싱하다 <code class=\"tui-language-text\">-</code>를 포함한 태그를 만나면 이것이 커스텀 엘리먼트로 쓰일 수 있다는 것을 알아채 처리할 수 있다.</p>\n<h2 id=\"litrenderjs\" style=\"position:relative;\"><a href=\"#litrenderjs\" aria-label=\"litrenderjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>litRender.js</h2>\n<p><em>litRender.js</em>는 <em>src/libs</em> 밑에서 찾을 수 있으며, 이 애플리케이션의 각 컴포넌트들의 렌더링을 돕는다.\n각 컴포넌트들은 <code class=\"tui-language-text\">class SomeComponent extends LitRender(HTMLElement)</code>의 형식으로 <code class=\"tui-language-text\">litRender</code>를 믹스인 확장하여 사용한다.\n한번에 여러번 내용이 업데이트되는 경우 매번 렌더링 하지 않고, 모았다가 한번에 렌더링 하는 것으로 성능 향상에 도움 주기 위한 코드이다.\n이것을 확장하는 컴포넌트에서 <code class=\"tui-language-text\">this.invalidate</code>를 호출하면 컴포넌트에 정의된 <code class=\"tui-language-text\">render</code> 함수의 호출이 예약된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../node_modules/lit-html/lib/lit-extended\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token parameter\">base</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> base <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instant</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>needsRender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instant<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>needsRender <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">await</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>needsRender <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"컴포넌트들-todolistjs-todoitemjs-todoinputjs-todotoolbarjs\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%93%A4-todolistjs-todoitemjs-todoinputjs-todotoolbarjs\" aria-label=\"컴포넌트들 todolistjs todoitemjs todoinputjs todotoolbarjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트들: todoList.js, todoItem.js, todoInput.js, todoToolbar.js</h2>\n<p>Todo 애플리케이션을 구성하는 개별 컴포넌트들을 정의한다. <em>todoApp.js</em> 코드를 보면 <code class=\"tui-language-text\">&lt;todo-list&gt;</code>, <code class=\"tui-language-text\">&lt;todo-toolbar&gt;</code>등의 형태로 사용하는 것을 확인할 수 있다.</p>\n<h3 id=\"connectedcallback--disconnectedcallback\" style=\"position:relative;\"><a href=\"#connectedcallback--disconnectedcallback\" aria-label=\"connectedcallback  disconnectedcallback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>connectedCallback / disconnectedCallback</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> toggle<span class=\"token punctuation\">,</span> remove<span class=\"token punctuation\">,</span> replace <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../libs/actions'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoItem</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitRender</span><span class=\"token punctuation\">(</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_handlers<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token function\">_onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> classList <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"tui-language-text\">TodoApp</code>에서는 사용되지 않았던 <code class=\"tui-language-text\">connectedCallback</code>, <code class=\"tui-language-text\">disconnectedCallback</code>이 보인다.\n이 함수들은 커스텀 엘리먼트 콜백으로 이 엘리먼트가 <strong>DOM</strong>에 <em>attach</em>, <em>detach</em>될 때 호출된다.\n따라서 이 콜백 함수들이 <strong>DOM</strong> 이벤트 핸들러를 할당/해제하는데 최적의 장소이다.\n만약 적절히 핸들러를 해제해주지 않으면 메모리 누수를 경험할 수 있으니 잊지 말자.</p>\n<p><code class=\"tui-language-text\">onClick</code> 핸들러는 조건에 따라 <code class=\"tui-language-text\">toggle</code>, <code class=\"tui-language-text\">remove</code> <strong>Redux</strong> 액션을 수행하고 있다.</p>\n<h3 id=\"render--html\" style=\"position:relative;\"><a href=\"#render--html\" aria-label=\"render  html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>render / html</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> classCompleted <span class=\"token operator\">=</span> todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">' completed'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> inputToggle <span class=\"token operator\">=</span> todo<span class=\"token punctuation\">.</span>completed\n      <span class=\"token operator\">?</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input class=\"toggle\" type=\"checkbox\" checked></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token operator\">:</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input class=\"toggle\" type=\"checkbox\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> classEditing <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_editing <span class=\"token operator\">?</span> <span class=\"token string\">' editing'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>style<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      &lt;div data-id$=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" class$=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'item'</span> <span class=\"token operator\">+</span>\n      classCompleted <span class=\"token operator\">+</span>\n      classEditing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">\n        &lt;div class=\"view\">\n          </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>inputToggle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n          &lt;label></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/label>\n          &lt;button class=\"destroy\">&lt;/button>\n        &lt;/div>\n        &lt;input class=\"edit\" type=\"text\" />\n      &lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  &lt;style>\n    host: {\n      display: block;\n    }\n    .item {\n      position: relative;\n      font-size: 24px;\n      border-bottom: 1px solid #ededed;\n    }\n...\n  &lt;/style>\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"tui-language-text\">render</code>함수가 조금 복잡졌다. <strong>lit-HTML</strong> <code class=\"tui-language-text\">html</code> 템플릿 리터럴 함수는 템플릿 리터럴을 인자로 받아 <strong>HTMLTemplateElement</strong>를 포함하는 오브젝트 <strong>TemplateResult</strong>를 반환한다.\n<code class=\"tui-language-text\">${something}</code>에는 변수나 상수표현 이외에도 <strong>TemplateResult</strong>, <strong>Promise</strong>, <strong>Array</strong>, <strong>Iterables</strong> 등을 지원한다.\n여러 방식을 조합하여 자유롭게 템플릿을 구성하면 된다.\n위의 코드에서도 템플릿이 복잡해 보이지 않게 <code class=\"tui-language-text\">&lt;style&gt;</code>, <code class=\"tui-language-text\">&lt;input&gt;</code>등을 분리한 후, <code class=\"tui-language-text\">html</code> 템플릿 리터럴을 중복하여 사용하고 있다.</p>\n<h3 id=\"객체의-전달\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%A0%84%EB%8B%AC\" aria-label=\"객체의 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체의 전달</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">  <span class=\"token comment\">// todoList.js</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> todoList\n      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          route <span class=\"token operator\">===</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>route <span class=\"token operator\">===</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">&amp;&amp;</span> todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>route <span class=\"token operator\">===</span> <span class=\"token string\">'active'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;todo-item todo=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>&lt;/todo-item></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>style<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      &lt;div class=\"todo\">\n        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>btnToggleAll<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n        &lt;div class=\"todo-list\">\n          </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todoItems<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n        &lt;/div>\n      &lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">  <span class=\"token comment\">// todoItem.js</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">todo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todo <span class=\"token operator\">=</span> todo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>lit-HTML</strong>의 확장기능을 사용하면 <code class=\"tui-language-text\">html`&lt;todo-item todo=${todo}&gt;&lt;/todo-item&gt;`</code>처럼 다른 커스텀 엘리먼트에 <code class=\"tui-language-text\">object</code>를 전달할 수 있다.\n<strong>Attribute</strong>는 <code class=\"tui-language-text\">html`&lt;todo-item name$=${someText}&gt;&lt;/todo-item&gt;`</code>로 이름 뒤에 <code class=\"tui-language-text\">$</code>를 붙이면 된다.\n받아오는 <code class=\"tui-language-text\">object</code>를 사용하는 <em>todoItems.js</em>에서는 평범하게 <code class=\"tui-language-text\">this.todo</code>로 접근하면 된다.\n이 코드에서는 <em>getter</em>를 만들어서 값이 할당되면 자동으로 <code class=\"tui-language-text\">invalidate</code>를 호출하여 커스텀 엘리먼트가 업데이트 되도록 했다.\n여기서 한가지 짚고 넘어갈 점은 <strong>lit-HTML</strong>의 작동방식이 충분히 성능을 고려해 만들어 졌다는 것이다.\n이것은 템플릿 리터럴로 전달된 값을 기억하고 있다가, 전달된 값이 다를 경우에만 컴포넌트를 업데이트한다.\n데모에서 이 코드가 동작하는 것을 확인해보면 추가/삭제/변경된 아이템만 업데이트되는 것을 확인할 수 있다.</p>\n<h2 id=\"storejs-actionsjs\" style=\"position:relative;\"><a href=\"#storejs-actionsjs\" aria-label=\"storejs actionsjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>store.js, actions.js</h2>\n<p><a href=\"https://github.com/concretesolutions/redux-zero\">Redux-Zero</a>의 <em>store</em>, <em>action</em>들을 정의한다.\n여러분께 이미 익숙할 <strong>Redux</strong>가 간략해진 모양이며, 웹 컴포넌트 설명글의 범위를 벗어나므로 이 부분의 설명은 생략하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> createStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-zero\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> route<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> todoList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">actionCreator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> remove <span class=\"token operator\">=</span> <span class=\"token function\">actionCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">.</span>todoList <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>todoList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h2 id=\"usetheplatform-프레임워크-없이도-react처럼-코딩\" style=\"position:relative;\"><a href=\"#usetheplatform-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%97%86%EC%9D%B4%EB%8F%84-react%EC%B2%98%EB%9F%BC-%EC%BD%94%EB%94%A9\" aria-label=\"usetheplatform 프레임워크 없이도 react처럼 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#UseThePlatform 프레임워크 없이도 React처럼 코딩</h2>\n<p>여기까지 TODO 애플리케이션을 커스텀 엘리먼트, 쉐도우 돔과 <strong>lit-HTML</strong>을 사용하여 우리에게 익숙한 <strong>React</strong>처럼 작성한 코드를 가볍게 설명했다.\n이 방법은 단순히 <strong>React</strong>를 흉내 내는 것이 목적이 아니다.\n우리가 우리에게 익숙한 방법으로 접근할 수 있으면서도, 프레임워크를 요구하지 않는다. 단지 2kb가 채 안되는 <strong>lit-HTML</strong> 라이브러리만 하나 사용하고 있다.\n이것이 우리에게 주는 장점은 뚜렷하다.</p>\n<ol>\n<li>프레임워크 다운로드 시간이 없으므로 페이지가 가볍고 빠르다.</li>\n<li>직관적인 DOM Integration. <code class=\"tui-language-text\">document.querySelector(&#39;todo-app&#39;).add(&#39;hello&#39;)</code> 같은 직관적인 방법을 제공해주는 프레임워크는 없다.</li>\n<li>완벽히 표준 ECMAScript코드이므로, 프레임워크 유행을 타지 않고 오래 유지보수 가능한 코드를 만든다. 불과 2, 3년 전 가장 인기 있던 <strong>Angular</strong>의 위상을 생각해보자.</li>\n<li>프레임워크와 무관하므로 오히려 어떤 프레임워크와도 같이 쓰일 수 있다.</li>\n<li>프레임워크는 선택이지만 프론트엔드 개발자로서 DOM과 ECMAScript는 기본이다. 진입 장벽이 낮고, 어떤 프론트엔드 개발자도 이해할 수 있는 코드이다.</li>\n</ol>\n<p>이 같은 장점에 이끌려 이 연재글을 벌써 5번째 쓰고 있다. 물론 프레임워크가 제공해주는 편리함이나, 브라우저 지원 등을 생각해보면 아쉬운 점들이 없지 않다.\n<strong>lit-HTML</strong> 역시 조금 더 다듬어져야 할 필요가 있다. 이 예제 또한 <strong>lit-HTML</strong>이 정리되어 이 예제를 업데이트할 수 있기를 기다리고 있다.\n그러나 이 장점들은 충분히 살린다면, 적당한 시기(아마도 IE10 이하를 집어던져도 되는 때)에, 공통 컴포넌트나 오픈소스를 개발하는 곳에서는 충분히 그 장점을 발휘할 수 있을 때가 오리라 믿는다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p><a href=\"https://www.youtube.com/watch?v=Io6JjgckHbg&#x26;t=1506s\">Chrome Dev Summit 2017 - lit-HTML</a> 영상을 본 후, 여기서 소개된 대로 <strong>lit-HTML</strong> 그리고, 웹 컴포넌트 자체가 얼마나 빠른 성능을 보여줄 지 궁금했다.\n기왕이면 이전 글에서 약속한 대로 예제도 만들어야 하니 <a href=\"https://github.com/developit/preact-perf\">todo preact benchmark</a>에 추가하여 성능 비교를 해보려 했다.\n테스트 결과는 너무 빠르다. 다만 너무 빨라 스스로 의문이 생겨 조금 더 알아본 결과, <a href=\"https://vuejs.org/perf/\">Vue.js TodoMVC Benchmark</a>를 찾았다.\n필자 역시 이 의견처럼 프레임워크 벤치마크가 의미 없다는 것에 동의하기 때문에 벤치마크 결과를 따로 만들지는 않았고, 이 프로젝트만 <a href=\"http://todomvc.com/\">TodoMVC</a>에 제출할 예정이다.\n그러나 표준 스크립트만으로 동작하는 이 방식이 충분히 빠를수 밖에 없다는 것을 독자 여러분들도 잘 아시리라 생각한다.\n개인적으로 #UseThePlatform의 가치, 웹 컴포넌트의 비전에 거는 기대가 크기에 이 글을 읽는 독자가 한명이라도 더 동의해서 주변에 웹 컴포넌트 개발을 하는 환경을 볼 수 있으면 좋겠다는 바람이다.\n이 글을 끝으로 웹 컴포넌트 연재를 마친다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://github.com/kyuwoo-choi/todo-web-components\">Todo Web Components</a></li>\n<li><a href=\"https://kyuwoo-choi.github.io/todo-web-components/\">Todo Web Components - Demo</a></li>\n<li><a href=\"https://github.com/PolymerLabs/lit-html\">lit-html</a></li>\n<li><a href=\"http://todomvc.com/\">TodoMVC</a></li>\n<li><a href=\"https://github.com/developit/preact-perf\">todo preact benchmark</a></li>\n<li><a href=\"https://vuejs.org/perf/\">Vue.js TodoMVC Benchmark</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Io6JjgckHbg&#x26;t=1506s\">Chrome Dev Summit 2017 - lit-HTML</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/web-components/best-practices\">Custom Element Best Practices</a></li>\n</ul>","frontmatter":{"id":"ko_20171215","title":"웹 컴포넌트(5) - lit-html로 React 처럼 코딩하기","description":"이번 글은 웹 컴포넌트 소개 연재 5번째로 웹 컴포넌트를 react처럼 코딩하기를 해보겠다. 사용하는 예제 전체 코드는 Todo Web Components에서 참조할 수 있다. 이 예제를 통해 지난 연재에서 알아보았던 커스텀 엘리먼트, 쉐도우 돔 그리고 lit-HTML]을 사용하여 웹 컴포넌트 애플리케이션을 어떻게 만들 수 있는지 확인해보자.","date":"2017.12.15","author":"최규우","tags":["html5","es6"],"thumbnail":"https://user-images.githubusercontent.com/1215767/34079127-7bb3c5d8-e36a-11e7-9acf-29526b803654.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20171215","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}