{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/en_20190405","result":{"data":{"post":{"html":"<h1 id=\"pragmatic-front-end-testing-strategies-1\" style=\"position:relative;\"><a href=\"#pragmatic-front-end-testing-strategies-1\" aria-label=\"pragmatic front end testing strategies 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pragmatic Front-End Testing Strategies (1)</h1>\n<blockquote>\n<p>This article is the first of a series of three articles.<br/><br/>\n<strong>Part 1: Necessity of Pragmatic Front-End Testing Strategies</strong><br/>\n<a href=\"/test123/weekly-pick/en_20190412\">Part 2: Testing Visual Components Using Storybook</a><br/>\n<a href=\"/test123/weekly-pick/en_20190419\">Part 3: Testing Logic in State Management Using Cypress</a></p>\n</blockquote>\n<p>It is the height of JavaScript. For the past couple of years, JavaScript has maintained its championship title as the most popular programming language, and is still rapidly developing. As someone who began on a path of a front-end developer more than a decade ago, in a lawless wasteland without the simplest concept of the Web Standard, I can’t help but feel humbled by JavaScript’s achievements. Observing the stunning evolution of web development, from having development environments that do not deserve their names to being inundated with cornucopia of resources, tis truly the golden age.</p>\n<p>Among all of the shining accomplishments, the improvement in testing methodology and tools is the most encouraging. For years, front-end testing seemed to me like a glorious castle in the sky. No matter how desperately I tried to apply the existing testing methods, none were suitable to test front-end codes, and the meek test results after arduous testing procedures left me insatiable. However, recently emerging tools are providing developers with excellent solutions to the problems of the past, as if to boast the experience gained through years of trial and error.</p>\n<p>In this series of articles, I will humbly introduce <a href=\"https://storybok.js.org/\">Storybook</a> and <a href=\"https://www.cypress.io/\">Cypress</a>, the two tools most worthy of the attention, and discuss effective strategies for real-world front-end testing.</p>\n<h2 id=\"developers-and-tests\" style=\"position:relative;\"><a href=\"#developers-and-tests\" aria-label=\"developers and tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Developers and Tests</h2>\n<p>Before we get started, let’s all agree on something, here. To roughly define “test” within the software realm, it is “an act to verify that the application functions appropriately under given requirements.” Most of the times, <a href=\"https://en.wikipedia.org/wiki/Quality_assurance\">Quality Assurance (QA)</a> is a mandatory step before the product is actually delivered to the hands of the users, and this process basically summarizes the core idea behind testing. However, if you inspect the development cycle more holistically, such testing occurs at every step of the way. For example, validating and improving the UX during the prototype phase, calling the API from the server and cross-checking the expected value, and comparing the final design and the markup result after the first draft of the program are all examples of said tests.</p>\n<p>Let’s look at more examples to see how frequent testing really is in the real workplace environment. Say I’m working on a simple Todo Application with React, and currently working on a “Finish Task” feature. I would have to write a code to take the user’s click event to change the state of the task to “Completed.” In order to verify that the state has been changed according to plan, I <strong>click on the task</strong> and in my developer tools, I <strong>verify</strong> that the component’s state has successfully changed to “Completed.” Since the “Completed” tasks have to be checked and cancelled out in the UI, I add the appropriate CSS to the component, and <strong>click on the task</strong> again to make sure that it runs correctly. Upon figuring out that the “Completed” state has to be managed not within the component, but in the Redux’s store, I do some refactoring, and I do the whole thing all over again.</p>\n<p>In the example in the previous paragraph, <strong>clicking on</strong> the component and <strong>verifying</strong> the results are all parts of a test. In reality, developers “run tests” during the development cycle, and most of tasks habitually carried out by developers after saving the code are related to testing.</p>\n<h2 id=\"importance-of-automated-testing\" style=\"position:relative;\"><a href=\"#importance-of-automated-testing\" aria-label=\"importance of automated testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importance of Automated Testing</h2>\n<p>The main problem is that such tests are repetitive. As you can clearly see in the previous example, the testing consists of repeatedly “clicking” and “verifying” tasks. If these tasks are carried out manually every time, as the application complexity grows, so will the cost of testing. If testing cost increases, you naturally and gradually put off testing, and the performance of the product plummets. Also, the pressure from having to run such tests will make you more unwilling when it comes to changing the code to improve it, and this also leads to the performance of the product taking a nosedive.</p>\n<p>If these tedious tests are automated, it could seriously cut down on the testing time, and prevent forgetting to run tests or making mistakes during testing. Also, automated testing eliminates the fear of refactoring, and will eventually lead to better codes.</p>\n<p><em>(From this point on, I will only refer to \"tests\" to refer to “automated tests that are written by developers.”)</em></p>\n<h2 id=\"the-opportunity-cost-of-testing\" style=\"position:relative;\"><a href=\"#the-opportunity-cost-of-testing\" aria-label=\"the opportunity cost of testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Opportunity Cost of Testing</h2>\n<p>I’m certain that most of you will agree with me when I say that “testing is important.” However, it is not to say that all of the tests have to be automated. I say that because writing tests costs resources. Therefore, if the opportunity-cost of writing the test is low, don’t bother writing automated codes, and just do it manually. Sometimes, people set overly ambitious goals like pursuing 100% coverage or writing automated test codes for simple actions with close to no logic, and such goals are wasteful of resources that could otherwise be valuable.</p>\n<p>It is better to boldly remove any piece of code that you think is redundant, even if it is a part of an existing test code. This is because as the application keeps on changing, the test codes must change as well. As it is considered to be a good practice to remove unnecessary codes from the product, it is also encouraged to actively remove unnecessary test codes to reduce maintenance cost. Even Kent Beck, the rediscoverer of Test-Driven Development has expressed his thoughts on the matter.</p>\n<blockquote>\n<p>I get paid for code that works, not for tests, so my philosophy is to test as little as possible to reach a given level of confidence … If I don't typically make a kind of mistake, I don't test for it.\n<a href=\"https://stackoverflow.com/questions/153234/how-deep-are-your-unit-tests/\">From Stack Overflow</a></p>\n</blockquote>\n<blockquote>\n<p>Trying to test for perfection is the easiest way to write codes that will inevitably become complicated program that is also prone to error … If the program is too simple to have any or little possibility of error, it is better not to test.\n<a href=\"https://www.amazon.com/dp/0201616416/?tag=stackoverflow17-20\">From Extreme Programming Explained</a></p>\n</blockquote>\n<h2 id=\"good-tests\" style=\"position:relative;\"><a href=\"#good-tests\" aria-label=\"good tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Good Tests</h2>\n<p>Because different test codes have different maintenance cost and benefits, in order to properly weigh opportunity cost for tests, it is imperative that you know what makes a good test.</p>\n<p>So, what makes a good test? This question is extremely difficult to answer because tests are affected by numerous variants including application’s characteristics, tools and languages used in development, and user environments. While it may be difficult to definitively say what makes a perfect test, I have organized five key properties of a good test.</p>\n<h3 id=\"1-it-needs-to-be-fast\" style=\"position:relative;\"><a href=\"#1-it-needs-to-be-fast\" aria-label=\"1 it needs to be fast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. It needs to be fast.</h3>\n<p>Faster tests mean faster feedback every time you edit your code. This will inevitably make the entire development process faster, while allowing you to run tests more frequently. If you need to wait for hours just to see the test results, what good are the tests, really?</p>\n<h3 id=\"2-altering-the-implementation-detail-should-not-break-the-code\" style=\"position:relative;\"><a href=\"#2-altering-the-implementation-detail-should-not-break-the-code\" aria-label=\"2 altering the implementation detail should not break the code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Altering the implementation detail should not break the code.</h3>\n<p>In other words, “write the test with the interface in mind” or “do not write implementation dependent tests.” To look at it from another angle, this also applies to chunking the test units into too many small chunks. If the test cracks even at the slightest refactoring, not only does it deprive the test of its credibility, but also demands more time and resources to fix the test codes.</p>\n<h3 id=\"3-it-should-be-able-to-detect-bugs\" style=\"position:relative;\"><a href=\"#3-it-should-be-able-to-detect-bugs\" aria-label=\"3 it should be able to detect bugs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. It should be able to detect bugs.</h3>\n<p>To put it differently, “tests that validate buggy codes should fail.” If the expectations are not specified in detail, or if the program does not test through every imaginable scenario, some bugs could go unnoticed. Also, excessive usage of mock objects can make it difficult to detect errors that could occur during the connection stages even the dependent objects are edited. Therefore, test specs must be comprehensive, and refrain from using mock objects as much as possible.</p>\n<h3 id=\"4-it-should-be-consistent\" style=\"position:relative;\"><a href=\"#4-it-should-be-consistent\" aria-label=\"4 it should be consistent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. It should be consistent.</h3>\n<p>If the test that worked perfectly yesterday suddenly doesn’t work today, or if the test that had no problem with certain devices but doesn’t run on other devices, you’d probably lose faith in the test. Good tests should minimize the external and environmental effects on the results, as to produce the same results no matter the given conditions. The environmental aspects include time, device OS, and network status, and good tests should be designed so that such elements can be directly manipulated using mock objects or external tools.</p>\n<h3 id=\"5-the-intent-of-the-test-should-be-clear\" style=\"position:relative;\"><a href=\"#5-the-intent-of-the-test-should-be-clear\" aria-label=\"5 the intent of the test should be clear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. The intent of the test should be clear.</h3>\n<p>By now, I think everyone acknowledges that code readability is important. One of the defining characteristics of good codes is that “people” can easily read and understand the code, not “machines.” Test codes should be held to the same standards; anyone should be able to look at the test code and tell you the purpose of the test. Illegible codes demand more resources when the code eventually has to be edited or removed. If the test requires repetitious and lengthy codes need to be constantly called or if validation codes are unnecessarily verbose, it is better to simply create a function or use assertion statements to handle such tasks.</p>\n<h2 id=\"importance-of-testing-strategies\" style=\"position:relative;\"><a href=\"#importance-of-testing-strategies\" aria-label=\"importance of testing strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importance of Testing Strategies</h2>\n<p>Individual criterion is easy to satisfy. However, the problem rises when they start to inevitably contradict each other. For example, writing tests with smaller units allow faster execution and comprehensive validation through suite segmentation. However, such tests are prone to malfunctioning even at the slightest refactoring, thereby raising the maintenance cost, and with increased number of necessary mock objects, they are more susceptible to undetected errors. Furthermore, incredibly thorough testing specs are excellent for detecting bugs, but the very same intricacy render the purpose opaque.</p>\n<p>With everything said, it’s probably impossible to build the perfect test that fits every single criterion mentioned above. Therefore, it is paramount to strategically decide what kind of compromises you are willing to make. Especially since front-end codes are closely related to the Graphic User-Interface (GUI), and must carefully consider various environments of users, each platform demands different codes and different strategies. Each segments of the product, including visual elements, server communication, user interface (UI), and etc., requires personal meticulous strategizing.</p>\n<h2 id=\"importance-of-testing-tools\" style=\"position:relative;\"><a href=\"#importance-of-testing-tools\" aria-label=\"importance of testing tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importance of Testing Tools</h2>\n<p>When it comes to front-end testing strategies, one of the most important factors of consideration is the tools. At the beginning of the article, I mentioned the modern advancements in testing tools not because I was overly sentimental looking back, but because these tools <em>are</em> extremely helpful when designing effective testing strategies. For example, while previous E2E (End to End) testing tools were a double-edged sword because they offered user-perspective tests that were not affected by implementation detail, but they also were complicated to write and were extremely slow, Cypress, a modern E2E tool, offers the same benefits of the ancestors while being intuitive, fast, and stable. Therefore, the advancement of testing tools leads to better testing strategies.</p>\n<p>Welp! What an introduction. I think I’m finally done with rambling about why I decided to title this article “Pragmatic Front-End Testing Strategies.” To summarize, effective tests require effective strategies suited to the front-end environment, and the latest tools facilitate coming up with such strategies.</p>\n<p>Finally, let’s get into what efficient testing strategies are using a simple Todo app as an example.</p>\n<h2 id=\"simple-example-todo-application\" style=\"position:relative;\"><a href=\"#simple-example-todo-application\" aria-label=\"simple example todo application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Example: Todo Application</h2>\n<p>Throughout the article I will refer to the renowned <a href=\"http://todomvc.com\">TodoMVC</a>, and I used <a href=\"https://reactjs.org\">React</a> and <a href=\"https://redux.js.org/\">Redux</a> to build my own for testing purposes. However, the contents of this article are not restricted to certain libraries, so the same strategies should be applicable do applications not written in React as well. The application, when executed, will look like something in the following image.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/50434492-b4e4ae80-0920-11e9-830f-1430f431d9b3.png\" alt=\"TodoMVC Application\"></p>\n<p><em>(Image 1: TodoMVC Application)</em></p>\n<p><em>(While the original TodoMVC uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">localStorage</a> to store lasting data, but to test communication with the real server, I used a different local server.)</em></p>\n<h2 id=\"components-of-front-end-applications\" style=\"position:relative;\"><a href=\"#components-of-front-end-applications\" aria-label=\"components of front end applications permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components of Front-End Applications</h2>\n<p>Assuming that data already exist on the server, let’s imagine we’re adding new to-do items after launching the app for the first time. The internal execution procedure can be broken down in the following order.</p>\n<ol>\n<li>When the application is launched, display the basic UI.</li>\n<li>Request the “Todo list” from the API server, and store the response to the Redux store.</li>\n<li>Display the Todo list according to the values saved in the store to the UI.</li>\n<li>User clicks on the input box, and presses enter after typing “Take a Nap.”</li>\n<li>Request “add todo” along with the “Take a Nap” data from the API server.</li>\n<li>If the request is successful, append “Take a Nap” to the Todo list in Redux store.</li>\n<li>Update the UI according to the values in the store.</li>\n</ol>\n<p>That looks like a lot, but the entire process can be broken down into two main categories. Steps 1,3, and 7 fall into the first category, displaying visual state of the application on the window. The second category, changing the current state of the application with the given external input (user input, server transmission,) include steps 2,4,5, and 6. This should remind you of models and views, frequently used in the <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\">MVC pattern</a>.</p>\n<p>Such categorization is important because each segment requires different strategies when testing. Especially, since it is difficult to write a code to automate tests for visual elements, testing visual elements and state changes at the same time would be incredibly costly. Therefore, it is important to design the application so that such tests can be conducted separately. Latest frameworks like <a href=\"https://reactjs.org\">React</a> and <a href=\"https://vuejs.org/\">Vue</a> provide features to separately manage visual elements and state changes as default.</p>\n<p>First, let’s look at how we should go about testing visual elements.</p>\n<h2 id=\"testing-visual-elements\" style=\"position:relative;\"><a href=\"#testing-visual-elements\" aria-label=\"testing visual elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Visual Elements</h2>\n<h3 id=\"comparing-the-html\" style=\"position:relative;\"><a href=\"#comparing-the-html\" aria-label=\"comparing the html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing the HTML</h3>\n<p>Often, when people talk about testing the View within the MVC pattern used in front-end, it is most common to test the structure of the HTML codes. Given that HTML and CSS determine the visual representation of the application, CSS is rarely dynamically controlled, so it makes sense. The simplest test would be to compare the parts of the resulting HTML with what you expect to happen in string format. If testing for components in the header area, it would look something like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> prettyHTML <span class=\"token keyword\">from</span> <span class=\"token string\">\"diffable-html\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Header <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/header\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header component - HTML\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> outputHTML <span class=\"token operator\">=</span> <span class=\"token function\">prettyHTML</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;header class=\"header\">\n      &lt;h1>todos&lt;/h1>\n      &lt;input class=\"new-todo\" placeholder=\"What needs to be done?\" value=\"\" />\n    &lt;/header>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">prettyHTML</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>outputHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"tui-language-text\">diffable-html</code> library from the example above formats the input text so that it would be easier to compare to an HTML text. This way, you can clearly see how the result of failed test differs from what you expected it to be, and solves the issue that the returned value of <code class=\"tui-language-text\">innerHTML</code> may differ from browser to browser because of inner representation of different browsers. Also, you can write more readable test codes because you don’t have to worry about basic styling of the HTML like indentation and line changes.</p>\n<h3 id=\"snapshot-test-html\" style=\"position:relative;\"><a href=\"#snapshot-test-html\" aria-label=\"snapshot test html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snapshot Test (HTML)</h3>\n<p>It turns out that manually hardcoding the expected HTML text to compare to the resulting code is quite difficult. It only works out like it did because the example above has a simple structure, but if the structure of the code were even a little more complicated, the complexity of the test code would have increased drastically. Therefore, when conducting tests of similar nature, it is more common to simply copy and paste the HTML created by the real component using the console.log() found in the browser’s testing tools.</p>\n<p>Such method does not conform to the Test-Driven Development (TDD) methodology where you define what you expect before the test. This kind of testing does not provide any feature that improves the development speed by offering prompt feedbacks, and truthfully, is just a simple regression test. Also, it can become ridiculously tedious copying and pasting the result of the test every time there is a change to the code. Testing tools like Jest, recently introduced the Snapshot testing to solve such issues.</p>\n<p>For snapshot tests, you don’t need to hardcode the expected data, but the tool saves the first result of your program as a file. Then, every time the test is ran, the result is compared to the previously saved file. While it still acts as a regression test, it eliminated the hassle of writing the expected results manually. The code below is an example of comparing the previous view using the snapshot testing method.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> prettyHTML <span class=\"token keyword\">from</span> <span class=\"token string\">\"diffable-html\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Header <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/header\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header component - Snapshot\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, doesn’t that look much simpler? Although you can’t directly verify the expected results in the test program, instead you can see that <code class=\"tui-language-text\">*.js.snap.</code> file has been created in the <code class=\"tui-language-text\">__snapshot__</code> folder, and the file contains the expected result as such.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">exports[`Header component - Snapshot 1`] = `\n&quot;\n&lt;header class=\\\\&quot;header\\\\&quot;&gt;\n  &lt;h1&gt;\n    todos\n  &lt;/h1&gt;\n  &lt;input class=\\\\&quot;new-todo\\\\&quot;\n         placeholder=\\\\&quot;What needs to be done?\\\\&quot;\n         value\n  &gt;\n&lt;/header&gt;\n&quot;\n`;</code></pre></div>\n<h3 id=\"snapshot-testing-virtual-dom\" style=\"position:relative;\"><a href=\"#snapshot-testing-virtual-dom\" aria-label=\"snapshot testing virtual dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snapshot Testing (Virtual DOM)</h3>\n<p>Actually, React component doesn’t return real HTML, but a virtual DOM called React Element. Creating and editing the actual HTML code is <code class=\"tui-language-text\">react-dom</code>’s task, so strictly speaking, is not included in the testing scope of individual components. Therefore, it is more common to simply test the returned React element’s tree structure when testing React components.</p>\n<p>To facilitate testing React components, React provides <code class=\"tui-language-text\">react-test-renderer</code> library, and this library lets you test how the component works without actually having to render it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-test-renderer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Header <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/header\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header component - Snapshot\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the example above, it uses <code class=\"tui-language-text\">react-test-renderer</code>’s <code class=\"tui-language-text\">toJSON()</code> function instead of creating the DOM element to directly render from it. This function can be useful because now the browser’s rendering engine is no longer needed, and we can test in the Node.js environment without the help of JSDom.</p>\n<p>Jest provides more functionalities to support snapshot comparisons and update. To learn more about snapshot testing, refer to the <a href=\"https://jestjs.io/docs/snapshot-testing\">official Jest documentation</a>.</p>\n<h2 id=\"the-problem-with-comparing-html-structures\" style=\"position:relative;\"><a href=\"#the-problem-with-comparing-html-structures\" aria-label=\"the problem with comparing html structures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem with Comparing HTML Structures</h2>\n<p>Both HTML Difference method and Snapshot testing compare the HTML structure to test the visual elements of the product (even React element tree can be considered to be HTML structure.) However, considering the five conditions of a good test, HTML structure comparison has these following flaws.</p>\n<h3 id=\"1-implementation-dependent-testing\" style=\"position:relative;\"><a href=\"#1-implementation-dependent-testing\" aria-label=\"1 implementation dependent testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Implementation Dependent Testing</h3>\n<p>The second category dictates that for good tests, “altering the implementation detail should not break the code.” Hence, the tests should validate “what” the code does instead of “how” the code does. However, HTML is, strictly speaking, not the result of visual elements, but is more of implementation detail--how the visual element is represented. This is because the final product of the visual components are the images displayed on the screen, not the HTML structures.</p>\n<p>Such implementation dependent tests are easy to malfunction even at tiniest changes to the code, so it costs more to maintain. Let’s take the <code class=\"tui-language-text\">Header</code> component as an example. If a <code class=\"tui-language-text\">div</code> tag was used instead of the <code class=\"tui-language-text\">header</code> tag, or if the <code class=\"tui-language-text\">new-todo</code> class was renamed as <code class=\"tui-language-text\">add-todo</code>, the test would break despite the fact that the final product would look and function the same. As such, the test code has to be updated even when refactoring HTML and CSS codes, and this slows down the entire operation down.</p>\n<h3 id=\"2-unclear-testing-intentions\" style=\"position:relative;\"><a href=\"#2-unclear-testing-intentions\" aria-label=\"2 unclear testing intentions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Unclear Testing Intentions</h3>\n<p>Another requirement is that the “purpose of the test should be clear.” However, the HTML structure does not fully represent the resulting image that is displayed on the screen. Even if you include the CSS in the test, it is almost impossible to perfectly picture the resulting image just by looking at the code. This is also why we can’t hardcode the expected HTML values when writing test codes. You can only be certain that the code you wrote does what you wanted it to do, only after displaying the result on the browser.</p>\n<p>These kinds of codes are hard to manage. Other developers, or even you, who actually wrote the test code, can have trouble pinpointing what the purpose of the test was. Eventually, you mindlessly copy and paste the results and update the snapshot every time the test fails, and this has murderous effects on the credibility of the test.</p>\n<h2 id=\"difficulties-of-automating-visual-tests\" style=\"position:relative;\"><a href=\"#difficulties-of-automating-visual-tests\" aria-label=\"difficulties of automating visual tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Difficulties of Automating Visual Tests</h2>\n<p>The most accurate test for visual components would be to compare the images displayed on the screen down to each pixel, and other tests cannot be described to be cost-effective. Then, our only hope would be to load the view component, take a screen shot, and the compare it to the expectation. If you decide to use the final draft of the design as the expected value, for most precise test results, you could actually take a screenshot and compare the two images every time you edit your code.</p>\n<p>The technique I just described, while it sounds tedious, would produce the most accurate test results. Tragically, however, final design handed to you do not comprise every possible scenario, so such method, as a mean of testing every state of the application, cannot be suitable. Considering other elements like display resolution, browser rendering methodology, size of device viewport, and etc., it makes comparing each pixel idea sound even more ridiculous in terms of technical difficulties.</p>\n<p>While it may seem anticlimactic, in my opinion, no technology has yet to triumph over the “developer’s eyes” when it comes to visual testing. Despite the fact that many tools are still being developed constantly, our innate sense and instincts have not yet been beaten. Even when programming HTML and CSS codes, you habitually check the result of the change you’ve made to the code, and expect a change to have happened each time. I personally think that technology has yet to produce a tool that can aptly replicate this series of events.</p>\n<p>Does that mean visual tests cannot be automated? It’s 50:50. While complete automation is still not realistically achievable, UI development process itself can be improved. The tool that provides a new way of developing the UI is the Storybook.</p>\n<p><em>(It is true that recently, tools like <a href=\"https://applitools.com/\">Applitools</a> and <a href=\"https://www.chromaticqa.com/\">Chromatic</a> have reconciled the different rendering methods of different browsers, and drastically improved the visual testing method of comparing image files. However, these tools are used to conduct regression tests, and are more effective when used together with the tool that I’m going to introduce now--the Storybook. In part 2 of this series, I will briefly introduce using Storybook and regression testing tools.)</em></p>\n<h2 id=\"storybook-ui-development-environment\" style=\"position:relative;\"><a href=\"#storybook-ui-development-environment\" aria-label=\"storybook ui development environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storybook: UI Development Environment</h2>\n<p>In the <a href=\"https://storybook.js.org/\">official website</a>, it labels the Storybook as “UI development environment.” To be fair, Storybook <em>is</em> more of a tool that provides developers with a better environment in which to work on UI development than a testing tool. It is, as you can see, is a sort of a component gallery. As you can see in the following image, it allows you to register collection of components used in your application for each page, and provides a way for you to easily visually check the product using the navigator.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/50434049-2ae81600-091f-11e9-9ecb-a9b032f0be27.png\" alt=\"screen shot 2018-12-26 at 10 57 55 am\"></p>\n<p><em>(Image 2: Storybook Example – Components used in <a href=\"https://file.toast.com/\">Toast File</a>)</em></p>\n<p>Now you might be wondering how this tool can help us with running our visual tests. Remember how I said everything you do to check the result of the code after saving can be classified as testing? If every possible combinations and input values of the components are already saved and registered, much of the process I mentioned earlier can be automated.</p>\n<p>For a more specific example, let’s refer to a situation where you have to change the size of the icon in the “File Upload Complete” pop-up. To check the result, you would have to change the code, upload it, and actually wait for it to finish uploading. But alas, upon checking the results, you can see that the icon has become too big and it has covered the text. Now, you repeat the process of changing the code and waiting to check for results only to find out that now the icon is too small. Guess what? You do the same thing all over again.</p>\n<p>These series of events are results of the fact that the visual elements are linked directly to the state of the entire application. The process of uploading and waiting for the file is simply to make sure that the state of the application is acceptable to you. If the Storybook has “Upload Complete pop-up” component individually registered, the tedious repetitions would no longer be necessary.</p>\n<h2 id=\"end-of-part-1\" style=\"position:relative;\"><a href=\"#end-of-part-1\" aria-label=\"end of part 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>End of Part 1</h2>\n<p>So far, I have illustrated the importance of test automation, qualities of good tests, and also the importance of testing strategies. Furthermore, I have discussed why it is difficult to automate visual element testing, and how Storybook provides an attractive alternative. True, there are numerous ways to test front-end codes, and information presented in this document may not always head in the right direction. This article is merely my attempt at discovering, alongside you, realistic and efficient testing methods.</p>\n<p>In Part 2, I will actually use Storybook to conduct more detailed visual element tests and discuss more in depth strategies.</p>\n<p><em>(“Application State Management” will be handled in Part 3 along with Cypress)</em></p>","frontmatter":{"id":"en_20190405","title":"Pragmatic Front-End Testing Strategies (1)","description":"It is the height of JavaScript. For the past couple of years, JavaScript has maintained its championship title as the most popular programming language, and is still rapidly developing. As someone who began on a path of a front-end developer more than a decade ago, in a lawless wasteland without the simplest concept of the Web Standard, I can’t help but feel humbled by JavaScript’s achievements. Observing the stunning evolution of web development, from having development environments that do not deserve their names to being inundated with cornucopia of resources, tis truly the golden age.","date":"2019.04.05","author":"DongWoo Kim","tags":["test"],"thumbnail":"https://cdn-images-1.medium.com/max/800/1*jYHepkLchSmgG1LJMMTzYA.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_20190405","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}