{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170825","result":{"data":{"post":{"html":"<h1 id=\"front-end-테스트-환경-1-간단하게-테스트-환경-구축하기\" style=\"position:relative;\"><a href=\"#front-end-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-1-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\" aria-label=\"front end 테스트 환경 1 간단하게 테스트 환경 구축하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Front-End 테스트 환경 1) 간단하게 테스트 환경 구축하기</h1>\n<p>이 글에서는 간단하게 Front-End 테스트 환경을 구축하는 방법에 대해 공유하고자 한다.\n참고) 본 글은 Karma 설정과 Jasmine의 API에 대해서는 깊게 다루지 않는다. 우선 Front-End 테스트를 실행할 수 있는 환경을 빠르게 구축함을 목적으로 작성되었다.\n자세한 API와 설정에 대해서는 글 최하단의 <a href=\"#%EC%B0%B8%EC%A1%B0\">참조</a>의 각 Github Page에서 확인할 수 있다.</p>\n<h2 id=\"자바스크립트-테스트\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"자바스크립트 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 테스트</h2>\n<p>자바스크립트에서 테스트를 수행할 때 필요한 것은 크게 3가지이다. 먼저 테스트 실행 환경, 테스트 코드를 수행할 테스팅 프레임워크, 마지막으로 그 테스트를 실행시킬 테스트 러너이다. 자바스크립트 테스팅 프레임워크, 테스트 러너의 종류는 많고 조합을 해서 쓰게 되면 경우의 수는 더 많아진다.</p>\n<p>하지만 이 글과 후속되는 글에서는 FE개발랩에서 사용하는 테스트 환경에 맞춰 다중 테스트 환경을 구축하는 방법에 대해 소개할 예정이다.</p>\n<p>각각의 사용법과 조합해서 사용하는 방법을 알아보기 전에, 우리 FE개발랩은 어떤 도구들을 사용하는지 먼저 알아보자.</p>\n<h3 id=\"실행-환경\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%ED%99%98%EA%B2%BD\" aria-label=\"실행 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 환경</h3>\n<p>자바스크립트 실행 환경은 여러종류가 있지만, 크게는 Node.js와 웹 브라우저가 있다.</p>\n<p>FE개발랩은 웹 브라우저 환경에서 구동되는 서비스에 필요한 데이트피커, 페이지네이션 등의 <code class=\"tui-language-text\">컴포넌트와</code> 차트, 그리드, 에디터 등의 작은 <code class=\"tui-language-text\">애플리케이션</code>을 개발하므로 테스트 실행 환경은 웹 브라우저이다.</p>\n<h3 id=\"테스팅-프레임워크\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-label=\"테스팅 프레임워크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스팅 프레임워크</h3>\n<p>자바스크립트 테스팅 프레임워크는 아래의 설문 결과 차트에 나와있듯 Mocha, Jasmine, Enzyme, Jest, Cucumber, Ava 등이 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/7088720/29802469-5b1a2904-8cb0-11e7-8082-5160a8c4246f.png\" alt=\"1\"></p>\n<blockquote>\n<p>자바스크립트 테스팅 프레임워크 선호도 및 관심도 (<a href=\"https://stateofjs.com/2016/testing/\">링크</a>)</p>\n</blockquote>\n<p>위의 설문 결과를 보면 독보적으로 높은 인지도와 선호도를 가진 테스팅 프레임워크 Mocha와 Jasmine 두 개가 보인다.</p>\n<p>우리 FE개발랩은 <a href=\"https://github.com/jasmine/jasmine\">Jasmine</a>을 사용한다. 두 프레임워크가 지원하는 기능은 비슷하며 <a href=\"https://github.com/mochajs/mocha\">Mocha</a>가 조금 더 높은 사용성을 제공하지만(비동기 테스트의 경우) 현재 개발되는 제품들에 필요한 비동기 테스트가 적고, 기본적으로 지원하는 Assertion API와 빠른 테스트 수행 속도의 이점이 있는 Jasmine의 손을 들어주었다.</p>\n<h3 id=\"테스트-러너\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%9F%AC%EB%84%88\" aria-label=\"테스트 러너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 러너</h3>\n<p>테스트 러너로는 Karma를 사용한다. Karma는 Node.js에서 실행되며 matcher 등 테스팅 프레임워크의 기능은 제공되지 않는다.</p>\n<p>Karma가 동작되는 방식을 요약하면 다음과 같다.</p>\n<ol>\n<li>karma 자체 서버를 띄운다.</li>\n<li>사용자가 작성한 테스트 코드와 소스 코드를 <code class=\"tui-language-text\">karma.config.js</code>에 미리 정의한 테스트 환경(웹 브라우저)의 IFrame 내부로 불러들여 테스트를 실행한다.</li>\n<li>테스트를 모두 수행하고 난 뒤 수행 결과를 karma 서버로 받고, 콘솔을 통해 개발자에게 결과를 보여준다.</li>\n</ol>\n<p>기본적으로 <code class=\"tui-language-text\">karma-chrome-launcher</code>, <code class=\"tui-language-text\">karma-safari-launcher</code> 등을 사용해 로컬 개발 환경의 브라우저에서 손쉽게 테스트를 수행할 수 있다.</p>\n<h2 id=\"먼저-로컬-환경에서-테스트를-해보자\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"먼저 로컬 환경에서 테스트를 해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 로컬 환경에서 테스트를 해보자</h2>\n<p>그럼 앞에서 언급한 테스팅 프레임워크, 테스트 러너로 로컬 환경에 테스트 환경을 구축하고 간단한 함수 및 테스트 코드를 작성해보자.</p>\n<blockquote>\n<p>앞으로의 설명은 OS X를 기준으로 진행된다.</p>\n</blockquote>\n<h3 id=\"nodejs-및-필요한-모듈들-설치\" style=\"position:relative;\"><a href=\"#nodejs-%EB%B0%8F-%ED%95%84%EC%9A%94%ED%95%9C-%EB%AA%A8%EB%93%88%EB%93%A4-%EC%84%A4%EC%B9%98\" aria-label=\"nodejs 및 필요한 모듈들 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js 및 필요한 모듈들 설치</h3>\n<p>먼저 <a href=\"https://nodejs.org/\">Node.js</a>를 설치한다.\n설치가 완료되면 테스트 환경을 구축할 경로(필자는 'testing'이라는 폴더를 생성했다.)에 진입 후 <code class=\"tui-language-text\">package.json</code>을 생성한다.</p>\n<p><strong>testing/package.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"tui-language-json\"><code class=\"tui-language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://github.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"karma start\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 테스트 러너, 테스팅 프레임워크인 <code class=\"tui-language-text\">karma</code>, <code class=\"tui-language-text\">jasmine</code>과 크롬 브라우저를 실행하기 위해 <code class=\"tui-language-text\">karma-chrome-launcher</code>를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install karma karma-chrome-launcher jasmine-core --save-dev</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/7088720/29802471-5dc4caf6-8cb0-11e7-9bc0-eaba11d707c6.png\" alt=\"2\"></p>\n<p>그리고 다음 명령어로 Node.js의 전역에 <code class=\"tui-language-text\">karma-cli</code>도 설치해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install -g karma-cli</code></pre></div>\n<h3 id=\"간단한-함수-및-테스트코드-작성\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%95%A8%EC%88%98-%EB%B0%8F-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"간단한 함수 및 테스트코드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 함수 및 테스트코드 작성</h3>\n<p>테스트를 수행하기 위해 간단한 함수를 가지고 있는 <code class=\"tui-language-text\">.js</code> 파일을 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트 테스트를 수행하는 간단한 예제므로 편의상 함수 아래에 테스트 코드를 작성하겠다.\n테스트 코드는 사용하는 테스팅 프레임워크인 Jasmine에 맞추어 작성했다. <a href=\"https://jasmine.github.io/api/edge/global\">API 문서</a></p>\n<p><strong>testing/js/sayHello.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Test case</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayHello.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should returns string \"hello\"'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">js/</code> 디렉터리에 테스트할 <code class=\"tui-language-text\">sayHello.js</code> 파일을 생성하고 난 뒤라면 폴더 구조는 다음과 같을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">testing/\n  - js/\n    - sayHello.js\n  - package.json</code></pre></div>\n<h3 id=\"karma-설정파일-생성\" style=\"position:relative;\"><a href=\"#karma-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"karma 설정파일 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Karma 설정파일 생성</h3>\n<p>Karma로 테스트를 수행하려면 테스트할 소스 코드, 테스트 코드 등의 경로 및 테스팅 프레임워크 및 테스트 실행 환경을 정의하기 위해 <code class=\"tui-language-text\">karma.config.js</code>를 만들어야 한다.</p>\n<p>설정 파일을 손쉽게 만들기 위해 이전에 설치한 karma-cli의 도움을 받아보도록 하자.\n<code class=\"tui-language-text\">testing/</code> 폴더에서 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ karma init</code></pre></div>\n<p>명령어를 실행하면 카르마 설정 파일을 간단하게 생성할 수 있도록 karma-cli가 몇 가지 물어볼 것이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/7088720/29802473-5f479a2a-8cb0-11e7-9afd-5d40614c9ca4.png\" alt=\"3\"></p>\n<p>현재 예제와 같은 구성에서는 대부분 'Return'키를 눌러서 진행하면 되지만 4번째 질문인 <code class=\"tui-language-text\">What is the location of your source and test files?</code> 의 대답에만 올바른 경로를 적으면 된다.\n만약 잘못 작성했다면 설정 파일(<code class=\"tui-language-text\">karma.config.js</code>)을 열어서 <code class=\"tui-language-text\">files</code>의 배열의 인자로 실제 경로를 추가하면 된다.</p>\n<p>여기까지 진행했다면 <code class=\"tui-language-text\">sayHello()</code> 함수를 테스트할 수 있는 설정 파일 생성이 끝났다.</p>\n<p>폴더 구조를 다시 보면 아래와 같이 <code class=\"tui-language-text\">karma.config.js</code>가 생성된 것을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">testing/\n  - js/\n    - sayHello.js\n  - package.json\n  - karma.config.js    &lt;- karma-cli로 생성</code></pre></div>\n<h3 id=\"테스트-실행\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"테스트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 실행</h3>\n<p>자 이제는 테스트를 실행해볼 일만 남았다.\n이전에 <code class=\"tui-language-text\">package.json</code>에 작성된 npm script \"<strong>test</strong>\" 로 테스트를 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm run test</code></pre></div>\n<p>아마 터미널에서 다음과 같은 콘솔이 한 줄씩 차례차례 나오면서 방금 전 설정해놓은 크롬 브라우저가 뜰 것이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/7088720/29802475-606e4aac-8cb0-11e7-9d45-35e3799f0c5c.png\" alt=\"4\"></p>\n<p>테스트가 성공했다는 녹색의 텍스트가 반갑다. :)</p>\n<p>하지만, karma가 테스트 완료 후에도 종료되지 않는 점이 의문일 것이다.\n심지어 소스 파일을 수정 후 저장함과 동시에 테스트가 다시 수행되는 것을 발견할 수 있다.\n이는 개발 도중에는 실시간으로 수정된 코드가 반영되고 지속적으로 테스트가 수행되어 이점일 수 있겠지만 CI와 같은 환경에서는 한 번만 수행되어야 할 것이다.</p>\n<p>Karma의 설정 파일에서 파일들의 수정을 감지할 것인지, 지속적으로 테스트를 수행할 것인지 결정할 수 있다.\n아래의 <code class=\"tui-language-text\">karma.config.js</code> 파일을 한번 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// Karma configuration</span>\n<span class=\"token comment\">// Generated on  ~~~</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  config<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span>\n    basePath<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// frameworks to use</span>\n    <span class=\"token comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span>\n    frameworks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jasmine\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// list of files / patterns to load in the browser</span>\n    files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js/*.js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// list of files to exclude</span>\n    exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// preprocess matching files before serving them to the browser</span>\n    <span class=\"token comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span>\n    preprocessors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// test results reporter to use</span>\n    <span class=\"token comment\">// possible values: 'dots', 'progress'</span>\n    <span class=\"token comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span>\n    reporters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"progress\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// web server port</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">9876</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// enable / disable colors in the output (reporters and logs)</span>\n    colors<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// level of logging</span>\n    <span class=\"token comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>\n    logLevel<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG_INFO</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// enable / disable watching file and executing tests whenever any file changes</span>\n    autoWatch<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// start these browsers</span>\n    <span class=\"token comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span>\n    browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Chrome\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Continuous Integration mode</span>\n    <span class=\"token comment\">// if true, Karma captures browsers, runs the tests and exits</span>\n    singleRun<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Concurrency level</span>\n    <span class=\"token comment\">// how many browser should be started simultaneous</span>\n    concurrency<span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아마 현재 설정된 파일과 경로명이 다른 것 말고는 차이가 없을 것이다.\n테스트 수행이 끝난 뒤 Karma와 브라우저가 종료되게 설정하려면, 파일 하단의 <code class=\"tui-language-text\">singleRun</code>을 <code class=\"tui-language-text\">true</code>로 변경하면 된다.\n아까부터 계속 실행 중인 Karma 프로세스를 종료하고 다시 실행하면 테스트 수행이 완료된 후 Karma와 실행된 Chrome 프로세스는 자동 종료될 것이다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>로컬 환경에 자바스크립트 테스트 환경을 구축하여 테스트를 하는 과정은 여기까지이다.\n위의 단계에서 조금 더 나아가면 다중 모듈을 번들링 하는 과정을 추가하고, 테스트를 수행하기 전에 <a href=\"https://eslint.org/\">ESLint</a> 등의 정적 분석 도구가 실행되게 설정할 수도 있다.</p>\n<p>다음에 다룰 <code class=\"tui-language-text\">원격지의 테스트 서버에 Karma 테스트 환경 구축하기</code> 글에서 다양한 환경의 브라우저에서 테스트를 수행하는 방법과 FE개발랩에서 실제 사용하는 테스트 환경을 그대로 소개할 예정이다.</p>\n<p>테스트를 생활화합시다!</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li>Node.js - <a href=\"https://nodejs.org/\">https://nodejs.org/</a></li>\n<li>Karma - <a href=\"https://karma-runner.github.io/\">https://karma-runner.github.io/</a></li>\n<li>Jasmine - <a href=\"https://jasmine.github.io/\">https://jasmine.github.io/</a></li>\n<li>테스트 환경 선호도 차트 - <a href=\"https://stateofjs.com/2016/testing/\">https://stateofjs.com/2016/testing/</a></li>\n<li>ESLint - <a href=\"https://eslint.org/\">https://eslint.org/</a></li>\n</ul>","frontmatter":{"id":"ko_20170825","title":"Front-End 테스트 환경 1) 간단하게 테스트 환경 구축하기","description":"이 글에서는 간단하게 Front-End 테스트 환경을 구축하는 방법에 대해 공유하고자 한다. 참고) 본 글은 Karma 설정과 Jasmine의 API에 대해서는 깊게 다루지 않는다. 우선 Front-End 테스트를 실행할 수 있는 환경을 빠르게 구축함을 목적으로 작성되었다. 자세한 API와 설정에 대해서는 글 최하단의 참조의 각 Github Page에서 확인할 수 있다.","date":"2017.08.25","author":"박정환","tags":["test"],"thumbnail":"https://user-images.githubusercontent.com/7088720/29802469-5b1a2904-8cb0-11e7-8082-5160a8c4246f.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170825","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}