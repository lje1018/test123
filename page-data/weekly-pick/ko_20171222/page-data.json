{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20171222","result":{"data":{"post":{"html":"<h1 id=\"웹-워드프로세서-기초-만들어-보기1\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C-%EA%B8%B0%EC%B4%88-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B01\" aria-label=\"웹 워드프로세서 기초 만들어 보기1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드프로세서 기초 만들어 보기(1)</h1>\n<p>웹 워드프로세서(이하 웹 워드)분야는 생각보다 오래된 역사를 가지고 있다. 구글 독스가 2006년에 소개되면서 많이 알려졌으니 벌써 십여 년의 역사가 있는 소프트웨어 분야이다. 씽크프리는 자바 애플릿 기반으로 브라우저에서 구동되는 웹 워드를 표방했지만, 자바스크립트와 같은 웹 언어로 작성되지 않았기 때문에 웹 워드라고 보기는 어렵다. 네이티브 워드프로세서는 각 OS를 기반으로 독자적인 그래픽 툴킷과 C++이나 자바와 같은 프로그래밍 언어로 구현되어 있다. 반면에 웹 워드는 브라우저에서 구동되기 때문에 지원되는 브라우저만 있으면 어느 컴퓨터에서나 문서 편집을 할 수 있는 장점이 있다.</p>\n<p>이 글은 웹 워드를 만드는 기본 원리를 소개한다.</p>\n<h2 id=\"웹-워드의-필요성과-종류\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1%EA%B3%BC-%EC%A2%85%EB%A5%98\" aria-label=\"웹 워드의 필요성과 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드의 필요성과 종류</h2>\n<p>우선 웹 워드가 필요한 이유와 웹 워드로 부를 수 있는 기준, 그리고 그 기준에 부합되는 웹 워드의 종류를 알아보자.</p>\n<h3 id=\"웹-워드의-필요성\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"웹 워드의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드의 필요성</h3>\n<p>웹의 큰 장점은 브라우저만 있으면 OS를 가리지 않고 원하는 콘텐츠를 표현할 수 있다는 것이다. 하지만 문서를 편집할 때는 대부분 특정 OS나 소프트웨어, 특정 문서 포맷을 써야 한다는 제약 사항이 있었다. 특히 한국에서는 Windows 기반의 마이크로소프트 오피스와 한컴오피스가 대표적으로 사용되고 있다. 문서 포맷으로는 DOC, HWP 등이 대표적이다. 하지만 이러한 문서 형식을 지원하는 OS가 없거나 이들 소프트웨어가 설치된 컴퓨터가 없으면 아예 문서를 편집할 수 없다는 단점이 있다. 문서를 편집하기 위해 Word나 한컴오피스를 구매해야 할 수도 있다.</p>\n<p>요즘은 웹 기술의 발달로 웹으로 할 수 있는 것이 많아지고 있다. 웹 워드는 브라우저가 지원된다면 어떤 OS에서도 구동될 수 있고, 특정 오피스 소프트웨어가 설치되어 있지 않은 컴퓨터에서도 문서를 작성할 수 있다. 문서는 HTML, 자바스크립트, SVG, Canvas 등의 웹 프로그래밍 언어로 표현되므로 사용자는 실제로 문서 형식이 무엇인지 알 필요가 없다.</p>\n<h3 id=\"웹-워드의-분류-기준\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%EC%9D%98-%EB%B6%84%EB%A5%98-%EA%B8%B0%EC%A4%80\" aria-label=\"웹 워드의 분류 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드의 분류 기준</h3>\n<p>네이티브 워드프로세서 기준으로 비추어 보았을 때, 나는 웹 워드 또한 문서의 쪽을 표현하는 기능과 편집 기능이 중요하다고 생각한다. 네이티브 워드프로세서로 문서 작성을 하던 사용자들이 웹 워드를 사용할 때 가장 이질적으로 생각하는 부분이 쪽을 표현하는 기능이기 때문에 세운 기준이다. 우리가 교육을 받으면서 경험한 대부분 문서(시험지 포함)나 관공서, 기업에서 사용하는 문서는 그것이 디지털 문서임에도 불구하고 책에서 비롯되었기 때문인지 쪽 표현 들어간 문서가 매우 많다. 이들 문서는 쪽 표현 및 편집 기능을 제공하는 워드프로세서로 작성되었다.</p>\n<h3 id=\"쪽-표현-및-편집을-지원하는-웹-워드들\" style=\"position:relative;\"><a href=\"#%EC%AA%BD-%ED%91%9C%ED%98%84-%EB%B0%8F-%ED%8E%B8%EC%A7%91%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%9B%B9-%EC%9B%8C%EB%93%9C%EB%93%A4\" aria-label=\"쪽 표현 및 편집을 지원하는 웹 워드들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쪽 표현 및 편집을 지원하는 웹 워드들</h3>\n<p>나는 웹 워드를 개발하면서 구글 독스, 씽크프리를 인수한 한컴 넷피스를 비롯하여 쪽 표현 및 편집을 지원하는 웹 워드를 벤치마킹했다. 이들은 많은 기능을 제공하고 있지만 아직 불편한 점이 많다.</p>\n<ul>\n<li><a href=\"https://www.google.com/intl/ko_KR/docs/about/\">구글 독스</a> - 구글에서 검색을 해보면 kix라는 엔진을 사용하는 것으로 보이는데, 오픈소스화되지는 않았다. [<a href=\"https://www.quora.com/How-does-Google-Docs-work\">관련 내용</a>]</li>\n<li><a href=\"https://www.zoho.com/writer/\">Zoho Writer</a> - 외국 소프트웨어는 한글 입력이 안 되거나 입력부분 영역이나 커서가 밑으로 쳐진다든지 하는 어색함이 있다.</li>\n<li><a href=\"https://personal.onlyoffice.com\">ONLYOFFICE</a></li>\n<li><a href=\"http://office.naver.com/\">네이버오피스</a></li>\n<li><a href=\"https://www.hancom.com/product/productOfficeMain.do\">한컴 넷피스</a> - 현재 크롬만 지원된다.</li>\n<li><a href=\"https://www.polarisoffice.com/ko/web-editor\">폴라리스 웹 에디터</a> - 주로 공공에서 사용되며 민간에서는 보기 힘든 웹 워드이다.</li>\n</ul>\n<p>웹으로 워드를 구현하기 위해서는 여러 가지 구현 이슈들이 있다. 그것은 문서의 포맷 변환을 제외하고라도 아래와 같이 문서를 표현할 때 다소 구현이 어려운 것들이다.</p>\n<h3 id=\"구현에-고려할-사항들\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84%EC%97%90-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%82%AC%ED%95%AD%EB%93%A4\" aria-label=\"구현에 고려할 사항들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현에 고려할 사항들</h3>\n<ul>\n<li>쪽 표현 및 쪽 표현을 지원하는 편집 기능 구현의 복잡성</li>\n<li>커서 제어 및 복잡한 DOM 조작</li>\n<li>다국어 지원 및 다양한 폰트 제공의 어려움</li>\n<li>\n<p>문서를 네이티브 워드프로세서와 같이 비슷하게 표현하기</p>\n<ul>\n<li>줄 간격</li>\n<li>문단 간격</li>\n<li>웹상에서 줄 및 문단의 세로 맞춤(Top, Middle, Bottom)의 표현 차이점</li>\n<li>브라우저마다 다른 폰트 렌더링</li>\n<li>각종 CSS(브라우저 렌더링 엔진)와 특정 문서 포맷의 표현 차이</li>\n</ul>\n</li>\n</ul>\n<p>그렇기 때문에 생각보다 많은 기능을 지원하지만, 생각보다 아직 불편하다. 네이티브 워드프로세서와의 문서 표현 차이는 문서의 내용보다 문서의 표현을 더욱 중요하게 생각하는 사용자나 조직 문화에서는 더욱 크게 부각된다. ODF(<a href=\"https://ko.wikipedia.org/wiki/%EC%98%A4%ED%94%88%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8\">Open Document Format</a>)의 ODT(Open Document Text-ODF의 문서포맷)는 오히려 문서의 내용에 충실한 스펙으로 보이며 이를 구현한 소프트웨어에서 문서 표현은 조금씩 다르기도 하다. 그 문서 표현의 중심에는 문서의 쪽 표현 기능과 편집 기능이 있다.</p>\n<p>웹 워드를 만들기 위해서도 쪽을 표현하고 편집하는 기능이 필수적이라고 보고 기본적인 구현 원리에 대해서 알아본다.</p>\n<h2 id=\"웹-워드의-구현\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-label=\"웹 워드의 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드의 구현</h2>\n<p>앞서 말했듯이 웹 워드의 핵심 기준과 첫걸음은 쪽 표현과 편집 기능이라고 생각한다. 왜냐하면 콘텐츠의 입력, 삭제, 삽입, 붙여넣기, 이미지, 표 기능 등의 구현을 하고 난 후에 쪽 관련 기능을 구현하면, 많은 부분들을 쪽 표현에 맞춰서 새로 구현해야 했기 때문이다.</p>\n<p>그리고 또 중요하게 선택해야 할 것은 글자 입력 및 표현 방법을 선택하는 것이다.</p>\n<h3 id=\"contenteditable\" style=\"position:relative;\"><a href=\"#contenteditable\" aria-label=\"contenteditable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contentEditable</h3>\n<p>글자의 입력과 문서의 표현을 Canvas로 표현한 <a href=\"https://github.com/danielearwicker/carota\">에디터</a>도 있고 <a href=\"http://webodf.org/\">WebODF</a>의 <a href=\"http://www.webodf.org/demo/ci/wodotexteditor-0.5.9/localeditor.html\">ODT Editor</a>처럼 SVG를 사용할 수도 있다. HTML을 사용하지만 커서의 입력 기능과 커서 렌더링을 따로 구현하는 <a href=\"https://github.com/nhn/tui.editor\">Toast UI Editor</a>도 있다. contentEditable은 말도 많고 탈도 많은 기능이지만 누가 뭐래도 가장 빠르게 편집 기능을 지원할 수 있는 방법이다.</p>\n<h4 id=\"contenteditable의-장점\" style=\"position:relative;\"><a href=\"#contenteditable%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"contenteditable의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contentEditable의 장점</h4>\n<p>장점은 다음과 같다.</p>\n<ul>\n<li>어느 정도 수준의 기능까지는 빠르게 구현이 가능하다.</li>\n<li>브라우저의 입력 체계를 활용할 수 있다. 특히 영어를 제외한 조합 입력이 필요한 아시아권 언어를 지원해야 하는 경우 유리하다.</li>\n<li>브라우저의 커서 컨트롤 활용, 방향키, Home/End, PageUp/PageDown, Del, 커서 렌더링을 활용할 수 있다.</li>\n<li>브라우저의 복사 붙여 넣기 기능을 활용할 수 있다.</li>\n</ul>\n<h4 id=\"contenteditable의-단점\" style=\"position:relative;\"><a href=\"#contenteditable%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"contenteditable의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contentEditable의 단점</h4>\n<p>단점은 브라우저의 구현에 의존하기 때문에 생긴다.</p>\n<ul>\n<li>브라우저별로 폰트 표현과 CSS 박스 표현이 미세하게 다를 수 있다.(IE11의 경우 폰트 9가 폰트 10보다 크게 보이는 기이한 경우도 발생하고 자간의 표현이 다른 브라우저보다 더 좁게 표현되는 폰트도 있다.)</li>\n<li>관련 버그가 있을 경우 해당 브라우저가 패치해줄 때까지 방법이 없는 경우가 많다(IE11 이하의 경우는 지원이 중단된 상태이고, 버그 리포트가 올라오고 심지어 패치가 되었음에도 Edge에만 반영되고 있다.)</li>\n<li>div block 태그의 경우 contentEditable 속성이 지정되면 Resize Handler 테두리가 생기기 때문에 자연스럽지 않게 보인다. Resize Handler가 보이지 않도록 처리해 주어야 하지만 은근히 까다롭고 딱히 정해진 방법도 찾기가 어렵다.(테스트해 본 브라우저는 IE11, Firefox이며, 특히 IE11에서 contentEditable 속성을 넣고 빼고 하다가 보면 제거했던 Resize Handler가 다시 나타나는 경우가 종종 있다.)</li>\n</ul>\n<h3 id=\"html에서-쪽-표현-방법\" style=\"position:relative;\"><a href=\"#html%EC%97%90%EC%84%9C-%EC%AA%BD-%ED%91%9C%ED%98%84-%EB%B0%A9%EB%B2%95\" aria-label=\"html에서 쪽 표현 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML에서 쪽 표현 방법</h3>\n<p>여기서는 HTML을 쪽의 표현 도구로 설명한다. HTML은 보통 세로 방향으로 연결되어 길게 표현되는 문서이다. A4용지와 같은 종이의 개념으로 문서를 표현하지는 않는다. page-break-before, page-break-after와 같은 기능은 출력할 때와 <code class=\"tui-language-text\">쪽 나누기</code>와 같은 기능을 구현할 때는 매우 유용하지만 쪽을 표현하는데 쓰기는 어렵다.</p>\n<p>그러면 쪽 표현 기능의 간단한 요구사항을 정의해보자.</p>\n<ul>\n<li>문단이 쪽 사이에 걸치는 경우 문단을 줄 단위로 나누어 이전과 다음 쪽에 나누어 표현할 수 있다.</li>\n<li>글자 입력/삭제를 하면서 실시간으로 쪽 표현이 된다.</li>\n</ul>\n<p>이 요구 사항을 기반으로 HTML 문서를 쪽으로 나누는 단계(이른바 페이지 레이아웃)를 알아보자.</p>\n<h4 id=\"쪽-사이에-걸쳐진-문단을-나누는-단계\" style=\"position:relative;\"><a href=\"#%EC%AA%BD-%EC%82%AC%EC%9D%B4%EC%97%90-%EA%B1%B8%EC%B3%90%EC%A7%84-%EB%AC%B8%EB%8B%A8%EC%9D%84-%EB%82%98%EB%88%84%EB%8A%94-%EB%8B%A8%EA%B3%84\" aria-label=\"쪽 사이에 걸쳐진 문단을 나누는 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쪽 사이에 걸쳐진 문단을 나누는 단계</h4>\n<p>페이지 레이아웃은 아래와 같은 단계로 접근할 수 있다.\n먼저 내용이 표현될 공간을 위해 쪽 높이와 쪽 여백을 정의한다.(A4용지의 경우 210mm x 297mm이며 상하좌우 여백을 제외한 크기가 실제 문서가 표현될 크기이다. DOM에서 페이지 Container를 위한 태그가 있어야 한다고 전제하고 설명한다.)</p>\n<ol>\n<li>n번째 페이지 Container 태그 내부에 전체 html 콘텐츠를 넣는다.(n은 1부터 시작한다.)</li>\n<li>n번째 쪽 내부의 block 타입의 태그를 위에서부터 순차적으로 탐색하면서 \"쪽의 bottom &#x3C; block의 bottom\"인 첫 태그를 찾는다. 없으면 종료한다.</li>\n<li>찾은 block 태그는 쪽에 걸쳐서 표현되어야 하므로 block을 줄 단위로 나눈다</li>\n<li>나누어진 줄을 위에서부터 순차적으로 탐색하면서 \"쪽의 bottom &#x3C; 줄의 bottom\"인 첫 줄을 찾는다.</li>\n<li>찾은 줄을 기준으로 block을 분리하여 block-1, block-2로 만든다.</li>\n<li>n + 1의 페이지 Container 태그를 만든다.</li>\n<li>block-2부터 이후 모든 태그를 n + 1번째 페이지 Container 태그로 이동한다.</li>\n<li>2의 단계를 반복한다.</li>\n</ol>\n<h4 id=\"문단을-줄로-나누는-단계\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%8B%A8%EC%9D%84-%EC%A4%84%EB%A1%9C-%EB%82%98%EB%88%84%EB%8A%94-%EB%8B%A8%EA%B3%84\" aria-label=\"문단을 줄로 나누는 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문단을 줄로 나누는 단계</h4>\n<ol>\n<li>문단(block 태그)의 글자 하나하나씩 span 태그로 감싼다. (Text 노드만으로는 글자의 좌표를 파악할 수 없으므로 태그로 감싸야 한다.)</li>\n<li>태그로 감싼 글자들을 순차적으로 돌면서 \"n번째 글자의 bottom &#x3C; n+1번째 글자의 top\"인 글자를 찾는다.</li>\n<li>n + 1번째 글자를 개행된 줄로 처리한다.</li>\n<li>2번을 반복하여 문단을 모든 줄로 나눈다.</li>\n<li>각 줄에서 가장 큰 bottom을 찾는다.</li>\n<li>[쪽 사이에 걸쳐진 문단을 나누는 단계]의 4번 단계에서 각 줄의 bottom을 사용한다.</li>\n<li>삽입한 span 태그를 모두 제거하여 원래 문단(block 태그)로 되돌린다.</li>\n</ol>\n<p>페이지 레이아웃을 수행하면 아래와 같이 문서를 쪽 형태로 표현한 웹 워드 형태로 화면이 구성된다.</p>\n<p>(예시는 폴라리스 웹 에디터를 사용한 페이지 레이아웃 데모 화면이다. 마크다운으로 작성된 글이 7쪽에 걸쳐서 레이아웃 되었다.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/34342161-cd68d96e-e9ea-11e7-946b-8e097fdc50b4.png\" alt=\"image\"></p>\n<h3 id=\"다시-페이지-레이아웃-수행이-필요한-이벤트\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%8B%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%88%98%ED%96%89%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"다시 페이지 레이아웃 수행이 필요한 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다시 페이지 레이아웃 수행이 필요한 이벤트</h3>\n<p>위에서 설명한 페이지 레이아웃을 수행해야 하는 여러 가지 편집 동작들이 있다. 예를 들면,</p>\n<ul>\n<li>글자를 포함한 내용(이미지, 글상자, 표 등)의 입력, 삭제(붙여넣기 포함)</li>\n<li>글자를 포함한 내용의 스타일 변경(글자 크기, 폰트, 문단/줄 간격 변경, 글머리 기호, 들여쓰기, 내어쓰기 등)</li>\n<li>쪽 모양 편집(용지의 가로/세로, 용지 크기 변경)</li>\n<li>쪽 나누기 표시 삽입/삭제</li>\n</ul>\n<p>이 이벤트들이 발생되면 페이지 레이아웃을 수행 해야 한다.</p>\n<h2 id=\"성능\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5\" aria-label=\"성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능</h2>\n<p>웹 워드에서 쪽 표현 및 편집 기능을 탑재하고 있는 제품이 생각보다 많지 않은데, 그 이유 중 하나가 바로 성능이다. 위와 같은 원리로 쪽 표현을 하게 될 경우 브라우저가 연산해야 할 DOM 조작, 레이아웃이 매우 많아진다. 특히 문단을 줄로 나누는 과정에서 글자 하나하나마다 span 태그로 감싸주었는데 DOM 조작의 양이 매우 많다. 그리고 브라우저의 레이아웃 결과까지 받아서 글자의 좌푯값을 사용해야 하므로 비용이 매우 큰 작업이다. 이 과정을 타이핑할 때마다 수행해야 한다고 생각해보면 만만찮은 과정이라는 것을 직감할 것이다.</p>\n<p>많은 웹 워드프로세스를 테스트해 본 것은 아니지만, 보통의 경우에 이런 식으로 구현한 경우 한 글자 한 글자 타이핑이 느리다는 느낌을 많이 받을 것이다. 입력한 내용이 많으면 많을수록 더 느리다. 구글 독스도 단순히 글자만 있는 내용으로 테스트해 봤을 때 10쪽이 넘어가면 쓰기가 조금씩 어려워진다는 느낌을 받았다.</p>\n<p>브라우저의 연산을 줄이기 위한 방법 중에 두 가지 팁을 소개한다.</p>\n<ol>\n<li>변경이 일어난 쪽과 문단(block 태그) 이후의 태그들을 대상으로만 다시 계산한다.</li>\n<li>쪽 나누기가 삽입된 경우는 해당 쪽 이전 쪽까지만 계산한다.</li>\n</ol>\n<p>성능을 고려하면서 구현할 때 또 주의해야 할 점은 자바스크립트 최적화 기법을 최대한 활용하라는 것이다. 그리고 브라우저 강제 레이아웃 유발을 최소화해야 한다. <a href=\"/test123/fe-guide/ko_ANTI-PATTERN\">안티패턴</a>을 익혀 성능을 저해하는 것을 코드들을 제거하자. <a href=\"/test123/ko_PERFORMANCE#%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EA%B3%BC-%EB%A6%AC%ED%8E%98%EC%9D%B8%ED%8A%B8\">레이아웃 혹은 리플로우</a>의 개념을 이해하고 불필요한 레이아웃이 일어나지 않도록 해야 한다. 아시다시피 DOM의 특정 프로퍼티들은 읽기만 하여도 강제 레이아웃이 일어난다.</p>\n<h2 id=\"다음-글에서는\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%8C-%EA%B8%80%EC%97%90%EC%84%9C%EB%8A%94\" aria-label=\"다음 글에서는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음 글에서는</h2>\n<p>다음 글에서는 실제 코드를 통해 간단한 쪽 표현과 편집 기능을 구현하는 방법을 소개한다. contentEditable을 사용하여 쪽의 편집 기능을 구현하는 방법과 문서의 내용 변경(글자 삽입, 삭제 등)의 이벤트 후에 다시 페이지 레이아웃을 하는 과정까지 소개할 할 것이다.</p>\n<h2 id=\"웹-워드의-흐름\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%EC%9D%98-%ED%9D%90%EB%A6%84\" aria-label=\"웹 워드의 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드의 흐름</h2>\n<p>WebGL, WebAssembly, HTML5의 File, DB 등의 많은 API들의 등장을 보면, 웹을 하나의 플랫폼으로 보고 전통적으로 하던 업무와 기능, 서비스들을 웹에서 처리하려고 하고 있다. 그리고 계속 발전 중이다. 네이티브 워드프로세서에서 웹 워드로 옮겨 가는 것도 그 일환이라고 볼 수 있다. 크롬북처럼 아예 네이티브 워드프로세서는 없고 구글독스를 통한 웹 워드만 제공하는 환경도 있다.</p>\n<p>한국에서도 이러한 흐름은 지속적으로 나타나고 있다. 그리고 관공서를 중심으로 ActiveX 기반의 네이티브 워드프로세서를 비표준으로 정의하면서 웹 워드를 도입하려고 애쓰고 있는 중이다. 그러나 문서의 내용보다는 표현에 더욱 비중을 두는 한국 사용자들의 정서를 생각하면 웹 워드는 이제 시작 단계가 아닌가 생각한다. 프론트엔드 개발자가 여기에 기여할 수 있는 것들이 많다.</p>\n<p>특히 한국 시장에서 IE11이하의 사용이 거의 없어지고 Edge로 넘어간다면 네이티브 워드프로세서에서 웹 워드로의 흐름은 더욱 빨라지지 않을까 생각한다.</p>","frontmatter":{"id":"ko_20171222","title":"웹 워드프로세서 기초 만들어 보기(1)","description":"웹 워드프로세서(이하 웹 워드)분야는 생각보다 오래된 역사를 가지고 있다. 구글 독스가 2006년에 소개되면서 많이 알려졌으니 벌써 십여 년의 역사가 있는 소프트웨어 분야이다. 씽크프리는 자바 애플릿 기반으로 브라우저에서 구동되는 웹 워드를 표방했지만, 자바스크립트와 같은 웹 언어로 작성되지 않았기 때문에 웹 워드라고 보기는 어렵다. 네이티브 워드프로세서는 각 OS를 기반으로 독자적인 그래픽 툴킷과 C++이나 자바와 같은 프로그래밍 언어로 구현되어 있다. 반면에 웹 워드는 브라우저에서 구동되기 때문에 지원되는 브라우저만 있으면 어느 컴퓨터에서나 문서 편집을 할 수 있는 장점이 있다.","date":"2017.12.22","author":"유동식","tags":["etc"],"thumbnail":"https://user-images.githubusercontent.com/26706716/36352920-edac2db4-1502-11e8-88f8-7bf585c9d719.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20171222","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}