{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20180216","result":{"data":{"post":{"html":"<h1 id=\"웹-워드프로세서-기초-만들어-보기2\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%9B%8C%EB%93%9C%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C-%EA%B8%B0%EC%B4%88-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B02\" aria-label=\"웹 워드프로세서 기초 만들어 보기2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 워드프로세서 기초 만들어 보기(2)</h1>\n<p>웹 워드프로세서(이하 웹 워드)는 브라우저만 있으면 어디서나 문서 편집을 할 수 있다는 장점이 있어 매력적인 소프트웨어이다. 아직 네이티브 워드프로세서로 할 수 있는 모든 기능을 다 지원하는 것은 아니지만 가까운 미래에는 가능하리라고 믿는다. 2년 동안 웹 워드를 만드는 동안 가능성을 믿고 험난한 과정을 헤쳐 나갔고, 기능을 구현해 나갈 때마다 느꼈던 흥분과 희열은 아직도 강하게 남아있다. 이 글을 읽는 여러분 또한 그런 느낌을 받게 되기를 소망한다.</p>\n<p><a href=\"/test123/weekly-pick/ko_20171222\">지난 글</a>에는 웹 워드의 분류 기준과 쪽 표현의 필요성 및 복잡성, contentEditable, 그리고 HTML에서 쪽을 표현하고 레이아웃을 하는 원리에 관해서 설명하였다. 이번 글에는 이어서 실제 코드를 보면서 간단한 쪽 표현과 편집 기능을 구현하는 방법에 대해 나눈다.</p>\n<h2 id=\"구현-요구-사항\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\" aria-label=\"구현 요구 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 요구 사항</h2>\n<p>지난 글에서 언급했듯이 쪽 표현 기능의 간단한 요구 사항은 아래와 같다.</p>\n<ul>\n<li>문단이 쪽 사이에 걸칠 경우 문단을 줄 단위로 나누어 이전과 다음 쪽에 표현할 수 있다.</li>\n<li>글자 입력/삭제를 하면서 실시간으로 쪽 표현이 된다.</li>\n</ul>\n<p>표의 경우 더 많은 구현과 고려가 필요하다. 여기서 내용은 텍스트를 기준으로 작성한다. CSS로 보면 <code class=\"tui-language-text\">display: inline</code>으로 처리되는 엘리먼트가 레이아웃 대상이다.</p>\n<h2 id=\"자-이제-시작해볼까\" style=\"position:relative;\"><a href=\"#%EC%9E%90-%EC%9D%B4%EC%A0%9C-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%BC%EA%B9%8C\" aria-label=\"자 이제 시작해볼까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자, 이제 시작해볼까</h2>\n<p>지난 글에서 쪽을 레이아웃하기 위한 각 단계를 설명하였다. 이 과정은 아래와 같은 순서로 이루어진다.</p>\n<ul>\n<li><a href=\"/test123/weekly-pick/ko_20171222/#%EC%AA%BD-%EC%82%AC%EC%9D%B4%EC%97%90-%EA%B1%B8%EC%B3%90%EC%A7%84-%EB%AC%B8%EB%8B%A8%EC%9D%84-%EB%82%98%EB%88%84%EB%8A%94-%EB%8B%A8%EA%B3%84\">쪽 사이에 걸쳐진 문단을 나누는 단계</a></li>\n<li><a href=\"/test123/weekly-pick/ko_20171222/#%EB%AC%B8%EB%8B%A8%EC%9D%84-%EC%A4%84%EB%A1%9C-%EB%82%98%EB%88%84%EB%8A%94-%EB%8B%A8%EA%B3%84\">문단을 줄로 나누는 단계</a></li>\n<li><a href=\"/test123/weekly-pick/ko_20171222/#%EB%8B%A4%EC%8B%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%88%98%ED%96%89%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8\">다시 쪽 레이아웃 수행이 필요한 이벤트 처리</a></li>\n</ul>\n<p>각 단계를 실제로 코드에서 구현해 보자.</p>\n<h3 id=\"쪽-사이에-걸쳐진-문단을-나누는-단계\" style=\"position:relative;\"><a href=\"#%EC%AA%BD-%EC%82%AC%EC%9D%B4%EC%97%90-%EA%B1%B8%EC%B3%90%EC%A7%84-%EB%AC%B8%EB%8B%A8%EC%9D%84-%EB%82%98%EB%88%84%EB%8A%94-%EB%8B%A8%EA%B3%84\" aria-label=\"쪽 사이에 걸쳐진 문단을 나누는 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쪽 사이에 걸쳐진 문단을 나누는 단계</h3>\n<p>쪽은 쪽 여백을 가지고 있고 쪽 여백을 제외한 영역부터 글자를 입력할 수 있다. 그러므로 실제로 내용이 쪽에 들어갈 곳은 쪽 여백을 제외한 영역이다. 아래 코드에서부터 <code class=\"tui-language-text\">class=&quot;page-body&quot;</code>를 가지는 엘리먼트이며 <code class=\"tui-language-text\">pageBodyElement</code>라고 부르겠다.</p>\n<p>A4 용지의 종이 크기는 <code class=\"tui-language-text\">210mm X 297mm</code>인데, 글에서 그림으로 표현하기에는 다소 크므로 편의상 크기를 <code class=\"tui-language-text\">150mm X 80mm</code>로 한다.</p>\n<p>아래와 같이 쪽을 표현하기 위한 HTML을 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n  <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10mm<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>245<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>170mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>110mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n    <span class=\"token attr-name\">data-page-number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n    <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20mm 10mm<span class=\"token punctuation\">;</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0px 0px 10mm<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150mm<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 70mm<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-body<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">contenteditable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n      <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px dashed black<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"pagebodyelement-설정\" style=\"position:relative;\"><a href=\"#pagebodyelement-%EC%84%A4%EC%A0%95\" aria-label=\"pagebodyelement 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pageBodyElement 설정</h4>\n<p><code class=\"tui-language-text\">pageBodyElement</code>는 <code class=\"tui-language-text\">contentEditable=&quot;true&quot;</code>를 설정하여 편집이 가능한 상태로 만들었고 <code class=\"tui-language-text\">style=&quot;outline: 0px;&quot;</code>으로 편집 상태가 되었을 때 표시되는 테두리를 제거하였다. 내부에는 문단을 표현하기 위해서는 <code class=\"tui-language-text\">p</code>태그를 사용하였고 빈 문단인 경우 커서 표시를 위하여 bogus(<code class=\"tui-language-text\">br</code>태그)를 추가하였다.</p>\n<p>가장 단순한 형태의 문서 편집기가 만들어졌다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/36352750-2291c234-1501-11e8-9544-6170b6506a10.gif\" alt=\"2018-02-18 23_10_39\"></p>\n<h4 id=\"쪽에서-넘치는-문단을-다음-쪽으로-넘겨보자\" style=\"position:relative;\"><a href=\"#%EC%AA%BD%EC%97%90%EC%84%9C-%EB%84%98%EC%B9%98%EB%8A%94-%EB%AC%B8%EB%8B%A8%EC%9D%84-%EB%8B%A4%EC%9D%8C-%EC%AA%BD%EC%9C%BC%EB%A1%9C-%EB%84%98%EA%B2%A8%EB%B3%B4%EC%9E%90\" aria-label=\"쪽에서 넘치는 문단을 다음 쪽으로 넘겨보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쪽에서 넘치는 문단을 다음 쪽으로 넘겨보자</h4>\n<p>이 상태에서 내용을 많이 넣은 경우 아래 그림처럼 내용이 넘쳐 나오게 된다.\n<img src=\"https://user-images.githubusercontent.com/26706716/36352920-edac2db4-1502-11e8-88f8-7bf585c9d719.png\" alt=\"image\"></p>\n<p>쪽 표현을 하는 워드 프로세서가 아니라면 단순히 <code class=\"tui-language-text\">overflow-y: hidden</code>이나 <code class=\"tui-language-text\">overflow-y: scroll</code>을 지정하면 되겠지만, 우리의 목표는 그것이 아니므로 한 단계 더 발전시켜보자.</p>\n<p>가장 간단하게 설명하자면 1쪽에서 쪽보다 큰 값의 bottom을 가지는 모든 문단을 찾아 다음 쪽으로 옮기는 것이다.</p>\n<p><strong>첫 번째</strong>로 할 일은 넘치는 문단이 있는지를 찾는 것(<code class=\"tui-language-text\">_findExceedParagraph()</code>)부터이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Find a first exceed paragraph\n * @param {HTMLElement} pageBodyElement - page body element\n * @param {number} pageBodyBottom - page bottom\n * @returns {HtmlElement} a first exceed paragraph\n */</span>\n<span class=\"token function\">_findExceedParagraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> paragraphs <span class=\"token operator\">=</span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> paragraphBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageBodyBottom <span class=\"token operator\">&lt;</span> paragraphBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> paragraph<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 보면 알겠지만 여기서는 단순히 <code class=\"tui-language-text\">p</code>태그만을 문단으로 처리하고 있다. 블럭-레벨 엘리먼트의 종류는 더 많으므로 <a href=\"https://developer.mozilla.org/ko/docs/HTML/Block-level_elements\">MDN</a>을 참고하여 추가하자.</p>\n<p><strong>두 번째</strong>로 할 일은 넘치는 모든 문단을 찾아서(<code class=\"tui-language-text\">_getExceedAllParagraphs()</code>) 다음 쪽으로 옮기는 것(<code class=\"tui-language-text\">_insertParagraphsToBodyAtFirst()</code>)이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Get all exceed paragraphs\n * @param {HTMLElement} pageBodyElement - page body element\n * @param {number} pageBodyBottom - page bottom\n * @returns {Array.&lt;HTMLElement>} all exceed paragraph array\n */</span>\n<span class=\"token function\">_getExceedAllParagraphs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> paragraphs <span class=\"token operator\">=</span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> exceedParagraphs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> paragraphBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageBodyBottom <span class=\"token operator\">&lt;</span> paragraphBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            exceedParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Remain a bigger paragraph than page height.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paragraphs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> exceedParagraphs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        exceedParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> exceedParagraphs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 한 가지 주의할 것은 <code class=\"tui-language-text\">_getExceedAllParagraphs()</code>함수 내에서 하나의 문단이 쪽 높이보다 큰 경우를 처리하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// Remain a bigger paragraph than page height.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paragraphs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> exceedParagraphs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  exceedParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>첫 번째 문단이 쪽 높이보다 큰 문단일 경우 발생하게 되는데 레이아웃 흐름에서 이 처리를 하지 않으면 무한 쪽 생성을 맛보게 될 것이다. 문단이 쪽보다 높은 것을 그대로 둘 경우 아래와 그림과 같이 여전히 문단이 넘쳐 나오게 되는데, 이는 <code class=\"tui-language-text\">문단을 줄로 나누는 단계</code>에서 해결할 것이다. 실전에서는 큰 크기의 이미지를 포함하는 문단, 높이가 높은 표에서 발생하는 경우가 많은데, 좀 더 고난도의 레이아웃 처리가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Insert paragraphs to body at first\n * @param {HTMLElement} pageBodyElement - page body element\n * @param {Array.&lt;HTMLElement>} paragraphs - paragraph array\n */</span>\n<span class=\"token function\">_insertParagraphsToBodyAtFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageBodyElement<span class=\"token punctuation\">,</span> paragraphs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// merge split paragraphs before.</span>\n        paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paragraph</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> splitParagraphId <span class=\"token operator\">=</span> paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> appended <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>splitParagraphId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> nextParagraph <span class=\"token operator\">=</span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>splitParagraphId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextParagraph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>firstChild<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nextParagraph<span class=\"token punctuation\">;</span>\n                    paragraph<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> nextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> firstChild<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    paragraph<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    appended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>appended<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">,</span> pageBodyElement<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">paragraph</span> <span class=\"token operator\">=></span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">_insertParagraphsToBodyAtFirst()</code>는 넘치는 모든 문단을 다음 쪽으로 옮기는 것인데, 다음 쪽이 빈 경우는 <code class=\"tui-language-text\">pageBodyElement</code>에 간단히 문단을 추가하면 된다. 쪽이 비어 있지 않다면 제일 처음에 문단을 삽입하게 된다. 이때 이전에 분리된 적이 있는 같은 문단은 합치는 과정을 거쳐야 원래 문단이 두 문단으로 보이는 일이 없다.</p>\n<p>하나의 쪽을 레이아웃하게 되면 쪽의 개수가 늘어나게 되고 늘어난 쪽을 대상으로 마지막 쪽까지 레이아웃을 진행해야 한다. 전체 쪽 레이아웃의 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Layout pages\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">_layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> pageNumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pageNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_layoutPage</span><span class=\"token punctuation\">(</span>pageNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">_layout()</code>은 1쪽부터 마지막 쪽까지 쪽 레이아웃을 수행한다. <code class=\"tui-language-text\">_layoutPage()</code>은 위에서 설명한 함수를 사용하여 지정된 쪽을 레이아웃하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Layout a page and return next page number\n * @param {number} pageNumber - page number\n * @returns {Promise} promise\n */</span>\n<span class=\"token function\">_layoutPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageNumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> pageIndex <span class=\"token operator\">=</span> pageNumber <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> totalPageCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">></span> totalPageCount <span class=\"token operator\">||</span> pageNumber <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> pageBodyElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">[</span>pageIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pageBodyBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> exceedParagraph <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_findExceedParagraph</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> insertBodyParagraph <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> allExceedParagraphs<span class=\"token punctuation\">,</span> nextPageBodyElement<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exceedParagraph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            allExceedParagraphs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getExceedAllParagraphs</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">>=</span> totalPageCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_appendPage</span><span class=\"token punctuation\">(</span>insertBodyParagraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            nextPageBodyElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">[</span>pageIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_insertParagraphsToBodyAtFirst</span><span class=\"token punctuation\">(</span>nextPageBodyElement<span class=\"token punctuation\">,</span> allExceedParagraphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>전체 레이아웃이 되는 그림이다. 쪽 레이아웃이 되는 것을 보기 위하여 약간의 딜레이를 주었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/36353801-1337919e-150e-11e8-87df-f9bbf1181a0f.gif\" alt=\"2018-02-19 00_44_29\"></p>\n<h3 id=\"문단을-줄로-나누는-단계\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%8B%A8%EC%9D%84-%EC%A4%84%EB%A1%9C-%EB%82%98%EB%88%84%EB%8A%94-%EB%8B%A8%EA%B3%84\" aria-label=\"문단을 줄로 나누는 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문단을 줄로 나누는 단계</h3>\n<p>이제 쪽 높이보다 높은 문단을 처리할 시간이다. 그림으로 보면 이와 같은 상태이다.\n<img src=\"https://user-images.githubusercontent.com/26706716/36353819-79761476-150e-11e8-8fec-9e299852b19e.png\" alt=\"image\"></p>\n<p>마지막 1줄이 넘쳐있는 것을 볼 수가 있을 것이다. 이전에 언급한 것처럼 Text 노드만으로는 글자의 좌표를 파악할 수 없으므로 모든 글자을 span 태그로 감싸주어 좌표를 알아내야 한다. 여기서 핵심은 두 가지이다. 문단 내의 <code class=\"tui-language-text\">줄을 인식하는 것</code>과 <code class=\"tui-language-text\">쪽을 넘어서는 줄부터 문단을 분리</code>하는 것이다. 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Layout a page and return next page number\n * @param {number} pageNumber - page number\n * @returns {Promise} promise\n */</span>\n<span class=\"token function\">_layoutPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageNumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">let</span> allExceedParagraphs<span class=\"token punctuation\">,</span> nextPageBodyElement<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exceedParagraph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_splitParagraph</span><span class=\"token punctuation\">(</span>exceedParagraph<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            allExceedParagraphs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getExceedAllParagraphs</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">_splitParagraph()</code>가 추가 되었다. 넘치는 문단이 있는 경우 넘치는 줄부터 문단을 둘로 분리하는 것이다. 그 후에 수행되는 <code class=\"tui-language-text\">_getExceedAllParagraphs()</code>에서 분리된 분단도 모두 수집되어 다음 쪽으로 옮겨지게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Split a paragraph to two paragraphs\n * @param {HTMLElement} paragraph - paragraph element\n */</span>\n<span class=\"token function\">_splitParagraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paragraph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> treeWalker <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTreeWalker</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>treeWalker<span class=\"token punctuation\">.</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> treeWalker<span class=\"token punctuation\">.</span>currentNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> Node<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT_NODE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            textNodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// wrap text nodes with span</span>\n    textNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">textNode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> texts <span class=\"token operator\">=</span> textNode<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        texts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chararcter<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> span <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            span<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> chararcter<span class=\"token punctuation\">;</span>\n            wrappers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            textNode<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">,</span> textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// for keeping the cursor</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range\n                <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startContainer <span class=\"token operator\">===</span> textNode\n                <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startOffset <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                range<span class=\"token punctuation\">.</span><span class=\"token function\">setStartBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                range<span class=\"token punctuation\">.</span><span class=\"token function\">setEndBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        textNode<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>텍스트를 span으로 감싼다는 것의 이해를 돕기 위하여 글자마다 붉은색으로 표시하였다. (실제로는 border 표시를 하지 않아야 문단의 모양이 틀어지지 않는다.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/36354265-21adcdc2-1515-11e8-8da8-cff7bc871487.png\" alt=\"image\"></p>\n<p>그리고 여기서 눈여겨보아야 할 부분이 커서 유지다. 커서가 <code class=\"tui-language-text\">collapsed</code>인 경우를 가정했지만, 현재 커서를 유지하기 위해 반드시 처리해야 할 부분이다. (사실 이 부분만 해도 정교하게 구현하려면 상당한 노력이 필요하다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// for keeping the cursor</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range\n    <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startContainer <span class=\"token operator\">===</span> textNode\n    <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startOffset <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">setStartBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">setEndBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// keep the cursor</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    selection<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllRanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    selection<span class=\"token punctuation\">.</span><span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>문단 내에서 줄을 인식하는 단계이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// recognize lines</span>\n<span class=\"token keyword\">let</span> prevSpan<span class=\"token punctuation\">;</span>\nwrappers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">span</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevSpanBottom <span class=\"token operator\">=</span> prevSpan <span class=\"token operator\">?</span> prevSpan<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> spanTop <span class=\"token operator\">=</span> span<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevSpanBottom <span class=\"token operator\">&lt;</span> spanTop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lines<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  prevSpan <span class=\"token operator\">=</span> span<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>문단에서 쪽을 넘는 줄을 찾는 단계이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// find a exceed first line</span>\n<span class=\"token keyword\">let</span> nextParagraphCharacters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> line <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lineBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lineBottom <span class=\"token operator\">></span> pageBodyBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> splitIndex <span class=\"token operator\">=</span> wrappers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nextParagraphCharacters <span class=\"token operator\">=</span> wrappers<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>splitIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>넘치는 줄을 기준으로 문단을 둘로 나누는 단계이다. 문단을 나눌 때 나중에 합칠 수 있도록 아이디를 저장해 둔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// split the paragraph to two paragraphs</span>\n<span class=\"token keyword\">const</span> extractRange <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nextractRange<span class=\"token punctuation\">.</span><span class=\"token function\">setStartBefore</span><span class=\"token punctuation\">(</span>nextParagraphCharacters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nextractRange<span class=\"token punctuation\">.</span><span class=\"token function\">setEndAfter</span><span class=\"token punctuation\">(</span>\n  nextParagraphCharacters<span class=\"token punctuation\">[</span>nextParagraphCharacters<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> extractRange<span class=\"token punctuation\">.</span><span class=\"token function\">extractContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nextParagraph <span class=\"token operator\">=</span> paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnextParagraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\nnextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparagraph<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>nextParagraph<span class=\"token punctuation\">,</span> paragraph<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>splitParagraphId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>splitParagraphId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>splitParagraphId <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>감쌌던 span태그를 제거한 후 커서를 유지시키고, 분리된 텍스트를 <code class=\"tui-language-text\">normalize()</code> 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// unwrap text nodes</span>\nwrappers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">span</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textNode <span class=\"token operator\">=</span> span<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">,</span> span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// keep the cursor</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  selection<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllRanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  selection<span class=\"token punctuation\">.</span><span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nparagraph<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 문단이 쪽 사이에 걸칠 경우 문단을 줄 단위로 나누어 이전과 다음 쪽에 표현할 수 있다.</p>\n<p><strong>Before</strong>\n<img src=\"https://user-images.githubusercontent.com/26706716/36353819-79761476-150e-11e8-8fec-9e299852b19e.png\" alt=\"image\">\n<strong>After</strong>\n<img src=\"https://user-images.githubusercontent.com/26706716/36355436-881a2bbc-1526-11e8-9f25-14d26cef666d.png\" alt=\"image\"></p>\n<h3 id=\"쪽-레이아웃-수행이-필요한-이벤트-처리\" style=\"position:relative;\"><a href=\"#%EC%AA%BD-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%88%98%ED%96%89%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"쪽 레이아웃 수행이 필요한 이벤트 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쪽 레이아웃 수행이 필요한 이벤트 처리</h3>\n<p>여기에서는 간단하게 <code class=\"tui-language-text\">keyup</code> 이벤틀 글자가 입력되면 1쪽부터 레이아웃이 수행되도록 처리하였다. 이외에도 복사 붙여 넣기, 삭제 등의 이벤트 처리도 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Add event listners to layout pages\n */</span>\n<span class=\"token function\">_addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>isContentEditable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>글자 입력 중 쪽 레이아웃</strong>\n<img src=\"https://user-images.githubusercontent.com/26706716/36356381-c1dfb5f2-1534-11e8-9b0c-cb08b234fb98.gif\" alt=\"2018-02-19 05_21_17\"></p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>웹 워드를 만들기 위해서 필수적인 쪽 표현 기능을 구현하는 방법과 코드를 소개하였다. 이 글만 보고 웹 워드 프로젝트를 시작하겠다고 덤벼들기보다는 좀 더 신중하게 접근하기를 권한다. 왜냐하면, 이 외에도 고려할 사항은 매우 많기 때문이다.</p>\n<ul>\n<li>더 많은 종류의 블록-레벨 요소의 추가</li>\n<li>블록-레벨 요소가 트리에서 depth가 깊은 곳에 있는 경우 처리</li>\n<li>그 경우 문단을 분리할 때 pageBodyElement가 부모일 때까지 분리</li>\n<li>한 문단이 쪽의 남은 영역보다 큰 경우 처리(이미지, 표 등)</li>\n<li>쪽을 넘치는 표를 분리하여 다음 쪽에 이어서 표현하기(셀 분리가 고난도다.)</li>\n<li>한글일 경우 커서 및 compositing을 유지하기</li>\n<li>이외 그 미세한 1픽셀 차이들!</li>\n</ul>\n<p>경험 상 기획 단계에서 적정선에서 기능 협의를 해두지 않으면 네이티브 워드와 끝없이 비교당할 수도 있다. 개인적인 생각으로는 Text 노드에서 좌표를 제공하는 스펙이 추가 된다면 혹은 WebAssembly에서 DOM에 접근하는 것이 지원된다면 좀 더 수월하게 더 나은 성능으로 웹 워드를 구현할 수 있지 않을까 생각한다.</p>\n<p>온갖 어려움을 겪고도 웹 워드를 만들고자 하는 프론트엔드 개발자의 생각에 조금이나마 공감한다면 작성한 소스 코드는 여기 <a href=\"https://github.com/dongsik-yoo/html-page-layout\">html-page-layout</a>에 있고 데모는 <a href=\"https://dongsik-yoo.github.io/html-page-layout/\">여기</a>에 있으니 참고 바란다.</p>","frontmatter":{"id":"ko_20180216","title":"웹 워드프로세서 기초 만들어 보기(2)","description":"웹 워드프로세서(이하 웹 워드)는 브라우저만 있으면 어디서나 문서 편집을 할 수 있다는 장점이 있어 매력적인 소프트웨어이다. 아직 네이티브 워드프로세서로 할 수 있는 모든 기능을 다 지원하는 것은 아니지만 가까운 미래에는 가능하리라고 믿는다. 2년 동안 웹 워드를 만드는 동안 가능성을 믿고 험난한 과정을 헤쳐 나갔고, 기능을 구현해 나갈 때마다 느꼈던 흥분과 희열은 아직도 강하게 남아있다. 이 글을 읽는 여러분 또한 그런 느낌을 받게 되기를 소망한다.","date":"2018.02.16","author":"유동식","tags":["etc"],"thumbnail":"https://user-images.githubusercontent.com/26706716/36354265-21adcdc2-1515-11e8-8da8-cff7bc871487.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20180216","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}