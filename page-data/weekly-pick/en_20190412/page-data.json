{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/en_20190412","result":{"data":{"post":{"html":"<h1 id=\"pragmatic-front-end-testing-strategies-2\" style=\"position:relative;\"><a href=\"#pragmatic-front-end-testing-strategies-2\" aria-label=\"pragmatic front end testing strategies 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pragmatic Front-End Testing Strategies (2)</h1>\n<blockquote>\n<p>This article is the second of a series of three articles.<br/><br/>\n<a href=\"/test123/weekly-pick/en_20190405\">Part 1: Necessity of Pragmatic Front-End Testing Strategies</a><br/>\n<strong>Part 2: Testing Visual Components Using Storybook</strong><br/>\n<a href=\"/test123/weekly-pick/en_20190419\">Part 3: Testing Logic in State Management Using Cypress</a></p>\n</blockquote>\n<p>In the <a href=\"/test123/weekly-pick/en_20190405\">first part of this series</a> I discussed the importance of test automation and testing strategies, and why it is difficult to automate visual component testing. While it is not impossible to automate the visual quality assurance process, with the tools that are available to us today, the effort-to-return ratio is not particularly recommendable. Since this series deals with “pragmatic” testing strategies, let’s take a step back and try something else. Meaning, we’ll visually verify the results with our “eyes,” while automating the process of preparing the results to be verified as much as possible. Storybook, the tool I briefly introduced last week, is the most effective of the kind.</p>\n<p>Like I mentioned in part one, Storybook is more of a <strong>UI development environment</strong> and <strong>playground for UI components</strong> than a testing tool. The main goal of Storybook is to enable developers to <strong>develop the UI component independently outside of the application.</strong> If you think about it, since the purpose of most of our testing tools is to help verify that “the module or a function can run appropriately in an independent environment,” Storybook can be considered to be a test as well. </p>\n<p><em>(Every code I wrote for this series can be found in my <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress\">Github Repository</a>. While the article will include all of codes that I think are critical for understanding, you can check out the repository if you are curious about the entire code.)</em></p>\n<h2 id=\"initializing-storybook\" style=\"position:relative;\"><a href=\"#initializing-storybook\" aria-label=\"initializing storybook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializing Storybook</h2>\n<p>Initially, Storybook was designed only to test React codes, but now it supports multiple frameworks including React Native, Vue, Angular, Ember, and Riot. It can, of course, be used to manipulate the DOM directly without the framework, and the list of frameworks supported can be found on the <a href=\"https://github.com/storybooks/storybook/tree/master/app\">app folder in the repository</a>.</p>\n<p>For each supporting framework, Storybook provides a different npm module, so in order to use Storybook correctly, you first have to download the appropriate npm module for the framework. For example, since this series uses React to build the Todo application, I had to install the React version of the Storybook. In order to facilitate this process, Storybook provides the CLI tool, and you can use the CLI to type in the following <code class=\"tui-language-text\">npx</code> command to start your Storybook.</p>\n<p><em>(Storybook v5.0.5 was used to write this article.)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">npx -p @storybook/cli sb init</code></pre></div>\n<p>Running the command in the Command Line will read through the <code class=\"tui-language-text\">package.json</code> for dependencies and determine which framework you are using to automatically install the appropriate version of the Storybook. Not only that, the command also installs number of boilerplates with the Storybook, so you can start using Storybook without much configuration. </p>\n<p>If you open your project folder, you will now be able to see that two new folders <code class=\"tui-language-text\">.storybook</code> and <code class=\"tui-language-text\">stories</code> have been created. The <code class=\"tui-language-text\">.storybook</code> contains config files to run the Storybook, and the <code class=\"tui-language-text\">stories</code> folder is where you will actually write your code to register the components. Also, the <code class=\"tui-language-text\">package.json</code> has been automatically updated to include <code class=\"tui-language-text\">storybook</code> and <code class=\"tui-language-text\">build-storybook</code> scripts. I’ll explain <code class=\"tui-language-text\">build-storybook</code> later, and for now, let’s kick things off by running the <code class=\"tui-language-text\">storybook</code> script.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">npm run storybook</code></pre></div>\n<p>Running the command will create a local web server at the port number <code class=\"tui-language-text\">9009</code>, and a browser will automatically launch and display the current page(<code class=\"tui-language-text\">localhost:9009</code>). That’s it! We took care of the entire configuration just with two lines of Command Line codes. If you wish to install and configure the Storybook without the help of CLI, help yourself with the <a href=\"https://storybook.js.org/basics/guide-react/\">official documentation</a>. </p>\n<h2 id=\"writing-your-story\" style=\"position:relative;\"><a href=\"#writing-your-story\" aria-label=\"writing your story permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Your Story</h2>\n<p>Storybook refers to its test cases as “stories.” Like how each test case validates one input value for a single module, story is also one particular state of a single component. We’ll get to chunking stories later, but for now, let’s talk about registering the most basic component: <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/components/Header.js\"><code class=\"tui-language-text\">&lt;Header&gt;</code></a></p>\n<p>First, if you open the <code class=\"tui-language-text\">stories/index.js</code> file, you will notice that the CLI tool has already registered some examples for the <code class=\"tui-language-text\">Button</code> component. Let’s get rid of that, and write our own code like the following. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>storiesOf<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@storybook/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Header<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Header'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'../components/App.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stories <span class=\"token operator\">=</span> <span class=\"token function\">storiesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TodoApp'</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Header'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Header addTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"tui-language-text\">storiesOf</code> function returns an object that can register and manage multiple stories. The first input acts like a category name, and can be used to group multiples stories with the same category. <code class=\"tui-language-text\">module</code>, the second input, is required in order for the Storybook to use <a href=\"https://webpack.js.org/api/hot-module-replacement/\">Hot Module Replacement</a> to internally refresh the page without actually having to refresh, so it should always be passed. </p>\n<p>You can add stories using the <code class=\"tui-language-text\">add</code> method of the object returned by <code class=\"tui-language-text\">storiesOf</code> function. The first input is the name of the story, and the second input is the function that returns a React element to render the component. In this example, the <code class=\"tui-language-text\">Header</code> component must be below the DOM element that has the <code class=\"tui-language-text\">todoapp</code> class in order for the CSS to function appropriately, so I added the <code class=\"tui-language-text\">&lt;div className = “todoapp”&gt;</code> to the top node. Also, since this is not testing some action, I cheat by adding an empty <code class=\"tui-language-text\">addTodo</code> function so no error occurs. </p>\n<p>Saving this code, you should be able to see something like this. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221101-59379f00-197b-11e9-9cae-a7f654d3c83b.png\" alt=\"Storybook-Header\"></p>\n<h2 id=\"writing-story-according-to-the-single-component-state\" style=\"position:relative;\"><a href=\"#writing-story-according-to-the-single-component-state\" aria-label=\"writing story according to the single component state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Story According to the Single Component State</h2>\n<p>As for the <code class=\"tui-language-text\">Header</code> component, the story can be written and registered simply because the state does not change with respect to the props. However, for components that change states with respect to the props, it is better to register different stories for each states of the component. For example, the <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/components/TodoItem.js\"><code class=\"tui-language-text\">TodoItem</code></a> component has three distinct states of “Normal”, “Completed”, and “Editing” aside from the content, so you have to register the three states as shown below. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">stories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TodoItem - Normal'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-list\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TodoItem\n        id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"Have Breakfast\"</span>\n        completed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n        editing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TodoItem - Completed'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-list\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TodoItem\n        id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"Have Breakfast\"</span>\n        completed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n        editing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TodoItem - Editing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-list\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TodoItem\n        id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"Have Breakfast\"</span>\n        completed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n        editing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thing to keep in mind here is that, in order to properly display the <code class=\"tui-language-text\">TodoItem</code>, you need the parent element <code class=\"tui-language-text\">&lt;ul className = “todo-list”&gt;</code>. When this is all done, you will be able to see that each state of the <code class=\"tui-language-text\">TodoItem</code> has been added as stories. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221089-445b0b80-197b-11e9-82ae-053b7c81be96.gif\" alt=\"StoryBook-TodoItem\"></p>\n<h2 id=\"the-issues-with-single-component-stories\" style=\"position:relative;\"><a href=\"#the-issues-with-single-component-stories\" aria-label=\"the issues with single component stories permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Issues with Single Component Stories</h2>\n<p>So far, the stories we’ve written have been single component stories, and did not have any child component. Generally, when people think about a component, they think of small single components like “list-item”, “button”, and “input box.” However, real applications are combination of such smaller components, and there are complex components that encompass multiple components. Writing stories only about the single components and not writing about complex components is basically hoping the application works fine just by running unit tests without running a single integration test. </p>\n<p>Considering the qualities of a good test discussed in the first part of this series, this raises the following issues. </p>\n<h3 id=\"1-cannot-validate-the-combination-of-components-of-the-actual-application\" style=\"position:relative;\"><a href=\"#1-cannot-validate-the-combination-of-components-of-the-actual-application\" aria-label=\"1 cannot validate the combination of components of the actual application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Cannot Validate the Combination of Components of the Actual Application</h3>\n<p>To state the obvious, just because a single component is displayed without visually noticeable flaws, does not mean that the entire application will also be displayed without visually noticeable flaws. Especially, UI based on HTML/CSS is affected by numerous variables including the parent-child relationship between the DOM elements, CSS selectors, and z-index. In order to truly validate that the entire program works as intended, you need to check that all components are in the right order and that they are not unintentionally affecting other components.</p>\n<p>Furthermore, stories written with too narrow a scope are difficult to compare visually. Comparing each button individually to a product design that shows an array of buttons would not only be tedious but also difficult. </p>\n<h3 id=\"2-manipulating-the-implementation-detail-of-the-parent-component-can-break-the-application\" style=\"position:relative;\"><a href=\"#2-manipulating-the-implementation-detail-of-the-parent-component-can-break-the-application\" aria-label=\"2 manipulating the implementation detail of the parent component can break the application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Manipulating the Implementation Detail of the Parent Component Can Break the Application</h3>\n<p>Let’s recall back to how we had to add <code class=\"tui-language-text\">&lt;div className = “todoapp”&gt;</code> and <code class=\"tui-language-text\">&lt;ul className = “todo-list”&gt;</code> to the <code class=\"tui-language-text\">TodoItem</code> so that the single component story can be displayed appropriately. To be accurate, we were acting in the scope of the <code class=\"tui-language-text\">TodoItem</code>’s parent component, and we simply created a mock of the parent’s implementation detail. In this case, even if there is no change in the design, if the implementation detail of the parent is changed due to refactoring, the story will not be displayed as intended. In other words, every time the implementation detail of the parent changes, the story must be changed as well. </p>\n<p>Furthermore, since we are directly injecting the component’s prop with the value ourselves, if the corresponding component’s prop interface is changed, we have to change the stories as well. In actuality, no matter which props interface of whatever component is changed, it basically means that, from its parent component’s perspective, change to the implementation detail. Considering the fact that the smaller you chunk down your units, the more affected parent component you end up with, chunking down units smaller and smaller translates to more maintenance cost for your stories. </p>\n<h2 id=\"the-issue-with-complex-component-stories\" style=\"position:relative;\"><a href=\"#the-issue-with-complex-component-stories\" aria-label=\"the issue with complex component stories permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Issue with Complex Component Stories</h2>\n<p>Then, what about the complete opposite of writing the story only using the root component that encompasses the entire application? In this case, following issues can occur. </p>\n<h3 id=\"1-difficulty-of-analyzing-individual-units-of-each-components\" style=\"position:relative;\"><a href=\"#1-difficulty-of-analyzing-individual-units-of-each-components\" aria-label=\"1 difficulty of analyzing individual units of each components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Difficulty of Analyzing Individual Units of Each Components</h3>\n<p>Say there are three components with three states each. In the completely integrated form, it can be said that there are maximum of twenty-seven (3<em>3</em>3) states. In this case, nine stories would suffice to register and test for a single component, but the integrated form requires much more cases. Also, since the entire UI will be displayed even if you’re testing a miniscule portion of the code, it can be difficult to visually distinguish the testing target. </p>\n<h3 id=\"2-difficulty-of-providing-input-values-for-components\" style=\"position:relative;\"><a href=\"#2-difficulty-of-providing-input-values-for-components\" aria-label=\"2 difficulty of providing input values for components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Difficulty of Providing Input Values for Components</h3>\n<p>As the complexity of the component goes up, so does the complexity of the inputs. For a single component, you can get away with providing the test with three to four inputs, but once the number of components hit five, you would have to provide the test with around twenty input values. In this case, even if the test only requires two to three inputs, you still have to provide the rest just for the UI. Especially if you’re working with something like the Redux store, where you have to use a separate state management tool, you would have to create the state object like the store just to inject the input values. </p>\n<h3 id=\"3-increased-dependency-on-the-external-environment\" style=\"position:relative;\"><a href=\"#3-increased-dependency-on-the-external-environment\" aria-label=\"3 increased dependency on the external environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Increased Dependency on the External Environment</h3>\n<p>Components not only display visual elements of the application but also create side effects by interacting with the external elements of the environment. Handling a reroute of the changed URL in the browser and retrieving data from the server by making a request to the API when the component is mounted are such examples. When testing a single component, the parts of the application that create the side effects can be disregarded to emphasize the components that have to do with visual aspects of the application. However, for complex components, it is difficult to distinguish a single child component during the test, so it allows for the side effects of the child components to run free, without restrictions. </p>\n<h2 id=\"deciding-on-story-units\" style=\"position:relative;\"><a href=\"#deciding-on-story-units\" aria-label=\"deciding on story units permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deciding on Story Units</h2>\n<p>As you can see, polarized testing methods have their own problems. Therefore, it is pivotal to slice up the application into appropriate units of stories. I, personally, prefer to use page-level units, while using a separate group of components to register components that fall in content categorization in layouts. It can also be a good idea to distinguish and group components that have nothing to do with the page’s content (i.e. layers) as well. Grouping the components like so can help ameliorate the issues with registering single component stories. </p>\n<p>Complex stories, on the other hand, require a different approach. As for the first issue, difficulty of analyzing individual units of each components, can be resolved with the <a href=\"https://github.com/storybooks/storybook/tree/master/addons/knobs\">Knobs Addon</a>, which validates multiple states from a single story. The second issue, the increased number of inputs, is rather tricky to deal with. However, the problem can be assuaged by creating a common form of input that represents multiple inputs at once. Also, creating custom addons with mocks of systems like redux store can simplify the store's input injection process.</p>\n<p>Finally, the last issue can be solved by simply structuring the code well. By separating the codes in charge of visual elements from externally dependent codes, and managing them at the top of the component tree, the increased dependency can be relatively managed. Furthermore, it is also a good practice to maintain the <em>pure</em> component by delegating the side effect management to layers like <em>redux-thunk</em> and <em>redux-saga</em>.</p>\n<h2 id=\"back-to-the-todo-app\" style=\"position:relative;\"><a href=\"#back-to-the-todo-app\" aria-label=\"back to the todo app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Back to the Todo App</h2>\n<p>Most of what I said so far probably sounds like gibberish. Let’s get back our Todo App and apply what we just discussed to a real project. </p>\n<h3 id=\"separating-the-components-visual-element\" style=\"position:relative;\"><a href=\"#separating-the-components-visual-element\" aria-label=\"separating the components visual element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Separating the Component’s Visual Element</h3>\n<p>To be honest, the Todo application is a small project compared to other projects, so I could theoretically register the root component as a story. However, since the root component is also in charge of routing, creation and injection of stores, and initial data load, it is best to distinguish these codes into separate groups. In the example code, the externally dependent codes were handled in <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/index.js\">src/index.js</a>, and the <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/components/App.js\"><code class=\"tui-language-text\">App</code></a> component only deals with the visual element. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// components/App.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Main <span class=\"token keyword\">from</span> <span class=\"token string\">'./Main'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">'./Header'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Footer <span class=\"token keyword\">from</span> <span class=\"token string\">'./Footer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Main <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"store-mocking\" style=\"position:relative;\"><a href=\"#store-mocking\" aria-label=\"store mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Mocking</h3>\n<p>Now, only thing that’s left for us to do is to write the story about <code class=\"tui-language-text\">App</code> component. But wait! How are we going to feed the components inputs? The <code class=\"tui-language-text\">App</code> component does not have a separate prop, and only knows how to render the children components. To make things worse, all of the children components require the inputs to be injected with the Redux store. To put it simply, we need the store to provide the component with inputs. However, it can be difficult to forge the inputs into forms that we want because store can only be changed through actions with Reducers. </p>\n<p>The most realistic thing we could do is creating a mock object instead of using the real store. Luckily, the store’s API is structured very intuitively, so we can just create the mock object like the following. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createMockStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Currently, this store only needs to know how to provide the component with the initial input values, and does not need to dynamically change states, so we do not need to implement methods like <code class=\"tui-language-text\">dispatch</code> and <code class=\"tui-language-text\">subscribe</code>. We just need to make sure that the <code class=\"tui-language-text\">getState</code> method can return the initial value correctly. </p>\n<h3 id=\"writing-the-story\" style=\"position:relative;\"><a href=\"#writing-the-story\" aria-label=\"writing the story permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing the Story</h3>\n<p>Now that we can provide it input values, we can finally start writing the story. Just one thing stands in our way (again,) and it is that one of the children components require an input value that is not a store. The black duck in the family is the data from <a href=\"https://reacttraining.com/react-router/\">react-router</a>. Components like <code class=\"tui-language-text\">Footer</code> and <code class=\"tui-language-text\">Main</code> all retrieve the current page’s parameter information through the <code class=\"tui-language-text\">withRouter</code>. Therefore, every time the root component is rendered, it must be wrapped with a component that provides information about the router. However, if you decide to use the <code class=\"tui-language-text\">BrowserRouter</code> embedded in the application itself, it becomes bound to the browser’s URL. In order to control the input value, you would have to use a different kind of router or create a mock router yourself. For this example, we will use the <code class=\"tui-language-text\">StaticRouter</code>, which is frequently used in the Back-End development environment. </p>\n<p>Now, let’s actually start writing the story. First, establish the mock store with <code class=\"tui-language-text\">createMockStore</code> and render <code class=\"tui-language-text\">Provider</code> component and <code class=\"tui-language-text\">StaticRouter</code> component together. For now, let’s keep things simple and provide it with one Todo task.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">stories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createMockStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">,</span>\n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing?\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You should be able to see that the entire application is displayed. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221401-acf6b800-197c-11e9-8858-e3d456b6f790.png\" alt=\"Storybook-App1\"></p>\n<h3 id=\"establishing-input-values\" style=\"position:relative;\"><a href=\"#establishing-input-values\" aria-label=\"establishing input values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Establishing Input Values</h3>\n<p>Since we registered the entire application in one story, we can easily see multiple states of the applications at once. For example, when we were using single component, we had to register different stories for each state of the application, but now, we can display multiple states of Todo-lists at once. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createMockStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Lunch'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Dinner'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  editing<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Passing the input values like this should display <code class=\"tui-language-text\">Normal</code> (1), <code class=\"tui-language-text\">Completed</code> (2), and <code class=\"tui-language-text\">Editing</code> (3), respectively. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221487-08c14100-197d-11e9-80db-ed2600f16725.png\" alt=\"Storybook-App2\"></p>\n<h2 id=\"using-the-knobs-addon\" style=\"position:relative;\"><a href=\"#using-the-knobs-addon\" aria-label=\"using the knobs addon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Knobs Addon</h2>\n<p>While we can see multiple states of the Todo-list in one glance, there is still much to do. We now have to consider when the “All”, “Active”, and “Completed” buttons at the bottom are activated, and when the “Select All” button at the top is activated. Registering multiple stories for such independent component states can be difficult to distinguish the change and can be incredibly costly. Luckily for us, there’s an addon for that. </p>\n<p>Addons are iconic features of the Storybook. They are mainly used to interact with components registered onto the stories, and can be accessed from the “Panel” outside of the “Preview” area where the stories are presented. More information <a href=\"https://storybook.js.org/addons/introduction/\">regarding addons</a> and <a href=\"https://storybook.js.org/addons/using-addons/\">using addons</a> can be found on the official website, and the <a href=\"https://storybook.js.org/addons/addon-gallery/\">Addon Gallery</a> has a great collection of useful addons you can use. </p>\n<p>The Knobs addon helps developers by allowing you to dynamically change the input values you feed the components by adding the input control panel, and it can be used to verify different states of the of a single story. Since this article will be example-based, refer to the <a href=\"https://github.com/storybooks/storybook/tree/master/addons/knobs\">Github Repository</a> for in depth information on using Knobs Addon. </p>\n<h3 id=\"installing-and-configuring-knobs-addon\" style=\"position:relative;\"><a href=\"#installing-and-configuring-knobs-addon\" aria-label=\"installing and configuring knobs addon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing and Configuring Knobs Addon</h3>\n<p>Installing and configuring the Knobs addon is sufficiently easy. First install the addon using the npm command. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">npm install @storybook/addon-knobs --save-dev</code></pre></div>\n<p>Next, create the <code class=\"tui-language-text\">addon.js</code> file in the <code class=\"tui-language-text\">./stories/</code> folder, and enter the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'@storybook/addon-knobs/register'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, open the <code class=\"tui-language-text\">src/stories/index.js</code> file where your story should be registered, and add the following piece of code at the top of the code. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withKnobs<span class=\"token punctuation\">,</span> radios <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@storybook/addon-knobs'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, when you have added your decorators to the objects created with <code class=\"tui-language-text\">storiesOf</code>, you’re all good to go.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> stories <span class=\"token operator\">=</span> <span class=\"token function\">storiesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Todo-App'</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withKnobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"controlling-the-router\" style=\"position:relative;\"><a href=\"#controlling-the-router\" aria-label=\"controlling the router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controlling the Router</h3>\n<p>Now, I’m going to control the router’s input value to change the state of the buttons at the bottom. Here, I used the <code class=\"tui-language-text\">radios</code> function in order to use the radio buttons. The first input should be the label, and the second option should be the list of options for the button. The last input is the default. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">stories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... Identical to the previous code</span>\n\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">radios</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Filter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    All<span class=\"token operator\">:</span> <span class=\"token string\">'/All'</span><span class=\"token punctuation\">,</span>\n    Active<span class=\"token operator\">:</span> <span class=\"token string\">'/Active'</span><span class=\"token punctuation\">,</span>\n    Completed<span class=\"token operator\">:</span> <span class=\"token string\">'/Completed'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/All'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For <code class=\"tui-language-text\">StaticRouter</code>, you can randomly define the router’s URL using the <code class=\"tui-language-text\">location</code> value. Instead of giving it the string value to define the <code class=\"tui-language-text\">location</code>, if you feed it the value the <code class=\"tui-language-text\">radios</code> function is going to return, you have successfully connected to the Knobs addon. Now, when you save the code, the <strong>Filter</strong> item will have appeared in the Knobs panel. Each push of the radio button will be able to change the state of the button at the Footer. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221735-162afb00-197e-11e9-8200-0735120d856e.gif\" alt=\"Storybook-App3\"></p>\n<h3 id=\"controlling-the-store\" style=\"position:relative;\"><a href=\"#controlling-the-store\" aria-label=\"controlling the store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controlling the Store</h3>\n<p>Now, let’s check that our “Select All” checkbox works as we intended it. The “Select All” checkbox can only be checked when the states of every item have been changed to <code class=\"tui-language-text\">completed</code>, so in order to change the state of “Select All,” we have to change the state of the store. However, the <code class=\"tui-language-text\">Provider</code> component does not allow for the reference of the component’s initially assigned store object to be dynamically changed, so we cannot call the <code class=\"tui-language-text\">createMockStore</code> to change the state of the store. Also, since the state change with stores generally depend on the <code class=\"tui-language-text\">dispatch</code>, to declare the state of a store out of no-where, we would need to write a separate method like <code class=\"tui-language-text\">setState</code>. </p>\n<p>In other words, in order to connect the store and the Knobs addon, we need to manipulate only the store’s <em>state</em>, not create a new store, every time the registered function executes. In this case, if you personally create an addon to use as a decorator, you can simplify the series of laborious tasks. While this task is not difficult, it may be difficult to explain the process of creating a custom addon in this article without divulging too much from the main topic of the article. If you are interested, I encourage you to check out <a href=\"https://storybook.js.org/addons/writing-addons/\">Storybook’s tutorial documents</a> and <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/stories/addons/store.js\">store addon’s source code</a>. </p>\n<p>Here, I will use the addon I previously created to connect the Knobs addon to the store. The following is the final product.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>storiesOf<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@storybook/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>withKnobs<span class=\"token punctuation\">,</span> radios<span class=\"token punctuation\">,</span> boolean<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@storybook/addon-knobs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>StaticRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>withStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./addons/store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stories <span class=\"token operator\">=</span> <span class=\"token function\">storiesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Todo-App'</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withKnobs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      All<span class=\"token operator\">:</span> <span class=\"token string\">'/All'</span><span class=\"token punctuation\">,</span>\n      Active<span class=\"token operator\">:</span> <span class=\"token string\">'/Active'</span><span class=\"token punctuation\">,</span>\n      Completed<span class=\"token operator\">:</span> <span class=\"token string\">'/Completed'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">radios</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Filter'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>All<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> isAllCompleted <span class=\"token operator\">=</span> <span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Complete All'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> editing <span class=\"token operator\">=</span> <span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Editing'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Breakfast'</span><span class=\"token punctuation\">,</span>\n            completed<span class=\"token operator\">:</span> isAllCompleted <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Lunch'</span><span class=\"token punctuation\">,</span>\n            completed<span class=\"token operator\">:</span> isAllCompleted <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token string\">'Have Dinner'</span><span class=\"token punctuation\">,</span>\n            completed<span class=\"token operator\">:</span> isAllCompleted <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        editing\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the code, you can see that the part where we originally created a mock store to provide the store through the <code class=\"tui-language-text\">Provider</code> is now gone, and the <code class=\"tui-language-text\">state</code> has been inserted as the third input of the <code class=\"tui-language-text\">add</code> function. The third input of the <code class=\"tui-language-text\">add</code> function is used to define the value the decorator registered using <code class=\"tui-language-text\">addDecorator</code> retrieves. The <code class=\"tui-language-text\">withStore</code> decorator takes the value of the <code class=\"tui-language-text\">state</code> key, and internally updates the store’s state. Also, since every time the value is changed at the Knobs panel, the third input value must be updated as well, the value of <code class=\"tui-language-text\">state</code> is passed on as a function. </p>\n<p>Toggle feature can also easily be added using the <code class=\"tui-language-text\">boolean</code> function provided by the <code class=\"tui-language-text\">addon-knobs</code> module. In the code above, I have added a feature to toggle the items currently being edited, along with the “Select All” state. By running the code, you will be able to see that <code class=\"tui-language-text\">Complete All</code> and <code class=\"tui-language-text\">Editing</code> labels have been added to the Knobs panel. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221928-d284c100-197e-11e9-8a1e-63d627aa214e.gif\" alt=\"Storybook-App4\"></p>\n<h2 id=\"sharing-your-storybook\" style=\"position:relative;\"><a href=\"#sharing-your-storybook\" aria-label=\"sharing your storybook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sharing Your Storybook</h2>\n<p>Stories like the one we wrote can be made into a static file and be published on the web server. Let’s run the <code class=\"tui-language-text\">build-storybook</code> npm script I glossed over at the beginning. You will be able to see that the <code class=\"tui-language-text\">storybook-static</code> folder has been created at the root of your project folder. If you publish this folder through static servers like <a href=\"https://pages.github.com/\">Github Pages</a>, not only developers, but designers, producers, and coworkers in other departments can also view all stories related to this project. Sharing the page through the server can be extremely useful when used as tools for design QA or documentation content. </p>\n<p><em>(Using Storybooks as communication tools is explained in great depth in <a href=\"https://blog.hichroma.com/the-delightful-storybook-workflow-b322b76fd07\">The delightful storybook workflow</a>)</em></p>\n<p>Stories written for the purpose of this article are also published on my <a href=\"https://dongwoo-kim.github.io/react-redux-todomvc-storybook-cypress/index.html\">Github</a>, so feel free to check it out.</p>\n<h2 id=\"end-of-part-2\" style=\"position:relative;\"><a href=\"#end-of-part-2\" aria-label=\"end of part 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>End of Part 2</h2>\n<p>As you can see, all visual scenarios for the Todo application can be visually tested using a single story. While it is true that compared to the single component story where you only had to enter the props, it is much more complicated, judging by the final code, the intent of the code is clear without unnecessary content. Also, given the fact that the story for this code only ranges 40 lines, it is much shorter than registering multiple single components.</p>\n<p>True, you probably will not be able to validate every visual scenarios of a more complex application using one story. For such cases, it would require the tester to be intentional in deciding the story unit chunks given the application’s size and characteristics. I hope that you can refer to the earlier parts of the article to successfully strategize your testing plans with consideration of pros and cons of single components versus complex components. </p>\n<p>Going back to the <a href=\"https://dongwoo-kim.github.io/react-redux-todomvc-storybook-cypress/index.html\">Storybook page</a> we created, you probably noticed that while it displays the visual elements of the application, parts that handle the user inputs do not function. Lest you forget that Storybook is a testing tool used only for visual elements. Attempting to test functional features of the application would be out of purpose. </p>\n<p>As I mentioned in <strong><em>Part 1</em></strong>, the reason we separate visual testing from the rest is that visual testing is difficult to automate. The remaining functionalities can be automated using different tools. In <strong><em>Part 3</em></strong>, we will discuss using <a href=\"https://www.cypress.io/\">Cypress</a> to test functional elements. </p>\n<h3 id=\"appendix-visual-regression-test\" style=\"position:relative;\"><a href=\"#appendix-visual-regression-test\" aria-label=\"appendix visual regression test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Appendix: Visual Regression Test</h3>\n<p>While I have not included much information about visual regression testing in this article for the sake of length, Storybook offers most of the modern tools for automated visual regression tests. The creators of Storybook also explains the automating visual tests in a <a href=\"https://storybook.js.org/docs/testing/automated-visual-testing/\">separate document</a>. Such tools include <a href=\"https://percy.io/\">Perci</a>, <a href=\"https://applitools.com/\">Applitools</a>,  and <a href=\"https://www.chromaticqa.com/\">Chromatic</a>, so for those who are interested, I have attached corresponding links below. </p>\n<ul>\n<li>Percy: <a href=\"https://docs.percy.io/docs/storybook-tutorial\">Visual testing for Storybook for React</a></li>\n<li>Applitools: <a href=\"https://applitools.com/storybook\">Visual Testing With Storybook</a></li>\n<li>Chromatic: <a href=\"http://docs.chromaticqa.com/storybook\">Storybook and Chromatic tutorial</a></li>\n</ul>","frontmatter":{"id":"en_20190412","title":"Pragmatic Front-End Testing Strategies (2)","description":"In the first part of this series I discussed the importance of test automation and testing strategies, and why it is difficult to automate visual component testing. While it is not impossible to automate the visual quality assurance process, with the tools that are available to us today, the effort-to-return ratio is not particularly recommendable. Since this series deals with “pragmatic” testing strategies,","date":"2019.04.12","author":"DongWoo Kim","tags":["test"],"thumbnail":"https://cdn-images-1.medium.com/max/800/1*jYHepkLchSmgG1LJMMTzYA.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_20190412","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}