{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/en_20171226","result":{"data":{"post":{"html":"<h1 id=\"basics-of-web-word-processor-1\" style=\"position:relative;\"><a href=\"#basics-of-web-word-processor-1\" aria-label=\"basics of web word processor 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basics of Web Word Processor (1)</h1>\n<p>The history of Web Word Processor (or, web word) began earlier than expected. It was known widely to the public in 2006 as Google Docs was introduced, so the software is more than a decade long. ThinkFree aimed for a web word running on a web browser under Java Applet. However, as it is not created on a web language like Javascript and hence cannot be called a web word. Native word processors are implemented, under each OS, with standalone Graphics Toolkits and programming languages, like C++ or Java. On the other hand, web words run on a web browser and therefore can be edited on any computer only if a supportive browser is available.</p>\n<p>This document introduces the basic principles of creating a web word.</p>\n<h2 id=\"necessities-and-types-of-web-word\" style=\"position:relative;\"><a href=\"#necessities-and-types-of-web-word\" aria-label=\"necessities and types of web word permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Necessities and Types of Web Word</h2>\n<p>First, let’s discover why web word is necessary, and the criteria to be classified into a web word, as well as its types.</p>\n<h3 id=\"necessities-of-web-word\" style=\"position:relative;\"><a href=\"#necessities-of-web-word\" aria-label=\"necessities of web word permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Necessities of Web Word</h3>\n<p>One big advantage of a web word is to express content as you want, whatever the OS is, only if a browser is available. However, regarding document editing, restrictions exist that a particular OS or software, or document format is required in most cases. In particular, the window-based MS Office and Hancom Office are most commonly used in Korea; DOC and HWP are the frequently used document formats. From user’s perspective, such environment comes as nuisance as supportive OS may not be available, and editing is simply impossible if there’s not a computer with such software installed. Sometimes, it may cost you unnecessary prices to buy relevant software.</p>\n<p>With the development of web technology, many things are available on the web. The web word, only if a browser is supported, can be operated in any OS and can be used to document in any computers, even without installation of particular office software. As a document is represented in a web programming language, such HTML, Javascript, SVG, and Canvas, user doesn’t have to care about a document format.</p>\n<h3 id=\"classification-criteria\" style=\"position:relative;\"><a href=\"#classification-criteria\" aria-label=\"classification criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classification Criteria</h3>\n<p>By the standard of native word processors, I believe a web word must have page representation and editing functions. This may just be a personal opinion, but I set such criteria because many native word processor users find the most foreign aspect of using a web word in the unavailability of page representations. Most documents (including exam papers) we have experienced while educated, or those frequently used in public institutions or companies tend to have page representations, since even their digital versions are originated from books. They have been written upon word processors which are equipped with page representations and editing functions.</p>\n<h3 id=\"web-words-supporting-page-representation-and-editing\" style=\"position:relative;\"><a href=\"#web-words-supporting-page-representation-and-editing\" aria-label=\"web words supporting page representation and editing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Words Supporting Page Representation and Editing</h3>\n<p>While developing a web word, I have benchmarked those web words supporting page representation and editing, including Google Docs, Hancom Netffice which took over ThinkFree. They provide much more functions than expected but still not so easy to use.</p>\n<ul>\n<li><a href=\"https://www.google.com/intl/ko_KR/docs/about/\">Google Docs</a> - The Google search says an engine called kix is used, but it’s not an open source yet.</li>\n<li><a href=\"https://www.zoho.com/writer/\">Zoho Writer</a> - Foreign-made software doesn’t feel familiar as it does not support Korean, or the entry part or the cursor is located beyond the boundary of a character.</li>\n<li><a href=\"https://personal.onlyoffice.com\">ONLYOFFICE</a></li>\n<li><a href=\"http://office.naver.com/\">Naver Office</a></li>\n<li><a href=\"https://www.hancom.com/product/productOfficeMain.do\">Hancom Netffice</a> - Only Chrome is supported at the moment.</li>\n<li><a href=\"https://www.polarisoffice.com/ko/web-editor\">POLARIS Web Editor</a> - Applied mostly in public institutions and hard to find in private sectors.</li>\n</ul>\n<p>Many issues exist to implement words on the web and they are quite hard to realize for a document representations like below, even without format conversion.</p>\n<h3 id=\"considerations-for-implementation\" style=\"position:relative;\"><a href=\"#considerations-for-implementation\" aria-label=\"considerations for implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considerations for Implementation</h3>\n<ul>\n<li>Complexity of implementation of page representation, as well as the editing function in support of it</li>\n<li>Control of cursors and complicated DOM manipulation</li>\n<li>Difficulties in the support of multiple languages and a variety of fonts</li>\n<li>\n<p>Representing documents in similar forms to native word processors</p>\n<ul>\n<li>Line spacing</li>\n<li>Paragraph spacing</li>\n<li>Difference in vertical alignment of lines and paragraphs (top, middle, and bottom) of the web word</li>\n<li>Differences in font rendering</li>\n<li>Difference of font representation between CSS (browser rendering engine) and particular documents</li>\n</ul>\n</li>\n</ul>\n<p>Even as more functions are supported than expected, it is still not easier to use than expected. Representational differences, as compared to native word processors, seem to stand out even bigger for the users or organizations who or where document representation is considered more important than the content. Open Document Text-ODF (ODT) of Open Document Format (<a href=\"https://ko.wikipedia.org/wiki/%EC%98%A4%ED%94%88%EB%8F%84%ED%81%90%EB%A8%BC%ED%8A%B8\">ODF</a>) seems to satisfy content more, and the representation is slightly different for each of its implemented software: at the heart of the representation lie page representation and editing.</p>\n<p>Given that representing and editing pages are necessity to create a web word, let me now share the basic principles of implementation.</p>\n<h2 id=\"implementations\" style=\"position:relative;\"><a href=\"#implementations\" aria-label=\"implementations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementations</h2>\n<p>Like I mentioned earlier, I believe the core criteria and the start of a web word is to have page representation and editing functions. To implement page representation after all the other implementations, like entering, deleting, inserting, and pasting content, as well as images and tables, many parts need to be newly implemented to fit for page representation.</p>\n<p>Another important choice to make is to decide the method of character entry and representation.</p>\n<h3 id=\"contenteditable\" style=\"position:relative;\"><a href=\"#contenteditable\" aria-label=\"contenteditable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>contentEditable</h3>\n<p><a href=\"https://github.com/danielearwicker/carota\">Some Editor</a> represents character entry and documents in Canvas, while SVG is used in ODT Editor of <a href=\"http://webodf.org/\">WebODF</a>. <a href=\"https://github.com/nhn/tui.editor\">TOAST UI Editor</a> separates implementation of cursor entry from cursor rendering, although they are based on HTML. contentEditable is controversial but undoubtedly supports editing faster than any other.</p>\n<h4 id=\"advantages-of-contenteditable\" style=\"position:relative;\"><a href=\"#advantages-of-contenteditable\" aria-label=\"advantages of contenteditable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advantages of contentEditable</h4>\n<p>To name advantages of contentEditable:</p>\n<ul>\n<li>Fast implementation is available for functions up to a certain level.</li>\n<li>Browser’s entry system is applicable: particularly good for the support of Asian languages which require combination of letters for entries.</li>\n<li>Browser functions such as cursor control, direction keys, Home/End, Pageup/PageDown, Del, and cursor rendering are available.</li>\n<li>Copy and paste is also available.</li>\n</ul>\n<h4 id=\"disadvantages-of-contenteditable\" style=\"position:relative;\"><a href=\"#disadvantages-of-contenteditable\" aria-label=\"disadvantages of contenteditable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disadvantages of contentEditable</h4>\n<p>Disadvantages are so called due to its dependency on browser implementation:</p>\n<ul>\n<li>Font representation and CSS box representation might be slightly different for each browser (e.g. for IE11, font 9 may oddly look larger than font 10; some font of a browser has narrower representation between characters.</li>\n<li>Relevant bugs, when they occur, cannot be handled until the browser provides the patch (for IE11 or lower browsers, support has been suspended. Even with patches provided on bug reports, they are applied only to edges.)</li>\n<li>For the div block tag, with the assignment of contentEditable attribute, comes the edge of Resize Handler, causing unnatural looks. The solution is to hide Resize Handler but it is not easy as it sounds, and no fixed solution is available (the tested browsers are IE11 and Firefox, and IE11 in particular often show up Resize Handler again, even after it is deleted after adding and deleting contentEditable attribute.)</li>\n</ul>\n<h3 id=\"page-representations-in-html\" style=\"position:relative;\"><a href=\"#page-representations-in-html\" aria-label=\"page representations in html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Page Representations in HTML</h3>\n<p>Here, HTML is described as a representational tool of page. HTML, in general, refers to a document with vertical representation: document here doesn’t refer to a paper like A4-size print. Functions like page-break-before and page-break-after are very useful to implement printing and page division, but difficult to represent a page.</p>\n<p>Then, let me define simple requirements of page representation:</p>\n<ul>\n<li>When a paragraph is between two pages, the paragraph can be divided into lines so as to be represented throughout the previous and next pages.</li>\n<li>Entering/deleting characters can lead to page representation in real time.</li>\n</ul>\n<p>Now, based on the requirements, let’s delve into a stage where HTML document is divided into pages (so called, Page Layout).</p>\n<h4 id=\"dividing-a-paragraph-between-two-pages\" style=\"position:relative;\"><a href=\"#dividing-a-paragraph-between-two-pages\" aria-label=\"dividing a paragraph between two pages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dividing a Paragraph between Two Pages</h4>\n<p>Page layout can be enabled in the following steps:</p>\n<p>First, define the length and space of a page to create a space for representation (210mm x 297mm for A4 size, and the actual representation size excludes spaces on top, bottom, left and right. The prerequisite is that DOM has tags for page container). Then,</p>\n<ol>\n<li>Insert the total HTML content inside the nth Page Container tag (n starts with 1).</li>\n<li>Search through the block type-tag inside the nth page in the order, starting from the top and find the first tag which is the (bottom of bottom&#x3C;block of page). Close, if there’s none.</li>\n<li>Divide the block into lines, as the found block tag must be represented throughout pages.</li>\n<li>Search through the divided lines in the order from the top and find the first line which is the (bottom of bottom&#x3C;line of page).</li>\n<li>Divide the block into block-1 and block-2, with the found line at the center.</li>\n<li>Create n+1 page container tag.</li>\n<li>Relocate all the rest tags since block-2 to the n+1 page container tag.</li>\n<li>Repeat 2.</li>\n</ol>\n<h4 id=\"dividing-a-paragraph-into-lines\" style=\"position:relative;\"><a href=\"#dividing-a-paragraph-into-lines\" aria-label=\"dividing a paragraph into lines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dividing a Paragraph into Lines</h4>\n<ol>\n<li>Cover each character of a paragraph (block tag) with span tags (since text nodes only cannot identify the coordinates of a character, covering with tags is required).</li>\n<li>Look through characters covered with tags and find the character which is the bottom of the nth character &#x3C; top of the n+1th character).</li>\n<li>Process the n+1th character in the renewed line.</li>\n<li>Repeat 2. and divide the paragraph into all lines.</li>\n<li>Find the largest bottom of each line.</li>\n<li>Use the bottom of each line in 4. of [<strong>Dividing a Paragraph between Two Pages</strong>].</li>\n<li>Delete all inserted span tags and return to the original paragraph (block tag).</li>\n</ol>\n<p>Perform page layout and the screen shall be configured in the web word with the document represented in pages, as below.</p>\n<p>(The example is a demo screen for page layout of POLARIS Web Editor: the markdown article is edited into 7-page layout.)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vAbcfcOp4PMEsDevEzw7DA.png\" alt=\"image\"></p>\n<h3 id=\"events-requiring-page-layouts-again\" style=\"position:relative;\"><a href=\"#events-requiring-page-layouts-again\" aria-label=\"events requiring page layouts again permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events Requiring Page Layouts Again</h3>\n<p>Some editing performances require page layouts as described above, such as:</p>\n<ul>\n<li>Entry and deletion (including paste) of content including characters (image, text box, or table)</li>\n<li>Style change of content including characters (change of character size, font, paragraph/line spaces, indents, outdents, and etc.)</li>\n<li>Editing of page format (change of width/length or size of page)</li>\n<li>Insertion/deletion of page division marks</li>\n</ul>\n<p>Page layouts must be carried out when these events occur.</p>\n<h2 id=\"performances\" style=\"position:relative;\"><a href=\"#performances\" aria-label=\"performances permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performances</h2>\n<p>Not many web word products provide page representation and editing functions, and one of the reasons regards to performance. Page representation based on the principles in the above requires a huge number of layouts and DOM operations that a browser needs to calculate. In particular, it requires lots of DOM operations to cover each character with span tags while dividing a paragraph into lines. Plus, the layout result of a browser must be imported to use as coordinate of a character, which costs quite much. Considering that such process needs to be repeated for every typing, you can imagine how enormous the job is.</p>\n<p>Even though I haven’t tested all web word processors, in many cases, this type of implementation entails slow typing of each character. The more you enter, the slower it gets. In the case of testing Google Docs on simple characters only, I felt that it got slightly more difficult as I went over 10 pages.</p>\n<p>Let me share two tips to save calculation:</p>\n<ol>\n<li>Calculate again where the change occurred and tags after paragraph (block tag) only.</li>\n<li>Calculate up to the previous page of where the page division is inserted.</li>\n</ol>\n<p>Another point to note for an implementation while considering performance is to make the utmost use of the Javascript optimization method. Also make sure to minimize causing of a force layout. Remove performance-prohibiting codes, by learning <a href=\"/test123/fe-guide/en_ANTI-PATTERN\">anti-patterns</a>. By understanding the concept of <a href=\"/test123/en_PERFORMANCE#layout-and-repaint\">layout or reflow</a>, try not to occur unnecessary layouts.</p>\n<h2 id=\"in-the-next-article\" style=\"position:relative;\"><a href=\"#in-the-next-article\" aria-label=\"in the next article permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In the Next Article</h2>\n<p>In the next article, I will introduce how to implement simple page representation and editing by using actual codes: implementing page editing by using contentEditable, as well as the page layout process after change events of a document (e.g. insertion/deletion of characters) will all be shared.</p>\n<h2 id=\"course-of-direction\" style=\"position:relative;\"><a href=\"#course-of-direction\" aria-label=\"course of direction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Course of Direction</h2>\n<p>The emergence of new APIs like, WebGL, WebAssembly, or File/ DB of HTML5 indicates that a web is now considered as a platform where traditional works, functions and services can be processed. And the development is still ongoing. The transition from native word processors to web words is part of the process. Some environment, like Chromebook, even provides web words only through Google Docs, without having a native web word processor.</p>\n<p>Such trend is no exception to Korea. Many public institutions began to define Active X-based native word processor as non-standard and are trying hard to introduce web word. Nevertheless, given that Korean users tend to focus more on expression than content of a document, I suppose we’ve just joined the flow of web word: front-end developers have many to contribute.</p>\n<p>Supposedly, if a majority of Korean users fade away from IE11 and lower versions and move on to Edge, the flow of transition to web word would probably gain more momentum.</p>","frontmatter":{"id":"en_20171226","title":"Basics of Web Word Processor (1)","description":"The history of Web Word Processor (or, web word) began earlier than expected. It was known widely to the public in 2006 as Google Docs was introduced, so the software is more than a decade long. ThinkFree aimed for a web word running on a web browser under Java Applet.","date":"2017.12.26","author":"DongSik Yoo","tags":["etc"],"thumbnail":"https://image.toast.com/aaaadh/real/2018/repimg/uC6F9 uC6CCuB4DCuD504uB85CuC138uC11C uAE30uCD08 uB9CCuB4E4uC5B4 uBCF4uAE301uBE44uC728uC870uC815_thumbnail.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_20171226","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}