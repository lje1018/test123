{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170317","result":{"data":{"post":{"html":"<p><img src=\"https://cloud.githubusercontent.com/assets/1215767/24938326/66956c0a-1f71-11e7-9f52-092da1f75556.png\" alt=\"javascript_aop\"></p>\n<p>지난주 ES6 Proxy에 대해 쓴 FE Weekly의 연관 주제로 자바스크립트 <a href=\"https://www.cs.ubc.ca/~gregor/papers/kiczales-ECOOP1997-AOP.pdf\">AOP(Aspect Oriented Programming)</a>를 정했다.</p>\n<h2 id=\"aopaspect-oriented-programming가-뭔데\" style=\"position:relative;\"><a href=\"#aopaspect-oriented-programming%EA%B0%80-%EB%AD%94%EB%8D%B0\" aria-label=\"aopaspect oriented programming가 뭔데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP(Aspect Oriented Programming)가 뭔데?</h2>\n<p>자바스크립트 개발 이야기에서 AOP는 생소한 주제이다. 보통 AOP 개념을 설명할 때 대표적으로 <strong>Cross-cutting Concern</strong> 이라는 말을 한다. 직역하자면 <strong>횡단 관심사</strong> 라고할 수 있겠으나, 조금 더 쉽게 얘기하자면 <em>\"로그를 남겨야 할 곳은 여기, 저기, 그리고 또 저기가 되겠군\"</em>, <em>\"사용자 입력을 받는 이~러한 부분들에서는 유효성을 검증해야 해\"</em> 라고 표현할 수 있는 <strong>공통된 관심사</strong> 정도로 표현할 수 있겠다.</p>\n<h2 id=\"아래의-예제를-먼저-살펴보자\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%9E%98%EC%9D%98-%EC%98%88%EC%A0%9C%EB%A5%BC-%EB%A8%BC%EC%A0%80-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"아래의 예제를 먼저 살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아래의 예제를 먼저 살펴보자</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">getByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isbn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isbn<span class=\"token operator\">:</span> isbn\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">book</span> <span class=\"token operator\">=></span> book<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AOP가 적용될 수 있는 사례를 살펴보기 위해 <code class=\"tui-language-text\">BookCollection</code>에서 <code class=\"tui-language-text\">Book</code>을 가져오는 예제를 적어놓았다. ISBN으로 책 이름을 가져오는 간단한 코드이다. 그러면 이제 이 코드에 로그를 추가해보면 아래처럼 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isbn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isbn<span class=\"token operator\">:</span> isbn\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">book</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                Logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Retrieving book </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>isbn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>book<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has been succeed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> book<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                Logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Retrieving book </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>isbn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has been failed. </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개발자의 할 일은 이렇게 간단히 끝날 리 없다. 여기에 더해서 캐시, 유효값 검증 등을 더 추가해보면 코드는 어떤 모양이 될까? <code class=\"tui-language-text\">then().then().then()</code> 이 몇개 더 추가될 것 같다. 이런 식으로 점점 길어지는 코드를 보고 있자면, 나는 오로지 책 정보 하나를 가져오고 싶었을 뿐인데 배보다 배꼽이 커진 상태는 이미 한참 전이다. 이제는 클래스의 이름이 BookCollection이 맞는지도 의문이 들기 시작한다. 밥 삼촌은 한 클래스에서 하나씩만 신경 쓰라고 했는데 이래도 되는 걸까. 모양이 전혀 마음에 들지 않으니 이번에는 클래스를 나눠서 보기 좋게 바꿔보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Collection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isbn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isbn<span class=\"token operator\">:</span> isbn\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            cache<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            onSuccess<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span>\n            onFail<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            log<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                message<span class=\"token operator\">:</span> <span class=\"token string\">'Retrieving Book {} - {} has been succeed'</span><span class=\"token punctuation\">,</span>\n                params<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                level<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이것이 정말 나아진 것일까. 물론 우리는 위의 예제보다 더 나은 해결 방법을 찾을 수도 있겠지만, 결국에는 긴 이름의 클래스, 복잡한 상속관계 혹은 가독성이 조금 더 나아진 정도로 만족해야 할 것이다.</p>\n<h2 id=\"aop를-쓰면-조금-나아지나\" style=\"position:relative;\"><a href=\"#aop%EB%A5%BC-%EC%93%B0%EB%A9%B4-%EC%A1%B0%EA%B8%88-%EB%82%98%EC%95%84%EC%A7%80%EB%82%98\" aria-label=\"aop를 쓰면 조금 나아지나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP를 쓰면 조금 나아지나</h2>\n<p>아래의 코드는 <a href=\"https://github.com/mgechev/aspect.js\">aspect.js</a>라는 라이브러리에서 사용하는 문법을 따라 작성했다. 아마도 자바 개발자들에게 더 익숙한 모양이라 생각한다. 생소해 보이는 분들이라도 직관적으로 <em>\"아! BookCollection.getNameByISBN 호출 이후에 로그를 남기려는 것이로군!\"</em> 하고 유추할 수 있으면 된다. 이 글의 목적은 해당 라이브러리의 소개에 있지 않으므로 이런 식으로 분리할 수 있다는 것만 이해하고 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerAspect</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    @<span class=\"token function\">afterMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        methodNamePattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^getNameByISBN$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        classNamePattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^BookCollection$</span><span class=\"token regex-delimiter\">/</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">afterGetNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">meta</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n        Logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Retrieving </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>isbn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has been succeed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n@Wove\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> article</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isbn<span class=\"token operator\">:</span> isbn\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            cache<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            onSuccess<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span>\n            onFail<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>한결 나아 보이지 않는가? <code class=\"tui-language-text\">BookCollection</code>은 데이터를 가져오는데 집중하고 있고, 로그는 완벽히 분리된 클래스에서 수행하고 있다.\n그러면 이번에는 <code class=\"tui-language-text\">CacheAspect</code>도 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheAspect</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    @<span class=\"token function\">beforeMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        methodNamePattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^get.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        classNamePattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[Book|User]Collection$</span><span class=\"token regex-delimiter\">/</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">beforeGet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">meta<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>meta<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span>proceed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            method<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            method<span class=\"token punctuation\">.</span>proceed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n@Wove\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> article</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isbn<span class=\"token operator\">:</span> isbn\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            onSuccess<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span>\n            onFail<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>오! <code class=\"tui-language-text\">BookCollection</code>에 역할과 무관한 코드가 줄어들었고, 본연의 역할이 뚜렷히 보인다. 이런 식으로 Aspect를 늘려가면 된다. 그리고 Aspect가 얼마나 많이 늘어나든 <code class=\"tui-language-text\">BookCollection</code>에는 자신의 역할을 위한 코드만이 존재하게 될 것이다. 더불어 위에서 이름 패턴을 <code class=\"tui-language-text\">/^get.*/</code>식으로 주어 여러 클래스와 메소드들에 적용될 수 있음을 주시하자. <code class=\"tui-language-text\">Collection</code>클래스들이 혹은 공통된 동작을 수행하고 싶은 더 많은 클래스들이 존재한다 하더라도, 코드 한줄 늘이지 않고 모두 적용 시켜줄 수 있다. 이를 처음에 설명한 개념대로 다시 얘기하자면 <code class=\"tui-language-text\">Collection</code>클래스들의 <strong>Cross-cutting Concern</strong> 에 해당하는 로깅, 캐싱 등을 분리했다 하겠다. 이쯤에서, 이런 식으로 정말 작동될 수 있는 코드인지 의심이 된다면 <a href=\"https://github.com/mgechev/aspect.js\">aspect.js</a>에 가서 예제를 따라 해봐도 좋겠다. <a href=\"https://babeljs.io/\">Babel</a>과 <a href=\"https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\">Decorator plugin</a>도 잊지말고 챙겨가자.</p>\n<h2 id=\"하지만-decorators라니\" style=\"position:relative;\"><a href=\"#%ED%95%98%EC%A7%80%EB%A7%8C-decorators%EB%9D%BC%EB%8B%88\" aria-label=\"하지만 decorators라니 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하지만 Decorators라니!</h2>\n<p>Decorators는 ES7 표준으로 준비 중이다. 이미 위의 예제를 보면서 불평했겠지만, 해당 라이브러리는 아직 표준이 정해지지 않은 Decorators에 의존하고 있다(<a href=\"https://esdiscuss.org/notes/2016-07-28\">TC39 Notes, July 28 2016</a>, <a href=\"https://github.com/babel/babel/issues/2645\">Implement new decorator proposal when finalized</a>). <a href=\"https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\">Babel Legacy Decorator plugin</a>을 사용해서 예제를 따라 해 볼 수는 있으나, 실제 프로젝트에 적용할 용감한 사람은 없으리라 믿는다. 물론 <a href=\"https://github.com/mgechev/aspect.js\">aspect.js</a>이외에 바로 사용할 수 있는 라이브러리들이 보이긴 했지만, 설명이 용이하고, 개념을 충실히 구현한 것으로 찾다보니 aspect.js가 선택되었다. 지금 바로 무언가에 적용해 보고 싶다면 <a href=\"https://github.com/cujojs/meld\">meld</a>나 다른 라이브러리들을 찾아 볼 수도 있다. 물론 meld를 포함한 다른 라이브러리들도 있다. 다만 이번에 AOP 자바스크립트 라이브러리들을 찾아보며 생각보다 많지 않은 옵션에 약간 실망한 것도 사실이다.</p>\n<h2 id=\"직접-짜볼까\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%EC%A7%9C%EB%B3%BC%EA%B9%8C\" aria-label=\"직접 짜볼까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접 짜볼까?</h2>\n<p>이 짧은 글로 모든 것을 설명하기는 힘드니 Proxy + Decorator가 어떻게 AOP가 될 수 있는지 짧막히 힌트가 될 코드만 적어본다. 먼저 맨 앞에서 AOP가 Proxy의 연관주제라고 했던 것을 기억하는가? 아래는 <code class=\"tui-language-text\">AOP Advice</code>(실제 동작될 코드)가 작동하는 방식을 Proxy를 활용하여 흉내내는 코드이다. Proxy와 Class는 현시점에서 최신 브라우저에서 구현되어있으므로 아래 그대로 복사 붙여넣기 해봐도 잘 동작한다.(또 다른 힌트를 주자면 IE는 안된다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            name <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> target<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n            value <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Function </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> retrieved result </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isbn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            isbn<span class=\"token operator\">:</span> isbn<span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Proxy + Decorators = AOP'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">BookCollection</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookCollection</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^get.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BookCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sdaf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Function getNameByISBN retrieved result {\"isbn\":\"some-isbn\",\"name\":\"Proxy + Decorator = AOP\"}</span>\n<span class=\"token comment\">// Object {isbn: \"some-isbn\", name: \"Proxy + Decorator = AOP\"}</span></code></pre></div>\n<p>위의 코드는 <code class=\"tui-language-text\">BookCollection</code>프로토타입에 Proxy를 만들어 주어진 패턴의 함수가 실행될 경우에만 로그를 같이 실행하는 동작을 한다. <a href=\"/test123/weekly-pick/ko_20170313/\">ES6 기능 - 프락시 사용 사례 10가지</a>를 읽고온 독자라면 충분히 이해할 수 있을 것이라 본다. 그럼 이제 Decorators를 사용해서 Logger를 묶어보는 방식으로 코드를 바꿔보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">wove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">wove</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^get.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollection</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isbn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      isbn<span class=\"token operator\">:</span> isbn<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Proxy + Decorators = AOP\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BookCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNameByISBN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sdaf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Function getNameByISBN retrieved result {\"isbn\":\"some-isbn\",\"name\":\"Proxy + Decorator = AOP\"}</span>\n<span class=\"token comment\">// Object {isbn: \"some-isbn\", name: \"Proxy + Decorator = AOP\"}</span></code></pre></div>\n<p><code class=\"tui-language-text\">@wove</code> Decorators에 당황하지 말자. 위의 <code class=\"tui-language-text\">@wove</code>는 아래의 코드와 완벽히 동일한 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">wove</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^get.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BookCollection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>조금 더 Descriptors에 대해 이해하고 싶다면 <a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.yn607pj7t\">Decorators</a>, <a href=\"https://rreverser.com/ecmascript-decorators-and-functions/\">Decorators and functions</a>\n를 읽어보자. Decorators는 Stage2 Draft단계이며, 현재의 표준에도 이견이 이어지고 있는만큼 추후 바뀔 여지가 있다는 것을 감안하고 보자. 물론 aspect.js가 제공하는 방법은 위의 코드보다 훨씬 더 복잡하다. 그러나 여기까지의 원리를 이해한다면 AOP를 소개하며 소개했던 코드가 어떤식으로 동작하게 되는지 상상해보는데는 충분하리라 본다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>자바 세상에서 AOP를 표현하는 단어로 <strong>Black Magic</strong> 이라는 말이 있다. 제임스 고슬링은 <a href=\"http://www.eweek.com/it-management/suns-gosling-new-java-flavors-brewing?page=3\">eWeek과의 인터뷰</a>에서 \"위험한\", \"문제덩어리\", 그리고 <a href=\"http://www.eweek.com/development/you-down-with-aop\">\"설명서 없이 전기톱을 쥐여주는 짓\"</a>이라고 말한 바 있다. 이는 OOP로 꼼꼼하게 짜인 자바 세상의 대원칙을 무시하고 AOP코드들이 싹둑 잘라 들어오는(말 그대로 Cross-cutting하는)것 처럼 보였기 때문이리라 생각한다. 그렇다면 자바스크립트의 AOP역시 <strong>흑마법</strong>같은 존재가 될까? 가만히 생각해보면 우리는 거창하게 AOP라는 말을 쓰지 않아도, AspectJ같은 도구가 없어도, 이미 더 무지막지한 레이저 블레이를 휘두를 수도 있다. 이미 짜인 코드에 Aspect를 적용하기 위해 AspectJ가 해야 하는 일을 생각해보면 아래의 자바스크립트 코드는 참 쉽고 자연스럽다.(이러면 안된다고 생각 할지라도)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">let</span> originalFunction <span class=\"token operator\">=</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getNameByISBN<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Collection</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getNameByISBN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">originalFunction</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Retrieving </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>isbn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has been succeed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트는 ES6, ES7 표준의 방향이나 Typescript의 인기 등 점차 우리에게 익숙한 도구인 OOP대로 구현할 수 있도록 모양새를 갖춰가고 있다. 그에 따라 자연스럽게 이를 보완해줄 수 있는 AOP에 도구도 더 나아지고 이에 대한 얘기도 더 나오게 되지 않을까 생각해본다. 이번에는 Proxy복습겸, AOP복습겸 자바스크립트 라이브러리 둘러보는 정도로 마무리를 한다. 이 글은 소개 정도에서 마치므로, 이 주제에 대해 가지고 있는 생각이 있다면 의견을 나누어 주면 좋겠다. 필자도 조금 더 고민해보고 다른 생각이 들면 다시 생각을 공유해 보기로 하겠다.</p>\n<h2 id=\"참고글\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EA%B8%80\" aria-label=\"참고글 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고글</h2>\n<ul>\n<li>\n<p>AOP in Javascript</p>\n<ul>\n<li><a href=\"http://blog.mgechev.com/2015/07/29/aspect-oriented-programming-javascript-aop-js/\">Aspect-Oriented Programming in JavaScript</a></li>\n<li><a href=\"https://software.intel.com/en-us/html5/hub/blogs/oop-is-not-your-hammer/\">OOP Is Not Your Hammer</a></li>\n<li><a href=\"http://know.cujojs.com/tutorials/aop/intro-to-aspect-oriented-programming\">Intro to Aspect Oriented Programming</a></li>\n</ul>\n</li>\n<li>\n<p>ECMAScript Proxy</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li>\n</ul>\n</li>\n<li>\n<p>ECMAScript Decorators</p>\n<ul>\n<li><a href=\"https://esdiscuss.org/notes/2016-07-28\">TC39 Notes, July 28 2016</a></li>\n<li><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.yn607pj7t\">Decorators</a></li>\n<li><a href=\"https://rreverser.com/ecmascript-decorators-and-functions/\">Decorators and functions</a></li>\n</ul>\n</li>\n<li>\n<p>Babel</p>\n<ul>\n<li><a href=\"https://github.com/babel/babel/issues/2645\">Implement new decorator proposal when finalized</a></li>\n</ul>\n</li>\n<li>\n<p>Interviews with \"fathers\" of languages about AOP</p>\n<ul>\n<li><a href=\"http://www.eweek.com/development/you-down-with-aop\">eWeek - You Down with AOP?</a></li>\n<li><a href=\"http://www.eweek.com/it-management/suns-gosling-new-java-flavors-brewing?page=3\">Suns Gosling - The dangers of aspect-oriented programming</a></li>\n</ul>\n</li>\n<li>\n<p>Libraries</p>\n<ul>\n<li><a href=\"https://github.com/mgechev/aspect.js\">aspect.js</a></li>\n<li><a href=\"https://github.com/cujojs/meld\">meld</a></li>\n<li><a href=\"https://www.npmjs.com/package/aspect-js\">aspect-js</a></li>\n<li><a href=\"https://github.com/k1r0s/kaop\">kaop</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"id":"ko_20170317","title":"AOP(Aspect Oriented Programming)가 뭔데?","description":"자바스크립트 개발 이야기에서 AOP는 생소한 주제이다. 보통 AOP 개념을 설명할 때 대표적으로 Cross-cutting Concern 이라는 말을 한다. 직역하자면 횡단 관심사 라고할 수 있겠으나, 조금 더 쉽게 얘기하자면 \"로그를 남겨야 할 곳은 여기, 저기, 그리고 또 저기가 되겠군\", \"사용자 입력을 받는 이~러한 부분들에서는 유효성을 검증해야 해\" 라고 표현할 수 있는 공통된 관심사 정도로 표현할 수 있겠다.","date":"2017.03.17","author":"최규우","tags":["design-pattern","ecmascript"],"thumbnail":"https://cloud.githubusercontent.com/assets/1215767/24938326/66956c0a-1f71-11e7-9f52-092da1f75556.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170317","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}