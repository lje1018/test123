{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20180510","result":{"data":{"post":{"html":"<h1 id=\"angularjs의-----바인딩-해부하기\" style=\"position:relative;\"><a href=\"#angularjs%EC%9D%98-----%EB%B0%94%EC%9D%B8%EB%94%A9-%ED%95%B4%EB%B6%80%ED%95%98%EA%B8%B0\" aria-label=\"angularjs의     바인딩 해부하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AngularJS의 @ &#x3C; &#x26; = 바인딩 해부하기</h1>\n<blockquote>\n<p>원문<br>\nDavid Waller, <a href=\"http://blog.krawaller.se/posts/dissecting-bindings-in-angularjs/\">http://blog.krawaller.se/posts/dissecting-bindings-in-angularjs/</a></p>\n</blockquote>\n<br>\n<blockquote>\n<p>AngularJS의 디렉티브/컴포넌트에서 @ &#x3C; &#x26; = 가 실제로 어떻게 동작하는 지 알아보고, &#x3C; 기호가 어떻게 나머지 기호들을 대체할 수 있는 지 알아보자.</p>\n</blockquote>\n<h2 id=\"시작하기에-앞서\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"시작하기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기에 앞서</h2>\n<p>AngularJS에서는 컴포넌트(또는 디렉티브)를 정의할 때, 엘리먼트의 속성들로 내부 스코프의 변수를 생성할 수 있다. 이렇게하기 위한 API는 다소 복잡하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    attr1<span class=\"token operator\">:</span> <span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span>\n    attr2<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span>\n    attr3<span class=\"token operator\">:</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">,</span>\n    attr4<span class=\"token operator\">:</span> <span class=\"token string\">'&amp;'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 이 API를 사용할 때마다 골머리를 앓는 것에 지쳤다. 그래서 이번 포스팅에서 이 4가지 표현이 갖는 차이점에 대해 완전히 해부해볼 것이다.</p>\n<p>구체적으로 우리는...</p>\n<ul>\n<li>문자열을 전달하는 방식(<code class=\"tui-language-text\">@</code>)에 대해 알게될 것이다.</li>\n<li>동적 표현식을 전달하는 방식(<code class=\"tui-language-text\">&lt;</code>)에 대해 알게될 것이다.</li>\n<li>내부 스코프의 값을 캐치하는 방식(<code class=\"tui-language-text\">&amp;</code>)에 대해 알게될 것이다.</li>\n<li>양방향 데이터 바인딩을 하는 방식(<code class=\"tui-language-text\">=</code>)에 대해 알게될 것이다.</li>\n<li>위의 네 표현식을 사용하지 않고, 해당하는 기능을 구현하는 방법에 대해 알게될 것이다.</li>\n<li><code class=\"tui-language-text\">&lt;</code>이 다른 세 표현식을 대체할 수 있는(kicks the ass of the other three) 이유에 대해 알게될 것이다.</li>\n</ul>\n<h2 id=\"속성을-문자열로-읽기\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EC%84%B1%EC%9D%84-%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EC%9D%BD%EA%B8%B0\" aria-label=\"속성을 문자열로 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속성을 문자열로 읽기</h2>\n<p><code class=\"tui-language-text\">@</code> 바인딩부터 시작하자. 이 방식은 단순히 속성 값을 문자열로 읽기 때문에 4가지 중 가장 와닿는 기호이다 . 다른 말로하면, 컴포넌트에 <strong>문자열을 전달</strong>하는 것이다.</p>\n<p>이런 컴포넌트를 만들었다고 하자:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readingstring'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'@'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>text: &lt;strong>{{$ctrl.text}}&lt;/strong>&lt;/p>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 우리는 이 컴포넌트를 이렇게 렌더링한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>readingstring</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>readingstring</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그러면, 화면에는 이렇게 보인다:</p>\n<p><img src=\"/files/2209550259494375088\" alt=\"@표현식예시\"></p>\n<p><code class=\"tui-language-text\">@</code> 바인딩을 사용하면, 주어진 속성의 문자열 값으로 채워진 내부 변수가 만들어진다. 이 방식은 컴포넌트의 <strong>초기 설정</strong>을 위한 문자열 전달을 위해 사용되기도 한다.</p>\n<h2 id=\"속성을-표현식으로-실행하기\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EC%84%B1%EC%9D%84-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"속성을 표현식으로 실행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속성을 표현식으로 실행하기</h2>\n<p>더 흥미로운 점은 속성을 표현식으로 실행하고, 이 표현식에 변경이 있을 때마다 다시 실행되는 경우가 있을 수 있다는 점이다. 동적인 입력말이다!</p>\n<p>우리가 바라는 것은 렌더링 시에 동적인 표현식을 속성으로 지정해주면,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dynamicinput</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outervariable<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dynamicinput</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>표현식의 실행결과가 컴포넌트에 전달되는 것이다.\n<img src=\"/files/2209554557167322728\" alt=\"=표현식예시\"></p>\n<p>AngularJS 1.5 이전에는 <code class=\"tui-language-text\">=</code> 바인딩이 표현식을 동적으로 전달하기 위한 유일한 문법이었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dynamicinput\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">in</span><span class=\"token operator\">:</span> <span class=\"token string\">'='</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>dynamic input: &lt;strong>{{$ctrl.in}}&lt;/strong>&lt;/p>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">=</code> 바인딩의 안 좋은 점은 이 방식이 단방향 바인딩만이 필요한 경우임에도 불구하고 <strong>양방향 데이터 바인딩</strong>을 형성한다는 것이다. 이는 또한 우리가 전달하는 표현식이 <strong>반드시 변수</strong>여야 한다는 것을 의미한다.</p>\n<p>그러나 AngularJS 1.5에서부터 <strong>단방향 데이터 바인딩</strong>을 할 수 있는 <code class=\"tui-language-text\">&lt;</code> 바인딩이 나타났다. 이 덕분에 함수표현식을 포함하는 어떤 표현식이던 지 사용할 수 있게 되었다:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dynamicinput</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>calculateSomething()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dynamicinput</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"tui-language-text\">=</code>이 <code class=\"tui-language-text\">&lt;</code>으로 바뀐다는 점만 빼면, 컴포넌트 구현 방식은 완전히 같다.</p>\n<h2 id=\"컴포넌트-내부의-값을-받아오기\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%82%B4%EB%B6%80%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0\" aria-label=\"컴포넌트 내부의 값을 받아오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 내부의 값을 받아오기</h2>\n<p>상황을 바꿔볼 때가 되었다 - 컴포넌트 안의 값을 전달받으려면 어떻게 해야할까?\n아래의 작은 애플리케이션을 보자 - 버튼들은 자식 컴포넌트 안에서 렌더링되고 있는 데, 이것을 클릭했을 때 컴포넌트 밖의 값이 갱신되었으면 좋겠다.</p>\n<p><img src=\"/files/2209564043222258753\" alt=\"&#x26;표현식예시\"></p>\n<p>이 경우, <code class=\"tui-language-text\">&amp;</code>바인딩을 사용하면 된다. 이는 <strong>어트리뷰트의 값을 하나의 구문(statement)으로 보고 이를 하나의 함수로 감싼다</strong>. 컴포넌트는 원하는 대로 해당 함수를 호출하고, 명령문 속의 변수의 값을 가져온다. 부모 컴포넌트로 값을 보낼 수 있다!</p>\n<p>이렇게 렌더링하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">Outer value: {{count}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>output</span> <span class=\"token attr-name\">out</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count = count + amount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>output</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"tui-language-text\">&amp;</code>바인딩을 사용하는 <code class=\"tui-language-text\">output</code> 컴포넌트를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> out<span class=\"token operator\">:</span> <span class=\"token string\">'&amp;'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;button ng-click=\"$ctrl.out({amount: 1})\">buy one&lt;/button>\n        &lt;button ng-click=\"$ctrl.out({amount: 5})\">buy many&lt;/button>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이때, 필요한 변수를 객체를 통해 전달하는 방식에 주목해보자. 복잡한 문법을 통해 컴포넌트에서 출력값이 필요한 경우에는 두 가지를 알아야 한다는 것을 알 수 있다.</p>\n<ul>\n<li>사용할 속성(들)의 이름</li>\n<li>변수의 이름</li>\n</ul>\n<p><code class=\"tui-language-text\">&amp;</code>바인딩 패턴은 복잡한 편이다. 그래서 대부분은 컴포넌트 안의 값을 받아오기 위해 <code class=\"tui-language-text\">=</code> 바인딩을 사용한다.</p>\n<p>이 경우, 전달받고자 하는 변수를  컴포넌트의 속성으로 지정하기면 하면</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">Outer value: {{count}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>output</span> <span class=\"token attr-name\">out</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>output</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>간단하게 컴포넌트 안의 변수를 변경하고, 변경된 값을 외부에서 전달받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> out<span class=\"token operator\">:</span> <span class=\"token string\">'='</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>\n        &lt;button ng-click=\"$ctrl.out = $ctrl.out + 1;\">buy one&lt;/button>\n        &lt;button ng-click=\"$ctrl.out = $ctrl.out + 5;\">buy many&lt;/button>\n    &lt;/div></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이는 정말이지 아름다운 방식이 아니다:</p>\n<ul>\n<li>단방향 바인딩이 필요함에도 불구하고, 또 다시 양방향 바인딩을 하고 있다.</li>\n<li>저장된 출력값을 사용하려는 것이 아닌, 출력값의 변경에 대한 즉각적인 반응을 원한 것일 수 있다.</li>\n</ul>\n<p>위의 모든 방식보다 나은 해결방법은 <code class=\"tui-language-text\">&lt;</code>을 사용하여, 콜백함수로부터 출력값을 생성하는 것이다!</p>\n<p>외부 컨트롤러에 콜백 함수를 만들고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">$scope<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">amout</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $scope<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> amout<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴포넌트 안으로 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>output</span> <span class=\"token attr-name\">out</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>callback<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>output</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>컴포넌트는 이제 콜백함수를 적당한 때에 호출한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> out<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;button ng-click=\"$ctrl.out(1)\">buy one&lt;/button>\n    &lt;button ng-click=\"$ctrl.out(5)\">buy many&lt;/button>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">&amp;</code> 바인딩과 비슷하지만, 복잡하지 않다!</p>\n<p>이런 점을 제쳐두더라도, 콜백 함수를 통해 컴포넌트 내부의 값을 전달받는 패턴이 React에서 방식과 정확히 일치한다는 점이 인상적이다.</p>\n<h2 id=\"양방향-데이터-바인딩\" style=\"position:relative;\"><a href=\"#%EC%96%91%EB%B0%A9%ED%96%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"양방향 데이터 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>양방향 데이터 바인딩</h2>\n<p><code class=\"tui-language-text\">=</code> 바인딩은 AngularJS를 홍보할 때 주로 강조하는 부분이다. 다음 애플리케이션을 보자.</p>\n<p><img src=\"/files/2209587714515378129\" alt=\"=표현식예제\"></p>\n<p>위의 애플리케이션은 아래와 같이 렌더링하고</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">Outer: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ng-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>twoway</span> <span class=\"token attr-name\">connection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>twoway</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"tui-language-text\">=</code>바인딩을 사용해서 <code class=\"tui-language-text\">twoway</code> 컴포넌트를 구현해서 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"twoway\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> connection<span class=\"token operator\">:</span> <span class=\"token string\">'='</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">inner: &lt;input ng-model=\"$ctrl.connection\"></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>정말 쉽다, 그러나 양방향 데이터 바인딩은 거의 필요하지 않다는 것에 주목하자. 때때로 정말 필요한 것은 입력과 출력뿐일 수 있다.</p>\n<p>따라서 <code class=\"tui-language-text\">&lt;</code>만을 사용해서 양방향 데이터 바인딩을 구현할 수 있다.\n외부 컨트롤러에 콜백함수를 생성하고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">$scope<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $scope<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newval<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>입력값과 콜백함수를 전달해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>twoway</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">callback</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>callback<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>twoway</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 컴포넌트를 다음과 같이 만들자:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"twowayin\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span>\n        callback<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;input ng-model=\"$ctrl.value\" ng-change=\"$ctrl.callback($ctrl.value)\">\n        </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>양방향 데이터 바인딩이 되고 있다. 하지만 여전히 단반향 데이터 흐름을 고수하고 있다. 더 나은 방법이다!</p>\n<h2 id=\"기호없이-구현하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%98%B8%EC%97%86%EC%9D%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"기호없이 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기호없이 구현하기</h2>\n<p>사실, 4가지 기호들은 그저 축약 표현일 뿐이다. 이 모든 것들을 기호 없이 할 수 있다.</p>\n<p><strong># 문자열을 전달받는 애플리케이션</strong></p>\n<p><img src=\"/files/2209550259494375088\" alt=\"@표현식예시\"></p>\n<p>이 디렉티브가 위에 처럼 렌더링되려면, 아래의 예제코드처럼 뷰를 작성하고</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>readingstring</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>readingstring</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>컴포넌트에서 <code class=\"tui-language-text\">$element</code> 서비스에 직접 접근하도록 구현하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readingstring\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">controller</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> $element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>text: &lt;strong>{{$ctrl.text}}&lt;/strong>&lt;/p>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또는 디렉티브인 경우, <code class=\"tui-language-text\">link</code> 함수에 <code class=\"tui-language-text\">attrs</code>를 전달하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readingstring\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        restrict<span class=\"token operator\">:</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span>\n        scope<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">link</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">,</span> attrs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            scope<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> attrs<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>text: &lt;strong>{{text}}&lt;/strong>&lt;/p>'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong># 동적인 표현식을 입력받는 애플리케이션</strong></p>\n<p><img src=\"/files/2209554557167322728\" alt=\"=표현식예시\"></p>\n<p>아래 코드처럼 렌더링하고</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dynamicinput</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outervariable<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dynamicinput</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>다음과 같이 부모 스코프에서 <code class=\"tui-language-text\">$watch</code>를 호출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dynamicinput\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">controller</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$scope<span class=\"token punctuation\">,</span> $element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> expression <span class=\"token operator\">=</span> $element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        $scope<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> <span class=\"token parameter\">newVal</span> <span class=\"token operator\">=></span> $scope<span class=\"token punctuation\">.</span>in <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>dynamic input: &lt;strong>{{in}}&lt;/strong>&lt;/p>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong># 컴포넌트 밖에서 컴포넌트의 데이터를 전달받는  애플리케이션</strong></p>\n<p><img src=\"/files/2209564043222258753\" alt=\"&#x26;표현식예시\"></p>\n<p>이렇게 렌더링하고</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>output</span> <span class=\"token attr-name\">out</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count = count + amount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>output</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>부모 스코프에서 <code class=\"tui-language-text\">$scope.$apply</code>를 호출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">controller</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$scope<span class=\"token punctuation\">,</span> $element<span class=\"token punctuation\">,</span> $timeout</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> statement <span class=\"token operator\">=</span> $element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        $scope<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increaseBy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">by</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">$timeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                $scope<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span><span class=\"token function\">$apply</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">amount = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>by<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">; </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>statement<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;button ng-click=\"increaseBy(1)\">buy one&lt;/button>\n        &lt;button ng-click=\"increaseBy(5)\">buy many&lt;/button>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사실, 이 방식은 <code class=\"tui-language-text\">&amp;</code>와 완전히 같은 방식은 아니다. 왜냐하면 <code class=\"tui-language-text\">amount</code> 변수가 부모 스코프에 전달되어 부모 스코프를 오염시키기 때문이다. 하지만, 값을 외부로 전달한다는 개념을 충분히 잘 표현하고 있다.</p>\n<p><strong># 양방향 바인딩 애플리케이션</strong></p>\n<p><img src=\"/files/2209587714515378129\" alt=\"=표현식예제\"></p>\n<p>다음과 같이 렌더링하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>twoway</span> <span class=\"token attr-name\">connection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>twoway</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>부모와 자식 스코프 모두에 <code class=\"tui-language-text\">$watch</code>를 설정하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"twoway\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">controller</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$scope<span class=\"token punctuation\">,</span> $element<span class=\"token punctuation\">,</span> $timeout</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> variable <span class=\"token operator\">=</span> $element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        $scope<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span>variable<span class=\"token punctuation\">,</span> <span class=\"token parameter\">newVal</span> <span class=\"token operator\">=></span> $scope<span class=\"token punctuation\">.</span>inner <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n        $scope<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inner'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>newVal<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">$timeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            $scope<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span><span class=\"token function\">$apply</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>variable<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newVal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\";</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">inner: &lt;input ng-model=\"inner\"></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방식은 바인딩되는 값을 항상 문자열로 가정하기 때문에 약간 부족한 구현이지만, 말하고자 하는 바가 무엇인 지 전달될 것이다.</p>\n<h2 id=\"정리하기\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"정리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리하기</h2>\n<p>필자는 지금까지의 여정이 교육적이었고, 이제 여러분이 <code class=\"tui-language-text\">@</code>, <code class=\"tui-language-text\">&lt;</code>, <code class=\"tui-language-text\">=</code>, 그리고 <code class=\"tui-language-text\">&amp;</code> 바인딩을 덜 무서워하길 바란다.\n그리고 <code class=\"tui-language-text\">&lt;</code> 바인딩이 어떻게 나머지 표현들을 대체하는 지 알아챘기를 바란다. 이 표현식은 모든 것을 할 수 있다. <code class=\"tui-language-text\">=</code> 바인딩도 물론 할 수 있지만, <code class=\"tui-language-text\">&lt;</code> 바인딩이 더 좋은 방식이다.</p>\n<p><img src=\"http://blog.krawaller.se/img/angularjschart.png\" alt=\"표현식 정리\"></p>\n<p>두 개 모두 문자열을 읽는 용도로는 적당하지 않은 것 같지만(<code class=\"tui-language-text\">&lt;</code>은 문자열 리터럴이 필요하다 , 그리고 <code class=\"tui-language-text\">=</code>는 프록시 변수가 필요하다), 이는 보통의 자바스크립트에서도 할 수 있는 쉬운 것이기 때문에 <code class=\"tui-language-text\">@</code>를 너무 특별하다고 생각할 필요가 없다.</p>\n<p>한편, <code class=\"tui-language-text\">&amp;</code>은 바로바로 결과값을 전달해준다.</p>","frontmatter":{"id":"ko_20180510","title":"AngularJS의 @ < & = 바인딩 해부하기","description":"AngularJS의 디렉티브/컴포넌트에서 @ < & = 가 실제로 어떻게 동작하는 지 알아보고, < 기호가 어떻게 나머지 기호들을 대체할 수 있는 지 알아보자.","date":"2018.05.10","author":"홍유정","tags":["Angular","framework"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20180510","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}