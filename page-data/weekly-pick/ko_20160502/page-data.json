{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20160502","result":{"data":{"post":{"html":"<h1 id=\"es6-symbols-drumroll-please\" style=\"position:relative;\"><a href=\"#es6-symbols-drumroll-please\" aria-label=\"es6 symbols drumroll please permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6 Symbols: Drumroll Please!</h1>\n<blockquote>\n<p>원문<br>\nPaul Shannon, <a href=\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/\">https://www.sitepen.com/blog/es6-symbols-drumroll-please/</a></p>\n</blockquote>\n<p>심볼(Symbols)은 ES6에서 소개된 새롭고 유일한 원시(primitive) 타입이다.\n이들은 자바스크립트 이전 버전에서 작성된 코드와 역방향 호환성을 유지하면서, 객체의 기능을 확장하는 문제를 해결하기 위해 언어에 추가됐다. 그들은 부가적으로 개발자들이 새롭고 흥미로운 방법으로 언어 동작에 영향을 미칠 수 있는 기능을 제공한다. 이 아티클에서는 심볼의 개념 소개와 목적에 대한 설명, 그리고 현재 심볼을 사용할 수 있는 가장 일반적인 방법을 연결 지어 보여주겠다.</p>\n<p>상세한 내용에 들어가기 전에, 새로운 심볼이 어떻게 생성되는지부터 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> mySymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>원시 심볼은  내장 팩토리(factory) 함수를 사용해 생성된다. 팩토리는 기본 요소 구축을 위한 자바스크립트를 통해 사용된다. 예를 들어, 새로운 DOM 엘리먼트(element) 생성은 document.createElement()를 통해 완성된다. 이러한 방식으로 생성된 심볼은 “사용자 정의 심볼(custom symbols)”이라고 한다.</p>\n<p><code class=\"tui-language-text\">Symbol</code> 객체는 “잘 알려진 심볼(well-known symbols)\"이라는 자바스크립가 제공하는 명명된 심볼을 갖는다. 이 심볼들은 자바스크립트에 의해 작성되었으며 상호작용과 근본적인 자바스크립트 코드의 동작을 수정하는데 사용된다. 잘 알려진 심볼(well-known symbols) 중 가장 일반적인 심볼은 <code class=\"tui-language-text\">Symbol.iterator</code>인데, 이는 객체의 값 이상의 반복의 의미를 추가하는데 사용한다. 또한 심볼은 객체를 정규 표현식처럼 사용할 수 있게 하는 것과 타입이 자바스크립트에 보고하는 방법을 바꾸는 것(예를 들면 <code class=\"tui-language-text\">typeof</code>를 통해) 그리고 구성하고 사용자 정의 객체를 변환하는 방법을 허용한다.</p>\n<p>사용할 수 있는 새롭고 유일한 원시 타입과 함께 자바스크립트는 이전에 사용된 이름과의 충돌에 대한 걱정 없이 객체 기능에 추가 할 문자열과 동일한 속성 명의 심볼을 사용할 수 있다. 이것은 중요한 이유는, ECMAScript 스펙이 <code class=\"tui-language-text\">Symbol.iterator</code> 대신 “iterator” 문자열을 선택했다면 속성명으로 “Iterator” 문자열을 사용하는 오래된 코드에서 ECMAScript 6 문맥을 사용할 때 의도하지 않은 결과를 가져올 수 있었기 때문이다.</p>\n<p>심볼은 이름 충돌 문제를 해결했다. 그들은 고유하기 때문에, 이제까지 같은 값을 공유하지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이것은 자바스크립트가 이전에 작성된 코드와 충돌 없이 잘 알려진 심볼 추가하여 지속적으로 기능을 추가할 수 있다는 것을 의미한다.</p>\n<h3 id=\"심볼로-무엇을-할-수-있나\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EB%B3%BC%EB%A1%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98\" aria-label=\"심볼로 무엇을 할 수 있나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심볼로 무엇을 할 수 있나?</h3>\n<p>심볼은 개발자가 확장하는 것을 허용한다 그리고 이것은 자바스크립트 엔진의 행동에 영향을 미칠 수 있다. 예를 들어. 잘 알려진 심볼인 <code class=\"tui-language-text\">Symbol.iterator</code>(또는  @@iterator 참조 값)를 사용하여, 객체로 <code class=\"tui-language-text\">for...of</code>나  펼쳐짐(spread) 연산자를 사용하는 경우, 제공된 데이터가 무엇인지에 대해 설명할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span> rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> rest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> item<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// outputs: [ 1, 2, 3 ]</span></code></pre></div>\n<p>이 예제에서 자바스크립트 엔진은 @@iterator 를 구현한 사용자 정의 객체를 배열 리터럴 구축에 사용되는 값을 생성하기 위한 내부 루틴의 일부로 사용한다.</p>\n<p>자바스크립트 언어의 주요한 작동 방식을 변경하는 심볼을 사용하는 경우 행동 변화는 더욱 분명하다. 예를 들어, @@toStringTag는 목적을 설명하는 방법을 정의한 심볼이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">let</span> arraylike <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'zero'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'Array'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arraylike<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [object Array]</span></code></pre></div>\n<p>@@replace는 정규 표현식을 위해 예약된 이전 문맥에서 행동하기 위한 객체를 허용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> Summary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    maxLength<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n    defaultEnding<span class=\"token operator\">:</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> replacement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            replacement <span class=\"token operator\">=</span> replacement <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultEnding<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxLength <span class=\"token operator\">-</span> replacement<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> replacement<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> \n    <span class=\"token string\">'This sentence is way too long and will be summarized!'</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// prints: This sentence is way too long an...</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>Summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>개발자들에게 언어 수준의 기능을 오버라이드(override) 할 수 있는 권한을 주는 것은 이전에 브라우저가 <a href=\"https://www.w3.org/community/nextweb/2013/06/11/the-extensible-web-manifesto/\">확장 가능한 웹 선언</a>에서 핵심 구성요소이기 위해 접근 가능했을 때에나 가능했다. 그것은 더 많은 실험이 가능하게 하며 개발자들은 이전에 손이 닿지 않았던 라이브러리 주위 저레벨(low-level) 기능을 구축하게 한다.</p>\n<h3 id=\"심볼-사용하기\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EB%B3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"심볼 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심볼 사용하기</h3>\n<p>심볼은 엣지(Edge) 12로 시작하는 모든 최신 브라우저에서 기본적으로 유효하다. 그러나 <code class=\"tui-language-text\">Symbol.iterator</code>과 같은 잘 알려진 많은 심볼(well-known symbols)들은 모든 브라우저에 구현되어 있지는 않다. 이것은 심볼을 지원하는 최신 브라우저들도 많은 잘 열려진 심볼을 위한 폴리필(pollyfill)이 필요하다는 것을 의미한다. 그것은 <code class=\"tui-language-text\">instanceof</code>와 상호작용하는 @@hasInstance 나  값을 위해 객체 타입을 변경하는데 사용된 @@toPrimitive와 같이 몇 가지 잘 알려진 심볼의 폴리필은 문법이나 연산자로 부터 온 행동을 복제를 할 수 없다고 알리기 위해 중요하다.</p>\n<p>기본(native) 심볼 타입이 없는 ES5 브라우저는 추가적인 검토가 필요하다. 먼저, 심볼이 원시 타입이기 때문에, 폴리필은 <code class=\"tui-language-text\">typeof</code> 검사와 <code class=\"tui-language-text\">Symbol()</code>이 문자열을 반환하는 것을 올바르게 복제할 수 없다. 또한, <code class=\"tui-language-text\">in</code> 연산자는 폴리필된 심볼을 반환할 것이다. 왜냐하면 그들 하부는 단지 문자열이기 때문이다. 마지막으로 Symbol.for()와 Symbol.keyFor는 상호 영역을 지원하지 않는다.</p>\n<p><img src=\"http://www.sitepen.com/blog/wp-content/uploads/2016/04/typescript_heading.png\"></p>\n<p>타입스크립트(TypeScript) 사용자의 상황은 더 복잡해진다. 타입스크립트는 ES6 코드를 에밋할 때 심볼을 지원한다. 반면에 ES5로 에밋할 때에는 심볼 타이핑을 제공하지 않으며, 심볼 사용은 에러로 보고될 것이다. 타입스크립트 개발자들은 다음 세 가지 중에 한가지 방법으로 이 문제를 해결할 수 있다.</p>\n<ol>\n<li><a href=\"https://github.com/dojo/core\">dojo/core</a>나 ES5 문법으로 ES6 기능을 지원하는 심(shims)과 함께 다른 라이브러리를 사용한다.</li>\n<li>ES6를 위한 타입스크립트 변환 체인을 구축하여 생성하고 ES5를 변환하기 위한 바벨(Babel)을 사용한다.</li>\n<li>심볼 타입 대신 다른 타입을 사용한다.</li>\n</ol>\n<p>각각의 해결 방법은 ES5 환경에서 심볼을 지원해야 하기 때문에 장단을 모두 갖고 있다. 우리는 멀티 플랫폼을 대상으로 하는 동안 타입과 일관성을 유지하기 위해 가장 좋은 방법을 제안하고 ES5 문법으로 ES6 기능을 감싸서 사용하는 심 라이브러리 사용을 신뢰한다. 또한 <a href=\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\">타입스크립트 로드맵</a>에서 <a href=\"https://github.com/Microsoft/TypeScript/issues/3538\">조건부 컴파일</a>과 <a href=\"https://github.com/Microsoft/TypeScript/issues/4692\">세분화된 타켓팅</a> 기능 계획을 통해 이 이슈를 도와줄 계획을 갖고 있다.</p>\n<p>이러한 주의 사항이 부담스럽게 들릴지도 모르겠지만, 그 문제들 중 많은 부분은 바벨(<a href=\"https://babeljs.io/\">Babel</a>)과 <a href=\"https://github.com/zloirock/core-js\">core.js</a>와 같은 좋은 폴리필과 같은 변환기를 사용하고 위에서 얘기한 예외의 인식을 통해 해결할 수 있다. 이 도구들과 함께 엔지니어들은 ECMAScript6에서 제공하는 현대적인 개념과 문법의 장점을 취하고 보다 효율적이고 쉽게 읽을 수 있는 코드 작성을 시작할 수 있다.</p>\n<h3 id=\"더-알아보기\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"더 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 알아보기</h3>\n<p><img src=\"http://www.sitepen.com/blog/wp-content/uploads/2016/04/workshops_heading.png\"></p>\n<p>우리는 <a href=\"https://www.sitepen.com/workshops/\">ES6 &#x26; 엔터프라이즈 개발을 위한 타입스크립트</a> 워크샵에서 심볼과 ES6를 위한 많은 유용한 추가 기능에 대해 제공하고 있다. 우리는 ES6와 타입스크립트의 기초를 배우는 것이 그 어느 때 보다 중요하다고 믿는다. 거의 20년 만에 언어에 대한 첫 번째 실질적인 변화와 함께, 지금은 웹 어플리에이션을 만들기 위해 기본적인 언어를 위한 변화를 효율적으로 활용하는 방법을 배울 수 있는 시간이다.</p>\n<p>우리는 또한 우리의 <a href=\"https://www.sitepen.com/support/\">자바스크립트 지원 계획</a>을 통해 ES6와 타입스크립트를 배울 때, 도움을 제공한다. 그리고 언어에 대한 많은 변화와 함께 당신의 어플리케이션의 아키텍처 접근 방식을 개선하기 위한 여러 가지 방법이 있다. 어플리케이션 아키텍처를 논의하기 위해, 그리고 우리가 도울 수 있는 방법에 대해 배우기 위해 <a href=\"https://www.sitepen.com/site/contact.html\">우리에게 연락</a>하기 바란다.</p>","frontmatter":{"id":"ko_20160502","title":"ES6 Symbols - Drumroll Please!","description":"심볼(Symbols)은 ES6에서 소개된 새롭고 유일한 원시(primitive) 타입이다. 이들은 자바스크립트 이전 버전에서 작성된 코드와 역방향 호환성을 유지하면서, 객체의 기능을 확장하는 문제를 해결하기 위해 언어에 추가됐다. 그들은 부가적으로 개발자들이 새롭고 흥미로운 방법으로 언어 동작에 영향을 미칠 수 있는 기능을 제공한다. 이 아티클에서는 심볼의 개념 소개와 목적에 대한 설명, 그리고 현재 심볼을 사용할 수 있는 가장 일반적인 방법을 연결 지어 보여주겠다.","date":"2016.05.02","author":"강지웅","tags":["es6"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20160502","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}