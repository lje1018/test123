{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20180918","result":{"data":{"post":{"html":"<h1 id=\"big-o-말고-bug-o-노테이션\" style=\"position:relative;\"><a href=\"#big-o-%EB%A7%90%EA%B3%A0-bug-o-%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"big o 말고 bug o 노테이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O 말고, Bug-O 노테이션</h1>\n<blockquote>\n<p>저자 : Dan Abramov\n원문 : <a href=\"https://overreacted.io/the-bug-o-notation/\">https://overreacted.io/the-bug-o-notation/</a></p>\n</blockquote>\n<hr>\n<p>성능이 매우 중요한 코드를 작성할 때는 알고리즘 복잡도를 생각하는 것이 좋다. 알고리즘 복잡도는 대개 <a href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\">Big-O 노테이션</a>으로 표현된다.\nBig-O는 <strong>데이터가 많아질수록 코드가 얼마나 느려지는가</strong>의 척도가 된다. 예를 들어, 정렬 알고리즘의 복잡도가 O(<em>n<sup>2</sup></em>)이라고 할 때, 50배 많은 개수의 아이템을 정렬하면 대략 50<sup>2</sup> 즉, 2,500배 느려지게 된다. Big-O는 정확한 수치를 나타내지 않는 대신, 알고리즘의 규모를 이해하는 데 도움을 준다.\n아래처럼 Big-O 표현을 보면 얼마나 복잡한 알고리즘인지 알 수 있다.</p>\n<blockquote>\n<p><span>O(</span><em>n</em><span>), O(</span><em>n</em><span> log </span><em>n</em><span>), O(</span><em>n<sup>2</sup></em><span>), O(</span><em>n!</em><span>).</span></p>\n</blockquote>\n<p>하지만, <strong>이 글은 알고리즘이나 성능에 대한 글이 아니다</strong>. API와 디버깅에 관한 얘기다. API 설계 또한 비슷한 것들을 고려해야 하기 때문이다.</p>\n<hr>\n<p>코드상의 실수를 찾아서 고치기 위해 우리는 매우 많은 시간을 할애하고 있다. 대부분의 개발자는 버그를 빨리 찾고 싶어 한다. 끝내 버그를 찾게 되면 그나마 만족감이 들지만, 온종일 한 개의 버그를 쫓느라 그날 계획한 기능을 구현하지 못한다면 아주 짜증이 날 것이다.\n그동안 디버깅했던 기억들은 앞으로 사용할 추상화나 라이브러리, 도구들을 선택하는 데 영향을 끼친다. 어떤 API나 언어의 설계는 처음부터 실수하지 못하게 만든다. 어떤 설계는 끝없는 문제를 만들기도 한다. <strong>과연 어떤 것이 끝없는 문제를 만드는 설계인지, 실수하지 못하게 만드는지 우리가 구분할 수 있을까?</strong>\n온라인상에서는 많은 사람이 API는 근본적으로 아름답게 작성되어야 한다는 주제로 토론하고 있다. 하지만 실제로 그런 API를 사용하는 느낌이 어떤지는 <a href=\"https://overreacted.io/optimized-for-change/\">그다지 많이 얘기하지 않는다.</a></p>\n<p><strong>나에게 이 문제를 해결할 좋은 법칙이 떠올랐다. <em>Bug-O</em> 노테이션이다.</strong></p>\n<h3 id=\"n\" style=\"position:relative;\"><a href=\"#n\" aria-label=\"n permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐞(<em>n</em>)</h3>\n<p>Big-O 가 입력의 크기에 대해 알고리즘이 얼마나 느려지는지 나타냈다면, <em>Bug-O</em> 는 API에 따라 그걸 사용하는 <em>여러분</em> 이 코드를 작성하는 속도를 얼마나 느려지게 하는지 나타낸다.</p>\n<hr>\n<p>예를 들어, 아래의 코드를 이용해서 분명한 구조 없이 <code class=\"tui-language-text\">node.appendChild()</code> 나 <code class=\"tui-language-text\">node.removeChild()</code>를 통해 수동으로 DOM을 업데이트한다고 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Section 1</span>\n  <span class=\"token keyword\">let</span> spinner <span class=\"token operator\">=</span> <span class=\"token function\">createSpinner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Section 2</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Section 3</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span>\n    retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Section 4</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드의 문제는 코드가 그렇게까지 \"못생기지 않았다\"라는 것이다. 코드를 사용하는 게 얼마나 아름다운지가 중요한 게 아니다. <strong>문제는 이 코드에 버그가 있다면, 어디서부터 봐야 할지 모르겠다는 것이다.</strong>\n<strong>콜백이나 이벤트가 발생한 순서에 의해 이 프로그램이 가질 수 있는 조합(combinatorial)적인 숫자의 경우의 수가 생긴다.</strong> 그중 어떤 경우는 올바른 메시지를 볼 것이고, 나머지의 경우, 여러 개의 로딩 아이콘이나, 실패와 에러 메시지를 보게 거나, 아마도 크래시도 발생할 것이다.\n이 함수는 4개의 부분으로 나뉘고, 이들 사이에 순서가 보장되지 않는다. 실행될 수 있는 경우의 수를 대략 계산해보면, 4x3x2x1 = 24일 것이다. 만약 더 많은 부분을 추가한다면 8x7x6x5x4x3x2x1 = <em>4만</em> 개의 경우의 수가 된다. 이걸 디버깅하는 개발자의 건투를 빈다.</p>\n<p><strong>Bug-O(이하🐞(<em>n!</em>))로 표현해보면,</strong> <em>n</em> 의 숫자는 DOM을 다루는 코드상의 부분이다. 그렇다. 이건 팩토리얼(Factorial)이다. 물론 매우 과학적이진 않으므로 실무에 적용하기는 적합하지 않다. 하지만 다르게 생각해보면 이런 각각의 코드 부분들은 한 번 이상 실행될 것이다. 🐞(<em>¯⎞\\</em>(ツ)_/¯_)가 정확할 수도 있지만 그래도 아직은 믿을 수 없다. 조금 더 발전시켜 보자.</p>\n<hr>\n<p>앞서 본 코드가 가질 수 있는 상태와 실행 결과의 수를 제한하여 이 코드의 Bug-O를 낮출 수 있다. 그러기 위해 어떤 라이브러리도 사용하지 않아도 된다. 그저 이 코드에 어떤 구조를 적용하느냐가 중요하다. 아래 코드는 그런 구조를 적용한 한 가지 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 'initial' | 'pending' | 'success' | 'error'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 두번 submit 하지 않도록 한다.</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  submitForm<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 자식 노드들을 초기화한다.</span>\n  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  currentState <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'initial'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> trySubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드와 그렇게 많이 다른 것 같아 보이진 않는다. 심지어 코드가 더 길어진 것 같기도 하다. 하지만 아래의 코드로 인해 <em>엄청나게</em> 디버깅하기 쉬워졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 자식 노드들을 초기화한다.</span>\n  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ... formStatus를 위한 코드들을 채운다 ...</span></code></pre></div>\n<p>수정이 일어나기 전에 상태를 초기화하면 DOM 조작이 항상 처음부터 순서대로 일어나게 할 수 있다. 이를 통해 실수를 거듭하지 않으면서 피할 수 없는 <a href=\"https://overreacted.io/the-elements-of-ui-engineering/\">엔트로피</a>를 해결할 수 있다. 이른바 \"껐다 켜기\" 코딩이라고 볼 수 있지만, 생각보다 잘 동작한다.\n<strong>만약 출력에 버그가 있다면 한 단계만 더 거슬러 올라가서 생각해보면 된다. 바로 <code class=\"tui-language-text\">setState</code>를 호출하는 부분이다.</strong> 렌더링 결과를 디버깅하는 Bug-O는 렌더링 패스가 <em>n</em> 이라고 할 때 🐞(<em>n</em>)이 된다. 이 코드에서는 4가 된다. (<code class=\"tui-language-text\">switch</code>에서 <code class=\"tui-language-text\">case</code>문의 개수다.)\n아직까지도 상태를 <em>설정</em> 하는 데에 race condition이 있지만, 이런 상태 값을 언제든 로깅하고 검사할 수 있으므로 디버깅이 더 쉬워졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 두번 submit 하지 않도록 한다.</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>물론 여기서는 DOM을 초기화하는 비용이 있다. DOM을 지우고 다시 생성하는 작업이 내부 상태가 파괴될 때마다 일어나게 되어 포커스를 잃게 되고, 더 큰 애플리케이션에서는 심각한 성능 문제를 일으킬 수 있다.\n이게 바로 React 같은 라이브러리들이 유용한 이유다. 이런 라이브러리들은 여러분이 항상 UI를 처음부터 새로 만든다는 사고방식을 가지게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 두번 submit 하지 않도록 한다.</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    submitForm<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Spinner <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>SuccessMessage <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>ErrorMessage error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>RetryButton onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드가 많이 달라졌지만, 원리는 같다. 이런 컴포넌트는 마치 울타리를 쳐놓은 것처럼 추상화되있어서, 같은 페이지의 그 어떤 코드들도 이 컴포넌트의 상태나 DOM을 망치지 않도록 해준다. 컴포넌트화는 Bug-O를 줄이는 데 도움이 된다.\n반면에, React 앱의 <em>어떤</em> DOM 값이 잘못 노출된다면, React 트리의 컴포넌트들을 하나씩 살펴봐야 할 것이다. Bug-O는 🐞(<em>트리 높이</em>)가 된다. 앱의 크기는 관계가 없다.\n<strong>다음번에 API를 얘기할 일이 있다면, 일반적으로 디버깅하는 과정의 🐞(n)은 무엇인지 생각해보자.</strong> 여러분이 잘 알고 있는 API와 이론들은 어떤가? Redux, CSS, 상속 모두 각각의 Bug-O가 있을 것이다.</p>","frontmatter":{"id":"ko_20180918","title":"Big-O 말고, Bug-O 노테이션","description":"성능이 매우 중요한 코드를 작성할 때는 알고리즘 복잡도를 생각하는 것이 좋다. 알고리즘 복잡도는 대개 Big-O 노테이션으로 표현된다. Big-O는 데이터가 많아질수록 코드가 얼마나 느려지는가의 척도가 된다. 예를 들어, 정렬 알고리즘의 복잡도가 O(n<sup>2</sup>)이라고 할 때, 50배 많은 개수의 아이템을 정렬하면 대략 50<sup>2</sup> 즉, 2,500배 느려지게 된다. Big-O는 정확한 수치를 나타내지 않는 대신, 알고리즘의 규모를 이해하는 데 도움을 준다. 아래처럼 Big-O 표현을 보면 얼마나 복잡한 알고리즘인지 알 수 있다.","date":"2018.09.18","author":"박정환","tags":["ecmascript","performance"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20180918","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}