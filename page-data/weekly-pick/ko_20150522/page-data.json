{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20150522","result":{"data":{"post":{"html":"<h1 id=\"javascript의-커플링-측정\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-%EC%BB%A4%ED%94%8C%EB%A7%81-%EC%B8%A1%EC%A0%95\" aria-label=\"javascript의 커플링 측정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript의 커플링 측정</h1>\n<blockquote>\n<p>서적 <a href=\"http://www.amazon.com/Testable-JavaScript-Mark-Ethan-Trostler/dp/1449323391/ref=sr_1_1?ie=UTF8&#x26;qid=1432087182&#x26;sr=8-1&#x26;keywords=testable+javascript\">Testable Javascript</a>에서 발췌<br></p>\n</blockquote>\n<h2 id=\"coupling\" style=\"position:relative;\"><a href=\"#coupling\" aria-label=\"coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coupling</h2>\n<p>이 글은 커플링을 Javascript기반 예제를 통해 설명한다. 먼저 커플링이란 서로 다른 객체 또는 모듈간의 관계를 뜻한다. 그리고 그 관계의 방법은 조금씩은 다르지만 거의 유사한 패턴이므로 측정도 가능하다.</p>\n<p>Norman Fenton과 Shari Lawrence Pfleeger가 1996년도에 저술한 \"A Rigorous &#x26; Practical Approach, 2nd Edition\" 에 따르면 커플링은 6단계가 있고 각 단계에 점수를 매기는 것으로 측정할 수 있다.</p>\n<blockquote>\n<p><strong>점수가 높을수록 강한 결합을 의미한다.</strong></p>\n</blockquote>\n<h3 id=\"content-coupling\" style=\"position:relative;\"><a href=\"#content-coupling\" aria-label=\"content coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content Coupling</h3>\n<p>콘텐츠 커플링은 가장 강한 결합 단계이다. 특정 객체에서 다른 객체의 메서드를 직접 호출하거나 상태를 수정하는 형태의 코드를 뜻한다. 다음의 예제가 O라는 객체에 대한 콘텐츠 커플링 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// O 객체의 상태를 직접 변경</span>\n<span class=\"token constant\">O</span><span class=\"token punctuation\">.</span>property <span class=\"token operator\">=</span> <span class=\"token string\">\"blah\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// O 객체의 내부를 변경</span>\n<span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* something else */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// O 객체 전체를 변경</span>\n<span class=\"token class-name\">O</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* switcheroo */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>모든 구문들이 O객체에 대해 콘텐츠 커플 되어있다. 이런 콘텐츠 커플링의 커플링 점수는 5점이다.</p>\n<h3 id=\"common-coupling\" style=\"position:relative;\"><a href=\"#common-coupling\" aria-label=\"common coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Coupling</h3>\n<p>커먼 커플링은 콘텐츠 커플링보다 조금 약한 결합도를 나타낸다. 객체가 다른 객체와 전역 변수를 공유하는 형태이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> Global <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Global <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Global <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A, B객체 둘 다 Global이라는 변수를 공유하고 있다. 점수는 4점이다.</p>\n<h3 id=\"control-coupling\" style=\"position:relative;\"><a href=\"#control-coupling\" aria-label=\"control coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Coupling</h3>\n<p>커먼 커플링보다 조금 더 약한 결합도를 나타낸다. 이 커플링은 플래그나 파라미터를 통해 외부 객체의 동작을 제어하는 형태의 코드를 나타낸다.</p>\n<p>싱글톤 객체를 만들며 env라는 플래그를 넘기는 아래 예제를 통해 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> absFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> env<span class=\"token operator\">:</span> <span class=\"token string\">\"TEST\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>점수는 3점이다.</p>\n<h3 id=\"stamp-coupling\" style=\"position:relative;\"><a href=\"#stamp-coupling\" aria-label=\"stamp coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stamp Coupling</h3>\n<p>스탬프 커플링은 특정 레코드(두개 이상의 데이터를 넘기는 구조) 를 전달하지만 데이터 중 일부만 사용되는 구조의 코드를 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// 아래 리터럴 객체는 O객체에 대해 stamp coupled 되어있다.</span>\n<span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeBread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> wheat<span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">O</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">makeBread</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bread</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>makeBread 메서드에 3 데이터가 전달되었지만 내부적으로는 2개의 프로퍼티만 사용되는 형태이다. 이 패턴은 스탬프 커플링이고 점수는 2점이다.</p>\n<h3 id=\"data-coupling\" style=\"position:relative;\"><a href=\"#data-coupling\" aria-label=\"data coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Coupling</h3>\n<p>제일 낮은 결합도의 커플링이다. 객체끼리 서로 이벤트를 주고받는 형태의 코드를 말한다. 점수는 1점이다.</p>\n<h3 id=\"no-coupling\" style=\"position:relative;\"><a href=\"#no-coupling\" aria-label=\"no coupling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No Coupling</h3>\n<p>두 객체간에 아무런 연관 관계가 없는 상태를 뜻한다. 점수는 0점이다.</p>\n<h2 id=\"initiations\" style=\"position:relative;\"><a href=\"#initiations\" aria-label=\"initiations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initiations</h2>\n<p>커플링으로 언급되지 않은 형태 중 싱글톤 객체가 아닌 전역 객체를 인스턴스화 하는 코드도 강한 커플링이라 볼 수 있으며, 커먼 커플링보다 콘텐츠 커플링에 가깝다 (제일 강한 형태의 커플링이다)</p>\n<blockquote>\n<p>new 나 Object.create구문의 사용은 단방향의 강한 커플링 관계를 만든다.</p>\n</blockquote>\n<p>객체를 인스턴스화 하면 코드가 객체의 라이프 사이클에 의존하게 된다. 주의할 점은 작성한 코드에서 생성한 인스턴스가 불필요하게 되었을 경우 꼭 제거해줘야 한다는 점이다.</p>\n<p>그렇지 않을 경우 의존이 걸린 객체 또는 리소스가 메모리에 남게 되고, 이러한 주의사항은 개발자가 항상 염두에 두어야 하기 때문에 유지보수가 더 어려워진다.</p>\n<p>객체의 인스턴스화를 최소화 하면 코드의 복잡성을 최소화할 수 있다. 어디선가 인스턴스를 많이 만들어내면, 어플리케이션의 설계를 다시 한 번 점검해보아야 할 필요가 있다는 뜻이다.</p>\n<h2 id=\"coupling-metrics\" style=\"position:relative;\"><a href=\"#coupling-metrics\" aria-label=\"coupling metrics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coupling Metrics</h2>\n<p>커플링 측정의 방법 중 거의 표준으로 사용되는 방법은 함수, 객체, 모듈간의 커플링 매트릭스를 만들어보는 것이다.</p>\n<p>보통 세 가지의 매트릭스 생성 방법을 사용한다.</p>\n<ul>\n<li>두 모듈 또는 객체간의 커플링 점수 측정</li>\n<li>단일 모듈의 상속간에 커플링을 측정</li>\n<li>어플리케이션의 모든 모듈간의 커플링 측정</li>\n</ul>\n<p>이렇게 측정된 데이터는 시스템의 모듈 간의 결합을 계획적으로 하는 데 도움이 될 수 있다. 또 리펙토링 포인트를 찾는 데 도움이 될 수 있다.</p>\n<p>자연스럽게 프로그래머로써 궁극적으로 추구했던 목표와 가까워질 수 있다.</p>\n<p>추가적으로 코드 분석 (code inspection)과 코드리뷰를 병행하면 도구나 커플링 매트릭스 추출만 하는것 보다 더 커플링을 쉽게, 상세하게 찾을 수 있다.</p>\n<h2 id=\"coupling-in-the-real-world\" style=\"position:relative;\"><a href=\"#coupling-in-the-real-world\" aria-label=\"coupling in the real world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coupling in the Real World</h2>\n<p>조금 더 실무적인 예제를 가지고 이야기 해 보자.</p>\n<p>\"강한 결합도\"를 가진 코드를 보면 \"약한 결합도\"가 무엇인지 정확히 파악할 수 있을 것이다.</p>\n<p>아래 코드가 \"강한 결합도\"를 가진 코드의 예제다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> cloth <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableCloth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dishes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">placeTableCloth</span><span class=\"token punctuation\">(</span>cloth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">placeDishes</span><span class=\"token punctuation\">(</span>dishes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수가 Table클래스의 메서드라 가정할 때 내용만 놓고 보면 메서드 네이밍에 충실하게 테이블 세팅을 위한 동작만을 구현하고 있다. (좋다는 뜻이다)</p>\n<p>아쉬운 점은 메서드가 TableCloth, Dishes와 세상에서 제일 강한 결합도를 가지고 있는 점이다. 함수 내에서 new구문을 통한 인스턴스 생성은 \"강한 결합도\"의 코드를 만든다.</p>\n<p>이 결합때문에 분리 작업이 거의 불가능해졌다. 예를 들어 이 메서드를 테스트 하려면 TableCloth와 Dishes객체가 필요하다. 단위테스트는 setTable메서드의 동작만을 테스트해야하지만 \"강한 결합도\"때문에 어렵다.</p>\n<p>이를 해결하기 위해 필요 객체를 전역 변수로 공유할 수 있지만 (앞 장에 소개되어 있음) 비슷한 코드가 쌓일수록 테스트가 어려워진다.</p>\n<p>유지보수적 측면에서 약간 아쉽지만(문서화!) JavaScript의 환경을 이용한 Mock, Stub의 동적 주입이 이 문제를 해결하는데 도움이 된다.</p>\n<p>정적 타입 언어의 의존성 주입 아이디어를 차용하면 다음과 같이 코드를 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setTable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cloth<span class=\"token punctuation\">,</span> dishes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">placeTableCloth</span><span class=\"token punctuation\">(</span>cloth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">placeDishes</span><span class=\"token punctuation\">(</span>dishes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 변경으로 필요 객체를 Mock/Stub하여 테스트를 수행할 수 있도록 변경되었다. 구현이 간단해졌고 메서드를 분리하기가 전보다 훨씬 수훨해졌다.</p>\n<p>대부분의 경우를 이 방법으로 해결할 수 있지만, 이런 방식의 접근이 단지 문제를 미루는 수준이 되는 경우도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">dinnerParty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">guests</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    invitations <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intivations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ingredients <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ingredients</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    chef <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    staff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Staff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    cloth <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FancyTableClothWithFringes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dishes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChinaWithBlueBorders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dinner<span class=\"token punctuation\">;</span>\n\n  intivations<span class=\"token punctuation\">.</span><span class=\"token function\">invite</span><span class=\"token punctuation\">(</span>guests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">.</span><span class=\"token function\">setTable</span><span class=\"token punctuation\">(</span>cloth<span class=\"token punctuation\">,</span> dishes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  dinner <span class=\"token operator\">=</span> chef<span class=\"token punctuation\">.</span><span class=\"token function\">cook</span><span class=\"token punctuation\">(</span>ingredients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  staff<span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>dinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파티를 하지 않는 방법 말고 이 문제를 해결하려면 어떻게 해야 할까?</p>\n<blockquote>\n<p><strong>역자 주</strong></p>\n<p>책의 예제 코드를 그대로 옮겼는데. 위의 예제 코드와 아래의 해결책 코드는 약간 생략이 있다.</p>\n<p>아래의 글의 의미는 해당 메서드가 결과적으로 사용하는 몇 개의 인스턴스를 팩토리 패턴으로 빼는 것을 의미한다.</p>\n<p>이런 방식으로 해결되지 않는다면 해당 메서드가 리펙토링의 여지가 있을 가능성이 크다.</p>\n</blockquote>\n<p>객체들이 처음부터 차례대로 만들어져 내려오면 좋겠지만 그렇지 않은 경우가 대부분이다. 이 부분에는 정적 타입 언어의 패턴 중 하나인 \"팩토리 패턴\"을 사용하면 좋다.</p>\n<p>팩토리 패턴은 객체를 낮은 콜 스택에서 만들어주면서도 느슨한 결합도를 유지시켜 준다. 구현에서 객체들을 사용하는 것으로 생기는 의존성이 단일 팩토리에 대한 의존성으로 바뀐다.</p>\n<p>\"팩토리는 여전히 객체들에 의존성이 있잖아?\" 맞는 말이다.</p>\n<p>하지만 \"팩토리\" 자체에 의존성이 모인다는 점, 테스트 코드에서 factory만 Mock/Stub할 수 있게 되는 점 등의 장점이 존재한다. (추상 팩토리만 있으면 테스트할 수 있게 된다)</p>\n<p>먼저 일반적인 팩토리를 구현하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> TableClothFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getTableCloth</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>TableCloth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> color <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>팩토리 내에서 tablecloth의 색상을 파라미터로 받을 수 있도록 했다. 이 팩토리를 다음의 코드로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> tc <span class=\"token operator\">=</span> TableClothFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTableCloth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트를 할 경우에는 실제 TableCloth객체를 넘길 필요가 없다. 단지 Mock/Stub 객체만 넘기면 끝이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> TableClothTestFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getTableCloth</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// YUI의 Mock 생성 코드</span>\n    <span class=\"token keyword\">return</span> Sinon<span class=\"token punctuation\">.</span><span class=\"token function\">Mock</span><span class=\"token punctuation\">(</span>TableCloth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sinon의 Mock 생성 코드</span>\n    <span class=\"token keyword\">return</span> jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">createSpyObj</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TableCloth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// jasmine의 Mock 생성 코드</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 팩토리를 사용하는 테스트 코드는 원본 코드와 형식이 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> tc <span class=\"token operator\">=</span> TableClothTextFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTableCloth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>추가적으로 만들어진 팩토리들을 중간에서 잘 중재한다면 실제코드와 테스트 코드가 항상 올바르게 동작하게 할 수 있다.</p>\n<p>한가지 방법으로는 아래처럼 추상 TableCloth팩토리를 만들수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> AbstractTableClothFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getFactory</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">kind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kind <span class=\"token operator\">!==</span> <span class=\"token string\">\"TEST\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> TableClothFactory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> TableClothTestFactory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>팩토리를 반환하는 기능을 파라미터화 하여 상황에 따라 팩토리를 반환하도록 구현했다.</p>\n<p>이 팩토리를 abstract factory라고 하며 테스트를 위해서는 단지 파라미터만을 변경하여 팩토리를 받으면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> tcFactory <span class=\"token operator\">=</span> AbstractTableClothFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TEST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  tc <span class=\"token operator\">=</span> tcFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTableCloth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"purple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mock 반환</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>지금까지의 과정은 매우 강하게 결합되었던 콘텐츠 커플링을 조금 약한 컨트롤 커플링으로 대체했다. (2점을 낮춘 셈이다)</p>\n<p>결과적으로 모든 코드들의 의존성을 걱정할 필요가 없게 되었다.</p>\n<p>실제로 프로젝트에 적용이 되면 점수 감소 폭이 더 클 것이고 유지보수하기 편한 프로젝트가 될 것이다.</p>\n<p>마지막으로 한번 더 강조하지만 코드 분석과 코드리뷰를 병행하는 것이 훨씬 좋은 결과를 만들어낼 것이다.</p>","frontmatter":{"id":"ko_20150522","title":"Javascript의 커플링 측정","description":"이 글은 커플링을 Javascript기반 예제를 통해 설명한다. 먼저 커플링이란 서로 다른 객체 또는 모듈간의 관계를 뜻한다. 그리고 그 관계의 방법은 조금씩은 다르지만 거의 유사한 패턴이므로 측정도 가능하다. Norman Fenton과 Shari Lawrence Pfleeger가 1996년도에 저술한 \"A Rigorous & Practical Approach, 2nd Edition\" 에 따르면 커플링은 6단계가 있고 각 단계에 점수를 매기는 것으로 측정할 수 있다.","date":"2015.05.22","author":"김민형","tags":["design-pattern","ecmascript","test"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20150522","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}