{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190805","result":{"data":{"post":{"html":"<p><img src=\"https://i0.wp.com/blog.logrocket.com/wp-content/uploads/2019/07/use-ecmascript-modules-nodejs.jpg?w=730&#x26;ssl=1\"></p>\n<h1 id=\"nodejs로-ecmascript-모듈을-사용하는-방법\" style=\"position:relative;\"><a href=\"#nodejs%EB%A1%9C-ecmascript-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"nodejs로 ecmascript 모듈을 사용하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js로 ECMAScript 모듈을 사용하는 방법</h1>\n<blockquote>\n<p>작성자 : <a href=\"https://blog.logrocket.com/author/diogosouza/\">Diogo Souza</a></p>\n</blockquote>\n<blockquote>\n<p>원문 : <a href=\"https://blog.logrocket.com/how-to-use-ecmascript-modules-with-node-js/\">https://blog.logrocket.com/how-to-use-ecmascript-modules-with-node-js/</a></p>\n</blockquote>\n<p>Kevin Dangoor가 <a href=\"http://www.commonjs.org/\">CommonJS</a> 프로젝트를 시작한 후 2009년부터 어떻게 하면 자바스크립트가 웹 브라우저에서 실행되는 것 뿐만 아니라, 범위가 확대되어 백엔드 영역을 포함한 애플리케이션 개발에도 적합한지에 대해 토론이 시작되었다.</p>\n<p>이 토론이 성공할 수 있었던 이유는 파이썬, 자바와 같은 언어의 표준 라이브러리를 따른 API 덕분이다. 오늘날 CommonJS로 인해 서버 사이드 애플리케이션용 자바스크립트, 커맨드 입력 도구, GUI 기반의 데스크톱 및 하이브리드 애플리케이션(Titanium, Adobe AIR 등) 등 많은 것들이 존재하게 되었다.</p>\n<p>실제로 당신은 <code class=\"tui-language-text\">require()</code>를 사용할 때마다 CommonJS ES 모듈(역자주 : 이하 CJS)을 사용하거나 Node.js에 기본으로 포함된 ESM(역자주 : ECMAScript Module 약자, 이하 ES 모듈)을 사용하고 있다.</p>\n<p>문제는 Node에서 이 두 ES 모듈을 함께 사용할 때이다. CommonJS는 이미 모듈이기 때문에 ESM과 같이 사용될 수 있는 좋은 방법을 찾아야만 한다. CommonJS는 동기식이지만 ESM이 비동기적으로 로드된다는 점을 제외하고 다른 부분들은  문제가 되지 않는다.</p>\n<p><a href=\"https://babeljs.io/\">Babel</a> 및 <a href=\"https://webpack.js.org/\">webpack</a>과 같은 도구를 사용할 때는 로드가 동기 방식으로 처리된다. 그래서 브라우저와 네이티브 지원 없이 서버 사이드에서 모두 실행되는 애플리케이션을 위한 동일한 환경을 고려할 때 몇 가지 문제가 있을 것이다.</p>\n<p>이 글에서는 브라우저와 서버 사이드와 같이 두 분야를 모두 지원할 수 있는 방법에 대해 알아보고, Node.js에서 얼마나 지원되는지 알아볼 예정이다. ESM을 사용하여 코드베이스를 마이그레이션하는 방법을 몇 가지 예제를 통해 살펴보겠다.</p>\n<h2 id=\"간단한-소개\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%86%8C%EA%B0%9C\" aria-label=\"간단한 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 소개</h2>\n<p>ES 모듈을 처음 사용하는 사람이라면, 먼저 모듈을 사용하는 방법을 살펴보자. React 또는 Vue.js를 사용했었다면 다음과 같은 코드를 보았을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Fragment<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 또는</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'./vue.mjs'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제는 ES 모듈의 특성 중 기본 모듈(default module) 사용을 잘 보여주고 있다. 다음 코드를 고려해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본 모듈은 한 개만 파일로 내보낼 수 있다. 그래서 첫 번째 예제에서 <code class=\"tui-language-text\">Fragment</code>는 <code class=\"tui-language-text\">{ }</code>로 가져오는 것이다. <code class=\"tui-language-text\">Fragment</code>를 내보내는 방법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Fragment <span class=\"token operator\">=</span> … <span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 다음과 같이 당신의 모듈을 만들 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> itsMine <span class=\"token operator\">=</span> <span class=\"token string\">'It is my module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드를 <code class=\"tui-language-text\">mjs</code> 확장자 파일로 저장하고, React 예제에서 본 것처럼 다른 파일에서 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> itsMine <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./myESTest.mjs'</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>itsMine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'It is my module' 텍스트가 얼럿으로 뜰 것이다.</span></code></pre></div>\n<p><code class=\"tui-language-text\">mjs</code> 확장자는 <code class=\"tui-language-text\">js</code> 파일들과 비교했을 때 혼란을 가져올 수 있다. 자바스크립트 명세에 따르면 <code class=\"tui-language-text\">mjs</code>와 <code class=\"tui-language-text\">js</code> 사이에는 차이가 있다. 예를 들어서, 모듈은 정의상 엄격(<code class=\"tui-language-text\">use strict</code>와 같이)하다. 자바스크립트 모듈을 구현할 때 많은 체크 사항이 만들어지고 \"안전하지 않은\" 동작은 금지된다.</p>\n<p><code class=\"tui-language-text\">js</code>와 <code class=\"tui-language-text\">mjs</code> 싸움은 모듈 또는 스크립트를 다루는 경우에 자바스크립트가 알아야 할 사실까지 이어지지만 제공되는 스펙은 따로 없다. 예를 들어서 CommonJS 스크립트를 가져오는 경우에는 <code class=\"tui-language-text\">&#39;import from&#39;</code>을 사용할 수 없다(<code class=\"tui-language-text\">require</code>만 된다). 그래서 각 확장자 파일이 적절한 파일을 가져오도록 강제할 수 있다.</p>\n<ul>\n<li><code class=\"tui-language-text\">mjs import from mjs</code></li>\n<li><code class=\"tui-language-text\">js require js</code></li>\n</ul>\n<p>그렇다면 다음 시나리오에서는 어떤 일이 일어날까?</p>\n<ul>\n<li><code class=\"tui-language-text\">mjs import from js</code></li>\n<li><code class=\"tui-language-text\">js require mjs</code></li>\n</ul>\n<p>ES 모듈은 정적(static)인 것으로 알려져 있다. 즉, 런타임이 아닌 컴파일 시간에만 \"이동\"할 수 있다. 이것이 파일 시작 부분에서 <code class=\"tui-language-text\">import</code>를 사용해 모듈을 가져오는 이유이다.</p>\n<h2 id=\"mjs-import-from-js\" style=\"position:relative;\"><a href=\"#mjs-import-from-js\" aria-label=\"mjs import from js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mjs import from js</h2>\n<p>여기서 주목해야 할 첫 번째는 <code class=\"tui-language-text\">mjs</code> 파일에서 <code class=\"tui-language-text\">require</code>를 사용할 수 없다는 것이다. 이전에 본 가져오기 구문(<code class=\"tui-language-text\">import</code>)을 사용해야만 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> itsMine <span class=\"token keyword\">from</span> <span class=\"token string\">'./myESTest.js'</span></code></pre></div>\n<p>대신 기본 가져오기(<code class=\"tui-language-text\">module.exports</code>)가 CommonJS 파일(<code class=\"tui-language-text\">myESTest.js</code>)로 내보내진 경우에만 가능하다. 어떤가? 간단하지 않은가?</p>\n<h2 id=\"js-require-mjs\" style=\"position:relative;\"><a href=\"#js-require-mjs\" aria-label=\"js require mjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>js require mjs</h2>\n<p>그러나 반대의 경우는 간단하지 않을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> itsMine <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myESTest.mjs'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>생각해보라. ES 모듈은 <code class=\"tui-language-text\">require</code> 함수를 통해서 가져올 수 없다. 다른 방법으로 <code class=\"tui-language-text\">import from</code> 구문을 사용해 시도한다면, CommonJS 파일은 <code class=\"tui-language-text\">import</code>를 사용할 수 없으므로 에러가 발생할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> itsMine <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./myESTest.mjs'</span> <span class=\"token comment\">// will err</span></code></pre></div>\n<p>Domenic Denicola는 다양한 방법으로 <code class=\"tui-language-text\">import()</code> 함수를 통해 <a href=\"https://github.com/tc39/proposal-dynamic-import\">ES 모듈을 동적으로 가져오는 방식</a>을 제안했다. 이 방식에 대해서 좀 더 알고 싶다면 위에 링크를 참조하라. 이 방식을 따르면 우리 코드는 다음과 같이 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> itsMine <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myESTest.mjs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그러나 주의할 점은 이 접근 방식은 async 함수를 사용할 수 있다는 것이다. async 함수 대신 <a href=\"https://2ality.com/2017/01/import-operator.html\">여기</a>에 기술된 콜백, 프라미스 등 다른 방식으로도 구현할 수 있다.</p>\n<p><em>주의: 이 방식은 Node 10+부터 사용 가능하다.</em></p>\n<h2 id=\"es-모듈을-사용하여-nodejs-실행\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-nodejs-%EC%8B%A4%ED%96%89\" aria-label=\"es 모듈을 사용하여 nodejs 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈을 사용하여 Node.js 실행</h2>\n<p>여기 ES 모듈과 함께 Node.js를 실행하는 두 가지 방법이 있다.</p>\n<ol>\n<li><code class=\"tui-language-text\">--experimental-modules</code> 플래그 사용 : 노드에서 제공하는 최소 기능이다.</li>\n<li>라이브러리 사용 : <a href=\"https://github.com/standard-things/esm\">esm</a>은 전체 프로세스를 단순화하고 한 곳에서 구현의 모든 주요 부분을 번들링한다.</li>\n</ol>\n<p>Node의 깃헙 리포지터리에서 \"<a href=\"https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md\">새 모듈 구현 계획</a>\" 페이지를 찾을 수 있다. 이 페이지에서 Node.js가 ECMAScript 모듈을 지원하는 공식 계획을 볼 수 있다. 계획은 4단계로 나누어져 있는데, 글을 쓰는 시점에는 <code class=\"tui-language-text\">--experimental-modules</code> 플래그를 사용하지 않아도 될 정도의 희망과 함께 마지막 단계에 와 있다.</p>\n<h2 id=\"-experimental-modules-플래그-사용\" style=\"position:relative;\"><a href=\"#-experimental-modules-%ED%94%8C%EB%9E%98%EA%B7%B8-%EC%82%AC%EC%9A%A9\" aria-label=\" experimental modules 플래그 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-–experimental-modules 플래그 사용</h2>\n<p>Node 환경에서 ES 모듈을 사용하기 위해 Node.js가 제공하는 첫 번째(공식적인) 방법부터 시작해보자.</p>\n<p>이전에 언급했듯이 당신의 PC에 설치된 Node 버전이 10 이상인지 확인해야 한다. <a href=\"https://github.com/nvm-sh/nvm\">NVM</a>의 힘을 빌려 현재 사용하고 있는 버전을 업그레이드하고 관리할 수 있다.</p>\n<p>그런 다음 모듈이 어떻게 동작하는지 보여주기 위해 예제를 하나 만들 것이다. 다음 구조로 생성하라.</p>\n<p><img src=\"https://i0.wp.com/blog.logrocket.com/wp-content/uploads/2019/07/project-structure.png?w=956&#x26;ssl=1\"></p>\n<p><em>프로젝트 구조</em></p>\n<p>첫 번째 파일인 <code class=\"tui-language-text\">hi.mjs</code>는 문자열 파라미터를 연결하여 메세지를 반환하는 단일 함수를 내보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// hi.mjs 코드</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hi, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">export</code> 기능을 사용한 것을 눈여겨보라. 두 번째 파일인 <code class=\"tui-language-text\">runner.mjs</code>는 이전에 만든 함수를 가져오고 콘솔에 메세지를 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// runner.mjs 코드</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sayHi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hi.mjs'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LogRocket'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음 커맨드를 사용해 코드를 실행해본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">node --experimental-modules runner.mjs</code></pre></div>\n<p>실행 결과는 다음과 같을 것이다.</p>\n<p><img src=\"https://i0.wp.com/blog.logrocket.com/wp-content/uploads/2019/07/test-output.png?w=730&#x26;ssl=1\"></p>\n<p><em>테스트 결과</em></p>\n<p>Node에서 실험적으로 사용하는 기능이라고 보여준다.</p>\n<h2 id=\"esm-라이브러리-사용\" style=\"position:relative;\"><a href=\"#esm-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%82%AC%EC%9A%A9\" aria-label=\"esm 라이브러리 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>esm 라이브러리 사용</h2>\n<p>Babel, webpack 또는 우리가 원하는 곳에서 ES 모듈을 사용하는 데 도움이 되는 다른 도구들의 경우에는 더 간단한 해결 방법이 있다. <a href=\"https://github.com/standard-things/esm\">@std/esm</a> 패키지를 사용하는 것이다.</p>\n<p>이 패키지는 기본적으로 Babel이나 다른 번들 도구를 분배하는 모듈 로더로 구성된다. 디펜던시를 필요로하지 않으며 Node.js 4 버전 이상에서 ES 모듈을 굉장히 빠르게 사용할 수 있다. 그리고 <a href=\"https://github.com/nodejs/node-eps/blob/master/002-es-modules.md\">Node ESM 명세</a>를 완벽하게 준수한다.</p>\n<p>지금부터는 <a href=\"https://expressjs.com/\">Express.js</a>와 함께 웹 상에서의 다른 <code class=\"tui-language-text\">hello world</code>를 고려해보자. 우리는 CJS 파일을 만들어서 ESM과 대화할 것이다.</p>\n<p>우선 프로젝트의 루트 폴더 안에서 다음 커맨드를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">npm init -y\nnpm install --save @std/esm\nnpm install --save express</code></pre></div>\n<p>설치 단계를 따라하면서 <code class=\"tui-language-text\">package.json</code>를 설정한다. 끝나면 다음 두 개 파일을 생성한다.</p>\n<ul>\n<li><code class=\"tui-language-text\">runner.js</code>는 실행 시작점이면서 단일 자바스크립트 파일이다.</li>\n<li><code class=\"tui-language-text\">hi-web.mjs</code>는 hello 함수에 접근하기 위한 Express 코드가 저장된다.</li>\n</ul>\n<p><code class=\"tui-language-text\">hi-web.mjs</code> 소스 코드를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sayHi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hi.mjs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LogRocket\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello ESM with @std/esm !!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서는 이전에 작성했던 <code class=\"tui-language-text\">sayHi()</code> 함수를 내보내는 <code class=\"tui-language-text\">mjs</code> 파일을 사용하고 있다. 일단 다른 파일에서 <code class=\"tui-language-text\">mjs</code>를 완벽하게 가져올 수 있다는 사실을 알게 되는 건 그다지 놀라운 일이 아니다. 시작 스크립트로 이 파일을 가져오는 방법을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// runner.js 코드</span>\nrequire <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@std/esm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./hi-web.mjs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></code></pre></div>\n<p>동적 가져오기를 사용하지 않는 경우에는 <code class=\"tui-language-text\">default</code>를 반드시 사용해야 한다. @std/esm은 <code class=\"tui-language-text\">require</code>를 재작성하고 사용 중인 Node 버전 모듈에 기능을 추가한다. 이것은 몇몇 인라인과 온 디맨드(on-demand) 변환, 실시간 처리 및 캐싱을 수행한다.</p>\n<p>예제를 실행하기 전, 시작점이 될 파일을 <code class=\"tui-language-text\">package.json</code> 스크립트에 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">...\n\n&quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node runner.js&quot;\n},</code></pre></div>\n<p><code class=\"tui-language-text\">npm start</code> 커맨드를 실행하면 브라우저에 다음 결과가 나올 것이다.</p>\n<p><img src=\"https://i0.wp.com/blog.logrocket.com/wp-content/uploads/2019/07/browser-output-example.png?resize=1024%2C334&#x26;ssl=1\"></p>\n<p><em>브라우저 결과</em></p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>ES 모듈이 Node로 동작하는 방식에 대해서 더 자세히 알고 싶다면 <a href=\"https://nodejs.org/api/esm.html\">공식 문서</a>를 확인해보라.</p>\n<p>코드를 변환하려고 할 때 다음 중요한 사항들을 기억하라.</p>\n<ul>\n<li><code class=\"tui-language-text\">js</code>을 <code class=\"tui-language-text\">mjs</code>로 마이그레이션 할 때 기본 내보내기(<code class=\"tui-language-text\">module.exports</code>) 구문을 새로운 ESM <code class=\"tui-language-text\">export</code> 구문으로 변경한다.</li>\n<li>모든 <code class=\"tui-language-text\">require</code>는 각각의 가져오기 구문으로 변경되어야 한다.</li>\n<li>동적으로 <code class=\"tui-language-text\">require</code>를 사용하려는 경우에는 <code class=\"tui-language-text\">await import</code>(또는 다른 방식으로 구현한 동적 <code class=\"tui-language-text\">import()</code> 함수)를 통해 가져오기를 해야 하는 것을 기억하라. </li>\n<li>또한 마이그레이션 중인 파일을 참조하는 다른 파일에서는 다른 <code class=\"tui-language-text\">require</code>를 변경한다.</li>\n<li>브라우저에서 <code class=\"tui-language-text\">mjs</code> 파일을 사용할 때 올바른 미디어 유형(<code class=\"tui-language-text\">text/javascript</code> 또는 <code class=\"tui-language-text\">application/javascript</code>)으로 배포해야 한다. 브라우저는 확장자를 신경 쓰지 않기 때문에 확장자가 필요한 것은 Node.js뿐이다. 이것이 Node.js가 파일이 CJS인지 아니면 ES 모듈인지 구분할 수 있는 방법이다.</li>\n</ul>\n<p>유익한 정보가 되었으면 좋겠다.</p>","frontmatter":{"id":"ko_20190805","title":"Node.js로 ECMAScript 모듈을 사용하는 방법","description":"Kevin Dangoor가 CommonJS 프로젝트를 시작한 후 2009년부터 어떻게 하면 자바스크립트가 웹 브라우저에서 실행되는 것 뿐만 아니라, 범위가 확대되어 백엔드 영역을 포함한 애플리케이션 개발에도 적합한지에 대해 토론이 시작되었다.","date":"2019.08.05","author":"류선임","tags":["es6","nodejs"],"thumbnail":"https://i0.wp.com/blog.logrocket.com/wp-content/uploads/2019/07/use-ecmascript-modules-nodejs.jpg?w=730&ssl=1"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190805","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}