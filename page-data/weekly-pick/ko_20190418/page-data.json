{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190418","result":{"data":{"post":{"html":"<h1 id=\"you-dont-know-js-module\" style=\"position:relative;\"><a href=\"#you-dont-know-js-module\" aria-label=\"you dont know js module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>You don't know JS module</h1>\n<blockquote>\n<p>작성자: 박정환 (FE개발랩)</p>\n</blockquote>\n<h2 id=\"서문\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%AC%B8\" aria-label=\"서문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서문</h2>\n<p>자바스크립트 개발을 하다 보면 다양한 모듈 정의 방법을 마주치게 된다. ES 모듈, CommonJS 모듈, AMD 모듈 등 자바스크립트에는 다양한 모듈 시스템이 공존하는데, 각 모듈은 모두 다른 방식으로 모듈을 정의하며 객체를 내보내고 가져오도록 설계되어있다. 그러나 React, Vue 등의 프레임워크로 애플리케이션을 개발해 본 독자라면, 모듈을 가져올 때 이러한 다양한 모듈 포멧을 신경쓰면서 사용해 본 기억이 없을 것이다. 그동안 번들러를 사용해서 ES6 환경으로 개발을 할 때 CommonJS 모듈을 ES6의 <code class=\"tui-language-text\">import</code> 문법으로 가져오더라도 에러가 발생하지 않는 게 의심스럽지는 않았는가? ES 모듈의 <code class=\"tui-language-text\">import ~ from ~;</code> 문법을 통해서 가져와도 잘 동작하니까 \"그냥\" 사용하지는 않았는가? 이제 슬슬 마음속에 \"번들러나 타입스크립트 컴파일러 안에서 도대체 무슨 일이 일어나고 있는 걸까?\"라는 질문이 떠오르길 바란다. 그렇다면 이 글을 통해 ES 모듈에만 있는 방법인 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Importing_defaults\">default import(이하 기본값 가져오기)</a>를 이용해서 다른 방식의 모듈을 가져와 사용할 수 있는 이유, 그리고 번들러와 트랜스파일러 그리고 타입스크립트는 어떤 방법으로 서로 다른 모듈끼리 가져오기를 지원하는지 알아보도록 하자.</p>\n<h2 id=\"글을-쓰게-된-이유\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EC%9D%84-%EC%93%B0%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"글을 쓰게 된 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글을 쓰게 된 이유</h2>\n<p>이 글은 타입스크립트를 사용하는 사용자가 <a href=\"https://github.com/nhn/tui.image-editor\">TOAST UI Image Editor</a>를 사용하던 중, 타입스크립트 컴파일러에서 <code class=\"tui-language-text\">TS1192: Module &quot;tui-image-editor&quot; has no default export.</code>와 같은 에러가 발생한다고 등록한 이슈로 인해 작성하게 되었다. 예제 코드를 보니 CommonJS 방식으로 내보낸 Image Editor 모듈을 ES 모듈 방식인 기본값 가져오기로 가져와서 생긴 이슈였다. 하지만 타입 정의 파일을 테스트에서도 동일하게 기본값 가져오기를 사용하고 있었지만 에러 없이 테스트가 성공하고 있었다.</p>\n<h3 id=\"왜-잘-작동하고-있었을까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%9E%98-%EC%9E%91%EB%8F%99%ED%95%98%EA%B3%A0-%EC%9E%88%EC%97%88%EC%9D%84%EA%B9%8C\" aria-label=\"왜 잘 작동하고 있었을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 잘 작동하고 있었을까?</h3>\n<p>타입 정의 파일 테스트에서는 왜 잘 동작하는지 확인하기 위해 이유를 파악해보았다.</p>\n<h4 id=\"모듈-가져오고-내보내는-코드-확인\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B3%A0-%EB%82%B4%EB%B3%B4%EB%82%B4%EB%8A%94-%EC%BD%94%EB%93%9C-%ED%99%95%EC%9D%B8\" aria-label=\"모듈 가져오고 내보내는 코드 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 가져오고 내보내는 코드 확인</h4>\n<p>가장 먼저 확인할 부분은 모듈을 가져오고 내보내는 코드이기 때문에 새로운 타입스크립트 파일을 만들고 Image Editor 모듈을 가져오는 코드를 작성했다.</p>\n<p><code class=\"tui-language-text\">importTest.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> ImageEditor <span class=\"token keyword\">from</span> <span class=\"token string\">'tui-image-editor'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageEditor</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>타입스크립트 컴파일러로 컴파일해 보니 아무런 에러 없이 정상적으로 잘 동작한다. 그럼 실제로 Image Editor 모듈에서 <code class=\"tui-language-text\">ImageEditor</code> 생성자 함수를 내보내는 코드는 어떻게 작성되어있을까?</p>\n<p><code class=\"tui-language-text\">imageEditor/src/js/index.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">//...</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ImageEditor<span class=\"token punctuation\">;</span></code></pre></div>\n<p>확인해보니 <code class=\"tui-language-text\">ImageEditor</code> 생성자 함수는 CommonJS 모듈로 정의되어 있었다. 분명 가져오는 코드는 ES 모듈의 기본값 가져오기이고, 내보내는 코드는 CommonJS 모듈 방식이다. 하지만 ES 모듈의 기본값 가져오기로 모듈을 가져올 때 에러와 경고 문구가 표시되지 않았다.\n타입스크립트는 모듈을 정의한 타입을 확인하니까 타입 정의 파일이 잘못된 건 아닐까 생각이 들었다.</p>\n<h4 id=\"타입-정의-파일-살펴보기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98-%ED%8C%8C%EC%9D%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"타입 정의 파일 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 정의 파일 살펴보기</h4>\n<p>이번에는 타입스크립트로 정의된 모듈의 타입이 ES 모듈인지 의심스러워서 타입스크립트 타입 정의 파일인 <code class=\"tui-language-text\">index.d.ts</code>를 살펴봤다.</p>\n<p><code class=\"tui-language-text\">index.d.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"tui-language-typescript\"><code class=\"tui-language-typescript\"><span class=\"token comment\">//...</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'tui-image-editor'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> tui<span class=\"token punctuation\">.</span>imageEditor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// CommonJS 내보내기 방식 (실제 작성되어 있는 코드)</span>\n  <span class=\"token comment\">// export default tui.imageEditor; // 이렇게 작성된 방식이 ES 모듈의 내보내기 방식이다. (기본값 내보내기) </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">tui-image-editor</code> 모듈은 CommonJS 모듈로 잘 정의되어있었다. 실제 내보내는 코드와 타입 정의 파일에 모듈이 CommonJS 방식으로 정의되어 있었는데 어떻게 ES 모듈의 가져오기 문법으로 잘 동작했던 걸까? 작성된 코드들에서는 테스트 코드가 잘 동작하는 이유를 찾을 수가 없었다. </p>\n<p>타입스크립트는 개발 당시에는 타입스크립트 파일을 생성하여 타입스크립트 문법으로 개발하지만, 실제 코드를 실행하기 위해서는 타입스크립트 컴파일러를 사용해서 타입스크립트 코드를 자바스크립트로 컴파일을 한다. 그렇게 얻은 자바스크립트 코드를 실제 브라우저나 Node.js같은 실행 환경에서 실행하는 것이다. 그렇다면 타입스크립트 컴파일러가 하는 일에 실마리가 있을 거라 생각하고 타입스크립트 설정 파일을 확인했다.</p>\n<h4 id=\"타입스크립트-컴파일러-옵션-확인\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EC%98%B5%EC%85%98-%ED%99%95%EC%9D%B8\" aria-label=\"타입스크립트 컴파일러 옵션 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 컴파일러 옵션 확인</h4>\n<p>타입스크립트 설정 파일인 <code class=\"tui-language-text\">tsconfig.json</code>에는 <code class=\"tui-language-text\">compilerOption</code> 으로 타입스크립트의 컴파일러에 옵션을 넘길 수 있다. 타입 정의 파일 테스트를 위해 추가한 <code class=\"tui-language-text\">tsconfig.json</code>을 확인하니 기존 테스트가 왜 잘 동작했는지 알 수 있었다. <code class=\"tui-language-text\">compilerOptions</code>의 <code class=\"tui-language-text\">esModuleInterop</code> 옵션이 켜져 있었기 때문이었다.</p>\n<p><code class=\"tui-language-text\">test/types/tsconfig.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"tui-language-json\"><code class=\"tui-language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">esModuleInterop</code>을 켜면 자바스크립트 코드로 컴파일 할 때 ESModule과 다른 모듈을 지원해주는 코드를 추가한다. <code class=\"tui-language-text\">esModuleInterop</code> 옵션을 끄니 이슈를 등록한 사용자와 같은 에러를 확인할 수 있었다.</p>\n<p><code class=\"tui-language-text\">importTest.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> ImageEditor <span class=\"token keyword\">from</span> <span class=\"token string\">'tui-image-editor'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TS1192: Module \"tui-image-editor\" has no default export.</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageEditor</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그럼 타입스크립트에서는 CommonJS 모듈을 어떻게 가져와야 할까?</p>\n<h4 id=\"타입스크립트에서-commonjs-모듈을-가져오는-방법\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-commonjs-%EB%AA%A8%EB%93%88%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%98%A4%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"타입스크립트에서 commonjs 모듈을 가져오는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트에서 CommonJS 모듈을 가져오는 방법</h4>\n<p>타입스크립트에서 <code class=\"tui-language-text\">esModuleInterop</code> 옵션을 사용하지 않고 CommonJS 모듈을 가져오려면 <code class=\"tui-language-text\">import ImageEditor = require(&#39;tui-image-editor&#39;);</code> 와 같은 독특한 문법을 사용해야 한다.</p>\n<p><code class=\"tui-language-text\">importTest.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"tui-language-typescript\"><code class=\"tui-language-typescript\"><span class=\"token keyword\">import</span> ImageEditor <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tui-image-editor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CommonJS 모듈을 정상적으로 가져올 수 있다.</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageEditor</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제 코드처럼 모듈을 가져오는 코드를 바꾸니 기본값 내보내기가 없다고 발생하던 에러가 사라졌다. 그리고 자바스크립트 개발 시에도 CommonJS로 정의된 모듈을 모두 <code class=\"tui-language-text\">import</code>문으로 가져오고 있던 게 떠올랐다. 그래서 자바스크립트 트랜스파일러 Babel과 번들러인 Webpack, 그리고 타입스크립트 컴파일러는 이를 어떻게 처리하는지 궁금해졌다.</p>\n<p>다른 모듈을 어떻게 동일하게 사용할 수 있는지 방법을 알아보기 전에 알아두면 좋을 내용이 있다. 왜 표준 문법인 ES 모듈 말고 다른 방식들을 사용하는지, 그리고 모듈 방식을 지원하는 도구들은 어떻게 발전해 왔는지 알게 된다면 Webpack과 타입스크립트가 하는 모듈 호환 처리 방법의 이유를 더 쉽게 이해할 수 있을 것이다.</p>\n<h2 id=\"자바스크립트의-모듈과-이를-지원하는-도구들\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%AA%A8%EB%93%88%EA%B3%BC-%EC%9D%B4%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EB%8F%84%EA%B5%AC%EB%93%A4\" aria-label=\"자바스크립트의 모듈과 이를 지원하는 도구들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 모듈과 이를 지원하는 도구들</h2>\n<p>자바스크립트도 다른 언어들과 마찬가지로 파일을 여러 개로 나누고, 모듈 단위로 개발할 수 있다. 그런데 왜 자바스크립트에는 모듈 시스템이 한 개가 아닌 걸까?\nECMAScript2015 즉 ES6가 배포되기 전에는 ECMAScript에 모듈이라는 개념이 존재하지 않았다. 규모가 큰 프로젝트일수록 모듈 개념이 없어서 의존성을 관리하기 매우 불편했다. 모듈 간 의존성을 관리하기 위해 표준은 아니지만, AMD나 CommonJS와 같은 여러 모듈 개념을 만들었고, 각 모듈 방식을 토대로 여러 파일을 한 개, 혹은 몇 개의 파일로 합쳐주는 requireJS, Browserify, Webpack등의 번들러가 개발되었다. 한동안 사람들은 번들러들을 통해 모듈 개발을 계속했고 모듈 개발 방식이 널리 퍼졌다. 하지만 2015년에 ES6 명세가 등장하면서 모듈 개념이 정식으로 ECMAScript 명세에 수록되었다. ES6를 지원하는 환경이 많지 않을 당시에 Babel이 등장하여 ES6 코드를 ES5 코드로, ES 모듈을 CommonJS로 트랜스파일 해주면서 표준인 ES 모듈 개발 환경또한 이미 나와 있는 모듈 방식들을 대체해 갔다. Webpack은 풍부한 plugin을 통해 번들러 기능 외에 Task Runner인<a href=\"https://gruntjs.com\">Grunt</a>, <a href=\"https://gulpjs.com\">gulp</a> 같은 다양한 기능들도 수행할 수 있어서 많이 사용되고 있었지만, ES6가 출시된 당시의 Webpack1은 ES6 문법을 처리하지 못했다. 하지만 Babel을 이용해 CommonJS 모듈 형태로 변환된 코드는 번들링 할 수 있었으므로 Babel loader + Webpack을 쓰는 패턴이 많이 사용되었다.  Webpack1으로 개발된 라이브러리들이 지금까지도 잘 동작하고 있고, 현재 유명한 프런트 엔드 프로젝트들도 Babel이나 Webpack을 사용하고 있다. 최근에 개발된 프로젝트가 ES 모듈을 사용하더라도 필요에 따라 CommonJS 모듈 방식으로 내보내진 모듈을 사용하기도 있으므로, 여러 모듈 방식의 코드들이 웹 프런트 엔드 생태계에 공존할 수 있었다.</p>\n<p>현재 활발히 사용되고 있는 모듈은 ES 모듈과 CommonJS 모듈 두 가지므로 이후의 설명은 ES 모듈과 CommonJS 모듈 방식을 같이 사용하는 방법으로 한정하겠다. 그렇다면 두 모듈 방식의 가져오기/내보내기 방법이 얼마나 다르길래 별도의 처리가 필요한지 모듈을 가져오고 내보내는 코드를 살펴보자.</p>\n<h2 id=\"es-모듈과-commonjs-모듈의-차이\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EA%B3%BC-commonjs-%EB%AA%A8%EB%93%88%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"es 모듈과 commonjs 모듈의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈과 CommonJS 모듈의 차이</h2>\n<p>모듈 개발에 친숙하지 않은 독자들을 위해 각 모듈의 사용법을 먼저 설명하겠다. 이미 알고 있는 독자들도 다시 한번 읽으면서 모듈 내보내기/가져오기 방법을 상기시켜보자. 모듈이 이미 내보내져 있어야 가져올 모듈이 생기니, 우선 모듈의 내보내기 방법 먼저 설명하겠다.</p>\n<h3 id=\"commonjs-모듈의-내보내기-방법\" style=\"position:relative;\"><a href=\"#commonjs-%EB%AA%A8%EB%93%88%EC%9D%98-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"commonjs 모듈의 내보내기 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS 모듈의 내보내기 방법</h3>\n<p>CommonJS 모듈 방식에서 모듈을 내보내는 방법은 한가지다. <code class=\"tui-language-text\">module.exports</code> 객체를 조작하는 방법이다. 해당 객체에 프로퍼티를 추가하거나, 다른 객체로 치환하면 다른 모듈에서 가져와서 사용할 수 있다.</p>\n<ol>\n<li>프로퍼티로 추가하여 내보내기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">crop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">rotate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"tui-language-text\">module.export</code> 객체를 치환하여 내보내기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">crop</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">rotate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"commonjs-모듈의-가져오기-방법\" style=\"position:relative;\"><a href=\"#commonjs-%EB%AA%A8%EB%93%88%EC%9D%98-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"commonjs 모듈의 가져오기 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS 모듈의 가져오기 방법</h3>\n<p>모듈을 가져오는 방법은 <code class=\"tui-language-text\">require()</code>라는 함수의 반환 값을 사용하는 형태다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfilter<span class=\"token punctuation\">.</span><span class=\"token function\">crop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfilter<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">require()</code> 함수 실행을 통해 가져온 모듈은 앞서 내보낸 <code class=\"tui-language-text\">module.export</code> 객체를 받은 것처럼 동작한다. </p>\n<h3 id=\"es-모듈의-내보내기-방법\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%9D%98-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"es 모듈의 내보내기 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈의 내보내기 방법</h3>\n<p>ES 모듈은 CommonJS 모듈과 다르게 두 가지 방법으로 내보낼 수 있다.</p>\n<ol>\n<li>이름 붙인 내보내기(Named export)</li>\n<li>기본값 내보내기</li>\n</ol>\n<p>이름 붙인 내보내기는 말 그대로 이름을 붙여서 내보내는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// filter.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">crop</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rotate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// graphics.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>crop<span class=\"token punctuation\">,</span> rotate<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./filter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">crop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 예제코드처럼 한 파일에서 여러 개의 객체를 내보낼 수 있고, <code class=\"tui-language-text\">import</code>문으로 그 모듈을 가져올 때는 반드시 <code class=\"tui-language-text\">export</code>문에서 정의한 모듈 이름으로 가져와야 한다. (물론 <code class=\"tui-language-text\">as</code>키워드로 가져온 이름을 바꿀 수는 있다)\n이번에는 기본값 내보내기 문법을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// filters.js</span>\n<span class=\"token keyword\">const</span> filterNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'retro'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sharpen'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> filterNames<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// command</span>\n<span class=\"token keyword\">import</span> filters <span class=\"token keyword\">from</span> <span class=\"token string\">'./filters'</span><span class=\"token punctuation\">;</span> \n\nfilters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'retro'</span>\nfilters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'sharpen'</span></code></pre></div>\n<p>기본값 내보내기는 이름 붙인 내보내기와는 다르게 내보내는 객체에 이름을 정의하지 않는다. 그리고 한 모듈 파일당 한 번만 사용할 수 있다.</p>\n<h3 id=\"es-모듈의-가져오기-방법\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%9D%98-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"es 모듈의 가져오기 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈의 가져오기 방법</h3>\n<p>ES 모듈에서는 <code class=\"tui-language-text\">import</code>와 <code class=\"tui-language-text\">from</code>으로 모듈을 가져온다. 그리고 당연하겠지만 가져오는 방법도 가져오기와 기본값 가져오기 두 종류이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>add<span class=\"token punctuation\">,</span> average<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mathmatics'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이름 붙인 가져오기</span>\n<span class=\"token keyword\">import</span> TextBox <span class=\"token keyword\">from</span> <span class=\"token string\">'textBox'</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 기본값 가져오기</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>이름 붙인 가져오기는 중괄호 안에 가져올 모듈 파일에 정의된 객체의 이름을 작성해서 가져온다. 반면에 기본값 가져오기는 중괄호 없이 그냥 이름을 사용하는 것을 볼 수 있다.</p>\n<h2 id=\"두-모듈을-같이-사용할-수-있는-방법\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EB%AA%A8%EB%93%88%EC%9D%84-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"두 모듈을 같이 사용할 수 있는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 모듈을 같이 사용할 수 있는 방법</h2>\n<p>두 모듈의 가져오기/내보내기 방식이 달라서 서로 다른 타입의 모듈을 그대로 가져와서 사용하려면 추가적인 처리를 해야 하거나, 문제가 생기게 된다. 이제는 두 모듈을 모두 기본값 가져오기로 사용할 수 있었던 방법에 대해 알아볼 것이다.\n현재 다양한 도구가 ES 모듈에서 CommonJS 모듈을 가져오고, CommonJS 모듈에서 ES 모듈을 가져와서 사용할 수 있는 방법을 지원하고 있다. 먼저, 가장 널리 사용되는 번들러인 Webpack이 어떻게 두 모듈을 함께 사용할 수 있도록 처리하는지 살펴보고, 그 과정을 우리가 직접 따라 해 보면서 원리를 알아보자.</p>\n<h3 id=\"webpack은-어떻게-처리할까\" style=\"position:relative;\"><a href=\"#webpack%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%A0%EA%B9%8C\" aria-label=\"webpack은 어떻게 처리할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack은 어떻게 처리할까?</h3>\n<p>먼저 Webpack4를 이용해서 ES6 환경으로 개발한 자바스크립트 프로젝트를 번들링 할 것이다. 그리고 그 프로젝트에서 ES6 모듈과 CommonJS 모듈 방식으로 구현된 모듈들을 가져와서 사용해야 한다고 가정하자. 예제 코드는 다음과 같다.</p>\n<h4 id=\"원본-코드\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EB%B3%B8-%EC%BD%94%EB%93%9C\" aria-label=\"원본 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원본 코드</h4>\n<p><code class=\"tui-language-text\">index.js</code> - 가져오는 모듈</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> bold<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>boldTagName<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bold'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> italic<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>italicTagName<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./italic'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> isBold <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> formatter <span class=\"token operator\">=</span> isBold <span class=\"token operator\">?</span> bold <span class=\"token operator\">:</span> italic<span class=\"token punctuation\">;</span>\n\n  isBold <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>isBold<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">formatter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정환'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Hello! &lt;b>정환&lt;/b>!'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정환'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Hello! &lt;i>정환&lt;/i>!'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>boldTagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'b'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>italicTagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'i'</span></code></pre></div>\n<p><code class=\"tui-language-text\">bold.js</code> - 내보내는 모듈 (CommonJS 모듈)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b>'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/b>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>boldTagName <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span></code></pre></div>\n<p><code class=\"tui-language-text\">italic.js</code> - 내보내는 모듈 (ES 모듈)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> italicTagName <span class=\"token operator\">=</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;i>'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/i>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드는 <code class=\"tui-language-text\">Hello! &lt;b&gt;정환&lt;/b&gt;!</code> 처럼 전달한 이름을 인사말과 각 태그로 감싸서 반환하는 간단한 예제다. <code class=\"tui-language-text\">sayHello()</code> 함수를 호출할 때마다 메시지의 이름이 볼드, 이탤릭으로 바뀌며 반환된다.\n그럼 이 코드를 Webpack을 통해 번들링 해보자. 번들링 된 코드는 실제로 더 길고 복잡하지만 우리는 각 모듈을 어떻게 가져오고 내보내는지만 확인하면 되므로, 다른 코드들은 생략하겠다.</p>\n<h4 id=\"번들된-코드\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EB%93%A4%EB%90%9C-%EC%BD%94%EB%93%9C\" aria-label=\"번들된 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번들된 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"./src/index.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    \n    __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony export (binding) */</span> __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sayHello\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> sayHello<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony import */</span> <span class=\"token keyword\">var</span> _bold__WEBPACK_IMPORTED_MODULE_0__ <span class=\"token operator\">=</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*! ./bold */</span> <span class=\"token string\">\"./src/bold.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony import */</span> <span class=\"token keyword\">var</span> _bold__WEBPACK_IMPORTED_MODULE_0___default <span class=\"token operator\">=</span> <span class=\"token comment\">/*#__PURE__*/</span>__webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>_bold__WEBPACK_IMPORTED_MODULE_0__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony import */</span> <span class=\"token keyword\">var</span> _italic__WEBPACK_IMPORTED_MODULE_1__ <span class=\"token operator\">=</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*! ./italic */</span> <span class=\"token string\">\"./src/italic.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> isBold <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> formatter <span class=\"token operator\">=</span> isBold <span class=\"token operator\">?</span> _bold__WEBPACK_IMPORTED_MODULE_0___default<span class=\"token punctuation\">.</span>a <span class=\"token operator\">:</span> _italic__WEBPACK_IMPORTED_MODULE_1__<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n      isBold <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>isBold<span class=\"token punctuation\">;</span>\n    \n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">formatter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정환'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정환'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_bold__WEBPACK_IMPORTED_MODULE_0__<span class=\"token punctuation\">[</span><span class=\"token string\">\"boldTagNmae\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_italic__WEBPACK_IMPORTED_MODULE_1__<span class=\"token punctuation\">[</span><span class=\"token string\">\"italicTagName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token string\">\"./src/bold.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b>'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/b>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>boldTagNmae <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token string\">\"./src/italic.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony export (binding) */</span> __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">,</span> <span class=\"token string\">\"italicTagName\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> italicTagName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> italicTagName <span class=\"token operator\">=</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony default export */</span> __webpack_exports__<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;i>'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/i>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*! ./src/index.js */</span><span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<br />\n<p>지금은 모듈을 가져오고 사용하는 API에만 집중하자. 코드를 보면 먼저 이름이 길고 복잡한 코드들이 눈에 띈다. 그 중 <code class=\"tui-language-text\">__webpack_require__</code>와 <code class=\"tui-language-text\">__webpack__exports__</code>는 이름만 봐도 모듈을 가져오고 내보내는 코드라는 느낌이 든다. <code class=\"tui-language-text\">&quot;./src/index.js&quot;</code> 키에 할당된 함수 내부를 보면, <code class=\"tui-language-text\">import</code>문 대신 <code class=\"tui-language-text\">__webpack_require__()</code> 라는 함수를 통해 모듈을 가져오도록 바뀌었다.\n그리고 <code class=\"tui-language-text\">__webpack_require__.d()</code> 함수에 <code class=\"tui-language-text\">__webpack_exports__</code>를 넘기면서 <code class=\"tui-language-text\">&quot;sayHello&quot;</code> 텍스트와 <code class=\"tui-language-text\">sayHello()</code> 참조를 반환하는 함수도 같이 넘기면서 모듈을 정의하고 있다. 이 두 함수와 객체는 Webpack이 ES 모듈을 CommonJS와 같은 API 형상으로 사용하기 위해 Webpack이 독자 구현한 함수다.\nWebpack은 CommonJS로 정의된 모듈을 가져올 때 ES 모듈의 기본값 가져오기 코드를 만나면 별도의 함수를 통해서 다시 한번 감싼 객체를 사용한다. 그래서 CommonJS 모듈을 사용한 코드에선 <code class=\"tui-language-text\">_bold__WEBPACK_IMPORTED_MODULE_0__</code>대신 <code class=\"tui-language-text\">__webpack_require__.n()</code>를 사용해서 반환한 <code class=\"tui-language-text\">_bold__WEBPACK_IMPORTED_MODULE_0___default</code>를 사용하며, <code class=\"tui-language-text\">_bold__WEBPACK_IMPORTED_MODULE_0___default.a</code>로 실제 모듈을 사용하는 것을 볼 수 있다.\nES 모듈의 문법으로 내보낸 객체는 별도로 default 처리된 객체를 사용하지 않고 <code class=\"tui-language-text\">_italic__WEBPACK_IMPORTED_MODULE_1__[&quot;default&quot;]</code>와 같이 가져온 모듈의 프로퍼티에 직접 접근해서 사용한다.</p>\n<p>Webpack이 번들한 ES6 코드를 보니, 어떤 방법으로 두 모듈을 함께 사용하는지 어느 정도 감이 오기 시작할 것이다.</p>\n<h3 id=\"근데-webpack은-왜-이렇게-처리하고-있을까-featbabel의-영향력\" style=\"position:relative;\"><a href=\"#%EA%B7%BC%EB%8D%B0-webpack%EC%9D%80-%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B3%A0-%EC%9E%88%EC%9D%84%EA%B9%8C-featbabel%EC%9D%98-%EC%98%81%ED%96%A5%EB%A0%A5\" aria-label=\"근데 webpack은 왜 이렇게 처리하고 있을까 featbabel의 영향력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>근데 Webpack은 왜 이렇게 처리하고 있을까? (feat.Babel의 영향력)</h3>\n<p>Webpack이 이 방법으로 두 모듈을 처리하는 데는 이유가 있다. 현재 가장 널리 쓰이고 있는 자바스크립트 트랜스파일러, 그리고 ES 모듈을 CommonJS 모듈과 함께 사용할 수 있게 코드 변환을 지원하는 도구는 바로 Babel이다. Babel은 ES6 문법의 코드를 대부분의 환경에서 지원 가능한 ES3나 ES5 코드로 바꿔주는 역할을 한다. Babel이 ES 모듈의 코드를 CommonJS 모듈의 문법으로 바꿔주면서 이 방법이 이후에도 널리 사용되게 된다. <a href=\"https://babeljs.io/repl#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;spec=false&#x26;loose=false&#x26;code_lz=JYWwDg9gTgLgBAIwgGwCZwGZQiOByAOgIHok08BuAKFEljmBgENlgBjTbXQ4xl9ylSrIApvGABnAEIp0AXjgwoAVxHUqIgB514GZQDs2MYBH1wJTAJ4AJEcmQQAFPqYgRASjgBvKnDhtTCV1oECYYGBEoOAVJGTQ4AH5EWTgALgZmVjZ1P1iUhQBCPLQcuCgxZSgzAANbewgCuAASLwwQsIioZ1cPAF8C6upeqiA&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=false&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=true&#x26;presets=es2015%2Creact%2Cstage-2&#x26;prettier=false&#x26;targets=&#x26;version=7.4.3&#x26;externalPlugins=\">동일한 코드를 Babel의 <code class=\"tui-language-text\">preset-es2015</code>를 사용해서 바꾼 결과</a>를 보면 이해가 갈 것이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>sayHello <span class=\"token operator\">=</span> sayHello<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _bold <span class=\"token operator\">=</span> <span class=\"token function\">_interopRequireDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../bold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _italic <span class=\"token operator\">=</span> <span class=\"token function\">_interopRequireDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./italic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_interopRequireDefault</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> obj <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>__esModule <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> isBold <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> formatter <span class=\"token operator\">=</span> isBold <span class=\"token operator\">?</span> _bold<span class=\"token punctuation\">.</span>default <span class=\"token operator\">:</span> _italic<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n  isBold <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>isBold<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello! \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예제 코드를 간단하게 설명해보겠다. Babel은 ES 모듈의 내보내기 문법을 사용한 모듈에는 <code class=\"tui-language-text\">module.exprots.__esModule</code> 플래그를 <code class=\"tui-language-text\">true</code>로 설정한다. 그리고 ES 모듈로 기본값 가져오기를 통해 가져오는 코드를 만나면 <code class=\"tui-language-text\">_interopRequireDefault()</code> 함수를 생성하고, 가져온 객체를 그대로 사용하지 않고 객체의 <code class=\"tui-language-text\">defalut</code> 프로퍼티에 접근하여 사용하도록 코드를 바꾼다. 이렇게 바꿔주면 CommonJS 모듈은 <code class=\"tui-language-text\">module.exports</code>에 할당한 객체가 새로운 객체의 <code class=\"tui-language-text\">default</code> 프로퍼티에 할당되어 감싸진 상태로 반환된다. 이런 방법으로 ES 모듈에서 기본값 내보내기한 객체와 같은 방법으로 사용할 수 있다.</p>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%93%88\">자바스크립트 모듈</a>에서 말한 것처럼 Webpack1은 CommonJS 문법으로 정의된 모듈을 번들링 해주는 도구였다. 다시 앞 절의 Webpack4가 번들한 코드를 보면 <code class=\"tui-language-text\">&quot;./src/bold.js&quot;</code> 함수 내부에 CommonJS 모듈 문법으로 된 코드는 바뀌지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">  <span class=\"token comment\">//...</span>\n  <span class=\"token string\">\"./src/bold.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;b>'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/b>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>boldTagNmae <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p>반면에 ES 모듈로 정의된 <code class=\"tui-language-text\">italic.js</code> 함수는 두 번째 인자가 <code class=\"tui-language-text\">__webpack_exports__</code>로 바뀌었다. 그리고 그 객체를 사용하는 코드인 <code class=\"tui-language-text\">__webpack_exports__[&quot;default&quot;] = (function(name) { /* ... */ });</code>는 CommonJS 코드와 비슷한 형상을 하는 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">  <span class=\"token comment\">//...</span>\n  <span class=\"token string\">\"./src/italic.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony export (binding) */</span> __webpack_require__<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>__webpack_exports__<span class=\"token punctuation\">,</span> <span class=\"token string\">\"italicTagName\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> italicTagName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> italicTagName <span class=\"token operator\">=</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* harmony default export */</span> __webpack_exports__<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;i>'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/i>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span></code></pre></div>\n<p>Webpack2 부터는 ES 모듈을 지원하여 ES 모듈도 번들링 할 수 있도록 바뀌었다. 위의 코드들을 보고 짐작해 봤을 때 ES 모듈을 지원하는 과정에서 Webpack은 이미 널리 사용되고 있던 Babel이 생성한 코드들도 사용해야 했으므로 Babel의 변환 방식을 차용했다고 생각이 된다.</p>\n<p>지금까지 Webpack이 어떻게 두 모듈을 지원할 수 있도록 처리하는지 알아보았다. 그렇다면 더 자세한 과정을 알기 위해 우리가 트랜스파일러가 되었다고 가정하고, 두 가지 모듈을 함께 사용할 수 있도록 ES6 코드를 직접 바꿔보면서 과정을 천천히 재현해보자.</p>\n<h3 id=\"es-모듈-내보내기를-commonjs-모듈과-유사한-방식으로-바꾸기\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0%EB%A5%BC-commonjs-%EB%AA%A8%EB%93%88%EA%B3%BC-%EC%9C%A0%EC%82%AC%ED%95%9C-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"es 모듈 내보내기를 commonjs 모듈과 유사한 방식으로 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈 내보내기를 CommonJS 모듈과 유사한 방식으로 바꾸기</h3>\n<p>이제부터 우리는 트랜스파일러다. ES6 문법의 코드를 ES5 문법으로 바꾸면서, 두 모듈 방식을 하나로 통일시켜서 두 모듈을 지원하는 코드로 바꿔볼 것이다. 지금부터 설명하는 예제 코드는 실제 Webpack이 처리한 코드와는 다르다. 두 모듈방식을 공통으로 처리할 수 있는 원리를 설명하기 위해 비교적 간단하게 코드를 바꿔서 설명할 것이다.</p>\n<h4 id=\"이름-붙인-내보내기\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%A6%84-%EB%B6%99%EC%9D%B8-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"이름 붙인 내보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이름 붙인 내보내기</h4>\n<p>먼저 이름 붙인 내보내기를 바꿔보자.</p>\n<p><code class=\"tui-language-text\">ES6 문법 / ES 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다른 모듈에서 이 모듈이 ES 모듈임을 판별할 수 있게 <code class=\"tui-language-text\">module.exports</code> 객체에 <code class=\"tui-language-text\">__esModule</code> 프로퍼티를 추가하자. 그리고 <code class=\"tui-language-text\">module.export</code> 객체에 <code class=\"tui-language-text\">add</code> 프로퍼티로 내보낼 함수를 추가하면 된다.</p>\n<p><code class=\"tui-language-text\">ES5 문법 / CommonJS 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">'__esModule'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이름 붙인 내보내기를 CommonJS 모듈 형태로 바꿔보았다. 그럼 기본값 내보내기도 바꿔보자.</p>\n<h4 id=\"기본값-내보내기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"기본값 내보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값 내보내기</h4>\n<p>CommonJS 모듈은 <code class=\"tui-language-text\">module.exports</code> 객체가 내보내지는 형태인데, 이름 붙인 내보내기에서 이미 프로퍼티에 추가해서 내보내는 방법을 사용했다. 그럼 기본값 내보내기는 어떻게 표현할 수 있을까?</p>\n<p><code class=\"tui-language-text\">ES6 문법 / ES 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> add<span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본값 내보내기 한 모듈은 <code class=\"tui-language-text\">module.exports.default</code>라는 프로퍼티에 해당 객체를 할당한다는 규칙을 만들자. 그리고 앞서 했던 것과 동일하게 <code class=\"tui-language-text\">__esModule</code> 프로퍼티를 설정한다.</p>\n<p><code class=\"tui-language-text\">ES5 문법 / CommonJS 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">'__esModule'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 ES 모듈이 CommonJS 모듈로 바꾸는 경우, <code class=\"tui-language-text\">default</code> 프로퍼티는 기본값 내보내기를 위해 예약된 프로퍼티임을 알아두자. 자 그럼 여기까지 모듈에서 객체를 내보내는 코드를 바꿔보았다. 내보낸 코드를 가져오는 부분도 바꿔보자.</p>\n<h3 id=\"es-모듈의-기본값-가져오기-코드를-commonjs-모듈-방식으로-바꾸기\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0-%EC%BD%94%EB%93%9C%EB%A5%BC-commonjs-%EB%AA%A8%EB%93%88-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"es 모듈의 기본값 가져오기 코드를 commonjs 모듈 방식으로 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈의 기본값 가져오기 코드를 CommonJS 모듈 방식으로 바꾸기</h3>\n<p>모듈을 가져오는 <code class=\"tui-language-text\">import</code>문을 바꿔볼 것이다. 다음 코드는 위에서 기본값 내보내기로 정의한 <code class=\"tui-language-text\">add</code> 모듈을 가져오는 코드이다.</p>\n<p><code class=\"tui-language-text\">ES6 문법 / ES 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> add <span class=\"token keyword\">from</span> <span class=\"token string\">'./add'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우선 <code class=\"tui-language-text\">import</code> 문을 <code class=\"tui-language-text\">require()</code><del>현재는 Webpack이 생성한 코드가 아니므로 간결한 코드를 위해 require를 사용할 것이다.</del>를 사용하는 코드로 바꾸고, <code class=\"tui-language-text\">add</code>라는 모듈로 기본값 가져오기를 하고 있으므로 가져온 모듈의 <code class=\"tui-language-text\">default</code> 프로퍼티를 사용하는 코드로 바꿔보자.</p>\n<p><code class=\"tui-language-text\">ES5 문법 / CommonJS 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> add_default <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add_default</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES 모듈끼리는 서로 <code class=\"tui-language-text\">default</code> 프로퍼티에 기본값 내보내기 객체가 들어있는 것이 약속되어 있으므로 잘 동작할 것이다. 그렇다면 이 방법을 그대로 사용할 때, 기본값 가져오기를 통해서 CommonJS 모듈을 가져온다면 어떻게 될까?</p>\n<h3 id=\"commonjs-모듈을-기본값-가져오기-코드로-가져올-때\" style=\"position:relative;\"><a href=\"#commonjs-%EB%AA%A8%EB%93%88%EC%9D%84-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0-%EC%BD%94%EB%93%9C%EB%A1%9C-%EA%B0%80%EC%A0%B8%EC%98%AC-%EB%95%8C\" aria-label=\"commonjs 모듈을 기본값 가져오기 코드로 가져올 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS 모듈을 기본값 가져오기 코드로 가져올 때</h3>\n<p>우리가 기본값 가져오기로 어떤 모듈을 가져올 때를 생각해보자. ES 모듈로 정의된 경우 위처럼 <code class=\"tui-language-text\">default</code> 프로퍼티에 접근하면 되지만, CommonJS 모듈로 정의된 경우는 <code class=\"tui-language-text\">default</code> 프로퍼티에 접근하면 <code class=\"tui-language-text\">module.exports</code>의 <code class=\"tui-language-text\">default</code> 프로퍼티에 접근하게 될 것이다. 실제로 키값이 <code class=\"tui-language-text\">default</code>인 프로퍼티가 있다면 엉뚱한 객체에 접근하게 될 것이고, 해당 키값에 아무것도 정의하지 않은 경우 <code class=\"tui-language-text\">undefined</code>를 받을 것이다. 만약 가져온 것이 함수나 객체라면 예상하지 않은 것을 실행하거나 접근하게 되어 에러가 발생하기에 십상이다. 그렇다면 ES 모듈에서 CommonJS 모듈을 기본값 가져오기로 가져오더라도 잘 동작하도록 바꿔보자.</p>\n<p><code class=\"tui-language-text\">ES6 문법 / CommonJS 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span></code></pre></div>\n<p>앞서 ES 모듈에 추가해 두었던 <code class=\"tui-language-text\">__esModule</code> 프로퍼티가 기억나는가? 그 프로퍼티를 이용해서 모듈을 기본값 가져오기 할 때 ES 모듈이 아니라면 새 객체를 생성해서 <code class=\"tui-language-text\">default</code> 프로퍼티로 가져온 모듈을 넣어주는 함수를 만들어보자.</p>\n<p><code class=\"tui-language-text\">ES5 문법 / CommonJS 모듈</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">esModuleInterop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> module<span class=\"token punctuation\">.</span>__esModule <span class=\"token operator\">?</span> module <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> module<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _add <span class=\"token operator\">=</span> <span class=\"token function\">esModuleInterop</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_add<span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우선 <code class=\"tui-language-text\">require()</code> 함수를 사용해서 한번 가져오고, 가져온 객체를 <code class=\"tui-language-text\">esModuleInterop()</code> 함수를 통해서 같은 API로 사용할 수 있게 바꾼다. 예제의 상황에서는 객체가 ES 모듈로 정의되지 않았으므로 <code class=\"tui-language-text\">default</code> 프로퍼티에 해당 객체가 들어있는 새로운 객체가 준비될 것이다. 마지막으로 가져온 객체를 사용하는 코드에서 <code class=\"tui-language-text\">default</code> 프로퍼티에 접근해서 사용하도록 바꿔주면 같은 API로 기본값 가져오기를 사용할 수 있게 된다.</p>\n<p>자, 이렇게 기본값 가져오기시 두 모듈 방식을 섞어서 사용할 수 있는 환경을 스텝별로 재현해봤다. 자바스크립트 환경에서는 번들러를 바로 사용하면 되지만, 타입스크립트는 컴파일러가 타입스크립트를 자바스크립트로 변환시켜준다. 그렇다면 타입스크립트는 ES 모듈 코드를 어떻게 처리할까?</p>\n<h2 id=\"타입스크립트가-default-import를-처리하는-방법\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EA%B0%80-default-import%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"타입스크립트가 default import를 처리하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트가 default import를 처리하는 방법</h2>\n<p>궁금증의 기원으로 돌아가서, 다시 처음에 얘기한 Image Editor 이슈로 돌아가보자. 이제 타입스크립트가 두 모듈을 함께 사용할 수 있도록 컴파일하는 과정을 살펴볼 것이다. 우선, 타입스크립트 프로젝트에서 컴파일러의 <code class=\"tui-language-text\">esModuleInterop</code> 옵션을 켠다. 그리고 이미지 에디터를 기본값 가져오기 한 타입스크립트 코드를 컴파일해 보면, 앞서 우리가 만들어본 내보내기 코드와 비슷한 코드의 자바스크립트 함수가 추가된다. 다음은 Image Editor의 실제 타입 정의 파일과 글 초반에 등장했던 타입 정의 테스트 코드다.</p>\n<p><code class=\"tui-language-text\">index.d.ts</code> - 타입 정의 파일의 <code class=\"tui-language-text\">tui-image-editor</code> 모듈의 타입을 정의한 부분. CommonJS 타입으로 정의되어 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"tui-language-typescript\"><code class=\"tui-language-typescript\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'tui-image-editor'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> tui<span class=\"token punctuation\">.</span>ImageEditor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">importTest.ts</code> - 타입스크립트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"tui-language-typescript\"><code class=\"tui-language-typescript\"><span class=\"token keyword\">import</span> ImageEditor <span class=\"token keyword\">from</span> <span class=\"token string\">'tui-image-editor'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> imageEditor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageEditor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"tui-language-text\">importTest.js</code> - 컴파일 된 자바스크립트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> __importDefault <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importDefault<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mod <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"default\"</span><span class=\"token operator\">:</span> mod <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>__esModule <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tui_image_editor_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tui-image-editor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> imageEditor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tui_image_editor_1</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>컴파일된 코드에서 이제는 제법 익숙한 형태의 코드들이 보인다. <code class=\"tui-language-text\">__importDefault()</code> 라는 함수가 추가되고 <code class=\"tui-language-text\">tui_image_editor_1</code>을 그대로 사용하지 않고 <code class=\"tui-language-text\">[&quot;default&quot;]</code>로 접근하여 인스턴스를 생성하는 모습이 보인다. 타입스크립트 컴파일러는 <code class=\"tui-language-text\">tui-image-editor</code> 모듈의 타입 정의 부분을 보고 <code class=\"tui-language-text\">__importDefault()</code> 함수를 추가했다.\n만약 해당 객체의 타입이 CommonJS가 아니라면, 컴파일러는 해당 함수를 추가하지 않고 <code class=\"tui-language-text\">require()</code>로 가져온 객체를 그대로 사용한다.</p>\n<p><code class=\"tui-language-text\">index.d.ts</code> - 모듈의 타입이 기본값 내보내기로 정의 되었을 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"tui-language-typescript\"><code class=\"tui-language-typescript\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'tui-image-editor'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> tui<span class=\"token punctuation\">.</span>ImageEditor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">importTest2.ts</code> - 타입스크립트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"tui-language-typescript\"><code class=\"tui-language-typescript\"><span class=\"token keyword\">import</span> ImageEditor <span class=\"token keyword\">from</span> <span class=\"token string\">'tui-image-editor'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> imageEditor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageEditor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"tui-language-text\">importTest2.js</code> - 컴파일 된 자바스크립트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>__esModule <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tui_image_editor_1 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tui-image-editor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> imageEditor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tui_image_editor_1</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>타입스크립트는 가져올 모듈의 내보내기 타입을 보고 기본값 가져오기 코드를 바꿔준다. 아무리 자바스크립트 파일이 ES 모듈로 작성되어 있어도 모듈의 타입을 CommonJS 모듈로 정의했다면 모듈을 가져와서 <code class=\"tui-language-text\">default</code> 프로퍼티에 넣어서 새 객체로 감싸도록 코드를 추가할 것이다. 이렇게 내보낸 모듈의 타입이 실제와 다르게 정의되어있다면, 모듈에서 객체를 가져오는 코드가 정상적으로 연결되지 않을 것이다. 게다가 타입스크립트 설정 파일에서 <code class=\"tui-language-text\">compilerOptions.esModuleInterop</code> 옵션의 기본값은 <code class=\"tui-language-text\">false</code>다.\n따라서 내보내기 타입이 잘못 정의된 모듈을 기본값 가져오기로 사용하려 한다면 <code class=\"tui-language-text\">undefined</code>를 받아오거나 에러를 만날 가능성이 높다. 그러므로 자바스크립트로 개발된 프로젝트에서 타입 정의 파일에 별도로 타입을 정의하는 경우 주의해야 한다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>이 글을 읽은 여러분은 이제 개발 도중 타 모듈에서 가져온 객체가 <code class=\"tui-language-text\">undefined</code> 거나 <code class=\"tui-language-text\">{default: /* ... */}</code>와 같은 형태의 객체가 되어 에러가 발생할 때, 당황하지 않고 사용 중인 번들러나 컴파일러의 옵션을 확인할 수 있게 되었다. 프런트 엔드 개발을 하다 보면 이미 CommonJS로 개발된 모듈을 가져다 사용해야 할 때가 있을 것이다. 그때마다 모듈이 CommonJS 인지 ES 모듈인지 확인하고 가져오는 코드를 구분해야 한다면, 지금보다 매우 번거로웠으리라 예상한다. 그리고 항상 깔끔하고 정리된 상태인 개발 코드만 보다가 실제로 번들 된 코드를 열어보니, 간단한 <code class=\"tui-language-text\">import</code> 문의 이면에 이런 많은 처리가 숨어있어 놀라기도 했다. ES 모듈을 CommonJS 방식으로 바꿔주는 Babel과 번들링도 해주고 새로운 모듈 방식을 사용하는 Webpack의 지원이 새삼 고맙게 느껴졌다.\n이 글을 읽고 알고 있는 사실과 다른 부분이 있거나 궁금한 점이 있다면 <a href=\"mailto:dl_javascript@nhn.com\">FE개발랩 E-Mail</a>로 자유롭게 연락해주길 바란다. 그럼 모두 해피 자바스크립팅!</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h2>\n<ul>\n<li><a href=\"https://nodejs.org/api/esm.html\">Node.js/docs/ECMAScript Modules</a></li>\n<li><a href=\"https://nodejs.github.io/nodejs-ko/articles/2016/06/09/es-modules-and-node-js-hard-choices/\">github/Node.js/(번역)ES Module and Node.js hard choices</a></li>\n<li><a href=\"https://github.com/nodejs/node-eps/blob/master/002-es-modules.md\">github/node-eps/ES6 Modules</a></li>\n<li><a href=\"https://medium.com/computed-comparisons/commonjs-vs-amd-vs-requirejs-vs-es6-modules-2e814b114a0b\">Medium/Computed comparisons - CommonJS vs ES6 Modules</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs#nointerop\">Babel/docs/plugin-transform-modules-commonjs</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript/issues/2719\">github/TypeScript/issue-#2719-ES6 Modules default exports interop with CommonJS</a></li>\n<li><a href=\"https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71\">Medium/Native ES Modules in NodeJS: Status And Future Directions, Part I</a></li>\n</ul>","frontmatter":{"id":"ko_20190418","title":"You don't know JS module","description":"자바스크립트 개발을 하다 보면 다양한 모듈 정의 방법을 마주치게 된다. ES 모듈, CommonJS 모듈, AMD 모듈 등 자바스크립트에는 다양한 모듈 시스템이 공존하는데, 각 모듈은 모두 다른 방식으로 모듈을 정의하며 객체를 내보내고 가져오도록 설계되어있다. 그러나 React, Vue 등의 프레임워크로 애플리케이션을 개발해 본 독자라면, 모듈을 가져올 때 이러한 다양한 모듈 포멧을 신경쓰면서 사용해 본 기억이 없을 것이다. 그동안 번들러를 사용해서 ES6 환경으로 개발을 할 때 CommonJS 모듈을 ES6의 'import' 문법으로 가져오더라도 에러가 발생하지 않는 게 의심스럽지는 않았는가? ES 모듈의 'import ~ from ~;' 문법을 통해서 가져와도 잘 동작하니까 \"그냥\" 사용하지는 않았는가? 이제 슬슬 마음속에 \"번들러나 타입스크립트 컴파일러 안에서 도대체 무슨 일이 일어나고 있는 걸까?\"라는 질문이 떠오르길 바란다. 그렇다면 이 글을 통해 ES 모듈에만 있는 방법인 default import(이하 기본값 가져오기)를 이용해서 다른 방식의 모듈을 가져와 사용할 수 있는 이유, 그리고 번들러와 트랜스파일러 그리고 타입스크립트는 어떤 방법으로 서로 다른 모듈끼리 가져오기를 지원하는지 알아보도록 하자.","date":"2019.04.18","author":"박정환","tags":["ecmascript","bundler"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190418","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}