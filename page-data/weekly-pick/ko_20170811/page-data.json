{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170811","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트의-함수-2---함수-호출\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%95%A8%EC%88%98-2---%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"자바스크립트의 함수 2   함수 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 함수 (2) - 함수 호출</h1>\n<p><a href=\"/test123/weekly-pick/ko_20170630\">저번 글</a>을 통해 함수가 어떻게 생성되는지 대략적으로 살펴보았다.</p>\n<ul>\n<li>함수는 일반 객체의 확장이다.</li>\n<li>함수 생성 시점에 그 함수의 역할이 어느정도 결정될 수 있다.(callable과 constructor)</li>\n<li>함수 생성 시점에 저장하는 데이터들을 통해 스코프나 <code class=\"tui-language-text\">this</code>참조 <strong><em>방식을</em></strong> 결정한다.</li>\n</ul>\n<p>이제 ECMAScript가 실제로 이 함수 객체를 함수로 호출할 때 어떤식으로 동작하는지 찾아보자. 이 글에서는 제너레이터 함수나 async 함수 등 조금은 특별한 함수보다는 일반적인 함수와 일반적인 호출에 대해서만 알아보려 한다.</p>\n<h2 id=\"함수-호출---callf-v--argumentslist\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C---callf-v--argumentslist\" aria-label=\"함수 호출   callf v  argumentslist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 호출 - <em><code class=\"tui-language-text\">Call(F, V, [, argumentsList])</code></em></h2>\n<p>ECMAScript 2017은 함수 호출을 <code class=\"tui-language-text\">Call(F, V, [, argumentsList])</code>으로 표현한다. <code class=\"tui-language-text\">Call</code>은 함수 객체의 내부 <code class=\"tui-language-text\">[[Call]]</code> 메서드를 수행하는 동작(Abstract operation)으로 <code class=\"tui-language-text\">F, V, argumentsList</code>를 인자로 받는다. <code class=\"tui-language-text\">F</code>는 함수 객체, <code class=\"tui-language-text\">V</code>는 <code class=\"tui-language-text\">[[Call]]</code>의 <code class=\"tui-language-text\">this</code> 값, <code class=\"tui-language-text\">argumentsList</code>는 함수 호출 시 전달한 인자로 기본값은 빈 리스트이다.</p>\n<ol>\n<li><code class=\"tui-language-text\">argumentsList</code>가 전달되지 않았으면 빈 리스트로 지정한다.</li>\n<li><code class=\"tui-language-text\">F</code>가 <code class=\"tui-language-text\">Callable</code>이 아니면 에러를 발생시킨다.</li>\n<li><code class=\"tui-language-text\">F.[[Call]](V, argumentsList)</code> 수행 결과를 반환한다.</li>\n</ol>\n<p>3번에서 알 수 있듯 실질적인 함수의 호출과 그 동작은 <code class=\"tui-language-text\">F.[[Call]]</code>에 나타나 있다. 이제 <code class=\"tui-language-text\">F.[[Call]]</code>을 알아보자.</p>\n<p>참고로 ECMAScript에서 함수를 호출하는 동작을 위와 같이 표현한 것일 뿐, 실제 자바스크립트 엔진이 ECMAScript2017의 <code class=\"tui-language-text\">Call</code>이라는 연산을 위와 똑같이 정의한 것은 아니다.</p>\n<h2 id=\"함수-객체의-call---fcallthisargument-argumentslist\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4%EC%9D%98-call---fcallthisargument-argumentslist\" aria-label=\"함수 객체의 call   fcallthisargument argumentslist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 객체의 [[Call]] - <em><code class=\"tui-language-text\">F.[[Call]](thisArgument, argumentsList)</code></em></h2>\n<p>지난 글에서 설명했듯 <code class=\"tui-language-text\">[[Call]]</code>은 함수 객체의 내부 메서드(Internal method)다. 인자로 <code class=\"tui-language-text\">this</code>값과 <code class=\"tui-language-text\">argumentsList</code>를 받는다.</p>\n<ol>\n<li><code class=\"tui-language-text\">F.[[FunctionKind]]</code>가 \"classConstructor\"라면 에러를 발생시킨다.</li>\n<li><code class=\"tui-language-text\">callerContext</code>는 현재 실행 중인 실행 컨텍스트(running execution context)</li>\n<li><code class=\"tui-language-text\">calleeContext</code>에 새로운 실행 컨텍스트를 생성하여 지정한다. (PrepareForOrdinaryCall)</li>\n<li>(-- assertion: 새로 만들어진 <code class=\"tui-language-text\">calleeContext</code>가 현재 running execution context이다.)</li>\n<li><code class=\"tui-language-text\">this</code>를 바인딩한다. (OrdinaryCallBindThis)</li>\n<li>함수 코드를 수행하고 <code class=\"tui-language-text\">result</code>에 그 결과를 저장한다. (OrdinaryCallEvaluateBody)</li>\n<li><code class=\"tui-language-text\">calleeContext</code>를 execution context stack에서 제거하고, <code class=\"tui-language-text\">callerContext</code>를 다시 running execution context로 지정한다.</li>\n<li><code class=\"tui-language-text\">result</code>를 반환한다.</li>\n</ol>\n<p>위 동작에서 <strong>Execution Context</strong>, <strong>execution context stack</strong>, <strong>running exeuction context</strong> 내용이 조금 난해할 수 있을 것 같다. 우선은 이런 게 있다 정도로만 생각하고, 앞으로 차근차근 알아가 보도록 하자.</p>\n<p>함수 호출을 조금 더 쉽게 정리해보면 다음과 같다.</p>\n<ol>\n<li>함수를 호출하면 이에 맞춰서 함수를 실행할 수 있는 환경을 만들고 초기화한다.</li>\n<li><code class=\"tui-language-text\">this</code>를 바인딩한다. (<code class=\"tui-language-text\">this</code>가 어떤 객체를 참조해야 할지 결정한다.)</li>\n<li>실제 함수 코드를 수행하고 그 결과를 <code class=\"tui-language-text\">result</code>에 저장한다.</li>\n<li>이 함수를 호출했던 곳(환경)으로 돌아가며,</li>\n<li><code class=\"tui-language-text\">result</code>를 반환한다.</li>\n</ol>\n<h2 id=\"execution-context\" style=\"position:relative;\"><a href=\"#execution-context\" aria-label=\"execution context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Execution Context</h2>\n<p>Execution Context(이하 EC)는 <strong>스코프</strong>(식별자 이름과 값의 매칭)와 기본 객체들(intrinsic objects - Array, Object 등의 기본 생성자와 그 프로토타입 등)을 가지고 있는 <strong>Realm</strong> 등 코드 수행 환경에 대한 여러 정보를 가지고 있는 어떤 장치라고 생각하면 된다. 결국, EC는 ECMAScript에서 코드 수행(evaluation) 매커니즘을 표현하기 위한 것이며, 실제 스크립트 엔진들은 이 명세와 완벽히 일치하지 않을 수 있다.</p>\n<p>자바스크립트가 단일 쓰레드 환경으로 코드를 컴파일하고 실행할 때 call stack을 만드는 것과 같이 EC Stack을 만든다고 생각해보자. 가장 밑바탕에는 Global 코드 환경에 대한 EC가 있을 것이고, 그 위로 함수가 호출될 때마다 그에 맞는 EC가 하나씩 추가되고 빠지기를 반복할 것이다. 그리고 각 시점에 stack의 최상위에 있는 EC가 바로 running execution context인 것이다.</p>\n<p>다음과 같은 코드에서 EC stack이 어떻게 변하는지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// global</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">                      |--------|\n                      | bar    |\n           |--------| |--------| |--------|\n           | foo    | | foo    | | foo    |\n|--------| |--------| |--------| |--------| |--------|\n| global | | global | | global | | global | | global |\n|--------| |--------| |--------| |--------| |--------|</code></pre></div>\n<p>ECMAScript 코드 수행을 위한 EC에는 LexicalEnvironment와 VariableEnvrironment라는 컴포넌트가 존재한다. 간단히 변수의 참조를 기록하는 환경이라고 생각하면 된다. LexicalEnvironment와 VariableEnvironment가 서로 나누어져 있지만, 사실은 초기화 시에 같은 객체를 바라보고 있다. <code class=\"tui-language-text\">with</code>와 같은 특별한 문장을 만나면 그 block 내부에서는 새로 만들어진 LexicalEnvironment를 참조한다.</p>\n<p><em>(얼핏 살펴본 바로는 기본값 parameter도 Lexical/VariableEnvironment와 관련이 있다. 앞으로 이어질 3편 글에서 Environment, Environment Record 그리고 this에 대해 조금 더 자세히 알아볼 예정이다.)</em></p>\n<h2 id=\"ordinarycall\" style=\"position:relative;\"><a href=\"#ordinarycall\" aria-label=\"ordinarycall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OrdinaryCall</h2>\n<p>위에서 알아본 <code class=\"tui-language-text\">[[Call]]</code>의 동작에서 OrdinaryCall 이라는 단어가 3번 등장했다.</p>\n<ol>\n<li>PrepareForOrdinayCall</li>\n<li>OrdinaryCallBindThis</li>\n<li>OrdinaryCallEvaluateBody</li>\n</ol>\n<p>위 3개는 ECMAScript에서 정의하고 있는 내부 동작인데 하나씩 살펴볼 필요가 있을 것 같다.</p>\n<h3 id=\"prepareforordinaycall\" style=\"position:relative;\"><a href=\"#prepareforordinaycall\" aria-label=\"prepareforordinaycall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PrepareForOrdinayCall</h3>\n<p>PrepareForOrdinayCall은 결국 EC를 만들고 초기화 시키는 내용을 가진 동작을 추상적으로 표현한것인데 조금 더 자세히 보면 아래 3단계를 갖는다. (Realm은 이 글에서는 큰 관련이 없어 설명에서 제외하였다.)</p>\n<ol>\n<li>새로운 EC를 생성한다. (<code class=\"tui-language-text\">calleeContext</code>)</li>\n<li><code class=\"tui-language-text\">calleeContext</code> 들어갈 Lexical Environment를 생성한다.</li>\n<li><code class=\"tui-language-text\">calleeContext</code>를 EC Stack에 추가(push)한다. 따라서 <code class=\"tui-language-text\">calleeContext</code>가 running execution context가 된다.</li>\n</ol>\n<h3 id=\"ordinaycallbindthis\" style=\"position:relative;\"><a href=\"#ordinaycallbindthis\" aria-label=\"ordinaycallbindthis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OrdinayCallBindThis</h3>\n<p>OrdinayCallBindThis는 함수 객체의 <code class=\"tui-language-text\">[[ThisMode]]</code>에 따른 <code class=\"tui-language-text\">this</code>값 참조를 결정한다. 화살표 함수(Arrow Function), Strict mode, Environment와 연결된다.</p>\n<ol>\n<li><code class=\"tui-language-text\">[[ThisMode]]</code>가 lexical인 경우는 다른 처리를 하지 않는다. (arrow function)</li>\n<li><code class=\"tui-language-text\">[[ThisMode]]</code>가 strict인 경우 인자로 넘어온 thisArgument를 Environment record에 설정한다.</li>\n<li><code class=\"tui-language-text\">[[ThisMode]]</code>가 lexical도 아니고 strict도 아닌 경우 global에 있는 <code class=\"tui-language-text\">[[thisValue]]</code>를 Environment record에 설정한다.</li>\n</ol>\n<h3 id=\"ordinarycallevaluatebody\" style=\"position:relative;\"><a href=\"#ordinarycallevaluatebody\" aria-label=\"ordinarycallevaluatebody permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OrdinaryCallEvaluateBody</h3>\n<p>OrdinaryCallEvaluateBody는 다음 두개 동작으로 나눌 수 있다.</p>\n<ol>\n<li>변수 선언 초기화 (FunctionDeclarationInstantiation)</li>\n<li>코드 수행 및 결과 반환</li>\n</ol>\n<p>변수 선언 초기화는 결국 Environment Record(식별자 이름과 값의 매칭을 위한 표 정도로 이해할 수 있을 것 같다)를 채우는 동작인데, 꽤 복잡한 동작들이 작성돼 있다. 특히 arguments 객체가 필요한지 아닌지, 기본값 매개변수가 있는지 없는지에 따라 분기가 나뉘는데 결국에는 또 EC의 LexicalEnvironment와 VariableEnvironment로 이어지게 된다.</p>\n<h2 id=\"그래서\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C\" aria-label=\"그래서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서..</h2>\n<p>결국, 함수의 호출을 이해하기 위해서는 EC와 EC 내부의 LexicalEnvironment, VariableEnvironment를 이해해야 한다. 함수 한번 호출하는데 참 많은 내용을 알아야 하면서도 이렇게까지 알아야 하나 싶기도 하는 마음도 들기 시작했다. 하지만 그래도 ECMAScript의 함수를 이해하고 코드를 작성하는 것은 자유도가 높은 자바스크립트에서 예기치 않은 버그를 방지할 수 있는 데 많은 도움이 될 것 같다.</p>\n<p>그리고 앞으로 이어질 글에서 Environment와 Record, 변수 선언 초기화 등에 대해 더 자세히 알아보려 한다. 잠시 예고를 하자면, 아래에 있는 JS 코드가 어떻게 수행되고 또 왜 에러가 발생하는지 그 이유를 알 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">foo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bar </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>ECMAScript 2017 - <a href=\"https://www.ecma-international.org/ecma-262/8.0/index.html\">https://www.ecma-international.org/ecma-262/8.0/index.html</a></li>\n</ul>","frontmatter":{"id":"ko_20170811","title":"자바스크립트의 함수 (2) - 함수 호출","description":"저번 글을 통해 함수가 어떻게 생성되는지 대략적으로 살펴보았다. 함수는 일반 객체의 확장이다.함수 생성 시점에 그 함수의 역할이 어느정도 결정될 수 있다.(callable과 constructor) 함수 생성 시점에 저장하는 데이터들을 통해 스코프나 this 참조 방식을 결정한다.","date":"2017.08.11","author":"이민규","tags":["ecmascript","es6"],"thumbnail":"https://image.toast.com/aaaadh/real/2017/techblog/ecmascriptfunction_thumbnail.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170811","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}