{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20200623","result":{"data":{"post":{"html":"<h1 id=\"리액트-앱에서의-중앙-집중식-api-에러-핸들링\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%95%B1%EC%97%90%EC%84%9C%EC%9D%98-%EC%A4%91%EC%95%99-%EC%A7%91%EC%A4%91%EC%8B%9D-api-%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81\" aria-label=\"리액트 앱에서의 중앙 집중식 api 에러 핸들링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 앱에서의 중앙 집중식 API 에러 핸들링</h1>\n<blockquote>\n<p>원문: <a href=\"https://itnext.io/centralizing-api-error-handling-in-react-apps-810b2be1d39d\">https://itnext.io/centralizing-api-error-handling-in-react-apps-810b2be1d39d</a>\n저자 웹 사이트: <a href=\"https://aggelos.dev/\">https://aggelos.dev/</a></p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/1400/1*zrElooE3nz0oaZIhaIbLKQ.jpeg\" alt=\"image1.jpeg\"></p>\n<p>이 글에서는 사용 중인 상태 관리 라이브러리(Redux, Apollo, etc..)에 상관없이 API 오류를 중앙 집중식이며, 쉽게 확장 가능한 방식으로 한번에 처리하는 방법을 제시한다.</p>\n<p>대부분의 최신 앱들은 API를 통해 데이터를 가져온다. RESTful API든 GraphQL이든 웹에서 발생하는 요청은 대부분의 앱에서 필수적인 부분이다. 대부분 요청이 성공적으로 반환되지만, 순조롭게 진행이 되지 않는 경우도 있다. 유저에게 드러날 수 있는 404나 403, 500 같은 무서운 API 응답에 대해 이야기 할 것이다. 이러한 응답은 특성상 한 곳에서 모두 처리하는 것이 이상적이다.</p>\n<p>불행하게도, 리액트에서는 각각의 앱이 모두 다른 접근법을 사용하는 경우가 많기 때문에 관리하기가 더 어렵다. 이 글에서는 사용중인 상태 관리 라이브러리(Redux, Apollo 등)에 관계없이 API 오류를 중앙 집중식으로 한 번에 확장 가능한 방식으로 처리하는 방식을 제시한다. 또한, 이 방식은 클라이언트 렌더링이나 서버 사이드 렌더링 여부에 상관 없이 모든 앱에서 재사용할 수 있다. 더 이상 지체하지 말고 파고 들어보자!</p>\n<h2 id=\"시나리오-만들기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"시나리오 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시나리오 만들기</h2>\n<p>이 글에서는 설명을 위해 일반적인 HTTP 오류 상태 코드를 반환하는 RESTful API가 있다고 가정하지만, GraphQL 또는 다른 API에도 유사하게 적용된다. 또한 <code class=\"tui-language-text\">react-router</code>를 사용한다고 가정하고 설명하지만, <code class=\"tui-language-text\">@reach/router</code> 또는 다른 React 라우팅 라이브러리를 사용해도 유사하게 적용할 수 있다.</p>\n<p>두 페이지가 있는 작은 앱을 작성한다고 가정하겠다. 첫번째 페이지는 강아지 품종을 보여줄 것이다. 품종을 클릭하면 각 품종 페이지로 이동할 것이며, 해당 품종의 강아지 사진을 무작위로 표시할 것이다. 앱을 작성하면 아래와 같다. (UI나 코드는 이 글의 설명 범위를 넘어가는 부분이니 신경쓰지 마라)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> useParams<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DogPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./DogPage\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> IndexPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./IndexPage\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 선택할 수 있는 강아지 품종 리스트를 보여주는 페이지다.</span>\n<span class=\"token keyword\">const</span> breeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"husky\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"akita\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pitbull\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>View some nice pictures <span class=\"token keyword\">of</span> a dog breed<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>breeds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">breed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>breed<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/dogs/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>breed<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 선택한 품종 강아지의 무작위 이미지를 보여주는 페이지다. 품종은 URL 파라미터로 넘긴다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DogPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>imageSrc<span class=\"token punctuation\">,</span> setimageSrc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://dog.ceo/api/breed/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/images/random</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setimageSrc</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>breed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>img alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A nice </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>imageSrc<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 작성한 모든 컴포넌트를 바인딩한다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>IndexPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/dogs/:breed/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>DogPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 앱은 동작하지만, 아직 404인 경우를 처리하지 않았다. 사용자가 존재하지 않는 페이지를 방문하면 \"Four:oh:four\"라는 텍스트를 갖는 404 페이지를 표시 할 것이다. 이 페이지는 아래 두가지 시나리오에 나타나야 한다.</p>\n<ul>\n<li>잘못된 URL 정규식을 방문했을 때(i.e. <code class=\"tui-language-text\">/cats/husky</code> )</li>\n<li>유효한 URL 정규식을 방문했지만 잘못된 품종을 입력했을 때(이 경우는 사용자가 주소창에서 URL을 수동으로 바꿀 때 발생할 수 있을 것이다.)</li>\n</ul>\n<p>첫 번째 경우는 다루기 쉽다. 대부분의 튜토리얼에서 권장하는 것처럼, 앱의 <strong>마지막 라우트</strong>로써 react-router의 <code class=\"tui-language-text\">&lt;Switch/&gt;</code> 컴포넌트의 모든 라우트를 랩핑하는 \"catch-all\" 라우트를 추가하면 된다. 코드로 작성하면 아래 처럼 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DogPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./DogPage\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> IndexPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./IndexPage\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 404 컴포넌트(일반적으로 ./Page404.jsx 에 구현된다)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Page404</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Four<span class=\"token operator\">:</span>oh<span class=\"token operator\">:</span>four<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전 예제의 앱 구성요소. 모든 컴포넌트를 바인딩한다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>IndexPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/dogs/:breed/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>DogPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Page404<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 사용가가 <code class=\"tui-language-text\">/</code>나 <code class=\"tui-language-text\">/dogs/&lt;BREED&gt;</code> 형태 외의 URL을 입력하게 되면 404 페이지로 이동하게 된다.</p>\n<p>두 번째 경우는 API에 의존하기에 처리하기가 조금 더 어렵다. 사용자가 입력한 품종이 유효한지 여부를 미리 알지 못한다. 세상에 존재하는 모든 품종을 알지 못하기 때문이다.(또는 적어도 우리가 알지 못한다고 가정해 보자) 404 페이지를 표시하기 위해선, 서버의 응답을 기다려하고, 받은 응답의 상태에 따라 동작해야 한다. 그럼 <code class=\"tui-language-text\">&lt;DogPage /&gt;</code> 컴포넌트를 수정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useParams<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Page404 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Page404\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DogPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>imageSrc<span class=\"token punctuation\">,</span> setimageSrc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>httpStatusCode<span class=\"token punctuation\">,</span> setHttpStatusCode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://dog.ceo/api/breed/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/images/random</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setHttpStatusCode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setimageSrc</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>breed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpStatusCode <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Page404 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>img alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A nice </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>imageSrc<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>응답 코드를 저장함으로써 값에 따라 다른 컴포넌트를 렌더링 할 수 있다. 위의 예에서 상태 코드가 404인 경우 404 페이지를 렌더링 했다. 이 방식은 잘 작동하지만, 만약 이런 방식으로 코드를 작성했다면 분명 문제가 발생할 것이다. 어떤 문제점이 있는지 한 번 살펴보자.</p>\n<ul>\n<li><strong>중첩 컴포넌트에서 404 처리</strong></li>\n</ul>\n<p>최상위 컴포넌트에서 <code class=\"tui-language-text\">&lt;Page404 /&gt;</code>는 쉽게 렌더링 할 수 있지만 컴포넌트가 컴포넌트 트리에서 \"깊게\" 위치한다면 어떻게 할 것인가? 그렇다면 <code class=\"tui-language-text\">&lt;Page404 /&gt;</code>는 부모 컴포넌트의 한 부분으로 렌더될 것이다. 이것은 전체 화면으로 나타나지 않는 것을 의미할 뿐만 아니라 다른 많은 컴포넌트요소들과 함께 렌더 될 수 있는 것을 의미한다.</p>\n<ul>\n<li><strong>반복적인 코드 &#x26; 로직</strong></li>\n</ul>\n<p>현재 하나의 컴포넌트에서 404를 처리했지만, API를 호출하는 <strong>모든</strong> 페이지/컴포넌트에서 이 작업을 수행해야 한다. 이는 여러 컴포넌트에 걸쳐 반복적인 코드를 작성해야 하는 것을 의미한다.</p>\n<ul>\n<li><strong>여러 에러 응답 다루기</strong></li>\n</ul>\n<p>404는 가장 일반적인 상태 중 하나지만, 401, 403, 500 등 에서도 동일한 작업을 수행할 수 있어야 한다. 즉, 이런 상태들을 처리하기 위해 <strong>더 많은</strong> 코드와 로직을 추가해야 한다.</p>\n<ul>\n<li><strong>API 호출이 컴포넌트 외부에서 작성 될 때 상태를 prop으로 넘기기 어려움</strong></li>\n</ul>\n<p>여기서 API 호출은 컴포넌트 내에서 수행되지만, redux를 사용하는 경우에는 thunk나 saga, observable 등에서 발생할 수 있다. 깔끔하고 쉽게 공통적으로 컴퍼넌트에 적용할 수 있는 방법이 무엇이 있을까?</p>\n<h2 id=\"redirect-사용하기\" style=\"position:relative;\"><a href=\"#redirect-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"redirect 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"redirect\" 사용하기</h2>\n<p>가장 일반적이고 쉽게 사용할 수 있는 방식은 <code class=\"tui-language-text\">&lt;Page404 /&gt;</code> 를 렌더링 하는 <code class=\"tui-language-text\">/404</code> url 로 이동시키는 것이다. 이 방법은 작동하지만, 사용자는 현재 위치의 컨텍스트를 잃는다. 사용자들은 404 페이지를 보게 되겠지만, 기존의 잘못 입력했던 URL이 변경되므로 \"어떤 것을 못찾았는지\" 알 수 없다. 우리가 원하는 것은 404 페이지가 표시되는 동안 잘못 입력되었던 원래 URL이 유지되는 방법이다.</p>\n<h2 id=\"hook-사용하기\" style=\"position:relative;\"><a href=\"#hook-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"hook 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"hook\" 사용하기</h2>\n<p>첫 번째 방법은 재사용 가능한 커스텀 훅을 사용하는 것이다. 이렇게 될 경우 모든 컴포넌트에서 API 상태 코드를 처리해야 하는 코드를 재작성하지 않아도 된다. 코드를 작성해보면(매우 기본적인 내용의 구현이다) 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>statusCode<span class=\"token punctuation\">,</span> setStatusCode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">,</span> setApiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>apiData <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setApiData</span><span class=\"token punctuation\">(</span>apiData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> apiData<span class=\"token punctuation\">,</span> statusCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">&lt;DogPage /&gt;</code> 컴포넌트에서 쉽게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useParams<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useQuery <span class=\"token keyword\">from</span> <span class=\"token string\">\"./useQuery\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Page404 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Page404\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DogPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> statusCode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://dog.ceo/api/breed/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/images/random</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Page404 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> imageSrc <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>img alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A nice </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>imageSrc<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법은 상태 코드를 처리하는 반복적인 코드는 해결 되었지만, 상태 코드에 따라 오류 페이지를 다르게 렌더링 하는 반복적인 로직은 해결하지 못했다. 또한, 또한, 여전히 각 컴퍼넌트 별로 구현되어야 한다. 클래스 기반 컴포넌트는 훅을 사용할 수 없으므로 조금 오래된 클래스 기반의 코드가 있다면 사용할 수 없다.</p>\n<h2 id=\"render-props-사용하기\" style=\"position:relative;\"><a href=\"#render-props-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"render props 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"render-props\" 사용하기</h2>\n<p>\"render-props\" 컴포넌트를 사용하면 클래스 기반 컴포넌트와 호환성을 유지하면서, 반복적인 코드 작성을 줄일 수 있다. 이전에 만든 <code class=\"tui-language-text\">useQuery</code> 훅을 사용해 간단한 render-prop 컴포넌트를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Page404 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Page404\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Query</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> statusCode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Page404 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ... 등 여기서 여러 HTTP 응답 코드 처리</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">&lt;DogPage /&gt;</code> 에서 아래처럼 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Query <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Query\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DogPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Query url<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://dog.ceo/api/breed/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/images/random</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> imageSrc <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>img alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A nice </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>imageSrc<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Query<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법을 사용하면 반복적인 로직들을 제거할 수 있으며, 여러 HTTP 코드를 처리할 수 있고, 클래스 기반 컴포넌트와 호환되면서 전반적으로 깔끔한 코드를 작성할 수 있다. 이제 해결해야 하는 유일한 부분은 <code class=\"tui-language-text\">&lt;Page404 /&gt;</code>를 <strong>독립적으로</strong> 렌더링 하는 것 뿐이다. 요약해보면, 404 페이지는 DogPage 컴포넌트에 렌더링 되지만 DogPage가 최상위 컴포넌트가 아닌 상위 컴포넌트가 많으면 어떻게 될까? 그렇다면 404 페이지는 다른 컴포넌트와 함께 전체 UI의 일부로 렌더링 될 것이다.</p>\n<h2 id=\"top-level-state-사용하기\" style=\"position:relative;\"><a href=\"#top-level-state-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"top level state 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"top-level state\" 사용하기</h2>\n<p>마지막 문제를 해결하기 위한 유일한 옵션은 다른 페이지가 렌더링 되기 전에 404 페이지를 렌더링 하는 것이다. 이를 위해 오류 페이지(404, 403, 500 등)을 표시하도록 최상위 컴포넌트에 알리는 상태 관리 라이브러리가 필요하다. 이를 위해 여러 라이브러리를 사용할 수 있지만, 여기서는 내장되어 있는 Context API를 사용하겠다.</p>\n<p>필요한 것은 상태 코드를 기반으로 올바른 오류 페이지를 렌더링하며, 모든 컴퍼넌트에서 이 동작(에러 페이지를 렌더링)을 발생시킬 수있게 해주는 컴포넌트이다. Context에 따라 적절한 동작을 하는 상위 컴포넌트를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useHistory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 컨텍스트를 사용해 컴포넌트 트리를 낮춰 오류 페이지를 표시한다</span>\n<span class=\"token keyword\">const</span> ErrorStatusContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 앱의 핵심 기능을 랩핑하는 최상위 컴포넌트</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorStatusCode<span class=\"token punctuation\">,</span> setErrorStatusCode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 사용자가 새 URL을 탐색할 때 마다 이 상태코드를 \"제거\" 해야한다. 그렇지 않을 경우 사용자는 오류 페이지에 영원히 \"갇히게\" 된다.</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 현재 위치의 변경 사항을 하는 리스너</span>\n    <span class=\"token keyword\">const</span> unlisten <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setErrorStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// unmount될 때 리스너 제거</span>\n    <span class=\"token keyword\">return</span> unlisten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 컴포넌트를 렌더하는 부분이다.</span>\n  <span class=\"token comment\">// API 오류와 일치하는 errorStatusCode가 있으면 오류 페이지를 렌더링한다. 오류 상태가 없다면 자식 컴포넌트를 정상적으로 렌더링한다.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderContent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorStatusCode <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Page404 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ... 다른 HTTP 코드는 여기서 관리</span>\n\n    <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 성능상의 이유로 useMemo로 랩핑. 더 궁금하다면 링크 확인</span>\n  <span class=\"token comment\">// https://kentcdodds.com/blog/how-to-optimize-your-context-value/</span>\n  <span class=\"token keyword\">const</span> contextPayload <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> setErrorStatusCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    setErrorStatusCode<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 컨텍스트의 값을 컴포넌트에 노출하는 동시에 화면에 적절한 컨텐츠를 렌더링</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ErrorStatusContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contextPayload<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token function\">renderContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ErrorStatusContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 컨텍스트 값을 빠르게 읽을 수 있는 커스텀 훅이다.</span>\n<span class=\"token comment\">// 빠른 import를 위해 여기서만 허용된다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useErrorStatus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ErrorStatusContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 컴포넌트는 다소 복잡하니, 자세한 설명을 위해 인라인으로 작성된 주석을 읽어라.</p>\n<p>이 컴포넌트를 사용하기 위해 아래처럼 핵심 로직을 랩핑하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DogPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./DogPage\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> IndexPage <span class=\"token keyword\">from</span> <span class=\"token string\">\"./IndexPage\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Page404 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Page404\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ErrorHandler<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>IndexPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/dogs/:breed/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>DogPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Page404<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ErrorHandler<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 잘못된 상태 코드를 반환할 때마다 오류 페이지 표시를 자동으로 표시를 \"트리거\" 하도록 <code class=\"tui-language-text\">useQuery</code>를 수정해야 한다. 즉 <code class=\"tui-language-text\">ErrorHandler</code>에 의해 더 이상 관리 되지 않기 때문에 로컬 state에서 <code class=\"tui-language-text\">statusCode</code>가 필요하지 않음을 의미한다. 우리가 필요한 것은 에러 상태 코드를 설정하는 액션을 실행하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useErrorStatus <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ErrorHandler\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> setErrorStatusCode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useErrorStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">,</span> setApiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>apiData <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setErrorStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setApiData</span><span class=\"token punctuation\">(</span>apiData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> apiData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마침내 <code class=\"tui-language-text\">ErrorHandler</code> 컴포넌트에 에러를 핸들링 하는 기능이 추가 되었으므로 더 이상 다른 컴포넌트에서 오류 상태를 처리할 필요가 없어졌다. 오류 상태를 처리하는 코드를 없앤 최종 <code class=\"tui-language-text\">&lt;DogPage /&gt;</code>컴포넌트를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useParams<span class=\"token punctuation\">,</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useQuery <span class=\"token keyword\">from</span> <span class=\"token string\">\"./useQuery\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DogPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://dog.ceo/api/breed/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/images/random</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> imageSrc <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>imageSrc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>img alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A nice </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>imageSrc<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>지금까지 우린 쉬운(훅을 사용한), 자동화 된(이후 추가되는 컴포넌트에 에러 핸들링을 고려할 필요 없는), 확장 가능한(<code class=\"tui-language-text\">ErrorHandler</code>에서 필요한 모든 오류를 처리할 수 있는) 방법을 알아봤다.</p>\n<h2 id=\"범용적인-해결책-마지막이다-진짜로\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9A%A9%EC%A0%81%EC%9D%B8-%ED%95%B4%EA%B2%B0%EC%B1%85-%EB%A7%88%EC%A7%80%EB%A7%89%EC%9D%B4%EB%8B%A4-%EC%A7%84%EC%A7%9C%EB%A1%9C\" aria-label=\"범용적인 해결책 마지막이다 진짜로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범용적인 해결책 (마지막이다, 진짜로)</h2>\n<p>위 방법은 잘 작동하지만, 모든 리액트 프로젝트에서 재사용하기는 힘들다. 이 접근법은 리액트의 경계에서는 잘 작동하지만, redux에서 API를 호출할때는 장황해진다. redux thunk에서 <code class=\"tui-language-text\">setErrorStatus</code>를 어떻게 발생시킬 것인가? 단순하게 할 수 없다. redux state를 변경하기 위한 액션을 트리거 해야하고 <code class=\"tui-language-text\">ErrorHandler</code>가 redux state를 읽게 해야 한다. 하지만 해당 일을 수행하기 위해 많은 보일러플레이트 코드가 들어가게 된다. Apollo에서도 동일하다. 단지 상태 코드를 변경하기 위해 <code class=\"tui-language-text\">apollo-link-state</code>를 포함 시키고 mutation을 디스패치해야한다.</p>\n<p>이러한 부분을 염두하면서, 정확히 무엇을 달성해야 하는지 다시 생각해보자. URL을 상태 코드와 연결하고 상태 코드의 값에 따라 렌더링할 대상을 결정해야 한다. 음.. 우리가 많이 사용하지 않는 브라우저 기본 기능을 활용하면 이 부분을 쉽게 해결할 수 있다.</p>\n<p><strong>현재 위치의 상태다</strong></p>\n<p>브라우저의 기본 history API는 각 위치에 따라 원하는 어떤것이든 저장 할 수 있는 상태 키를 첨부할 수 있다. 로컬 state 대신 <code class=\"tui-language-text\">statusCode</code>를 저장하는데 사용하지 않을 이유가 없다. 이로써 얻을 수 있는 보너스들을 살펴보자.</p>\n<ul>\n<li>다른 위치로 이동을 할 때 state를 정리할 필요가 없다. 따라서 새 위치에서는 깨끗한 state를 가진다.</li>\n<li>(이전 버튼의 상태가 브라우저의 기록 스택에 저장되어 있기 떄문에) 이전으로 이동하기를 눌렀을 때 API 요청을 새로 하지 않아도 404 페이지를 자동으로 보여준다.</li>\n<li>명령적(imperative)으로 위치에 상태를 할당하기 때문에, 다른 어떤 상태 관리 라이브러리와도 쉽게 통합할 수 있다.</li>\n<li>(status code 뿐만 아니라) 원하는 어떤 키든 저장하고 관리할 수 있으므로 구성이나 확장면에서 매우 뛰어나다. 즉, 오류 페이지 구성 요소에 props로써 전달 될 데이터를 저장할 수도 있다.</li>\n</ul>\n<p>이를 염두해두고 <code class=\"tui-language-text\">ErrorHandler</code>를 단순화해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useLocation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Page404 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Page404\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">\"errorStatusCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">404</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Page404 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ... 다른 타입의 상태 코드를 처리한다</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 우리 시스템의 모든 모듈들은(리액트에 존재하든 아니든 상관없이) 현재 위치에 에러 코드를 추가하거나 대체할 수 있게 된다. 이를 보여주기 위해 <code class=\"tui-language-text\">useQuery</code>를 수정해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useHistory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> <span class=\"token function\">useHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">,</span> setApiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>apiData <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            errorStatusCode<span class=\"token operator\">:</span> code<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setApiData</span><span class=\"token punctuation\">(</span>apiData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> apiData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법의 장점은 <code class=\"tui-language-text\">useQuery</code> 훅이 <code class=\"tui-language-text\">ErrorHandler</code>컴포넌트 존재 자체를 알지 못한다는 것이다. 현재 history에 특정 상태를 추가하기위해 해야할 일은 'side-effect'로써 위치를 수정하는 것 뿐이다. 즉, <code class=\"tui-language-text\">useQuery</code>와 <code class=\"tui-language-text\">ErrorHandler</code>는 상호 의존적이지 않으므로 아무 이슈없이 바꿀 수 있다는 것을 의미한다. 게다가, <code class=\"tui-language-text\">ErrorHandler</code>에 원하는 사용자 정의 로직들을 추가할 수 있다. 예를 들어 404 오류를 무시하는 화이트리스트 쿼리 목록이나 여러 에러들을 동시에 처리하는 로직들을 추가 할 수 있다. 각 앱에 따라 요구사항이 다르기 때문에, 이런 부분들은 비즈니스와 연결되어 있다.</p>\n<p>이제 완성이다. <code class=\"tui-language-text\">ErrorHandler</code>와 <code class=\"tui-language-text\">useQuery</code> 훅만 있다면 중앙 집중식으로 API 에러를 핸들링할 수 있게 된다. 반드시 얘기해야 하는 부분이 있는데, 만약 상태 관리 라이브러리를 사용한다면 <code class=\"tui-language-text\">useQuery</code>를 사용하지 않을 가능성이 있다. 그럴 경우, 라이브러리마다 다른 HTTP fetch 로직의 부분에서 수동으로 <code class=\"tui-language-text\">history.replace</code>를 트리거해야 한다. 가장 대중적인 라이브러리에서 이 부분을 어떻게 할 수 있는지 살펴보자.</p>\n<h2 id=\"redux-유저들에게\" style=\"position:relative;\"><a href=\"#redux-%EC%9C%A0%EC%A0%80%EB%93%A4%EC%97%90%EA%B2%8C\" aria-label=\"redux 유저들에게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux 유저들에게</h2>\n<p>위 방법을 redux에서 구현하기 위해선, history에 접근을 해야 할 것이다. 여러가지 방법이 있는데, <code class=\"tui-language-text\">createStore</code>함수에 history를 매개변수로 전달하고 미들웨어를 생성하거나 <a href=\"https://github.com/supasate/connected-react-router\">connected-react-router</a>를 이용해 history를 직접 조작할 수 있는 액션 생성자를 노출시킬 수 있다. 올바른 매개변수로 액션을 발생시키면 된다! 이 문서는 어떻게 수행하는지 많은 내용이 담겨있다.</p>\n<h2 id=\"apollo-유저들에게\" style=\"position:relative;\"><a href=\"#apollo-%EC%9C%A0%EC%A0%80%EB%93%A4%EC%97%90%EA%B2%8C\" aria-label=\"apollo 유저들에게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo 유저들에게</h2>\n<p>Apollo client에서 처리하기 위해서는, <code class=\"tui-language-text\">history.replace</code>를 호출하기 위해 <a href=\"https://github.com/apollographql/apollo-link/tree/master/packages/apollo-link-error\">apollo-link-error</a>를 사용해 history에 접근할 수 있는 에러 링크를 만들어 줘야 한다. 가장 쉬운 방법은, history 인스턴스를 만들어(<code class=\"tui-language-text\">react-router</code>를 사용하는 경우 <code class=\"tui-language-text\">createBrowserHistory</code>를 통해) 링크 내에서 직접 사용하는 것이다. 동일한 인스턴스가 <code class=\"tui-language-text\">&lt;Router&gt;</code> 컴포넌트에 전달 되어야 한다. 또 다른 옵션으로는 <code class=\"tui-language-text\">useHistory</code> 훅을 통해 history를 읽고, 이를 매개 변수로 클라이언트에 전달한 뒤(리액트 컴포넌트 내에서 작성해야 한다) 에러 링크로 전달하는 것이다. 후자는 history 인스턴스를 라우터에 의존하려는 경우에 고려해야 하는 접근법으로, 프로덕션 환경과 테스트 환경에서 동일한 Apollo client를 유지할 수 있다.(의존성 주입으로 인해)</p>\n<h2 id=\"마치면서\u001e\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C%1E\" aria-label=\"마치면서\u001e permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서\u001e</h2>\n<p>이 글에서 작성한 많은 코드들이 최종적으로 사용되지는 않았지만, 내가 경험한 여러가지 접근법들의 문제점을 보여주어야 했다. 이 글의 목표는 모든 React앱에서 API 에러를 한번에 처리할 수 있는 좋은 방법을 소개하는 것이었다. 이 방법을 사용하면 context나 state, re-render, 훅 등 많은 것을 생각하지 않아도 된다. 다시 말해서 API 오류를 처리하기 위해 필요한 것은 현재 위치의 상태를 읽고 그에 따라 history를 수정할 수 있는 어떤 종류의 중앙 \"API 모듈\"과 결합된 최상위 컴포넌트다. 이 방법은 컴포넌트간 결합을 강요\u001e하지 않을 뿐더러, 추상적이고 일반적이기 때문에 모든 프레임워크에 쉽게 이식할 수 있는 장점이 있다. 지금까지 이 코드는 대부분의 내 앱에서 훌륭하게 작동되고 있어 기쁘게 생각하고 있다. 하지만, 많은 사람들의 생각이 궁금하다. <a href=\"https://codesandbox.io/s/determined-shaw-6kmjc?autoresize=1&#x26;fontsize=14&#x26;moduleview=1\">최종 코드</a>는 여기서 확인할 수 있다.</p>\n<p>궁금한 점이 있거나 문제를 해결하는 더 좋은 방법이 있으면 알려주길 바란다.\n읽어줘서 고맙다!</p>\n<p><em>P.S.더 많은 팁들은 내 <a href=\"https://twitter.com/AggArvanitakis\">트위터</a>에서 확인할 수 있다.</em></p>","frontmatter":{"id":"ko_20200623","title":"리액트 앱에서의 중앙 집중식 API 에러 핸들링","description":"이 글에서는 사용 중인 상태 관리 라이브러리(Redux, Apollo, etc..)에 상관없이 API 오류를 중앙 집중식이며, 쉽게 확장 가능한 방식으로 한번에 처리하는 방법을 제시한다.","date":"2020.06.23","author":"한정","tags":["React"],"thumbnail":"https://miro.medium.com/max/1400/1*zrElooE3nz0oaZIhaIbLKQ.jpeg"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20200623","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}