{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170818","result":{"data":{"post":{"html":"<h1 id=\"npm에-모듈을-등록하면서-일어날-수-있는-일들\" style=\"position:relative;\"><a href=\"#npm%EC%97%90-%EB%AA%A8%EB%93%88%EC%9D%84-%EB%93%B1%EB%A1%9D%ED%95%98%EB%A9%B4%EC%84%9C-%EC%9D%BC%EC%96%B4%EB%82%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%9D%BC%EB%93%A4\" aria-label=\"npm에 모듈을 등록하면서 일어날 수 있는 일들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm에 모듈을 등록하면서 일어날 수 있는 일들</h1>\n<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p><a href=\"https://github.com/nhn/tui.grid\">TUI 그리드</a>를 npm에 등록하면서 발생한 이슈들을 정리하였으며, 글에서 혼란스러울 수 있는 단어 몇 가지를 아래 정리해 두었으니 숙지하고 넘어가길 바란다.</p>\n<ul>\n<li>TUI : Toast UI의 약자이며, NHN엔터테인먼트 FE개발랩에서 개발한 UI 제품들의 prefix로 사용된다. (예: TUI 그리드)</li>\n<li>모듈(Module) : 자바스크립트에서 독립적이고 재사용이 가능한 코드의 최소 단위를 말한다.</li>\n<li>디펜던시(Dependency) : 어떤 모듈에서 종속적으로 사용되는 외부 모듈에 해당한다.</li>\n<li>번들링(Bundling) : <a href=\"https://webpack.github.io/\">Webpack</a> 또는 <a href=\"http://browserify.org/\">Browserify</a> 등을 사용해 여러 모듈을 묶는 작업을 말한다. 이 과정을 통해서 만들어진 파일을 '번들 파일'이라고 한다.</li>\n</ul>\n<h2 id=\"npm-등록이란-무엇인가\" style=\"position:relative;\"><a href=\"#npm-%EB%93%B1%EB%A1%9D%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"npm 등록이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 등록이란 무엇인가?</h2>\n<p>프론트엔드 개발에서 필요한 자바스크립트 프레임워크 및 라이브러리는 패키지 매니저를 통해 설치하고 사용할 수 있다. 패키지 매니저의 종류로는 <a href=\"https://bower.io/\">bower</a>, <a href=\"https://www.npmjs.com/\">npm</a>, <a href=\"https://yarnpkg.com/lang/en/\">yarn</a> 등이 있고, <a href=\"https://nodejs.org/ko/\">nodejs</a>로 개발하는 환경에서 모듈을 사용하기 위해서는 사용하고자 하는 모듈이 npm에 등록되어 있어야 한다. 더 자세히 말하면 내가 만든 모듈을 다른 모듈에서 사용할 수 있도록 npm 중앙 저장소에 배포(publish)하는 작업에 해당된다.</p>\n<p>bower 등록과 다른점이 있는데, github 저장소를 참조하는 것이 아니라 내 로컬의 파일들이 그대로 배포된다는 것이다. 배포되는 순간 npm 중앙 저장소에 태그가 생성되므로, 모듈이 수정된 경우에는 반드시 버전 업데이트하여 재배포해야 한다. (이 내용은 태그 이슈 관련 목차에서 다시 다루겠다)</p>\n<h2 id=\"npm-등록-방법\" style=\"position:relative;\"><a href=\"#npm-%EB%93%B1%EB%A1%9D-%EB%B0%A9%EB%B2%95\" aria-label=\"npm 등록 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 등록 방법</h2>\n<p>npm 등록 방법은 간단하다. 단, nodejs가 설치되어 있어야 한다.</p>\n<ol>\n<li>npm에 등록하려는 모듈의 작업 폴더로 이동한다.</li>\n<li>npm 등록을 위해 계정을 추가하고, 이미 있는 경우에는 로그인한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm adduser\n$ npm login</code></pre></div>\n<ol start=\"3\">\n<li><code class=\"tui-language-text\">package.json</code> 파일에 옵션을 설정한다. (아래는 npm 등록을 위한 필수 옵션이다)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-app\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>(선택) <code class=\"tui-language-text\">.npmignore</code> 파일을 생성하고 npm에 배포하지 않으려는 파일을 추가한다. <code class=\"tui-language-text\">.npmignore</code> 파일이 없으면 <code class=\"tui-language-text\">.gitignore</code> 파일이 대신한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\"># directory\nnode_modules\nsrc\nlib\n...</code></pre></div>\n<ol start=\"5\">\n<li>npm 저장소에 배포한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm publish</code></pre></div>\n<ol start=\"6\">\n<li>정상적으로 등록되었는지 확인한다.</li>\n<li><a href=\"https://www.npmjs.com\">npmjs</a> 확인 : <code class=\"tui-language-text\">https://www.npmjs.com/package/&lt;package-name&gt;</code></li>\n<li>다른 모듈에서 설치 확인 :</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install &lt;package-name&gt;\n$ npm install &lt;package-name&gt;@&lt;version&gt;\n$ npm install &lt;package-name&gt;@&lt;tag&gt;</code></pre></div>\n<p>이처럼 npm 등록은 명령어 몇 줄만으로 아주 간단히 해결되지만, 이미 만들어진 모듈의 특성에 따라 변수가 발생할 수 있다. 이제부터 npm 등록 작업 중 발생할 수 있는 이슈들에 대해서 이야기할 것이며, TUI 그리드 및 관련 TUI 컴포넌트들을 예로 설명하고자 한다. 또한 모듈에 대한 예제 코드들은 <a href=\"https://webpack.github.io/\">Webpack 1</a>을 사용한 개발 환경 기준으로 작성된 점에 유의하라.</p>\n<h2 id=\"npm-등록-이슈-1라운드--번들링\" style=\"position:relative;\"><a href=\"#npm-%EB%93%B1%EB%A1%9D-%EC%9D%B4%EC%8A%88-1%EB%9D%BC%EC%9A%B4%EB%93%9C--%EB%B2%88%EB%93%A4%EB%A7%81\" aria-label=\"npm 등록 이슈 1라운드  번들링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 등록 이슈 1라운드 : 번들링</h2>\n<p>이전 단락에서 <code class=\"tui-language-text\">package.json</code> 파일에 추가한 옵션들을 기억하는가? 한 번이라도 <code class=\"tui-language-text\">package.json</code> 파일을 생성하고 수정해본 사람이라면 <code class=\"tui-language-text\">main</code> 옵션에 궁금증을 가지게 될 것이다. <a href=\"https://docs.npmjs.com/files/package.json\">npm 문서</a>에 따르면 <code class=\"tui-language-text\">main</code> 옵션은 <em>내 프로그램에서 시작점이 되는 모듈의 ID</em> 라고 설명한다. 예를 들어 어떤 모듈의 패키지명이 'my-app'이고, 이 모듈을 다른 모듈에서 사용한다고 하면 <code class=\"tui-language-text\">require(&#39;my-app&#39;)</code> 형태로 가져오게 된다. 이 때 <code class=\"tui-language-text\">require</code> 함수가 반환하는 값은 <code class=\"tui-language-text\">exports</code> 객체여야 하며, 이 객체를 반환하면서 모듈의 시작점이 되는 파일을 <code class=\"tui-language-text\">main</code> 옵션 값으로 설정하게 된다.</p>\n<p>다음은 사용 예이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// my-app/src/index.js</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">setName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// my-app/package.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-app\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/index\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// other-app/src/main.js</span>\n<span class=\"token keyword\">var</span> myApp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> appName <span class=\"token operator\">=</span> myApp<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"번들-상태로-제공할-것인가-vs-말-것인가\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EB%93%A4-%EC%83%81%ED%83%9C%EB%A1%9C-%EC%A0%9C%EA%B3%B5%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80-vs-%EB%A7%90-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"번들 상태로 제공할 것인가 vs 말 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번들 상태로 제공할 것인가 vs 말 것인가?</h3>\n<p><a href=\"https://lodash.com/\"><code class=\"tui-language-text\">lodash</code></a>처럼 npm에 등록된 모듈은 보통 번들되지 않은 상태로 제공된다. 필요에 따라 모듈은 CSS 또는 HTML 관련 로더를 포함해야 될 때가 있는데 이 경우 번들링 과정에서 문제가 발생한다. 예를 들어 'my-app' 모듈에서 템플릿 처리를 위해 <a href=\"http://handlebarsjs.com/\">handlebars</a>를 사용한다면, 'my-app' 모듈을 사용하는 다른 모듈에서도 사용된 템플릿 엔진을 처리할 수 있어야 한다.  즉, 'my-app' 모듈에서 필요한 개발 디펜던시 모듈들을 'my-app'을 사용하는 다른 모듈에서도 가지고 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// my-app/src/index.js</span>\n<span class=\"token keyword\">var</span> tmpl <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"template/layout.hbs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_element <span class=\"token operator\">=</span> <span class=\"token function\">tmpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// other-app/src/main.js</span>\n<span class=\"token keyword\">var</span> myApp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyApp<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// executed error when this module is bunding!</span></code></pre></div>\n<p>문제를 해결할 수 있는 아주 단순한 방법으로는, 'my-app'을 사용하는 모듈에도 번들링 시 handlebars를 처리하는 플러그인을 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// other-app/package.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"other-app\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"handlebars\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.0.6\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"handlebars-loader\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.4.0\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이게 최선의 방법일까? 이 방식대로라면 'my-app'을 사용해 개발을 할 때마다 개발에 필요한 디펜던시들을 외우고 있어야 될 것이다. 'my-app'에서 다른 템플릿 엔진으로 변경하는 일이라도 발생하면 모든 의존 모듈의 <code class=\"tui-language-text\">package.json</code> 파일을 수정해야 한다. 그리고 번들되지 않은 상태의 모듈들을 모두 들고 있을 경우, 최종 번들링을 할 때 성능이 떨어질 수 있다는 단점이 있다.</p>\n<p>해결책으로 <em>번들 상태의 모듈</em> 을 제공하는 것이다. <a href=\"https://www.npmjs.com/package/jquery\">jQuery</a>의 <code class=\"tui-language-text\">package.json</code>을 보면 <code class=\"tui-language-text\">main</code> 옵션 값으로 소스 코드의 엔트리 파일이 아닌 번들 파일이 설정되어 있다.</p>\n<p>대부분의 TUI 제품들은 CSS 로더를 포함하고 있어 같은 이슈가 발생하므로 번들 상태로 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/package.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/grid\"</span> <span class=\"token comment\">// set bundle file</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"require-함수-사용하기\" style=\"position:relative;\"><a href=\"#require-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"require 함수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>require 함수 사용하기</h3>\n<p>첫 번째 이슈가 해결되었으니 TUI 그리드가 npm에 등록되었다는 가정하에 다른 모듈에서 사용이 가능한지 테스트 해보기로 했다. 그 전에 기존에 TUI 그리드를 사용하던 방식을 이해하고 넘어가야 한다. 현재 TUI 제품군들은 전역 범위(Global Scope)의 네임스페이스에 정의되고, 해당 네임스페이스로 접근해 사용하도록 디자인되어 있다. 다음은 'my-app' 모듈에서 TUI 그리드를 사용하는 예제 코드이며, 네임스페이스 형태로 가져와 사용하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// my-app/src/main.js</span>\n<span class=\"token keyword\">var</span> gridInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tui<span class=\"token punctuation\">.</span>Grid</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngridInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>사실상 모듈 안에서 네임스페이스 사용은 권장하지 않는다. 이제 정말 TUI 그리드를 모듈답게 사용할 수 있도록 코드를 수정해 보았다. <code class=\"tui-language-text\">npm install</code> 명령어를 통해 TUI 그리드를 설치하고 <code class=\"tui-language-text\">require</code> 함수로 호출하면, 네임스페이스를 사용했을 때와 같이 잘 동작할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// my-app/src/main.js</span>\n<span class=\"token keyword\">var</span> Grid <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tui-grid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gridInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Grid</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngridInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>질문에 대한 대답은 '아니오'다. 위에서도 잠깐 언급했듯이 <code class=\"tui-language-text\">require</code> 함수를 호출했을 때 <code class=\"tui-language-text\">exports</code> 모듈 객체가 반환되어야하나 현재 상황에서는 값이 비어있을 것이다. 두 번째 이슈가 발생했다. 이미 눈치챘겠지만 <code class=\"tui-language-text\">package.json</code>에서 설정한 번들 파일에 문제가 있다. TUI 그리드 번들 파일에서 모듈이 실행되는 시작점으로 이동해보자. 네임스페이스만 정의되어 있을 뿐, <code class=\"tui-language-text\">exports</code> 모듈 객체로 반환되는 코드는 그 어디에서도 찾을 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/dist/grid.js</span>\ntui <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>tui <span class=\"token operator\">=</span> tui <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntui<span class=\"token punctuation\">.</span>Grid <span class=\"token operator\">=</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>문제를 해결하기 위해 <code class=\"tui-language-text\">tui.Grid</code> 네임스페이스에 그리드 객체를 정의하는 코드를 제거하고, <code class=\"tui-language-text\">exports</code> 객체로 반환하도록 로직을 수정하였다. 이 방법도 정답은 아니다. 기존에 브라우저에서 네임스페이스로 접근해 사용하던 경우를 처리할 수 없기 때문이다. 결국 모듈을 네임스페이스로 가져올지 아니면 <code class=\"tui-language-text\">require</code> 함수로 로드할지 상황에 따라 결정할 수 있는 방법이 필요하다.</p>\n<p>이는 모듈을 정의할 때 <a href=\"https://github.com/umdjs/umd\">UMD(Universal Module Definition)</a>패턴을 사용하면 처리가 가능하다. 아래 코드는 UMD 패턴의 기본 구조이며, <a href=\"https://developer.mozilla.org/ko/docs/Glossary/IIFE\">IIFE</a>가 실행되는 시점에서 모듈이 노출될 형태를 결정하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// AMD</span>\n    <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// CommonJS</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Globals (root is window)</span>\n    root<span class=\"token punctuation\">.</span>MyApp <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> MyApp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">tui.Grid</code> 네임스페이스로 그리드 모듈을 정의하던 코드를 UMD 패턴으로 변경해보자. 일련의 과정들은 <em>UMD 패턴 소스를 복붙</em> 하는 대신 Webpack 옵션 설정으로 간단하게 처리할 수 있다. 먼저 <a href=\"https://webpack.github.io/docs/configuration.html#output-librarytarget\"><code class=\"tui-language-text\">libraryTarget</code></a> 옵션을 사용하면, 모듈 노출 방식을 결정하고 번들링 시점에서 관련 코드들을 추가해준다. 그리고 UMD 패턴에서 사용자가 커스터마이징 가능한 부분이 있는데, 전역 범위에 할당될 변수 또는 네임스페이스명을 설정할 수 있다. <a href=\"https://webpack.github.io/docs/configuration.html#output-library\"><code class=\"tui-language-text\">library</code></a> 옵션으로 설정하며, 문자열 대신 배열로 설정하면 네임스페이스로 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        library<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Grid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        libraryTarget<span class=\"token operator\">:</span> <span class=\"token string\">'umd'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 옵션들을 설정하고 TUI 그리드를 다시 번들링하면, 번들 파일 상단에 UMD 처리 코드가 추가된 것을 볼 수 있다. Webpack이 처리한 방식에서 특이한 점으로 CommonJS2까지 처리하는 것인데 CommonJS, CommonJS2 이 둘의 차이점은 <a href=\"https://github.com/webpack/webpack/issues/1114\">Webpack 이슈</a> 내용을 참조하길 바란다.</p>\n<p>이제 네임스페이스뿐만 아니라 다양한 형태로 TUI 그리드를 가져와 사용할 수 있게 되었다. <code class=\"tui-language-text\">require</code> 함수를 호출해도 문제가 없다!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/dist/grid.js</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackUniversalModuleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// CommonJS2</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// AMD</span>\n    <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// CommonJS</span>\n    exports<span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Globals (root is window)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// what this module returns is what your entry chunk returns</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"npm-등록-이슈-2라운드--디펜던시-처리\" style=\"position:relative;\"><a href=\"#npm-%EB%93%B1%EB%A1%9D-%EC%9D%B4%EC%8A%88-2%EB%9D%BC%EC%9A%B4%EB%93%9C--%EB%94%94%ED%8E%9C%EB%8D%98%EC%8B%9C-%EC%B2%98%EB%A6%AC\" aria-label=\"npm 등록 이슈 2라운드  디펜던시 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 등록 이슈 2라운드 : 디펜던시 처리</h2>\n<p>지금까지 외부 모듈에서 TUI 그리드를 사용하면서 발생한 문제들을 해결했다. 이번 단락에서는 반대의 입장에서 발생한 문제들을 처리해보고자 한다. TUI 그리드도 다른 모듈들을 사용하는 <em>외부 모듈</em> 이라는 것을 잊지말자. 이번에도 TUI 그리드에 대한 사전 지식이 필요한데, TUI 그리드는 다음과 같은 디펜던시들을 가진다. 이해하기 쉽게 그림으로 표현해 보았으며, 화살표는 어떤 모듈에서 시작해 <em>의존적으로 사용하고 있는 모듈</em> 을 가리킨다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18183560/29500329-c61849e0-865a-11e7-8a92-c8655fe43837.png\" alt=\"dependency\"></p>\n<h3 id=\"npm에-등록된-디펜던시-사용하기\" style=\"position:relative;\"><a href=\"#npm%EC%97%90-%EB%93%B1%EB%A1%9D%EB%90%9C-%EB%94%94%ED%8E%9C%EB%8D%98%EC%8B%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"npm에 등록된 디펜던시 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm에 등록된 디펜던시 사용하기</h3>\n<p>npm 등록 작업을 거치기 전까지, 일부 디펜던시 모듈들은 TUI 그리드 소스 내부에서 네임스페이스로 사용되었다. 이유는 간단하다. 모듈이 npm에 등록되어 있지 않았거나, 디펜던시 모듈이 <code class=\"tui-language-text\">exports</code> 객체를 반환하는 형태가 아니었기 때문이다. 다음 코드는 TUI 그리드 내부에서 디펜던시들이 사용된 예이다. <code class=\"tui-language-text\">underscore</code>를 제외한 나머지 디펜던시들은 모두 네임스페이스로 사용되고 있다. <code class=\"tui-language-text\">require</code> 함수를 사용하는 형태로 변경해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/src/js/view/factory.js</span>\n<span class=\"token keyword\">var</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">var</span> ViewFactory <span class=\"token operator\">=</span> tui<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 'tui.util' is namespace of tui-code-snippet</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '$' is namespace of jQuery</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tui<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">.</span>Datepicker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**/</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 'tui.component.Datepicker' is namespace of tui-date-picker</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>먼저 <code class=\"tui-language-text\">jQuery</code>를 변경하는 과정에서 버전 이슈가 발생하였다. 기존 TUI 제품군들은 <code class=\"tui-language-text\">jQuery</code> 디펜던시가 있는 경우 <code class=\"tui-language-text\">1.8.3</code> 버전부터 사용되었으나, npm에서 해당 버전이 디프리케이트 되어 버전 변경이 필요했다. 결정적으로 UMD 처리는 <code class=\"tui-language-text\">1.11.0</code> 이상 버전부터 적용되어 있기 때문에 해당 버전으로 업데이트 후 작업을 진행할 수 있었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18183560/29500354-048fd7ce-865b-11e7-8daa-ece71ce3ca33.png\" alt=\"jquery_deprecated\"></p>\n<p>다음은 npm에 TUI 그리드를 등록한 프로세스와 동일하게 TUI 컴포넌트와 코드 스니펫도 npm에 등록한다. 등록이 완료되면 TUI 그리드에서 정상 동작하도록 디펜던시 관련 코드들을 수정한다. 이제 전역 범위에 접근하지 않으면서 CommonJS 모듈 형태를 갖추게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/src/js/view/factory.js</span>\n<span class=\"token keyword\">var</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> snippet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tui-code-snippet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> DatePicker <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tui-date-picker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">var</span> ViewFactory <span class=\"token operator\">=</span> snippet<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DatePicker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/**/</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"디펜던시-코드를-포함할-것인가-vs-말-것인가\" style=\"position:relative;\"><a href=\"#%EB%94%94%ED%8E%9C%EB%8D%98%EC%8B%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80-vs-%EB%A7%90-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"디펜던시 코드를 포함할 것인가 vs 말 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디펜던시 코드를 포함할 것인가 vs 말 것인가?</h3>\n<p><code class=\"tui-language-text\">require</code> 함수로 디펜던시 모듈을 가져올 때 주의할 사항으로 디펜던시 코드들이 번들 파일에 포함될 수 있다는 점이다. Webpack에서는 기본적으로 디펜던시 모듈 코드들을 모두 포함한 상태로 번들 파일을 생성하게 된다. 웹서비스 개발자의 입장이라면, 전체 코드를 1개 번들 파일로 묶어 사용할 수 있으므로 오히려 이점으로 느껴질 것이다. 하지만 TUI와 같이 동일한 디펜던시를 가지는 모듈을 여러 개 사용하는 경우에는 이야기가 달라진다.</p>\n<p>앞서 보았던 그림에서 TUI 그리드 및 컴포넌트들은 모두 코드 스니펫에 의존적이다. 각 번들 파일에 코드 스니펫 코드를 포함하게 된다면 어마어마한 양의 중복 코드가 발생할 것이다. 결국 번들링 과정에서 디펜던시 모듈에 대한 코드들을 제외시켜야만 한다. 이는 Webpack의 <a href=\"https://webpack.github.io/docs/configuration.html#externals\"><code class=\"tui-language-text\">externals</code></a> 옵션으로 처리가 가능하며 <code class=\"tui-language-text\">libraryTarget</code> 옵션과 같이 사용된다. <code class=\"tui-language-text\">externals</code>에 명시된 모듈은 번들링 시점에서 번들 파일에 코드가 포함되지 않도록 변환되며, 이 때 <code class=\"tui-language-text\">libraryTarget</code> 옵션에 설정된 모듈 로드 방식으로 변환된다.</p>\n<p>다음과 같이 TUI 그리드 번들 파일에서 코드 스니펫을 제외하기 위해 옵션을 추가하고 번들링해 보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    libraryTarget<span class=\"token operator\">:</span> <span class=\"token string\">'umd'</span><span class=\"token punctuation\">,</span>\n    externals<span class=\"token operator\">:</span> <span class=\"token string\">'tui-code-snippet'</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>번들 파일을 확인해보자. TUI 그리드는 UMD 패턴으로 노출되기 때문에, 디펜던시를 제외하는 로직도 <code class=\"tui-language-text\">CommonJS</code>, <code class=\"tui-language-text\">AMD</code>, 전역 변수로 조건 분기되어 추가된 것을 확인할 수 있다. 예를 들어 <code class=\"tui-language-text\">CommonJS</code> 방식에서는 제외될 디펜던시 모듈이 <code class=\"tui-language-text\">require(&quot;tui-code-snippet&quot;)</code>로 변환되며 <code class=\"tui-language-text\">factory</code> 함수에 파라미터로 전달된다. 여기서 한 가지 이상한 부분이 있다. 전역 변수를 처리하는 조건에서, 파라미터로 사용된 <code class=\"tui-language-text\">root</code> 객체의 프로퍼티명이 어딘가 어색하다. 이 상태라면 TUI 그리드는 전역의 <code class=\"tui-language-text\">window.tui-code-snippet</code>에 정의되어 있어야 할 것이다. 문법적으로 맞지 않을 뿐더러, 코드 스니펫은 네임스페이스 <code class=\"tui-language-text\">tui.util</code>로 사용되고 있었기 때문에 변경이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/dist/grid.js</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackUniversalModuleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CommonJS2</span>\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token comment\">// AMD</span>\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CommonJS</span>\n        exports<span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\">// Globals (root is window)</span>\n        root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">libraryTarget</code> 옵션이 <code class=\"tui-language-text\">umd</code>인 경우, <code class=\"tui-language-text\">externals</code> 옵션에서도 각 로더 형태별로 값을 다르게 설정할 수 있다. 이 때 <code class=\"tui-language-text\">root</code> 값을 배열로 설정하면 네임스페이스로 처리할 수 있다. (안타깝게도 <code class=\"tui-language-text\">root</code>만 따로 설정할 방법은 없다)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    libraryTarget<span class=\"token operator\">:</span> <span class=\"token string\">'umd'</span><span class=\"token punctuation\">,</span>\n    externals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'tui-code-snippet'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'commonjs'</span><span class=\"token operator\">:</span> <span class=\"token string\">'tui-code-snippet'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'commonjs2'</span><span class=\"token operator\">:</span> <span class=\"token string\">'tui-code-snippet'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'amd'</span><span class=\"token operator\">:</span> <span class=\"token string\">'tui-code-snippet'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'root'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'util'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/dist/grid.js</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackUniversalModuleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// CommonJS2</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span>\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token comment\">// AMD</span>\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CommonJS</span>\n        exports<span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tui-code-snippet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\">// Globals (root is window)</span>\n        root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"util\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"safe-umd-webpack-plugin\" style=\"position:relative;\"><a href=\"#safe-umd-webpack-plugin\" aria-label=\"safe umd webpack plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>safe-umd-webpack-plugin</h3>\n<p>이제 모든 문제점들이 해결된 것 같다. TUI 그리드에서 코드 스니펫 외 나머지 디펜던시들도 <code class=\"tui-language-text\">externals</code> 처리를 하고 최종 테스트를 진행하기로 했다. <code class=\"tui-language-text\">require</code> 함수를 호출해 TUI 그리드를 가져오는 것도 문제가 없다. 마지막으로 <code class=\"tui-language-text\">&lt;script&gt;</code> 태그를 사용해 브라우저에서 호출 테스트를 하는데 이런.. <em>사용하지 않는 디펜던시 모듈에 대한 네임스페이스가 없다</em> 는 에러를 뱉어내는 것이 아닌가.</p>\n<p>상황은 이러했다. 브라우저에서 TUI 그리드를 실행할 때, TUI 컴포넌트가 필요 없는 경우에도 스크립트 파일을 포함해야만 에러를 막을 수 있었다. 에러가 발생한 지점을 찾아 디버깅을 해보니, 번들 파일에서 <code class=\"tui-language-text\">externals</code> 옵션을 통해 생성된 코드에 문제가 있었다. TUI 데이트피커 컴포넌트 스크립트 파일이 포함되어 있지 않으면 전역에도 네임스페이스 <code class=\"tui-language-text\">tui.component.Datepicker</code>가 정의되어 있지 않으므로, 아래와 같이 파라미터로 호출될 때 에러를 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// tui-grid/dist/grid.js</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackUniversalModuleDefinition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token comment\">// error : 'Datepicker' is undefined</span>\n    root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Grid\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"component\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Datepicker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>multi-depth 네임스페이스에 대한 예외 처리가 필요한데, Webpack으로 해결할 수 없어 FE 개발랩에서 직접 플러그인을 개발해 사용하기로 하였다. (<a href=\"https://github.com/webpack/webpack/issues/5202\">Webpack 이슈 참조</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>\n  root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n    root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"component\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n    root<span class=\"token punctuation\">[</span><span class=\"token string\">\"tui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"component\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Datepicker\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 Webpack 플러그인이 <a href=\"https://www.npmjs.com/package/safe-umd-webpack-plugin\">safe-umd-webpack-plugin</a>이며, 이로써 마지막 문제까지 해결할 수 있었다. multi-depth 네임스페이스 문제가 발생했을 때 꼭 사용해보길 바란다.</p>\n<h2 id=\"npm-등록-이슈-3라운드--태깅tagging\" style=\"position:relative;\"><a href=\"#npm-%EB%93%B1%EB%A1%9D-%EC%9D%B4%EC%8A%88-3%EB%9D%BC%EC%9A%B4%EB%93%9C--%ED%83%9C%EA%B9%85tagging\" aria-label=\"npm 등록 이슈 3라운드  태깅tagging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 등록 이슈 3라운드 : 태깅(tagging)</h2>\n<p>이번 단락은 번외 이슈 정도로 생각하면 좋을 것 같다. 도입부에서 언급한 내용으로 npm은 bower와 다르게 github 리포지터리를 참조하는 것이 아니라 npm 중앙 저장소에 저장된다고 했다. 그렇다면 npm에서 버전 관리는 어떻게 하는 것일까? 모듈의 <code class=\"tui-language-text\">package.json</code> 파일에 명시된 <code class=\"tui-language-text\">version</code> 옵션에 설정된 값을 따르게 되며, npm에 배포될 때 버전 앞에 prefix <code class=\"tui-language-text\">v</code>가 붙은 형태로 npm 저장소에 태그가 생성된다.</p>\n<p><a href=\"https://docs.npmjs.com/cli/version\"><code class=\"tui-language-text\">npm version</code></a> 명령어를 사용하면, <code class=\"tui-language-text\">package.json</code> 파일에서 <code class=\"tui-language-text\">version</code> 옵션 값이 업데이트 되면서 현재 변경점까지에 대한 git commit 로그를 생성한다. 또한 git 태그도 자동으로 생성해준다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18183560/29500338-d92f2512-865a-11e7-9baf-2431ad5f23c6.png\" alt=\"npm_version\"></p>\n<p><a href=\"https://github.com/webpack/webpack/tags\">Webpack</a>, <a href=\"https://github.com/eslint/eslint/tags\">ESLint</a>, <a href=\"https://github.com/facebook/react/tags\">React</a> 등 이미 많은 nodejs 모듈들이 위 방식으로 버전 및 태그를 관리하고 있다. TUI 그리드는 브랜치 관리 이슈로 <code class=\"tui-language-text\">npm version</code> 명령어를 사용하지 않으나, 태그 형태를 통일할 필요가 있어 git 태그 정책을 변경하게 되었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18183560/29500339-dd0e4e56-865a-11e7-8092-15d842c41b08.png\" alt=\"tags\"></p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<blockquote>\n<p>TUI 그리드도 npm으로 받을 수 있게 해주세요!</p>\n</blockquote>\n<p>TUI 그리드를 npm에 등록하는 작업은 이 한마디 요청으로부터 시작되었다. 사실 작업을 진행하기 전까지 <em>아주 간단하고 쉬운</em> 작업일 것이라고 생각했었다. npm 문서에서도 명령어와 옵션 몇 개만으로 등록 과정을 설명하고 있으니 말이다. 어쩌면 <em>아주 간단하고 쉬운</em> 작업은 새 모듈을 만드는 경우에서나 해당될 듯 하다. 이미 만들어진 모듈을 npm에 배포하는 것은 생각 이상으로 고려해야 될 사항들이 많았다. 위에서 설명했던 표면적인 문제점들로 인해 정책이 변경되기도 하고 메이저 버전 업데이트라는 상황까지 맞이해야만 했다. 몇 번의 고비는 있었지만 npm 등록 작업은 <strong>bower가 디프리케이트(Deprecated)되어 추후 bower에 등록된 모듈에 대한 지원이 어려워질 수 있다는 점</strong>, 그리고 <strong>nodejs 환경에서의 개발을 권장하고 TUI 제품군들을 사용할 수 있게 하기 위한 목적</strong> 때문에 언젠가는 꼭 진행했어야 할 중요한 일이었다. 이 세계에서 삽질 없이 얻어지는 결과는 없으리라. 부디 이 글이 비슷한 문제로 고민하고 있을 이들에게 도움이 되었으면 한다.</p>\n<h2 id=\"참고-링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%A7%81%ED%81%AC\" aria-label=\"참고 링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 링크</h2>\n<ul>\n<li>npm 배포 프로세스 설명 : <a href=\"https://docs.npmjs.com/getting-started/publishing-npm-packages\">https://docs.npmjs.com/getting-started/publishing-npm-packages</a></li>\n<li>npm 버전 정책 : <a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\">https://docs.npmjs.com/getting-started/semantic-versioning</a></li>\n<li>npm 태그 등록 : <a href=\"https://docs.npmjs.com/getting-started/using-tags\">https://docs.npmjs.com/getting-started/using-tags</a></li>\n<li>Webpack 1 옵션 API 문서 : <a href=\"https://webpack.github.io/docs/configuration.html\">https://webpack.github.io/docs/configuration.html</a></li>\n<li>Webpack 라이브러리 생성 가이드 : <a href=\"https://webpack.js.org/guides/author-libraries/#author-a-library\">https://webpack.js.org/guides/author-libraries/#author-a-library</a></li>\n</ul>","frontmatter":{"id":"ko_20170818","title":"npm에 모듈을 등록하면서 일어날 수 있는 일들","description":"프론트엔드 개발에서 필요한 자바스크립트 프레임워크 및 라이브러리는 패키지 매니저를 통해 설치하고 사용할 수 있다. 패키지 매니저의 종류로는 bower, npm, yarn 등이 있고, nodejs로 개발하는 환경에서 모듈을 사용하기 위해서는 사용하고자 하는 모듈이 npm에 등록되어 있어야 한다. 더 자세히 말하면 내가 만든 모듈을 다른 모듈에서 사용할 수 있도록 npm 중앙 저장소에 배포(publish)하는 작업에 해당된다.","date":"2017.08.18","author":"류선임","tags":["opensource","etc"],"thumbnail":"https://user-images.githubusercontent.com/18183560/29500329-c61849e0-865a-11e7-8a92-c8655fe43837.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170818","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}