{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20171006","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트-함수-3---lexical-environment\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%95%A8%EC%88%98-3---lexical-environment\" aria-label=\"자바스크립트 함수 3   lexical environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 함수 (3) - Lexical Environment</h1>\n<p>지난 글을 통해 <a href=\"/test123/weekly-pick/ko_20170630\">함수의 생성</a>과 <a href=\"/test123/weekly-pick/ko_20170811\">함수의 호출 과정</a>에 대해 간략히 알아보았다.</p>\n<p>앞선 글(함수의 호출)에서 간단히 설명한 Execution Context에는 LexicalEnvironment와 VariableEnvironment라는 컴포넌트가 있다. 기본적으로 두 컴포넌트는 Lexical Environment에 대한 참조이며 처음에는 같은 Lexical Environment를 참조한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">executionContext<span class=\"token punctuation\">.</span>LexicalEnvironment <span class=\"token operator\">=</span> executionContext<span class=\"token punctuation\">.</span>VariableEnvironment<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 자바스크립트 코드에 따라 VariableEnvironment나 LexicalEnvironment의 참조가 바뀌기도 한다.</p>\n<p>이제 Lexical Environment가 무엇인지 조금 더 자세히 알아보자.</p>\n<p>참고로 이 글에서는 LexicalEnvironment와 VariableEnvironment의 차이를 더 다루진 않을 것이다. 혹시 궁금하다면 <a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/\">이 글</a>을 꼭 읽어보길 바란다.</p>\n<h2 id=\"lexical-environment\" style=\"position:relative;\"><a href=\"#lexical-environment\" aria-label=\"lexical environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lexical Environment</h2>\n<p>Lexical Environment는 자바스크립트 코드에서 변수나 함수 등의 식별자를 정의하는데 사용하는 객체로 생각하면 쉽다. Lexical Environment는 식별자와 참조 혹은 값을 기록하는 <code class=\"tui-language-text\">Environment Record</code>와 <code class=\"tui-language-text\">outer</code>라는 또 다른 Lexical Environment를 참조하는 포인터로 구성된다. <code class=\"tui-language-text\">outer</code>는 외부 Lexical Environment를 참조하는 포인터로, 중첩된 자바스크립트 코드에서 스코프 탐색을 하기 위해 사용한다.</p>\n<p><code class=\"tui-language-text\">Environment Record</code>와 <code class=\"tui-language-text\">outer</code>를 조금 더 이해하기 쉽게 아래 구조를 살펴보자(물론 실제로 이렇게 단순하게 동작한다는 것은 아니지만 개념적으로 쉽게 이해할 수 있다).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2. Running execution context</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1. Call</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// Running execution context의 LexicalEnvironment</span>\n\n<span class=\"token punctuation\">{</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Environment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 구조에서는 단순히 함수 호출 한 번에 하나의 Lexical Environment를 나타내고 있지만 실제로는 함수, <code class=\"tui-language-text\">BlockStatement</code>, <code class=\"tui-language-text\">catch</code>, <code class=\"tui-language-text\">with</code> 등과 같은 여러 코드 구문과 상황에 따라 생성됐다 파괴되기도 한다.</p>\n<h3 id=\"함수의-lexical-environment는-언제-만들어질까\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-lexical-environment%EB%8A%94-%EC%96%B8%EC%A0%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%88%EA%B9%8C\" aria-label=\"함수의 lexical environment는 언제 만들어질까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 Lexical Environment는 언제 만들어질까?</h3>\n<p>이전 글에서 함수의 호출 - <code class=\"tui-language-text\">F.[[Call]]</code>에는 크게 3가지 단계가 있다고 설명했다.</p>\n<ol>\n<li>PrepareForOrdinayCall</li>\n<li>OrdinaryCallBindThis</li>\n<li>OrdinaryCallEvaluateBody</li>\n</ol>\n<p>그리고 <code class=\"tui-language-text\">PrepareForOrdinayCall</code>에서 Executon Context를 새로 만든다고만 하였는데, 사실은 Lexical Environment 역시 함께 만들어서 Execution Context에 저장한다. 그럼 이제 <code class=\"tui-language-text\">F.[[Call]]</code>에서 <code class=\"tui-language-text\">PrepareForOrdinayCall</code>을 조금 더 자세히 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// PrepareForOrdinayCall(F, newTarget)</span>\n\ncallerContext <span class=\"token operator\">=</span> runningExecutionContext<span class=\"token punctuation\">;</span>\ncalleeContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExecutionContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncalleeContext<span class=\"token punctuation\">.</span>Function <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 바로 여기, Execution Context를 만든 직후 Lexical Environment를 생성한다.</span>\nlocalEnv <span class=\"token operator\">=</span> <span class=\"token function\">NewFunctionEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> newTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// --- LexicalEnvironment와 VariableEnvironment의 차이는 서두에 있는 링크를 참고하자.</span>\ncalleeContext<span class=\"token punctuation\">.</span>LexicalEnvironment <span class=\"token operator\">=</span> localEnv<span class=\"token punctuation\">;</span>\ncalleeContext<span class=\"token punctuation\">.</span>VariableEnvironment <span class=\"token operator\">=</span> localEnv<span class=\"token punctuation\">;</span>\n\nexecutionContextStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>calleeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> calleeContext<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"newfunctionenvironment\" style=\"position:relative;\"><a href=\"#newfunctionenvironment\" aria-label=\"newfunctionenvironment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NewFunctionEnvironment</h3>\n<p>이제 NewFunctionEnvironment의 동작을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// NewFunctionEnvironment(F, newTarget)</span>\n\nenv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LexicalEnvironment</span><span class=\"token punctuation\">;</span>\nenvRec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">functionEnvironmentRecord</span><span class=\"token punctuation\">;</span>\nenvRec<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>FunctionObject<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>ThisMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> lexical<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  envRec<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>ThisBindingStatus<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'lexical'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  envRec<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>ThisBindingStatus<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'uninitialized'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nhome <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>HomeObject<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nenvRec<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>HomeObject<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> home<span class=\"token punctuation\">;</span>\nenvRec<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NewTarget<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newTarget<span class=\"token punctuation\">;</span>\n\nenv<span class=\"token punctuation\">.</span>EnvironmentRecord <span class=\"token operator\">=</span> envRec<span class=\"token punctuation\">.</span>\nenv<span class=\"token punctuation\">.</span>outer <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Environment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> env<span class=\"token punctuation\">;</span></code></pre></div>\n<p>단순하다. <code class=\"tui-language-text\">Environment Record</code>와 <code class=\"tui-language-text\">outer</code>를 가진 Lexical Environment를 만들어 반환한다. 여기에 함수 환경으로 <code class=\"tui-language-text\">this</code>, <code class=\"tui-language-text\">super</code>, <code class=\"tui-language-text\">new.target</code>등의 정보를 Environment Record에 함께 초기화했다. 그럼 다음으로 Environment Record를 살펴보자.</p>\n<h2 id=\"environment-record---identifier-bindings\" style=\"position:relative;\"><a href=\"#environment-record---identifier-bindings\" aria-label=\"environment record   identifier bindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environment Record - Identifier bindings</h2>\n<p>Environment Record는 식별자들의 바인딩을 기록하는 객체를 말한다. 간단히 말해 변수, 함수 등이 기록되는 곳이다. 실질적으로 Declarative Environment Record와 Object Environment Record 두 종류로 생각할 수 있으며, 이외에 조금 더 자세히 보면 Global Environment Record, Function Environment Record, Module Environment Record가 있다. 이들은 다음과 같은 상속 관계를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">                                           Environment Record\n                                                    |\n                    -----------------------------------------------------------------\n                    |                               |                               |\n        Declarative Environment Record     Object Environment Record     Global Environment Record\n                    |\n            --------------------------------\n            |                              |\nFunction Environment Record     Module Environment Record</code></pre></div>\n<p>우리는 함수에 관심이 있으므로 이제 Function Environment Record를 살펴보자. Declarative Environment Record에 변수나 함수의 정보가 담겨있다면, Function Environment Record는 추가로 <a href=\"#newfunctionenvironment\">NewFunctionEnvironment</a>에서 언급한 <code class=\"tui-language-text\">new.target</code>, <code class=\"tui-language-text\">this</code>, <code class=\"tui-language-text\">super</code> 등에 대한 정보를 갖는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// = FunctionEnvironmentRecord</span>\n    <span class=\"token comment\">//.... 위와 동일</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>ThisValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Any</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>ThisBindingStatus<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'uninitialized'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 'lexical' | 'initialized' | 'uninitialized'</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>FunctionObject<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Object</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>HomeObject<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Object | undefined,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NewTarget<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// Object | undefined</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Environment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 ECMAScript 5까지의 Execution Context를 잘 알고 있었다면 여기에서 한 가지 다른 점을 찾아낼 수 있을 것이다. 바로 <code class=\"tui-language-text\">this</code> 바인딩이다. 이 전까지는 <code class=\"tui-language-text\">this</code> 바인딩을 Execution Context에서 관리했다면 ECMAScript 2015(ES6)부터는 Environment Record에서 관리한다. 따라서 <code class=\"tui-language-text\">this</code>, <code class=\"tui-language-text\">super</code>, <code class=\"tui-language-text\">new.target</code> 등 모두 Function Environment Record에서 찾아볼 수 있으며, Record가 식별자들의 정보를 관리하는 객체이기 때문에 이게 더 합리적이라 볼 수 있을 것 같다.</p>\n<p>(드디어 첫 번째 목적이었던 <code class=\"tui-language-text\">this</code>, <code class=\"tui-language-text\">new.target</code>, <code class=\"tui-language-text\">super</code> 참조가 어디에서 저장되고 가져오는지 알 수 있게 됐다.)</p>\n<h2 id=\"outer-environment-reference---스코프-체인\" style=\"position:relative;\"><a href=\"#outer-environment-reference---%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\" aria-label=\"outer environment reference   스코프 체인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"tui-language-text\">outer</code> environment reference - 스코프 체인</h2>\n<p>지금까지의 설명에서 <code class=\"tui-language-text\">outer</code>에 대한 언급이 종종 있었는데, 정확히 무엇인지 알아보자. 자바스크립트는 Lexical Scope를 갖는 언어다. 그리고 식별자 탐색에 있어서 당연히 스코프 체인을 포함한다. outer는 이 스코프 체인을 위해 존재하는 참조이다. 다만 ECMAScript 3판까지는 <code class=\"tui-language-text\">Scope Chain</code> 이란 용어를 직접 명시했다면, ES5부터는 <code class=\"tui-language-text\">Lexical nesting structure</code> 또는 <code class=\"tui-language-text\">Logical nesting of Lexical Environment values</code> 등으로 표현하고 있다. 아마 3판에서 5판으로 판올림을 하면서 List가 아닌 <code class=\"tui-language-text\">outer</code> 참조를 활용하는 구현으로 바뀌는데 이에 맞춰 같이 변경한 것이 아닐까 추측한다.</p>\n<p>아래 코드에서 <code class=\"tui-language-text\">outer</code>를 활용해 식별자를 찾는 과정을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// global</span>\n<span class=\"token keyword\">const</span> globalA <span class=\"token operator\">=</span> <span class=\"token string\">\"globalA\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fooA <span class=\"token operator\">=</span> <span class=\"token string\">\"fooA\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> barA <span class=\"token operator\">=</span> <span class=\"token string\">\"barA\"</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// globalA</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fooA</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>barA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// barA</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unknownA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reference Error</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래는 Environments를 간단히 나타낸다(<code class=\"tui-language-text\">this</code>와 같은 특별한 값들은 생략한다).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">GlobalEnvironment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Global Environment Record에는</span>\n  <span class=\"token comment\">// Object Environment Record와 Declarative Environment Record 등이 같이 존재하지만 이 글에서는 구분하지 않겠다.</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    globalA<span class=\"token operator\">:</span> <span class=\"token string\">\"globalA\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfooEnvironment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    fooA<span class=\"token operator\">:</span> <span class=\"token string\">\"fooA\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> globalEnvironment <span class=\"token comment\">// foo는 Global에서 생성됐다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbarEnvironment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    barA<span class=\"token operator\">:</span> <span class=\"token string\">\"barA\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> fooEnvironment <span class=\"token comment\">// bar는 foo 안에서 생성됐다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>bar의 environment에서는 <code class=\"tui-language-text\">fooA</code>나 <code class=\"tui-language-text\">globalA</code>를 찾을 수 없기때문에 <code class=\"tui-language-text\">outer</code>참조를 통해 상위 environment로 올라가 식별자를 찾아간다. <code class=\"tui-language-text\">outer</code>가 <code class=\"tui-language-text\">null</code> 임에도 불구하고 <code class=\"tui-language-text\">unknownA</code> 처럼 찾을 수 없는 식별자라면 Reference Error가 발생한다.</p>\n<h2 id=\"기본값-매개변수default-parameter와-lexical-environment\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98default-parameter%EC%99%80-lexical-environment\" aria-label=\"기본값 매개변수default parameter와 lexical environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값 매개변수(Default parameter)와 Lexical Environment</h2>\n<p>드디어 저번 글에서 예고했던 코드를 볼 수 있을 것 같다!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">foo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bar </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>사실 고백하자면, 위 코드에 대한 예고는 사실 큰 의미가 없었다. 단순히 기본값 매개변수를 순서대로 처리하기 때문에 <code class=\"tui-language-text\">a = add(b, 1)</code> 구문에서 <code class=\"tui-language-text\">b</code>에 대한 참조를 찾을 수 없어 에러가 발생하는 것이다. 흔히 알고 있는 <code class=\"tui-language-text\">let</code>과 <code class=\"tui-language-text\">const</code>의 TDZ(Temporal dead zone)와 같은 동작이다.</p>\n<p>사실 기본값 매개변수에서 중요한 부분은 따로 있다. 바로 Lexical Environment를 새로 만든다는 것이다. 얼핏 생각해보면 어떤 의미인지 잘 파악되지 않는다. 단순히 매개변수와 일반 변수들 모두 Record에 저장하고 가져다 쓰면 되는 것 아닌가?</p>\n<p>아래 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"outerText\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"innerText\"</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'outerText'</span></code></pre></div>\n<p>코드를 보면 <code class=\"tui-language-text\">outerText</code>가 출력되는 게 당연한 것으로 느껴진다. 하지만 만약 처음에 단순히 생각했던 것처럼 매개변수나 일반 변수들을 모두 같은 Environment의 Record에 저장하고 사용하면 <code class=\"tui-language-text\">fn</code> 함수에서 참조해야 하는 <code class=\"tui-language-text\">str</code> 식별자는 <code class=\"tui-language-text\">foo</code> 내부의 <code class=\"tui-language-text\">str</code>, 즉 <code class=\"tui-language-text\">innerText</code>를 참조해버릴 것이다. 이는 상식적이지 않은 동작이고, 마치 함수 외부에서 내부 스코프를 참조하고 변경시켜버리는 모양이 되어버리고 여러 문제를 일으킬 수 있는 여지가 된다. 이 때문에 기본값 매개변수는 함수의 내부를 참조할 수 없도록 만들어야 한다. 그러기 위해서는 매개변수, 함수 내부 변수들을 Environment부터 분리해서 추가적인 스코프 체인을 만들어야 한다.</p>\n<p>따라서 함수가 실행되고 변수들을 초기화할 때는 다음과 같은 동작을 한다(실제로는 더 많은 분기 동작들이 있지만, 단순화했으며, strict mode로 가정한다).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token number\">1.</span> env <span class=\"token operator\">=</span> calleeContext<span class=\"token punctuation\">.</span>LexicalEnvironment<span class=\"token punctuation\">;</span>\n<span class=\"token number\">2.</span> envRec <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>environmentRecord<span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">3.</span> envRec에 매개변수들을 등록하고 초기화한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token number\">4.</span> <span class=\"token function\">If</span> <span class=\"token punctuation\">(</span>기본값 매개변수가 없다면<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">1.</span> Environment가 구분될 필요가 없으므로<span class=\"token punctuation\">,</span> 기존의 envRec에 일반 <span class=\"token function\">변수들</span><span class=\"token punctuation\">(</span>VarScoped<span class=\"token punctuation\">)</span>도 등록한다<span class=\"token punctuation\">.</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">2.</span> varEnv <span class=\"token operator\">=</span> env<span class=\"token punctuation\">;</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">3.</span> varEnvRec <span class=\"token operator\">=</span> envRec<span class=\"token punctuation\">;</span>\n<span class=\"token number\">5.</span> <span class=\"token function\">Else</span><span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> 만약 기본값 매개변수가 있다면<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">1.</span> varEnv <span class=\"token operator\">=</span> <span class=\"token function\">NewDeclarativeEnvironment</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">2.</span> varEnvRec <span class=\"token operator\">=</span> varEnv<span class=\"token punctuation\">.</span>environmentRecord<span class=\"token punctuation\">;</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">3.</span> calleeContext<span class=\"token punctuation\">.</span>VariableEnvironment <span class=\"token operator\">=</span> varEnv<span class=\"token punctuation\">;</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">4.</span> varEnvRec에 일반 <span class=\"token function\">변수</span><span class=\"token punctuation\">(</span>VarScoped<span class=\"token punctuation\">)</span>들을 등록한다<span class=\"token punctuation\">.</span>\n\n<span class=\"token number\">6.</span> lexEnv <span class=\"token operator\">=</span> varEnv<span class=\"token punctuation\">;</span>\n<span class=\"token number\">7.</span> lexEnvRec <span class=\"token operator\">=</span> lexEnv<span class=\"token punctuation\">.</span>environmentRecord<span class=\"token punctuation\">;</span>\n<span class=\"token number\">8.</span> calleeContext<span class=\"token punctuation\">.</span>LexicalEnvironment <span class=\"token operator\">=</span> lexEnv<span class=\"token punctuation\">;</span>\n<span class=\"token number\">9.</span> lexEnvRec에 <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span>에서 등록하지 못한 <span class=\"token function\">변수들</span><span class=\"token punctuation\">(</span>LexicallyScoped<span class=\"token punctuation\">)</span>도 모두 등록한다<span class=\"token punctuation\">.</span>\n<span class=\"token number\">10.</span> 내부에 있는 함수 객체들을 초기화한다<span class=\"token punctuation\">.</span></code></pre></div>\n<p>단순화했지만 그래도 조금 복잡해 보일 수 있다. 더 간단히 설명해보면 - 함수가 호출될 때, 매개변수들을 먼저 초기화하고 기본값 매개변수가 있다면 새로운 Environment를 추가로 만들어서 여기에 함수 내부의 변수들을 등록한다. 이렇게 Environment를 새로 만들어버리기 때문에 기본값 매개변수는 함수 내부를 참조할 수 없으면서 함수 내부에서는 매개변수를 참조할 수 있는 중첩 구조를 만들어낼 수 있다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 함수의 생성과 호출, 그리고 Execution context와 Lexical Environment에 대해 알아보았다. 기본적인 함수 호출만 알아보는데도 생각보다 복잡한 내용이 많았지만, <code class=\"tui-language-text\">this</code> binding, 함수 객체가 갖는 속성들, <code class=\"tui-language-text\">[[Call]]</code>의 동작, Execution context, <code class=\"tui-language-text\">this</code> binding, 기본값 매개변수와 Lexical Environment 등 많은 변화와 그 동작들을 직접 확인할 수 있었다. 혹시 이 글이 ECMAScript를 이해하는 데 조금이라도 도움이 됐다면 이제 Generator 함수, Async 함수, Class 등을 ECMAScript 명세를 통해 직접 확인해보자. 직접 명세를 읽고 확인하는 것이 어려울 수도 있지만, 이런 노력을 하다 보면 빠르게 발전하는 ECMAScript를 보다 먼저 이해하는 데 큰 도움이 되지 않을까 생각한다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p>ECMAScript2017 - <a href=\"https://www.ecma-international.org/ecma-262/8.0/index.html\">https://www.ecma-international.org/ecma-262/8.0/index.html</a></p>","frontmatter":{"id":"ko_20171006","title":"자바스크립트 함수 (3) - Lexical Environment","description":"지난 글을 통해 함수의 생성과 함수의 호출 과정에 대해 간략히 알아보았다. 앞선 글(함수의 호출)에서 간단히 설명한 Execution Context에는 LexicalEnvironment와 VariableEnvironment라는 컴포넌트가 있다. 기본적으로 두 컴포넌트는 Lexical Environment에 대한 참조이며 처음에는 같은 Lexical Environment를 참조한다.","date":"2017.10.06","author":"이민규","tags":["ecmascript"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20171006","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}