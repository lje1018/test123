{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20171117","result":{"data":{"post":{"html":"<h1 id=\"리액트-hoc-집중-탐구-1\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-hoc-%EC%A7%91%EC%A4%91-%ED%83%90%EA%B5%AC-1\" aria-label=\"리액트 hoc 집중 탐구 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 HOC 집중 탐구 (1)</h1>\n<ul>\n<li><a href=\"#sec-1-1\">함수형 프로그래밍</a></li>\n<li><a href=\"#sec-1-2\">컴포넌트는 (순수)함수이다</a></li>\n<li><a href=\"#sec-1-3\">Higher Order Function</a></li>\n<li><a href=\"#sec-1-4\">Higher Order Component</a></li>\n<li><a href=\"#sec-1-5\">HOC로 할 수 있는 것들</a></li>\n<li><a href=\"#sec-1-6\">1부 정리</a></li>\n</ul>\n<p>리액트가 정식으로 릴리즈된 지도 벌써 4년이 훌쩍 지났다. 얼마전 나온 16.0 버전에 이르기까지 내부적으로도 많은 발전이 있었고, 수 많은 리액트 관련 라이브러리들이 나오는 등 외부적으로도 많은 발전이 있었다. 지금은 거의 대세가 되어 버린 리액트이기에 장점을 나열하자면 지루한 내용이 되겠지만, 꼭 짚고 넘어가고 싶은 장점은 4년이 넘게 지나도록 핵심 개념이나 중요 API가 거의 그대로 유지되고 있다는 것이다. 나는 이것이 리액트가 처음부터 추구했던 가치가 시간이 지나도 퇴색되지 않을만큼 의미있다는 것을 입증하고 있다고 생각한다.</p>\n<p>비록 리액트의 핵심 개념에는 큰 변화가 있지 않았지만, 리액트를 사용하는 방식에는 꽤 많은 변화가 있었다. 특히 2015년 등장한 <a href=\"https://redux.js.org/\">리덕스</a>로 인해 단일 불변 스토어 사용, 컴포넌트와 컨테이너의 구분, Redux-Thunk / Redux-Saga 등을 이용한 비동기 처리 등의 개념은 이제 거의 관용적인 패턴으로 자리잡았다고 볼 수 있다.</p>\n<p>그리고 사실상의 표준으로 자리잡은 또 하나의 중요한 개념이 바로 Higher Order Component(이하 HOC)를 이용한 코드 재사용 패턴이다. 기존의 <a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">믹스인을 사용한 패턴이 점차 안티 패턴으로 인식</a>되고, 리액트나 리덕스를 만든 유명 프로그래머들의 지지에 힘입어 이제 HOC는 코드 재사용을 위한 <a href=\"https://reactjs.org/docs/higher-order-components.html\">리액트의 표준 방식</a>으로 자리잡았다. 하지만 다른 모든 패턴들과 마찬가지로, HOC는 모든 경우를 위한 만병통치약이 아니며 잘못 사용할 경우에는 오히려 기존의 믹스인 방식보다도 더 나쁜 코드를 만들어낼 수 있다. 특히 리액트에 처음 입문하는 사람들에게 HOC는 생소하고 어색한 개념이기 때문에, HOC의 핵심 개념을 제대로 이해하지 못한 채 잘못 사용하는 경우가 많다.</p>\n<p>나름 리액트로 1년 넘게 <a href=\"https://drive.toast.com/\">꽤 큰 규모의 복잡한 어플리케이션</a>을 만들어 오면서, 어느 정도 HOC에 대해 정리해볼 만큼의 경험이 쌓인 것 같다. 아직 부족하긴 하지만 개인적인 정리를 위해서, 또 경험의 공유를 위해서 야심차게 HOC 집중 탐구 시리즈를 시작해볼까 한다. 이 글에서는 HOC가 무엇인지부터 시작해서, 사용시 주의해야 할 점, 다른 패턴들과의 차이점 등에 대해서 상세하게 설명해 보도록 하겠다.</p>\n<h2 id=\"함수형-프로그래밍a-idsec-1-1a\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Da-idsec-1-1a\" aria-label=\"함수형 프로그래밍a idsec 1 1a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍<a id=\"sec-1-1\"></a></h2>\n<p>리액트에서 가장 중요한 개념 중의 하나임에도 불구하고 개발자들이 주로 간과하는 부분이 있는데, 그건 바로 리액트가 함수형 프로그래밍을 지향한다는 것이다. 리액트의 공식 홈페이지에 함수형 프로그래밍이라는 단어가 정확하게 명시되어 있지 않기 때문에, 무슨 소리냐고 반문하는 사람도 있을 것이다. 하지만 리액트의 많은 곳에 함수형 프로그래밍의 철학이 묻어 있으며, 가장 인기있는 스토어 관리 라이브러리인 리덕스 또한 순수 함수와 불변 스토어를 강조하며 함수형에 가까운 프로그래밍 스타일을 권장하고 있다.</p>\n<blockquote>\n<p>리액트는 조단 워크(Jordan Walke)가 개발했는데, 처음 만들 때 <a href=\"https://www.reactiflux.com/transcripts/jordan-walke/\">함수형 언어인 ML기반 언어들에서 많은 영향을 받았다</a>고 한다. 또한 조단 워크는 페이스북에서 최근에 발표한 언어인 <a href=\"https://reasonml.github.io/\">Reason</a>을 개발하기도 했는데, 이 역시 ML 언어인 Ocaml을 기반으로 해서 자바스크립트에 친숙한 형식으로 발전시킨 언어이다. 사실 <a href=\"https://www.reactiflux.com/transcripts/cheng-lou/\">Reason의 개발이 리액트보다 먼저 시작되었고, 그 과정에서 리액트가 개발되었다</a>고 한다. 즉, 어떻게 보면 리액트는 함수형 언어로 프론트엔드 개발을 하기 위한 중간 과정에서 나온 자바스크립트 라이브러리라고도 할 수 있는 것이다.</p>\n</blockquote>\n<p>여기서 어떤 부분이 함수형에 가까운지를 하나하나 설명하기는 어려울 것 같지만, HOC를 설명하기 위해 꼭 하나 짚고 넘어가야할 특징이 있다. 이 부분이 앵귤러(Angular)나 뷰(Vue)같은 다른 라이브러리들과 가장 차별화되는 부분인데, 바로 컴포넌트가 (순수)함수라는 점이다.</p>\n<h2 id=\"컴포넌트는-순수함수이다a-idsec-1-2a\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EC%88%9C%EC%88%98%ED%95%A8%EC%88%98%EC%9D%B4%EB%8B%A4a-idsec-1-2a\" aria-label=\"컴포넌트는 순수함수이다a idsec 1 2a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트는 (순수)함수이다<a id=\"sec-1-2\"></a></h2>\n<p>리액트의 컴포넌트는 기본적으로 함수이다. 그것도 순수 함수. 좀더 자세히 이야기하자면 입력값으로 <code class=\"tui-language-text\">props</code> 를 받고, <code class=\"tui-language-text\">ReactElement</code> 트리를 반환하는 순수 함수이다. 리액트는 실제로 순수 함수로 컴포넌트를 생성할 수 있으며, 리액트 공식 홈페이지에서도 볼드체로 다음과 같이 명시하고 있다.</p>\n<blockquote>\n<p>All React components must act like pure functions with respect to their props.</p>\n</blockquote>\n<p>\"그럼 <code class=\"tui-language-text\">React.Component</code> 를 상속받는 클래스 컴포넌트는 뭐란 말인가\" 라고 궁금해할 사람들이 있을지도 모르겠다. 물론 컴포넌트의 상태를 관리하거나 생명주기(Life Cycle)에 훅(Hook)을 걸어 원하는 시점에 특정 함수를 실행하려면 순수 함수만으로는 구현이 어려울 것이다. 그렇기 때문에 처음 리액트가 나왔을 때는 <code class=\"tui-language-text\">createClass</code> 함수를 이용하여 컴포넌트를 생성하도록 API가 설계되었다.</p>\n<p>하지만 엄밀히 말하면 컴포넌트의 상태 관리는 함수의 클로저를 사용해서 관리할 수 있고 (이 경우 순수 함수는 아니다), 생명주기 관련 함수들은 맵(Map)의 형태로 묶거나, 컴포넌트 함수의 프라퍼티 형태로 관리할 수 있다. 즉, 컴포넌트가 함수라는 기본 개념을 유지한 채로도 얼마든지 어플리케이션을 만들 수 있는 것이다. 다만, 기존 객제지향 개발자들에게 함수형 프로그래밍은 익숙하지 않기 때문에 좀더 익숙한 클래스 형태의 API를 제공한 것이다. 클래스 컴포넌트의 경우에도 render 메소드 자체를 컴포넌트라고 여긴다면 컴포넌트가 함수라는 개념은 여전히 유효하다.</p>\n<p>실제로 리액트의 컴포넌트는 다른 객체지향 방식의 컴포넌트와는 다르게 동작한다. 객체간의 직접 참조나 메소드 호출을 통해서 서로간의 메시지를 주고받는 것이 아니며, 데이터의 흐름은 함수 호출처럼 오직 부모(호출하는 함수)에서 자식(호출되는 함수)을 향해 단방향으로 진행된다. 즉, 복잡한 ReactElement 트리를 구성하기 위해 컴포넌트 내부에서 다른 컴포넌트를 함수처럼 호출해서 결과값(ReactElement)를 받은 후 조합해서 반환할 뿐인 것이다.</p>\n<p>사실, 기존에 사용되던 믹스인에 대한 비판들은 단순히 리액트에서의 문제만은 아니다. 믹스인을 통한 코드 재사용 방식에 대한 문제점은 리액트를 굳이 언급하지 않더라도 <a href=\"http://raganwald.com/2016/07/16/why-are-mixins-considered-harmful.html\">기존 객체 지향 방식에서도 이미 존재하고 있었다</a>. 물론 객체 지향으로도 <a href=\"http://raganwald.com/2016/07/20/prefer-composition-to-inheritance.html\">이를 해결할 수 있는 방법</a>이 없는 건 아니지만, 애초에 함수형 방식을 지향하는 라이브러리가 기존 객체 지향 방식의 문제까지 같이 끌어안고 해결하려는 것은 굳이 먼 길을 돌아가는 일일 것이다. 각자에게 맞는 옷이 있듯이, 함수형의 세계에서는 그 세계에 맞는 해결 방식이 있는 것이다.</p>\n<h2 id=\"higher-order-functiona-idsec-1-3a\" style=\"position:relative;\"><a href=\"#higher-order-functiona-idsec-1-3a\" aria-label=\"higher order functiona idsec 1 3a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher Order Function<a id=\"sec-1-3\"></a></h2>\n<p>사실 함수형 프로그래밍에 익숙한 사람들은 HOC라는 이름을 보았을 때 어떤 역할을 하는지를 바로 유추할 수 있었을 것이다. 함수형 프로그래밍에서는 <a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher Order Function</a>(이하 HOF)라는 아주 유사한 개념이 있기 때문이다. 이름에서 알 수 있듯이 HOC라는 이름은 바로 HOF에서 유래한 것이다. 그러니 HOC에 대해 알아보기 앞서, 먼저 HOF에 대해 알아보는 것이 도움이 될 것이다.</p>\n<p>HOF는 함수를 인자로 받아서 새로운 함수를 반환하는 함수이다. 한 문장에 '함수'라는 단어가 세 번이나 나와서 난해하게 느껴질 수도 있는데, 다음과 같이 코드로 표현해보면 이해가 좀더 쉬울 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> fy <span class=\"token operator\">=</span> <span class=\"token constant\">HOF</span><span class=\"token punctuation\">(</span>fx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>즉, fx를 인자로 받아서 fy를 반환하는 함수라고 볼 수 있다. 사실 자바나 C#처럼 함수가 일급객체가 아닌 언어에서는 이해하기 힘든 개념일 수도 있지만, 자바스크립트와 같이 함수가 일급객체인 언어에서는 나름 익숙한 패턴이다. <a href=\"https://lodash.com/\">Lodash</a>와 같은 함수형 라이브러리에 익숙하다면 많이 사용해 보았을 <code class=\"tui-language-text\">_.throttle</code>, <code class=\"tui-language-text\">_.debounce</code>, <code class=\"tui-language-text\">_.partial</code>, <code class=\"tui-language-text\">_.flip</code>, <code class=\"tui-language-text\">_.once</code> 등의 함수들도 모두 HOF이다. 예를 들어 <code class=\"tui-language-text\">_.partial</code> 함수는 다음과 같이 기존 함수의 인자를 고정시킨 새로운 함수를 반환해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v1<span class=\"token punctuation\">,</span> v2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> add3 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> add5 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add5</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>HOF의 장점은 함수에 기능을 추가하는 코드를 재사용 할 수 있다는 것이다. 만약 <code class=\"tui-language-text\">add</code> 함수를 이용해서 <code class=\"tui-language-text\">partial</code> 함수가 없이 <code class=\"tui-language-text\">add3</code> 과 <code class=\"tui-language-text\">add5</code> 함수를 만드려면 다음과 같이 직접 두 개의 함수를 만들어야 할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add3</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add5</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 HOF를 이용하면 기능 단위로 새로운 함수를 만들어내는 코드를 재사용할 수 있게 된다. 위의 예제는 너무 간단해서 체감이 잘 안될 수도 있지만, 좀더 복잡한 형태의 HOF인 경우 많은 양의 중복 코드를 제거할 수 있을 것이다.</p>\n<p>이해를 돕기 위해 위의 <code class=\"tui-language-text\">_.partial</code> 함수를 직접 구현해 보도록 하자. 구현을 쉽게 하기 위해 인자 2개를 받는 함수의 첫번째 인자만 고정하도록 제한하면, 다음과 같이 간단하게 구현할 수 있다. 단순한 형태의 경우 화살표 함수를 사용하는 것이 더 직관적이므로, 화살표 함수를 사용해서 구현해 보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partial</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> v1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">v2</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> add3 <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> add5 <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add5</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>위의 <code class=\"tui-language-text\">_.partial</code> 예제와 동일하게 동작하는 것을 볼 수 있을 것이다.</p>\n<p>다음으로 넘어가기 전에 좀더 유용한 HOF를 만들어보자. 앞서 말했듯이 함수의 클로저를 이용하면 내부 상태를 갖는 함수를 만들 수 있다. 간단한 예로 함수의 반환값을 0부터 계속 누적시켜서 적용된 값을 반환하도록 하는 HOF를 만들어 보자. 복잡한 형태에서는 화살표 함수에 익숙하지 않으면 더 알아보기가 어려울 수도 있으므로 여기서부터는 <code class=\"tui-language-text\">function</code> 키워드를 사용하도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">acc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> acc3 <span class=\"token operator\">=</span> <span class=\"token function\">acc</span><span class=\"token punctuation\">(</span>add3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">acc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">acc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">acc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span></code></pre></div>\n<p>HOF를 이용하면 부수효과를 만들어낼 수도 있다. 간단한 예제로, 결과값을 반환하기 전에 <code class=\"tui-language-text\">console.log</code> 콘솔에 로그를 출력하도록 하는 HOF를 만들어보자. 이번에도 구현을 간단하게 하기 위해 인자 하나를 받는 함수만 이용하도록 제한하도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> add3Log <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span>add3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add3Log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13, 13</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add3Log</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 18, 18</span></code></pre></div>\n<p>실행 결과 로그가 두 번씩 찍히는 것을 볼 수 있다. 즉, 내부적으로 로그를 남긴 후 결과값도 제대로 반환해준다는 것을 확인할 수 있다.</p>\n<p>지금껏 3개의 HOF를 직접 만들었다. 이제 이들 HOF를 한 번에 조합해서 새로운 함수를 만들어보자. <code class=\"tui-language-text\">partial</code>, <code class=\"tui-language-text\">acc</code>, <code class=\"tui-language-text\">logger</code> 를 모두 사용하면 다음과 같이 0부터 시작해서 3씩 더한 결과값을 누적시키면서 로그를 남기는 함수를 만들 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> acc3Log <span class=\"token operator\">=</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token function\">acc</span><span class=\"token punctuation\">(</span><span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">acc3Log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">acc3Log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n<span class=\"token function\">acc3Log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span></code></pre></div>\n<p>함수형 프로그래밍은 기본적으로 작은 단위의 범용적인 함수를 만들고 이들을 조합해 가면서 프로그램을 만들어나가는 방식을 취한다. HOF는 이러한 기능 단위의 함수들을 조합해서 재사용할 수 있는 패턴을 제공함으로써 함수형 프로그래밍에서 아주 중요한 역할을 하고 있다.</p>\n<h2 id=\"higher-order-componenta-idsec-1-4a\" style=\"position:relative;\"><a href=\"#higher-order-componenta-idsec-1-4a\" aria-label=\"higher order componenta idsec 1 4a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher Order Component<a id=\"sec-1-4\"></a></h2>\n<p>앞서 잠깐 언급했듯이, HOC는 바로 HOF에서 유래한 단어이다. 즉, 컴포넌트를 인자로 받아서 컴포넌트를 반환하는 함수를 뜻한다. 위에서 언급한 HOF의 정의와 동일하게 표현하자면, 다음과 같이 표현할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> compY <span class=\"token operator\">=</span> <span class=\"token constant\">HOC</span><span class=\"token punctuation\">(</span>compX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>사실 HOC라는 이름에는 약간의 허점이 있다. HOF가 함수를 인자로 받아 함수를 반환하는 함수(문장에 함수가 세 번 들어가고 있음에 주목)라면 HOC는 컴포넌트를 인자로 받아 컴포넌트를 반환하는 컴포넌트인 것이 자연스러울 것이다. 하지만 HOC는 사실 컴포넌트가 아닌 함수를 지칭한다. 이 이름에 대한 비판의 목소리도 있지만, HOF와 유사한 개념이라는 것이 더 강조되는 효과도 있으므로, 관대하게 넘어가도록 하자.</p>\n</blockquote>\n<p>그럼 이 HOC를 어떤 식으로 사용할 수 있을까? 이왕 HOF에서 시작했으니 앞의 예제를 그대로 컴포넌트에 적용해 보도록 하자. 먼저 <code class=\"tui-language-text\">partial</code> 함수처럼, Props를 고정한 형태의 컴포넌트를 반환하게 할 수 있을 것 같다. 한번 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Comp<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Comp <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>ownProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">partial</code> 의 예제와 다른 점이 몇가지 있는데, 먼저 컴포넌트는 열거된 인자가 아닌 props라는 객체를 입력값으로 받는다는 점이다. 즉, 특정 props를 고정하고 싶다면 해당 Props를 객체로 받은 다음, 반환되는 컴포넌트의 Props에 합쳐주는 식으로 구현해야 한다. 또하나의 다른점은 컴포넌트는 단순히 값을 반환하는 것이 아닌 ReactElement 를 반환한다는 점이다. 그러므로 반환되는 컴포넌트는 인자로 넘어온 컴포넌트를 ReactElement화 시켜서(JSX 이용) 반환해 주어야 한다.</p>\n<p>이제, 이 <code class=\"tui-language-text\">withProps</code> HOC를 사용하는 예제를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span> <span class=\"token constant\">I</span> am <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>myName<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> HelloJohn <span class=\"token operator\">=</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HelloMary <span class=\"token operator\">=</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mary\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>HelloJohn myName<span class=\"token operator\">=</span><span class=\"token string\">\"Kim\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>HelloMary myName<span class=\"token operator\">=</span><span class=\"token string\">\"Lee\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">Hello</code> 컴포넌트는 props로 <code class=\"tui-language-text\">name</code> 과 <code class=\"tui-language-text\">myName</code> 을 입력받는다. <code class=\"tui-language-text\">withProps</code> 를 이용해 <code class=\"tui-language-text\">name</code> 을 고정한 형태의 컴포넌트인 HelloJohn 과 HelloMary 컴포넌트를 만들어내면, 이들 컴포넌트는 <code class=\"tui-language-text\">myName</code> 만 넘겨주어도 미리 고정된 <code class=\"tui-language-text\">name</code> 값을 이용할 수 있게 된다.</p>\n<p>한가지만 하면 아쉬우니, 위의 <code class=\"tui-language-text\">logger</code> 도 HOC에 맞게 다시 구현해보자. 컴포넌트는 결과값을 로그로 남기는 것에 큰 의미가 없으니, 넘겨받은 props를 콘솔에 출력하도록 하겠다. <code class=\"tui-language-text\">withProps</code> 를 만들때와 마찬가지로 Props와 반환값에만 유의하면 된다. logger는 굳이 props를 받을 필요가 없으니, 좀더 간단하게 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Comp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Comp <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>HOF와 마찬가지로 HOC도 여러개의 HOC를 동시에 조합해서 하나의 컴포넌트를 만들어낼 수 있다. 자, 그럼 이제 위의 두 HOC를 조합해서 사용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> HelloJohn <span class=\"token operator\">=</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HelloMary <span class=\"token operator\">=</span> <span class=\"token function\">withProps</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mary\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제, <code class=\"tui-language-text\">HelloJohn</code> 와 <code class=\"tui-language-text\">HelloMary</code> 는 렌더링을 할때마다 현재 넘겨받은 props를 콘솔에 출력하게 된다. 위의 App 컴포넌트를 렌더링해 보면 각 컴포넌트의 <code class=\"tui-language-text\">name</code> 과 <code class=\"tui-language-text\">myName</code> props가 모두 콘솔에 출력되는 것을 확인할 수 있을 것이다.</p>\n<h2 id=\"hoc로-할-수-있는-것들a-idsec-1-5a\" style=\"position:relative;\"><a href=\"#hoc%EB%A1%9C-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B2%83%EB%93%A4a-idsec-1-5a\" aria-label=\"hoc로 할 수 있는 것들a idsec 1 5a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC로 할 수 있는 것들<a id=\"sec-1-5\"></a></h2>\n<p>지금껏 HOC의 개념을 익히기 위해 간단한 HOC들을 작성해 보았는데, 이런 단순한 형태의 HOC만 가지고는 그리 유용하다는 느낌이 들지 않을 것이다. 하지만 HOC로 할 수 있는 일들은 이보다 훨씬 다양하며, 기존의 믹스인 방식에서 할 수 있던 거의 모든 것들을 할 수 있다. 가장 많이 쓰이는 형태가 아마 스토어와 컴포넌트를 연결시켜 주는 HOC일 것이다. 일단 가장 널리 쓰이는 react-redux의 <code class=\"tui-language-text\">connect</code> 함수 이를 위한 함수인데, 엄밀히 HOC를 생성해주는 헬퍼 함수라고 할 수 있다. <code class=\"tui-language-text\">connect</code> 함수는 스토어의 상태를 Props으로 주입시켜주는 <code class=\"tui-language-text\">mapStateToProps</code> 와 액션 생성 함수를 스토어의 dispatch와 연결시켜 props로 주입시켜 주는 <code class=\"tui-language-text\">mapDispatchToProps</code> 를 인자로 받아서 새로운 HOC를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PersonComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./person\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>age\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">setName</span><span class=\"token operator\">:</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"SET_NAME\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">setAge</span><span class=\"token operator\">:</span> <span class=\"token parameter\">age</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"SET_AGE\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HOC 생성</span>\n<span class=\"token keyword\">const</span> connectHOC <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HOC가 적용된 컴포넌트 생성</span>\n<span class=\"token keyword\">const</span> ConnectedComponent <span class=\"token operator\">=</span> <span class=\"token function\">connectHOC</span><span class=\"token punctuation\">(</span>PersonComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 외에도 몇가지 HOC로 할 수 있는 중요한 기능들을 나열하면 다음과 같다.</p>\n<ul>\n<li>생명주기 메소드 주입</li>\n<li>State 및 이벤트 핸들러 주입</li>\n<li>Props 변환 및 주입</li>\n<li>Render 함수 확장</li>\n</ul>\n<p>생명주기 메소드나 State를 다루기 위해서는 함수 컴포넌트가 아닌 클래스 컴포넌트를 이용해야 하는데, 다음 글에서 이들을 이용해 좀더 유용한 HOC를 만들어보도록 하겠다. 만약 함수 컴포넌트만으로 위의 기능들을 구현하고 싶은 분들이 있다면 <a href=\"https://github.com/acdlite/recompose\">Recompose</a> 라이브러리를 확인해보기 바란다. Recompose는 자칭 리액트 컴포넌트를 위한 Lodash로서, 범용적으로 쓰일 수 있는 HOC의 모음이라고 할 수 있다. Recompose의 <code class=\"tui-language-text\">withState</code> 나 <code class=\"tui-language-text\">lifecycle</code> 함수를 사용하면 함수 컴포넌트 만으로도 State나 생명주기 함수들을 주입할 수 있다. 또한 수많은 유용한 HOC 헬퍼를 제공하고 있기 때문에, <a href=\"https://github.com/acdlite/recompose/blob/master/docs/API.md\">API</a>를 한번 훑어보기만 해도 HOC가 어떻게 사용될 수 있는지 파악하는 데에 큰 도움이 될 것이다.</p>\n<h2 id=\"1부-정리a-idsec-1-6a\" style=\"position:relative;\"><a href=\"#1%EB%B6%80-%EC%A0%95%EB%A6%ACa-idsec-1-6a\" aria-label=\"1부 정리a idsec 1 6a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1부 정리<a id=\"sec-1-6\"></a></h2>\n<p>이상으로 HOC에 대한 기본 개념과 간단한 사용법에 대해 살펴보았다. 보통은 기존 믹스인으로 구현한 코드를 어떻게 HOC 변경하는지를 보여주면서 설명을 많이 하는데, 이 글에서는 일부러 함수형 프로그래밍에 대한 설명부터 시작해서 HOF를 거쳐 HOC까지 개념을 확장해 보았다. 개인적으로 리액트가 함수형 프로그래밍을 지향한다는 사실을 계속 염두에 두고 있는 것이 좀더 자연스러운 코드를 작성하는 데에 도움이 될 것이라 생각하기 때문이다. 어쩌다보니 HOF에 대한 설명이 HOC보다 길어진 느낌이지만, HOC에 대한 내용은 2부에서 좀더 상세히 다룰테니, 양해를 바란다.</p>\n<p>2부에서는 좀더 유용한 HOC를 만들어보면서 실제 HOC가 사용되는 패턴들과 사용시 주의해야 할 점들에 대해 좀더 자세하게 알아보도록 하겠다.</p>","frontmatter":{"id":"ko_20171117","title":"리액트 HOC 집중 탐구 (1)","description":"리액트가 정식으로 릴리즈된 지도 벌써 4년이 훌쩍 지났다. 얼마전 나온 16.0 버전에 이르기까지 내부적으로도 많은 발전이 있었고, 수 많은 리액트 관련 라이브러리들이 나오는 등 외부적으로도 많은 발전이 있었다. 지금은 거의 대세가 되어 버린 리액트이기에 장점을 나열하자면 지루한 내용이 되겠지만, 꼭 짚고 넘어가고 싶은 장점은 4년이 넘게 지나도록 핵심 개념이나 중요 API가 거의 그대로 유지되고 있다는 것이다. 나는 이것이 리액트가 처음부터 추구했던 가치가 시간이 지나도 퇴색되지 않을만큼 의미있다는 것을 입증하고 있다고 생각한다.","date":"2017.11.17","author":"김동우","tags":["React"],"thumbnail":"https://image.toast.com/aaaadh/real/2017/repimg/main(3)_thumbnail.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20171117","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}