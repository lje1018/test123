{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/en_20190610","result":{"data":{"post":{"html":"<h1 id=\"building-a-07kb-reactivity-system-similar-to-vue\" style=\"position:relative;\"><a href=\"#building-a-07kb-reactivity-system-similar-to-vue\" aria-label=\"building a 07kb reactivity system similar to vue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building a 0.7KB Reactivity System Similar to Vue</h1>\n<p>Currently, the <a href=\"/test123/tui-grid\">TOAST UI Grid</a> team is working diligently for the major update that is the release of the version 4. The purpose of this update is to rewrite all of the previous code base written with <a href=\"https://backbonejs.org/\">Backbone</a> and <a href=\"https://jquery.com/\">jQuery</a> from scratch. The team is expecting to decrease unnecessary dependency, making the new Grid to be leaner and faster than before. </p>\n<p>As a way of celebrating the <a href=\"https://github.com/nhn/tui.grid/releases/tag/v4.0.0-alpha.0\">alpha release of v4</a>, I would like to elaborate on what differences between event based state management system like Backbone and reactivity systems like <a href=\"https://vuejs.org/\">Vue</a> and <a href=\"https://mobx.js.org/\">MobX</a> are, why we created the reactivity system for ourselves, and what you need to consider to fully implement the reactivity systems using the actual source code. </p>\n<h2 id=\"what-is-a-reactivity-system\" style=\"position:relative;\"><a href=\"#what-is-a-reactivity-system\" aria-label=\"what is a reactivity system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Is A Reactivity System?</h2>\n<p>Given the ubiquity of the word \"reactive\" in the field of programming (functional reactive programming etc.) the system will be described to be a reactivity system. For the duration of this article, \"reactivity\" will refer to the way systems like  <a href=\"https://vuejs.org/\">Vue</a> and MobX functions, and more specifically, to systems that automatically detect the state change of an object to modify the state of other objects that use the modified object, or automatically refreshing the related view of the object. In other words, it is a system that automatically does everything that previous event based systems had to do, including emitting events to signal stage change and registering listeners to detect those changes. </p>\n<p>Most of the frameworks released after Backbone actually support such method, and when <a href=\"https://angularjs.org/\">AngularJS</a> became popular, the expression “data binding” was used frequently. However, with Vue officially using the word “reactivity,” the word reactivity has become a symbolic description of Vue, and is often used in relation to implementation methods seen in Vue. In order to implement aforementioned reactivity, Vue uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\">getter/setter</a> to register Proxies, and in <a href=\"https://medium.com/vue-mastery/evan-you-previews-vue-js-3-0-ab063dec3547\">Vue 3</a>, which is currently under development, the reactivity will be implemented using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">ES2015’s Proxy</a>.</p>\n<p>MobX uses a reactivity system that is very similar to Vue, and since it uses getter/setter up until version 4, and Proxy starting from version 5, you can use the appropriate version that suits the necessary browser requirements. However, since MobX is just a state management library, in order to represent the UI, you would need to use it with other frameworks like React.</p>\n<h2 id=\"event-driven-vs-reactivity\" style=\"position:relative;\"><a href=\"#event-driven-vs-reactivity\" aria-label=\"event driven vs reactivity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Driven vs. Reactivity</h2>\n<p>Now, let’s look at some simple example codes to better compare the benefits reactivity system has over the traditional event driven methods. The <a href=\"https://backbonejs.org/#Model\">Backbone’s Model</a> will be used to demonstrate the event driven system, and <a href=\"https://mobx.js.org/refguide/observable.html\">MobX’s observable</a> will be used to demonstrate the reactivity system. Since the two will be used only to explain the basic concepts, even if you are not familiar with the libraries, you should have no problem following along. </p>\n<p>Let’s say that there are two players in a game: A and B, and there is a Board that displays the sum of the two players’ scores. As each player’s score is updated, the sum displayed in the Board has to update itself as well. If you were to implement this feature using Backbone, it would look something like the following. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Model<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'BackBone'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> playerA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n  score<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> playerB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span>\n  score<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Board <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrs<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>playerA <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>playerA<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>playerB <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>playerB<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span>playerA<span class=\"token punctuation\">,</span> <span class=\"token string\">'change:score'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_updateTotalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span>playerB<span class=\"token punctuation\">,</span> <span class=\"token string\">'change:score'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_updateTotalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_updateTotalScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token function\">_updateTotalScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'totalScore'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>playerA<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>playerB<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Board</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>playerA<span class=\"token punctuation\">,</span> playerB<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'totalScore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span>\n\nplayerA<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'totalScore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span>\n\nplayerB<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'totalScore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span></code></pre></div>\n<p>In the code to define the <code class=\"tui-language-text\">Board</code> class, in order to detect changes in the <code class=\"tui-language-text\">score</code> property of <code class=\"tui-language-text\">playerA</code> and <code class=\"tui-language-text\">playerB</code>, we are listening for the <code class=\"tui-language-text\">change:score</code> event. If we were to detect changes in other properties, we would have to create new listeners.</p>\n<p>Let’s compare this to the reactivity system. What would the code look like if the same feature were implemented in MobX?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>observable<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mobx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> playerA <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n  score<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> playerB <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span>\n  score<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">totalScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> playerA<span class=\"token punctuation\">.</span>score <span class=\"token operator\">+</span> playerB<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>totalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span>\n\nplayerA<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>totalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span>\n\nplayerB<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>totalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span></code></pre></div>\n<p>From the code above, we can clearly see that the <code class=\"tui-language-text\">totalScore</code> property is defined within the <code class=\"tui-language-text\">board</code> object as a getter function. This property detects any changes to the observable values that is referenced inside of the getter function, and if any change is detected, the function calls the getter function again to update its value. Such properties are also known as computed or derived properties, and this is the defining characteristic of a reactivity system. In the <a href=\"https://mobx.js.org/\">MobX’s Official documentation</a>, the architectural philosophy of the library is clearly stated in the following sentence. </p>\n<blockquote>\n<p>Anything that can be derived from the application state, should be derived. Automatically. </p>\n</blockquote>\n<p>In traditional event based systems, functions that update the property values like <code class=\"tui-language-text\">_updateTotalScore()</code> decide the final value of the property, and if such functions are spread out throughout the code, it makes it difficult for you to clearly summarize the dependencies among different data sets. Contrarily, computed properties depends only on one getter function, and since it usually does not require additional setter function, the getter block provides a clear summary of how the value changes throughout the program. </p>\n<p>Therefore, if the previous event driven systems were <em>imperative</em>, the reactivity system allows users to define the structures in a more <em>declarative</em> manner. As it should be clear from the example code, the codes that were <em>declared</em> are shorter and more intuitive compared to the imperative programming. Furthermore, it represents a clear relationship for all of related data. </p>\n<h2 id=\"why-we-built-our-own-reactivity-system\" style=\"position:relative;\"><a href=\"#why-we-built-our-own-reactivity-system\" aria-label=\"why we built our own reactivity system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why We Built Our Own Reactivity System</h2>\n<p>TOAST UI Grid is an independent library that does not rely on other frameworks. Since it should be able to cooperate with any of the existing UI frameworks, Vue was not even considered to begin with. However, since MobX can only manage the states of the system, MobX provides much more diverse features while being much smaller than Vue. For example, MobX provides not only every day objects, but also provides features to translate variety types of objects like arrays and maps to be reactivity objects, multifarious observer functions, <a href=\"https://mobx.js.org/refguide/observe.html\">intercept &#x26; observe functions</a>, <a href=\"https://mobx.jsorg/best/actions.html\">asynchronous action</a>. So, we thought, what if instead of creating a separate state manager, we just use MobX? </p>\n<p>To be fair, MobX is already known to be great for creating general web applications. However, when creating a UI library like TOAST UI Grid, there are more aspects to consider, such as external library dependency, bundle size, and performance. Following are some of the reasons why we decided against using MobX.</p>\n<h3 id=\"1-external-library-dependency-and-bundle-size\" style=\"position:relative;\"><a href=\"#1-external-library-dependency-and-bundle-size\" aria-label=\"1 external library dependency and bundle size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. External Library Dependency and Bundle Size</h3>\n<p>One of the main purpose of the TOAST UI Grid version 4 update was eliminating the previous dependency to external libraries (Backbone, jQuery.) Using external libraries puts extra pressure on the file size and performance, so it is best to minimize external dependency of any library. However, if we eliminate the previous dependency by introducing a new dependency, it defeats the purpose of this update. </p>\n<p>Furthermore, the minified bundle size of MobX v4.9.4 is <strong>around 56KB (16KB if compressed using Gzip.)</strong> Considering that minified file size of Backbone is around 25KB (8KB if compressed using Gzip,) MobX is almost double that of Backbone. It would be a different story if we needed every single feature included in MobX, but since we were only interested in using a portion of the library, it certainly was an uncomfortable size. Therefore, it would be analogous to trying to lose weight by eating nothing but burgers every day.</p>\n<h3 id=\"2-performance-issues-with-processing-large-data\" style=\"position:relative;\"><a href=\"#2-performance-issues-with-processing-large-data\" aria-label=\"2 performance issues with processing large data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Performance Issues with Processing Large Data</h3>\n<p>Like all technology, reactivity system is not a panacea. Especially for a system that has to handle large arrays of data like the Grid, the reactivity system can have numerous performance downsides. Let’s consider the following piece of code. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  rawData<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Jackson'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Johnson'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">viewData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rawData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      fullName<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>viewData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Michael Jackson</span>\n\ndata<span class=\"token punctuation\">.</span>rawData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">'Bolton'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>viewData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Michael Bolton</span>\n\ndata<span class=\"token punctuation\">.</span>rawData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Jordan'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>viewData<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Michael Jordan</span></code></pre></div>\n<p>In the code above, the <code class=\"tui-language-text\">data.viewData</code> is updated every time the <code class=\"tui-language-text\">data.rawData</code> is changed. By studying the code above, we can see that the <code class=\"tui-language-text\">data.viewData</code> is refreshed for every operation within the  <code class=\"tui-language-text\">data.rawData</code> array including any modification to property values and inserting new elements. However, the problem is that no matter how minuscule the change is, entire array is iterated to create a new array. Therefore, if the size of the array is considerably large, it could be extremely costly. </p>\n<p>For example, if the <code class=\"tui-language-text\">rawData</code> has 100K data points, the program would react to a single change in <code class=\"tui-language-text\">rawData</code> by iterating hundred thousand times to create a new <code class=\"tui-language-text\">viewData</code> array. To avoid such issues, one of the solutions is manually handling each change according to the type of the changed property using <a href=\"https://mobx.js.org/refguide/observe.html\">observe</a>, but this method reduces the effectiveness of declarative definition of reactivity system. Furthermore, it could lead to having to write longer codes than simply editing each case separately. </p>\n<p>Also, if you are trying to make the array to follow the reactivity model, the MobX (v4) uses getter for each index of the array to register the Proxy, and this process takes a significant toll on performance as well. According to some of the tests I’ve ran on the PC, it took the program around 150ms to process an array with hundred thousand elements, and if each element has more than thirty properties inside, it took the program more than 10 seconds to process it. </p>\n<p>Since the goal for the TOAST UI Grid is to limit the processing time to under 500ms even if there are more than hundred thousand data points, we decided that it would be counter-effective to directly use MobX’s <code class=\"tui-language-text\">observable</code>. Therefore, we frequently encountered a situation where we had to build reactivity portions of the entire array, or where we had to perform intricate operations according to the addition/deletion/modification of the element. For performance-sensitive applications, it was our impression that building our own reactivity system would allow a more flexible approach to the problem. </p>\n<h2 id=\"understanding-the-basics-of-a-reactivity-system-gettersetter\" style=\"position:relative;\"><a href=\"#understanding-the-basics-of-a-reactivity-system-gettersetter\" aria-label=\"understanding the basics of a reactivity system gettersetter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding the Basics of a Reactivity System: getter/setter</h2>\n<p>Now, let’s dive straight into building our own reactivity state management system. As I explained previously, if the internal mechanism of the system were extremely complicated, we would not have even attempted to create it for ourselves. However, contrary to the general impression, the underlying philosophies of the system are incredibly simple, and you can create an effective state management system using very few lines of code.</p>\n<blockquote>\n<p>As previously mentioned, there are two ways to create a reactivity system. However, Internet Explorer and other older browsers do not support ES2015’s Proxy. For the case of TOAST UI Grid, we used getter/setter for the sake of browser compatibility, and will explain the same in this article. </p>\n</blockquote>\n<p>The simplest units forming the reactivity system are the <code class=\"tui-language-text\">observable</code> object and the <code class=\"tui-language-text\">observe</code> function. The system operates by calling the registered observer functions every time a property value within the <code class=\"tui-language-text\">observable</code> object changes. Every property that can be accessed internally from the <code class=\"tui-language-text\">observable</code> object has a registered observer function as a listener, and the observer functions are passed into the <code class=\"tui-language-text\">observe</code> function as inputs.</p>\n<blockquote>\n<p>While the names can vary from library to library, for this article, we will use <code class=\"tui-language-text\">observable</code> and <code class=\"tui-language-text\">observe</code> which is similar to the names mentioned in the MobX API. Note that they are not related to the <a href=\"https://rxjs-dev.firebaseapp.com/guide/observable\">RxJS Observable</a>, so be mindful when trying it for yourself. </p>\n</blockquote>\n<p>Before the actual implementation, let’s go over the usage of it, first. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> player <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n  score<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>player<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>player<span class=\"token punctuation\">.</span>score<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// A : 10</span>\n\nplayer<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// B : 10</span>\nplayer<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// B : 20</span></code></pre></div>\n<p>If you look at the example code, you can see that observer function that we passed into the <code class=\"tui-language-text\">observe</code> function as input runs once at the beginning, and continues to run every time time the property value of the <code class=\"tui-language-text\">player</code> object changes. </p>\n<p>In order to implement this functionality, we would need to be able to know before we access the object’s property whether the <code class=\"tui-language-text\">observe</code> function is running. First, let’s write our <code class=\"tui-language-text\">observe</code> function. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">let</span> currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  currentObserver <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"tui-language-text\">observe</code> function saves the function that we received as input as <code class=\"tui-language-text\">currentObserver</code> and runs the function. Now that we have the <code class=\"tui-language-text\">currentObserver</code>, every time the getter function is called, we store this function in the observer array, and every time the setter function is called, we call all of the stored observer function. However, since it is possible for the <code class=\"tui-language-text\">observe</code> function to reference a single property multiple times, exercise necessary precautions not to register an observer function redundantly. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> propObservers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The key portion of the code is that we have defined a new variable <code class=\"tui-language-text\">_value</code> in the function scope. The purpose of this variable is to prevent the setter function to fall into an infinite loop when the setter function register a value to the property by <code class=\"tui-language-text\">this[key] = value</code>. Other than that, since the code is only around 20 lines, I will leave it up to the you to study and figure out what the <code class=\"tui-language-text\">observable</code> function does for yourself. </p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/59179715-e59e6480-8b9d-11e9-88d9-8532841cf1d1.png\" alt=\"Observer and Observable\"></p>\n<p>Of course there are more features we need to implement, but we can still use what we have so far to address the example problem I previously mentioned without running into major errors. This thirty-some lines of code is the very core of any reactivity systems. </p>\n<h2 id=\"implementing-the-derived-properties\" style=\"position:relative;\"><a href=\"#implementing-the-derived-properties\" aria-label=\"implementing the derived properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing the Derived Properties</h2>\n<p>Now, let’s get started with the derived properties. There are multiple ways to implement the derived properties. We could use decorators like MobX’s <code class=\"tui-language-text\">@computed</code>, or we could even separately define a <code class=\"tui-language-text\">computed</code> object like Vue. For this article, we will look at using the getter to forge a derived property from the defined properties. As before, let’s look at the usage, first.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  score1<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  score2<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">totalScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>totalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30;</span>\n\nboard<span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>totalScore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40;</span></code></pre></div>\n<p> We defined the value of <code class=\"tui-language-text\">board.totalScore</code> using a getter, and every time <code class=\"tui-language-text\">board.score1</code> and <code class=\"tui-language-text\">board.score2</code> change, the <code class=\"tui-language-text\">board.totalScore</code> is automatically recalculated and assigned. </p>\n<p>It may seem like a sudden increase in difficulty. However, the underlying philosophy remains identical to the <code class=\"tui-language-text\">observe</code> function we had just written. We simply need to call the <code class=\"tui-language-text\">observe</code> function internally to update the respective property value every time. In order to do so, we first need to make certain that the property has a getter function assigned to it when we iterate through the object. Then, we just access the <code class=\"tui-language-text\">get</code> property of what the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\">Object.getOwnPropertyDescriptor</a> returns.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> getter <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, once we have defined the getter, instead of configuring the setter, we modify the internal data by calling the <code class=\"tui-language-text\">observe</code> function to modify the internal data with the resulting values from the getter function, and calling the registered observer functions. However, since <code class=\"tui-language-text\">this</code> is used to access the object from inside of the getter, we have to use the <code class=\"tui-language-text\">call</code> to provide the object as the context.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    _value <span class=\"token operator\">=</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final code should look something like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> getter <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> propObservers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> getter <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        _value <span class=\"token operator\">=</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n          propObservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because we defined the getter and the setter separately, we have to set the <code class=\"tui-language-text\">configurable</code> to <code class=\"tui-language-text\">true</code> when we are registering the getter if we want to add a setter to it. Other than that, the code is practically identical to the original code. Also because the derived properties use the getter built for Proxies, not user-defined, it can handle serially derived properties as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  score1<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  score2<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">totalScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">ratio1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>totalScore<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>ratio1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.2</span>\n\nboard<span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>ratio1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.6</span></code></pre></div>\n<h2 id=\"more-things-to-consider\" style=\"position:relative;\"><a href=\"#more-things-to-consider\" aria-label=\"more things to consider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More Things to Consider</h2>\n<p>While the codes that we have written should suffice for a very general situation, there are still situations unaccounted for. Since it would be overly ambitious for me to explain both the entire context and all of the code in this single article, I will only explain only the most important aspects.</p>\n<h3 id=\"1-excluded-code-from-the-initial-execution-of-observe-function\" style=\"position:relative;\"><a href=\"#1-excluded-code-from-the-initial-execution-of-observe-function\" aria-label=\"1 excluded code from the initial execution of observe function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Excluded Code from the Initial Execution of observe Function</h3>\n<p>The <code class=\"tui-language-text\">observe</code> function only saves the inputted function to the <code class=\"tui-language-text\">currentObserver</code> when it is running for the first time. In other words, every observer can only by detected by the getter at the initial execution, so if the function has conditional statements inside itself, some of the code may not be included in the observable object’s property observer list. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  score1<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  score2<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">score1 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>board<span class=\"token punctuation\">.</span>score1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">score2 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>board<span class=\"token punctuation\">.</span>score2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// score1 : 10</span>\n\nboard<span class=\"token punctuation\">.</span>score1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// score2 : 20;</span>\n\nboard<span class=\"token punctuation\">.</span>score2 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No Reaction</span></code></pre></div>\n<p>The observer function that we passed in to the <code class=\"tui-language-text\">observe</code> accesses the <code class=\"tui-language-text\">board.score2</code> from the else block, but since this portion of the code is not executed when the code is first ran, any changes made to the <code class=\"tui-language-text\">board.score2</code> cannot be detected using what we have so far. One of the ways to address this problem is to configure the <code class=\"tui-language-text\">currentObserver</code> every time the observer function is executed. Then, because the portion of the code that calls the <code class=\"tui-language-text\">includes</code> with the intent of eliminating redundant observers can cause performance issues, it is better to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a> instead of an array. If you cannot use the Set due to environment restrictions, you should assign a unique identifier to each observer, and use an object to manage the ids. </p>\n<p>Secondly, because you have to check whether the observer exists every time, if you run into serially derived properties or if a chain of observer calls occur from inside of the observer, the <code class=\"tui-language-text\">current Observer</code> could be set to <code class=\"tui-language-text\">null</code>. To address this issue, you must use the array data type to manage the <code class=\"tui-language-text\">currentObserver</code> as a stack. </p>\n<h3 id=\"2-unobserve-function\" style=\"position:relative;\"><a href=\"#2-unobserve-function\" aria-label=\"2 unobserve function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. unobserve Function</h3>\n<p>The observers that are assigned using the <code class=\"tui-language-text\">observe</code> function remain until the targets are completely wiped from the memory. In this case, even if the target UI components are removed from the screen, it stays in the memory repeating unnecessary tasks. Therefore, the <code class=\"tui-language-text\">observe</code> function must be able to return a <code class=\"tui-language-text\">unobserve</code> (or dispose) function that can terminate the observation. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> board <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  score<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unobserve <span class=\"token operator\">=</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 10</span>\n\nboard<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 20</span>\n\n<span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nboard<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// No Reaction</span></code></pre></div>\n<p>As of now, we do not have a way to get rid of the observer from outside of the function because the <code class=\"tui-language-text\">propObservers</code> array lives within the function scope. Furthermore, each observer function must be aware of all of the observer arrays that reference itself, so you have to create a management object that manages all of the observers within the module scope. </p>\n<h3 id=\"3-reactivity-on-arrays\" style=\"position:relative;\"><a href=\"#3-reactivity-on-arrays\" aria-label=\"3 reactivity on arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Reactivity on Arrays</h3>\n<p>I have already explained how the performance drops significantly when the reactivity systems are confronted with massive arrays. While we have tried different methods to account for it, we eventually decided not to use a reactivity system for the arrays in TOAST UI Grid. The cost of recreating an array with couple dozen elements is relatively insignificant, and most of the arrays have less than a hundred elements. To put it differently, it mostly does not matter that the arrays follow the reactivity if you update the object that has the array every time the array changes, the observer will react the same. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">obaservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  nums<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">squareNums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>squareNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 9]</span>\n\ndata<span class=\"token punctuation\">.</span>nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>squareNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 9, 16]</span></code></pre></div>\n<p>However, recreating a massive array still cannot be entirely ignored, since it could lead to detrimental effects on the overall performance. In order to address this problem, MobX and Vue use custom arrays that overrides built in methods like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">push</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">pop</a> that internally calls the observers. In order to make sure that the program accesses the correct element of the array, Proxy getters are assigned to individual index identifiers. However, it is important to keep in mind that this method can be annoying to implement due to intricate relationships with numerous scenarios, and it could also negatively affect the  performance. </p>\n<p>For TOAST UI Grid, we decided to create a <code class=\"tui-language-text\">notify</code> function, instead of structuring the entire array to adhere to the reactivity model, to forcefully call the observer functions to certain properties. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">observbable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  nums<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">squareNums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>squareNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 9]</span>\n\ndata<span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>squareNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 9, 16]</span></code></pre></div>\n<p>It is true that since this <code class=\"tui-language-text\">notify</code> function is manually called, it cannot be said to be in complete accordance with reactivity. However, this function is rarely used, and is only held out for those few cases where the program has to deal with a massive array. Therefore, in terms of exception handling, we believe it to be a reasonable choice. </p>\n<h2 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<p>What I have documented so far is, at its essence, what the TOAST UI Grid uses internally. While there are more features like cache handling and monolithic pure object return functions, since such features only take a little bit of the entire code, I have elected to ignore them. </p>\n<p>The entire source code has been written in TypeScript, and is available on the <a href=\"https://github.com/nhn/tui.grid/blob/master/src/helper/observable.ts\">Github repository</a>. Excluding the type information, it is around <strong>100 lines of code, 1.3KB when minified, and less than 0.7KB when compressed using Gzip.</strong> Compared to the 56KB of the minified MobX, it is a massive difference. Granted that it is less diverse in functionalities than MobX, for the purpose of TOAST UI Grid v4, these hundred lines of code have been working appropriately for us so far (not to mention that everyone on the team is content with the utility.)</p>\n<p>In the world of programming, “you do not reinvent the wheel.” However, if the specific wheel that you are looking for is not in the pile, and you can create the wheel that you want at a reasonable cost, creating your own wheel is, in fact, the best option. It is still critical that you personally seek out new libraries and frameworks and learn how to use them, but nonetheless, I believe that understanding the underlying philosophies of those frameworks is more important. If you truly understand the core concept, you as a programmer can react more flexibly to wider range of conundrums, and would be able to implement more diverse functionalities. </p>\n<p>We are still working diligently for the official release of TOAST UI Grid v4. Keep up to date with leaner and more customizeable Grid with <a href=\"/test123/weekly-pick\">Official Weekly</a> and <a href=\"https://twitter.com/toastui\">TOAST UI Twitter</a>!</p>","frontmatter":{"id":"en_20190610","title":"Building a 0.7KB Reactivity System Similar to Vue","description":"Currently, the TOAST UI Grid team is working diligently for the major update that is the release of the version 4. The purpose of this update is to rewrite all of the previous code base written with Backbone and jQuery from scratch. The team is expecting to decrease unnecessary dependency, making the new Grid to be leaner and faster than before.","date":"2019.06.10","author":"DongWoo Kim","tags":["opensource","VueJs"],"thumbnail":"https://user-images.githubusercontent.com/12269489/59179668-c43d7880-8b9d-11e9-9a10-f2db1661e4dc.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_20190610","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}