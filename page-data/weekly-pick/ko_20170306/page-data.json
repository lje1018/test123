{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170306","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트-에러와-스택-트레이스-심화\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%90%EB%9F%AC%EC%99%80-%EC%8A%A4%ED%83%9D-%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4-%EC%8B%AC%ED%99%94\" aria-label=\"자바스크립트 에러와 스택 트레이스 심화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 에러와 스택 트레이스 심화</h1>\n<blockquote>\n<p>원문 : <a href=\"https://lucasfcosta.com/2017/02/17/JavaScript-Errors-and-Stack-Traces.html\">https://lucasfcosta.com/2017/02/17/JavaScript-Errors-and-Stack-Traces.html</a></p>\n</blockquote>\n<p>이번 시간에는 에러와 스택 트레이스를 조작하는 방법에 대해 이야기하려 한다.</p>\n<p>때때로 사람들은 이런 세부 사항에 대해 신경쓰지 않지만, 테스트나 에러와 관련된 어떤 라이브러리를 작성하려고 할 때 이 지식들은 굉장히 유용할 것이다.\n예로 이번 주에 <a href=\"http://chaijs.com/\">Chai</a>는 어설션이 실패했을 때 사용자들이 많은 정보를 얻기 위해 <a href=\"https://github.com/chaijs/chai/pull/922\">스택 트레이스 조작 방식을 개선한 훌륭한 풀 리퀘스트</a>를 받았다.</p>\n<p>스택 트레이스를 조작하면 불필요한 데이터를 정리하고 중요한 것에 집중할 수 있다.\n또한 정확하게 에러가 무엇인지, 그리고 그 속성들을 이해할 때 당신은 훨씬 더 자신감을 가지게 될 것이다.</p>\n<p>이 블로그 포스트의 도입부는 명확해 보이지만 스택 트레이스를 조작하기 시작하면 꽤 복잡해질 수 있다.\n그래서 해당 섹션으로 이동하기 전에 이전 내용을 잘 이해했는지 확인하라.</p>\n<h3 id=\"호출-스택-작동-방법\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%B6%9C-%EC%8A%A4%ED%83%9D-%EC%9E%91%EB%8F%99-%EB%B0%A9%EB%B2%95\" aria-label=\"호출 스택 작동 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출 스택 작동 방법</h3>\n<p>에러에 대해서 이야기하기 전에 호출 스택(Call Stack)이 어떻게 동작하는지 이해해야 한다.\n굉장히 단순하지만 꼭 알아야 할 기초이다.\n이미 알고 있다면 이번 섹션은 넘어가도 좋다.</p>\n<p>함수 호출이 있을 때마다 함수는 스택의 맨 위에 쌓이게 된다.\n호출이 끝나면 함수는 스택의 맨 위에서 제거된다.</p>\n<p>이러한 데이터 구조에서 흥미로운 점은 스택에 들어간 마지막 아이템이 나올 때 첫 번째로 나온다는 것이다.\n이것을 LIFO(Last In, First Out) 속성이라고 한다.</p>\n<p>예를 들어 함수 <code class=\"tui-language-text\">x</code>안에서 함수 <code class=\"tui-language-text\">y</code>가 호출될 때 <code class=\"tui-language-text\">x</code>, <code class=\"tui-language-text\">y</code> 순서로 스택을 갖게 된다.</p>\n<p>다음 코드를 보고 이야기해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제에서 함수 <code class=\"tui-language-text\">a</code>를 실행하면 스택의 맨 위에 추가될 것이다.\n그리고 함수 <code class=\"tui-language-text\">a</code> 안에서 <code class=\"tui-language-text\">b</code>를 호출하면 스택 맨 위에 <code class=\"tui-language-text\">b</code>가 추가된다.\n함수 <code class=\"tui-language-text\">b</code> 안에서 <code class=\"tui-language-text\">c</code>를 호출할 때도 같은 일이 일어난다.</p>\n<p>함수 <code class=\"tui-language-text\">c</code>를 실행하면 스택은 <code class=\"tui-language-text\">a</code>, <code class=\"tui-language-text\">b</code>, <code class=\"tui-language-text\">c</code>를 순서대로 포함하고 있을 것이다.</p>\n<p>함수 <code class=\"tui-language-text\">c</code> 실행이 끝나면 스택의 맨 위에서 제거되고 제어 흐름은 <code class=\"tui-language-text\">b</code>로 돌아간다.\n함수 <code class=\"tui-language-text\">b</code> 실행이 끝나면 역시 스택에서 제거되고 제어권은 <code class=\"tui-language-text\">a</code>로 돌아온다.\n마지막으로 함수 <code class=\"tui-language-text\">a</code> 실행이 끝나면 스택에서 제거된다.</p>\n<p>이 동작을 보다 잘 설명하기 위해, <code class=\"tui-language-text\">console.trace()</code>를 사용해 콘솔로 현재 스택 트레이스를 출력할 것이다.\n일반적으로 스택 트레이스는 위에서 아래로 읽어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>노드 레플 서버로 이 코드를 실행하면 다음 결과가 나타난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Trace\n    at <span class=\"token function\">c</span> <span class=\"token punctuation\">(</span>repl<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span>repl<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span>repl<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    at repl<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span> <span class=\"token comment\">// &lt;-- For now feel free to ignore anything below this point, these are Node's internals</span>\n    at <span class=\"token function\">realRunInThisContextScript</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">sigintHandlersWrap</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">98</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    at ContextifyScript<span class=\"token punctuation\">.</span>Script<span class=\"token punctuation\">.</span><span class=\"token function\">runInThisContext</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">24</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    at REPLServer<span class=\"token punctuation\">.</span><span class=\"token function\">defaultEval</span> <span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">313</span><span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">bound</span> <span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">280</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n    at REPLServer<span class=\"token punctuation\">.</span>runBound <span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span> eval<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">293</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기에서 알 수 있듯이 함수 <code class=\"tui-language-text\">c</code> 내부에서 출력된 스택에서 <code class=\"tui-language-text\">a</code>, <code class=\"tui-language-text\">b</code> 그리고 <code class=\"tui-language-text\">c</code>를 얻을 수 있다.</p>\n<p>함수 <code class=\"tui-language-text\">c</code> 실행이 끝난 후에 <code class=\"tui-language-text\">b</code> 안에서 스택 트레이스를 출력하면, 스택의 맨 위에 이미 <code class=\"tui-language-text\">c</code>가 제거되고 <code class=\"tui-language-text\">a</code>와 <code class=\"tui-language-text\">b</code>만 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>보다시피 스택은 이미 함수 실행이 끝난 <code class=\"tui-language-text\">c</code>를 갖지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Trace\n    at <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span>repl<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span>repl<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    at repl<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span>  <span class=\"token comment\">// &lt;-- For now feel free to ignore anything below this point, these are Node's internals</span>\n    at <span class=\"token function\">realRunInThisContextScript</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">sigintHandlersWrap</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">98</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    at ContextifyScript<span class=\"token punctuation\">.</span>Script<span class=\"token punctuation\">.</span><span class=\"token function\">runInThisContext</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">24</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    at REPLServer<span class=\"token punctuation\">.</span><span class=\"token function\">defaultEval</span> <span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">313</span><span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">bound</span> <span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">280</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n    at REPLServer<span class=\"token punctuation\">.</span>runBound <span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span> eval<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">293</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    at REPLServer<span class=\"token punctuation\">.</span><span class=\"token function\">onLine</span> <span class=\"token punctuation\">(</span>repl<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">513</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>요약하면 호출된 함수들은 스택의 맨 위에 들어가게 된다.\n그리고 실행이 끝나면 스택에서 빠지게 된다.\n이처럼 간단하다.</p>\n<h3 id=\"오류-객체와-오류-핸들링\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%98%A4%EB%A5%98-%ED%95%B8%EB%93%A4%EB%A7%81\" aria-label=\"오류 객체와 오류 핸들링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 객체와 오류 핸들링</h3>\n<p>오류가 발생하면 <code class=\"tui-language-text\">Error</code> 객체가 발생한다.\n<code class=\"tui-language-text\">Error</code> 객체는 확장하거나 자체 오류를 작성하려는 사용자를 위한 원형(prototype)으로 사용할 수도 있다.</p>\n<p><code class=\"tui-language-text\">Error.prototype</code> 객체는 다음 프로퍼티를 가진다.</p>\n<ul>\n<li><code class=\"tui-language-text\">constructor</code> - 인스턴스의 프로토타입을 담당하는 생성자 함수</li>\n<li><code class=\"tui-language-text\">message</code> - 오류 메시지</li>\n<li><code class=\"tui-language-text\">name</code> - 오류 이름</li>\n</ul>\n<p>이것들은 표준 프로퍼티이며, 환경에 따라서 특수한 프로퍼티를 가지고 있다.\n노드, 파이어폭스, 크롬, 엣지, 익스플로러 10+, 오페라, 사파리 6+와 같은 환경에서 <code class=\"tui-language-text\">stack</code> 프로퍼티를 가진다.\n<code class=\"tui-language-text\">stack</code> 프로퍼티는 오류의 스택 트레이스를 포함한다.\n오류의 스택 트레이스는 자체 생성자 함수가 될 때까지 모든 스택 프레임들을 포함한다.</p>\n<p><code class=\"tui-language-text\">Error</code> 객체의 특수한 프로퍼티에 대해 더 알고 싶다면 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\">MDN 아티클</a>을 읽어보길 추천한다.</p>\n<p>오류를 발생시키려면 <code class=\"tui-language-text\">throw</code> 키워드를 사용해야 한다.\n발생된 오류를 잡아내기 위해서 <code class=\"tui-language-text\">catch</code> 블록 전에 <code class=\"tui-language-text\">try</code> 블록으로 오류를 발생하는 코드를 감싸야 한다.\n<code class=\"tui-language-text\">catch</code>는 발생한 오류를 인자로 사용한다.</p>\n<p>또한 자바와 자바스크립트에서는 <code class=\"tui-language-text\">try</code> 블록이 오류를 발생하는지 여부에 관계 없이 <code class=\"tui-language-text\">try/catch</code> 블록 뒤에 <code class=\"tui-language-text\">finally</code> 블록을 가질 수 있다.\n오류가 발생한 다음을 정리하기 위해 <code class=\"tui-language-text\">finally</code>를 사용하는 것이 좋다.</p>\n<p>지금까지는 사람들이 대부분 알고 있는 내용이므로 좀 더 자세히 살펴보자.</p>\n<p><code class=\"tui-language-text\">try</code> 블록 다음에 <code class=\"tui-language-text\">catch</code>가 없어도 되지만, <code class=\"tui-language-text\">finally</code>는 꼭 따라야 한다.\n<code class=\"tui-language-text\">try</code>문은 3가지 형태로 사용할 수 있다.</p>\n<ul>\n<li><code class=\"tui-language-text\">try...catch</code></li>\n<li><code class=\"tui-language-text\">try...finally</code></li>\n<li><code class=\"tui-language-text\">try...catch...finally</code></li>\n</ul>\n<p>다음과 같이 <code class=\"tui-language-text\">try</code>문은 내부에서 다른 <code class=\"tui-language-text\">try</code>문을 중첩해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nested error.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The error thrown here will be caught by its own `catch` clause</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>nestedErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nested catch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This runs</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This will not run.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 <code class=\"tui-language-text\">catch</code>와 <code class=\"tui-language-text\">finally</code> 블록에서도 <code class=\"tui-language-text\">try</code>문을 중첩해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First catch running'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Second error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>nestedErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Second catch running.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The try block is running...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error inside finally.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an error inside the finally block.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">Error</code> 객체가 아닌 값도 발생시킬 수 있는데 알아두는 것이 중요하다.\n굉장히 관대하게 보일수도 있지만 실제로는 그렇지 않다.\n특히 다른 사람의 코드를 처리해야 하는 라이브러리(예: Chai) 개발자들에게 좋지 않다.\n표준이 없기 때문에 사용자로부터 무엇을 기대할지 알 수 없기 때문이다.\n<code class=\"tui-language-text\">Error</code> 객체 대신 단순히 문자열이나 숫자를 발생시킬 수 있기 때문에 발생된 <code class=\"tui-language-text\">Error</code> 객체를 신뢰할 수 없다.\n또한 스택 트레이스와 의미있는 메타 데이터를 처리해야 하는 경우 어려워진다.</p>\n<p>다음 코드가 있다고 가정해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runWithoutThrowing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was an error, but I will not throw it.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The error\\'s message was: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcThatThrowsError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am a TypeError.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runWithoutThrowing</span><span class=\"token punctuation\">(</span>funcThatThrowsError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드는 사용자가 <code class=\"tui-language-text\">runWithoutThrowing</code> 함수에 <code class=\"tui-language-text\">Error</code> 객체를 던지는 함수를 전달할 때 유용하다.\n하지만 만약에 문자열 값을 던지면 문제가 생길 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runWithoutThrowing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was an error, but I will not throw it.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The error\\'s message was: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcThatThrowsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'I am a String.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runWithoutThrowing</span><span class=\"token punctuation\">(</span>funcThatThrowsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>두 번째 <code class=\"tui-language-text\">console.log</code>에서 오류 메시지(<code class=\"tui-language-text\">e.message</code>)를 <code class=\"tui-language-text\">undefined</code>로 보여줄 것이다.\n이것이 그다지 중요하지 않게 보일 수도 있다.\n하지만 <code class=\"tui-language-text\">Error</code> 객체에 특정 프로퍼티가 존재하는지 또는 이 프로퍼티를 다른 방식(예: <a href=\"https://github.com/chaijs/chai/blob/a7e1200db4c144263599e5dd7a3f7d1893467160/lib/chai/core/assertions.js#L1506\">Chai의 <code class=\"tui-language-text\">throws</code> 어설션</a>)으로 다루어야 하는지 필요한 경우, 이것이 잘 작동하는지 확인하기 위한 더 많은 작업이 필요하게 된다.</p>\n<p>또한 <code class=\"tui-language-text\">Error</code> 객체가 아닌 값을 발생하면 <code class=\"tui-language-text\">stack</code> 프로퍼티와 같은 다른 중요한 데이터에 접근할 수 없다.</p>\n<p><code class=\"tui-language-text\">Error</code>는 다른 객체로도 사용될 수 있다.\n반드시 던져질 필요는 없다.\n따라서 아래 <code class=\"tui-language-text\">fs.readdir</code> 함수와 같이 콜백 함수의 첫 번째 인자로 여러 번 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example/i-do-not-exist'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> dirs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// `readdir` will throw an error because that directory does not exist</span>\n        <span class=\"token comment\">// We will now be able to use the error object passed by it in our callback function</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error Message: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'See? We can use Errors without using try statements.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dirs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">Error</code> 객체는 프라미스를 거부할 때(<code class=\"tui-language-text\">reject</code> 함수 실행) 사용할 수도 있다.\n이것은 프라미스 리젝션을 다룰 때 편리하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The promise was rejected.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am an error.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The promise was rejected with an error.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error Message: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"스택-트레이스-조작\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4-%EC%A1%B0%EC%9E%91\" aria-label=\"스택 트레이스 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 트레이스 조작</h3>\n<p>이번에는 모두가 기다린 스택 트레이스 조작 방법을 다루려고 한다.</p>\n<p>이 장은 노드JS와 같은 <a href=\"https://nodejs.org/api/errors.html#errors_error_capturestacktrace_targetobject_constructoropt\"><code class=\"tui-language-text\">Error.captureStackTrace</code></a>를 지원하는 환경 전용이다.</p>\n<p><code class=\"tui-language-text\">Error.captureStackTrace</code> 함수는 첫 번째 인자로 <code class=\"tui-language-text\">object</code>와 두 번째 인자로 <code class=\"tui-language-text\">function</code>을 선택적으로 넘긴다.\n스택 트레이스를 캡처하는 것은 현재의 스택 트레이스를 캡처하고 대상 객체 안에 <code class=\"tui-language-text\">stack</code> 프로퍼티를 만들어 저장한다.\n만약에 두 번째 인자가 있으면 인자로 전달된 함수는 호출 스택의 끝점으로 간주되어, 스택 트레이스는 콜백 함수가 호출되기 전에 발생한 호출만 표시할 것이다.</p>\n<p>좀 더 명확하게 하기 위해 몇 가지 예를 보자.\n먼저 현재 스택 트레이스를 캡처하여 일반 객체(<code class=\"tui-language-text\">myObj</code>)에 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Here we will store the current stack trace into myObj</span>\n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// First we will call these functions</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Now let's see what is the stack trace stored into myObj.stack</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This will print the following stack to the console:</span>\n<span class=\"token comment\">//    at b (repl:3:7) &lt;-- Since it was called inside B, the B call is the last entry in the stack</span>\n<span class=\"token comment\">//    at a (repl:2:1)</span>\n<span class=\"token comment\">//    at repl:1:1 &lt;-- Node internals below this line</span>\n<span class=\"token comment\">//    at realRunInThisContextScript (vm.js:22:35)</span>\n<span class=\"token comment\">//    at sigintHandlersWrap (vm.js:98:12)</span>\n<span class=\"token comment\">//    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</span>\n<span class=\"token comment\">//    at REPLServer.defaultEval (repl.js:313:29)</span>\n<span class=\"token comment\">//    at bound (domain.js:280:14)</span>\n<span class=\"token comment\">//    at REPLServer.runBound [as eval] (domain.js:293:12)</span>\n<span class=\"token comment\">//    at REPLServer.onLine (repl.js:513:10)</span></code></pre></div>\n<p>먼저 스택에 최초로 푸시 된 <code class=\"tui-language-text\">a</code>를 호출한 다음 <code class=\"tui-language-text\">a</code> 내부에서 함수 <code class=\"tui-language-text\">b</code>를 호출하여 <code class=\"tui-language-text\">a</code>의 맨 위에 푸시했다.\n그리고 <code class=\"tui-language-text\">b</code> 안에서 현재 스택 트레이스를 캡처하여 <code class=\"tui-language-text\">myObj</code>에 저장한다.\n이것이 콘솔로 출력한 스택에서 함수 <code class=\"tui-language-text\">a</code>와 <code class=\"tui-language-text\">b</code>만 얻는 이유이다.</p>\n<p>이번에는 <code class=\"tui-language-text\">Error.captureStackTrace</code> 함수에 두 번째 인자로 함수를 전달하고 어떤 일이 발생하는지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Here we will store the current stack trace into myObj</span>\n    <span class=\"token comment\">// This time we will hide all the frames after `b` and `b` itself</span>\n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// First we will call these functions</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Now let's see what is the stack trace stored into myObj.stack</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This will print the following stack to the console:</span>\n<span class=\"token comment\">//    at a (repl:2:1) &lt;-- As you can see here we only get frames before `b` was called</span>\n<span class=\"token comment\">//    at repl:1:1 &lt;-- Node internals below this line</span>\n<span class=\"token comment\">//    at realRunInThisContextScript (vm.js:22:35)</span>\n<span class=\"token comment\">//    at sigintHandlersWrap (vm.js:98:12)</span>\n<span class=\"token comment\">//    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</span>\n<span class=\"token comment\">//    at REPLServer.defaultEval (repl.js:313:29)</span>\n<span class=\"token comment\">//    at bound (domain.js:280:14)</span>\n<span class=\"token comment\">//    at REPLServer.runBound [as eval] (domain.js:293:12)</span>\n<span class=\"token comment\">//    at REPLServer.onLine (repl.js:513:10)</span>\n<span class=\"token comment\">//    at emitOne (events.js:101:20)</span></code></pre></div>\n<p><code class=\"tui-language-text\">Error.captureStackTraceFunction</code>에 함수 <code class=\"tui-language-text\">b</code>를 전달하면 <code class=\"tui-language-text\">b</code>와 그 위의 모든 프레임들을 숨긴다.\n이것이 스택 트레이스에 <code class=\"tui-language-text\">a</code>만 가지는 이유이다.</p>\n<p>아마도 당신은 \"왜 이것이 유용한가?\"라고 물을 것이다.\n이는 사용자와 관련되지 않은 내부 구현 내용을 숨기려고 할 때 유용하다.\n예를 들어 Chai는 검사 및 어설션을 구현하는 방식에 대해 사용자에게 관련 없는 세부 정보가 표시되지 않도록 이것을 사용한다.</p>\n<h3 id=\"실제-스택-트레이스-조작\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EC%8A%A4%ED%83%9D-%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4-%EC%A1%B0%EC%9E%91\" aria-label=\"실제 스택 트레이스 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 스택 트레이스 조작</h3>\n<p>마지막 섹션에서 언급했듯이 Chai는 스택 조작 방법을 사용해 사용자와 관련된 스택 트레이스를 사용자와 관련성 있게 만든다.\n어떻게 하는지 여기 방법이 있다.</p>\n<p>먼저 어설션이 실패했을 때 던져지는 <code class=\"tui-language-text\">AssertionError</code> 생성자를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// `ssfi` stands for \"start stack function\". It is the reference to the</span>\n<span class=\"token comment\">// starting point for removing irrelevant frames from the stack trace</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">AssertionError</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> _props<span class=\"token punctuation\">,</span> ssf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> extend <span class=\"token operator\">=</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'constructor'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toJSON'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">,</span> props <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>_props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Default values</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message <span class=\"token operator\">||</span> <span class=\"token string\">'Unspecified AssertionError'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showDiff <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Copy from properties</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Here is what is relevant for us:</span>\n  <span class=\"token comment\">// If a start stack function was provided we capture the current stack trace and pass</span>\n  <span class=\"token comment\">// it to the `captureStackTrace` function so we can remove frames that come after it</span>\n  ssf <span class=\"token operator\">=</span> ssf <span class=\"token operator\">||</span> arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ssf <span class=\"token operator\">&amp;&amp;</span> Error<span class=\"token punctuation\">.</span>captureStackTrace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ssf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If no start stack function was provided we just use the original stack property</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 볼 수 있듯이 스택 트레이스를 캡처하고 빌드하고 있는 <code class=\"tui-language-text\">AssertionError</code>의 인스턴스를 저장하기 위해 <code class=\"tui-language-text\">Error.captureStackTrace</code>를 사용한다.\n스택 트레이스에서 Chai의 내부 구현 내용을 보여주고 스택을 지저분하게 만드는 관계 없는 프레임을 제거하기 위해 시작 스택 함수(Start Stack Function, <code class=\"tui-language-text\">ssf</code>에 해당)를 전달한다.</p>\n<p>이제 <a href=\"https://github.com/meeber\">@meeber</a>의 <a href=\"https://github.com/chaijs/chai/pull/922\">멋진 PR</a>를 살펴보자.</p>\n<p>아래 코드를 보기 전에 <code class=\"tui-language-text\">addChainableMethod</code>가 하는 일이 무엇인지 알려주려고 한다.\n이 함수는 전달된 연결 가능한 메서드를 어설션에 추가하고, 어설션을 감싸는 메서드를 사용해 어설션 자체에 표시를 한다.\n이것은 <code class=\"tui-language-text\">ssfi</code>(Start Stack Function Indicator)라는 이름으로 저장된다.\n기본적으로 현재 어설션이 스택의 마지막 프레임이 될 것이므로 스택에서 더 이상 Chai의 내부 메서드를 보여주지 않는다.\n전체 코드는 양도 많고 까다롭기 때문에 추가하지 않지만 읽어보길 원한다면 <a href=\"https://github.com/meeber/chai/blob/42ff3c012b8a5978e7381b17d712521299ced341/lib/chai/utils/addChainableMethod.js\">링크</a>를 참조하라.</p>\n<p>아래 코드에 <code class=\"tui-language-text\">lengthOf</code> 어설션에 대한 로직이 있다.\n<code class=\"tui-language-text\">lengthOf</code>는 객체가 어떤 <code class=\"tui-language-text\">length</code> 값을 가졌는지 검사한다.\n우리는 사용자들이 <code class=\"tui-language-text\">expect([&#39;foo&#39;, &#39;bar&#39;]).to.have.lengthOf(2)</code>와 같이 사용하기를 기대한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">assertLength</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">,</span> ssfi <span class=\"token operator\">=</span> <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ssfi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Pay close attention to this line</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Assertion</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> ssfi<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This line is also relevant</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>\n            len <span class=\"token operator\">==</span> n\n        <span class=\"token punctuation\">,</span> <span class=\"token string\">'expected #{this} to have a length of #{exp} but got #{act}'</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token string\">'expected #{this} to not have a length of #{act}'</span>\n        <span class=\"token punctuation\">,</span> n\n        <span class=\"token punctuation\">,</span> len\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nAssertion<span class=\"token punctuation\">.</span><span class=\"token function\">addChainableMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lengthOf'</span><span class=\"token punctuation\">,</span> assertLength<span class=\"token punctuation\">,</span> assertLengthChain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에 코드에서 우리와 관련된 행을 강조했다.\n<code class=\"tui-language-text\">this.assert</code>를 호출해 보자.</p>\n<p>다음 코드는 <code class=\"tui-language-text\">this.assert</code> 메서드를 구현한 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token class-name\">Assertion</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">assert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">expr<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> negateMsg<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">,</span> _actual<span class=\"token punctuation\">,</span> showDiff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> ok <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">!==</span> showDiff<span class=\"token punctuation\">)</span> showDiff <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> expected <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> _actual<span class=\"token punctuation\">)</span> showDiff <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">!==</span> config<span class=\"token punctuation\">.</span>showDiff<span class=\"token punctuation\">)</span> showDiff <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        msg <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> actual <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getActual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// This is the relevant line for us</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                actual<span class=\"token operator\">:</span> actual\n            <span class=\"token punctuation\">,</span> expected<span class=\"token operator\">:</span> expected\n            <span class=\"token punctuation\">,</span> showDiff<span class=\"token operator\">:</span> showDiff\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>includeStack<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>assert <span class=\"token operator\">:</span> <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ssfi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본적으로, <code class=\"tui-language-text\">assert</code> 메서드는 어설션이 boolean 표현식을 통과했는지 아닌지 여부를 확인한다.\n통과하지 못한다면 <code class=\"tui-language-text\">AssertionError</code> 생성자를 인스턴스화 해야 한다.\n새로운 <code class=\"tui-language-text\">AssertionError</code>를 인스턴스화 할 때 스택 트레이스 함수(<code class=\"tui-language-text\">ssfi</code>)를 넘기는 것에 주목하라.\n만약 설정 플래그 값인 <code class=\"tui-language-text\">includeStack</code> 값이 <code class=\"tui-language-text\">true</code>를 반환한다면, <code class=\"tui-language-text\">this.assert</code> 자체를 스택에 전달하여 전체 스택 트레이스를 표시한다.\n이것은 실제로 스택의 마지막 프레임에 해당된다.\n그러나 <code class=\"tui-language-text\">includeStack</code> 설정 플래그 값이 <code class=\"tui-language-text\">false</code>를 반한하면 스택 트레이스의 내부 구현 내용을 숨겨야 한다.\n그래서 <code class=\"tui-language-text\">ssfi</code> 플래그에 저장된 값을 사용한다.</p>\n<p>지금부터 우리와 관련된 다른 줄에 대해서 이야기해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Assertion</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> ssfi<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드에서 중첩 어설션을 생성할 때 <code class=\"tui-language-text\">ssfi</code> 플래그에서 가져온 내용을 넘긴다.\n즉, 새 어설션이 만들어지면 이 함수를 스택 트레이스에서 불필요한 프레임을 제거하기 위한 시작점으로 사용한다.\n다음은 <code class=\"tui-language-text\">Assertion</code> 생성자이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Assertion</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> ssfi<span class=\"token punctuation\">,</span> lockSsfi</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This is the line that matters to us</span>\n    <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ssfi'</span><span class=\"token punctuation\">,</span> ssfi <span class=\"token operator\">||</span> Assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lockSsfi'</span><span class=\"token punctuation\">,</span> lockSsfi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">proxify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">addChainableMethod</code>에 대해 말한 것을 기억할 수 있을 것이다.\n이 메서드는 <code class=\"tui-language-text\">ssfi</code> 플래그 값을 자체 래퍼 메서드로 설정한다.\n스택 트레이스에서 가장 낮은 내부 프레임으로써 위에 있는 모든 프레임을 제거할 수 있다.</p>\n<p>객체가 <code class=\"tui-language-text\">length</code> 프로퍼티를 가지는지 검사하는 중첩 어설션에 <code class=\"tui-language-text\">ssfi</code>를 던지면 프레임을 다시 설정하지 않아 시작점 표시기로 사용하고, 이전 <code class=\"tui-language-text\">addChainableMethod</code>을 스택에 표시할 수 있다.</p>\n<p>이것은 조금 복잡해 보일수도 있다.\nChai 내부에서 어떤 일이 일어나는지 리뷰해보고 스택에서 불필요한 프레임을 제거해보자.</p>\n<ol>\n<li>어설션을 실행시킬 때 스택에서 다음 프레임을 제거하기 위한 참조로써 <code class=\"tui-language-text\">addChainableMethod</code> 메서드를 세팅할 수 있다.</li>\n<li>어설션이 실행되고 만약에 실패하면 저장하고 있는 참조 이후의 모든 내부 프레임을 제거한다.</li>\n<li>만약에 중첩 어설션이 있다면, 스택의 다음 프레임을 제거하기 위한 참조 지점으로 래퍼 메서드를 계속 사용해야 한다.\n그래서 현재 <code class=\"tui-language-text\">ssfi</code>를 생성 중인 어설션에 넘겨 보존할 수 있다.</li>\n</ol>\n<p>이 내용을 이해하기 위해서 <a href=\"https://github.com/chaijs/chai/pull/922/files#r100704209\">@meeber의 코멘트</a>를 읽어보길 추천한다.</p>","frontmatter":{"id":"ko_20170306","title":"자바스크립트 에러와 스택 트레이스 심화","description":"이번 시간에는 에러와 스택 트레이스를 조작하는 방법에 대해 이야기하려 한다. 때때로 사람들은 이런 세부 사항에 대해 신경쓰지 않지만, 테스트나 에러와 관련된 어떤 라이브러리를 작성하려고 할 때 이 지식들은 굉장히 유용할 것이다.","date":"2017.03.06","author":"류선임","tags":["ecmascript","etc"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170306","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}