{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170630","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트-함수-1---함수-객체-함수-객체-생성\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%95%A8%EC%88%98-1---%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4-%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"자바스크립트 함수 1   함수 객체 함수 객체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 함수 (1) - 함수 객체, 함수 객체 생성</h1>\n<p>자바스크립트로 유명한 개발자 Douglas Crockford의 말을 빌리면, 자바스크립트는 <a href=\"http://javascript.crockford.com/javascript.html\">지구에서 가장 오해하고 있는 프로그래밍 언어</a>다. 물론 지금 글을 작성하는 2017년에는 그 오해가 많이 풀리긴 했지만, 여전히 자바스크립트는 계속 진화하고 있고, 그 변화를 자세히 알고 있는 사람은 드물다.</p>\n<p>자바스크립트에서 특히 잘 모르거나, 오해하고 있는 부분은 바로 함수라고 생각한다. 사실 함수는 ECMAScript가 발표되고 ECMAScript 5가 될 때까지 거의 변화가 없었다. 꾸준히 암묵적인 버그와 미묘한 동작으로 우리를 혼란스럽게 만들었다. 때론 간단하게 생각했던 동작이 오히려 더 많은 코드를 요구하기도 했다.</p>\n<p>하지만 ECMAScript 6부터 자바스크립트의 함수는 기존 개발자들의 요구나 불만을 받아들이고 크게 발전하고 있다.</p>\n<h2 id=\"함수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98\" aria-label=\"함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수</h2>\n<p>함수는 자바스크립트뿐만 아니라 대부분의 프로그래밍 언어에서 핵심이다. 그리고 자바스크립트의 함수는 조금 더 강력하다.</p>\n<p>우선 ES5 기준으로 함수를 생각해보자. 함수는 객체처럼, 함수처럼, 객체 지향의 생성자처럼 동작하며, 함수에 붙어있는 프로토타입이라는 객체를 통해 공통되는 동작들을 공유했다. 함수를 만들어내는 다양한 문법 - 함수 생성자, 함수 표현식, 함수 선언식 등이 존재하고, 함수 자체로 스코프를 정의한다. 함수의 몸체에서 <code class=\"tui-language-text\">this</code>의 참조는 동적으로 결정된다. <code class=\"tui-language-text\">arguments</code>의 참조 또한 <code class=\"tui-language-text\">this</code>처럼 동적이고 예약어처럼 사용된다. 기존의 암묵적인 버그나 에러를 유발하던 문제를 해결하기 위해 <code class=\"tui-language-text\">&quot;use strict&quot;;</code>가 있으며, 함수는 <code class=\"tui-language-text\">strict code</code> 또는 <code class=\"tui-language-text\">non-strict code</code>를 구분한다. 언어적 특성과 맞물려 클로저나 고차 함수를 활용한 여러 기법이 존재한다.</p>\n<p>결론적으로 <code class=\"tui-language-text\">&quot;자바스크립트의 함수는 그냥 객체 지향도 가능한 일급 함수다.&quot;</code>라고 1줄 요약을 할 수 있겠다.</p>\n<p>좋게 생각하면 함수는 여러 기능과 기법을 활용할 수 있도록 잘 디자인된 객체라고 할 수 있지만, 나쁘게 생각하면 함수는 <strong>너무 복잡하고 뭔가 막 뭐가 참 많다</strong>. 그리고 기능이 많은 만큼 의도하지 않은 동작을 하기도 한다. 그렇게 자바스크립트의 함수는 자바스크립트를 배우는데 첫 번째 장벽이 됐다.</p>\n<h3 id=\"ecmascript-6\" style=\"position:relative;\"><a href=\"#ecmascript-6\" aria-label=\"ecmascript 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript 6+</h3>\n<p>ECMAScript 6, 그리고 그 이후 명세에서 함수는 계속 강력해지고 있다. 기본값 매개변수(Default parameter), 클래스(class), 화살표 함수(Arrow function), 나머지 매개변수(Rest parameters), <code class=\"tui-language-text\">name</code> 프로퍼티, <code class=\"tui-language-text\">new.target</code>, 제너레이터 함수(Generator function), <code class=\"tui-language-text\">async</code> 함수, 꼬리 호출(Tail call), Block-Level 함수 등 이제 각 특징의 이름만 외우는 것도 힘들다.</p>\n<p>이렇게 추가되는 여러 특징으로 인해 그동안 힘겹게 이해하고 활용했던 몇몇 함수의 동작과 기법은 이제 구식이 됐다. <code class=\"tui-language-text\">Function.prototype.bind</code> 대신 화살표 함수를 사용하고, <code class=\"tui-language-text\">function</code>으로 선언하던 클래스를 이제 정말 <code class=\"tui-language-text\">class</code>로 선언하고, ES6의 <code class=\"tui-language-text\">Promise.prototype.then</code> 체이닝 대신 <code class=\"tui-language-text\">async/await</code>을 사용하고, <code class=\"tui-language-text\">Generator</code>객체와 Runner 함수를 활용해 취소 가능한 비동기 동작을 구현할 수 있으며, 비동기 동작/함수를 동기적으로 테스트를(예를 들어 Redux-Saga의 테스트) 할 수도 있다.</p>\n<h3 id=\"그래서-뭐\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%90\" aria-label=\"그래서 뭐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 뭐..?</h3>\n<p>그동안 이해했던 함수는 ES3 혹은 ES5에 머물러 있는데, 지금 ES6+의 함수를 사용한다. 이리저리 똑똑 두들겨 보며 개발하면 동작은 하지만, 왜 돌아가는지, 왜 안 돌아가는지, 왜 빠른지, 왜 편리한지, 제대로 설명 할 수 없을지 모른다.</p>\n<p>자, 이제 이렇게 진화한 함수가 어떻게 동작하는지 다시 하나씩 차근차근 알아보자.</p>\n<h2 id=\"함수-객체\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4\" aria-label=\"함수 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 객체</h2>\n<p>ECMAScript에서 함수 객체란 서브루틴(Subroutine)으로 수행될 수 있는 객체를 말한다. 동작을 나타내는 실행 코드와 상태를 포함하고 있으며 객체 지향의 생성자 역할도 할 수 있있다. 그리고 기본적으로 자바스크립트의 일반적인 객체(<a href=\"https://www.ecma-international.org/ecma-262/8.0/#sec-ordinary-object\">Ordinary object</a>)와 동일한 동작을 할 수 있다(정확히는 Ordinary object의 <a href=\"https://www.ecma-international.org/ecma-262/8.0/#sec-ordinary-object-internal-methods-and-internal-slots\">Internal slot과 Interal method</a>를 모두 가지고 있다).</p>\n<p>즉, <strong>ECMAScript 함수는 일반 객체의 확장이며, 함수로 동작하기 위한 추가적인 기능을 가지고 있다.</strong></p>\n<p>함수 객체는 다음과 같은 데이터들을 내부에 추가로 저장한다.</p>\n<ol>\n<li>클로저로 묶이는 렉시컬 환경(Lexical Environment) - <code class=\"tui-language-text\">[[Environment]]</code></li>\n<li>함수 코드 - <code class=\"tui-language-text\">[[ECMAScriptCode]]</code></li>\n<li>함수 종류 - <code class=\"tui-language-text\">[[FunctionKind]]</code>: \"normal\", \"classConstructor\", \"generator\", \"async\"</li>\n<li>생성자 종류 - <code class=\"tui-language-text\">[[ConstructorKind]]</code>: \"base\", \"derived\"</li>\n<li><code class=\"tui-language-text\">this</code> 참조 형태 - <code class=\"tui-language-text\">[[ThisMode]]</code></li>\n<li>strict mode 여부 - <code class=\"tui-language-text\">[[Strict]]</code></li>\n<li><code class=\"tui-language-text\">super</code> 참조 - <code class=\"tui-language-text\">[[HomeObject]]</code></li>\n<li>기타 등등</li>\n</ol>\n<p>그리고 실제로 함수를 실행시켜주는 <code class=\"tui-language-text\">[[Call]]</code>, <code class=\"tui-language-text\">[[Construct]]</code> 내부 메서드가 있다. 단순하게 함수를 호출하면 함수 객체 내부의 <code class=\"tui-language-text\">[[Call]]</code>이 호출되고, <code class=\"tui-language-text\">new</code> 또는 <code class=\"tui-language-text\">super</code> 연산자와 함께 호출하면 <code class=\"tui-language-text\">[[Construct]]</code>가 호출된다.</p>\n<p><code class=\"tui-language-text\">[[Call]]</code>이 구현된 객체를 <code class=\"tui-language-text\">callable</code>이라 부르고, <code class=\"tui-language-text\">[[Construct]]</code>가 구현된 객체를 <code class=\"tui-language-text\">constructor</code>라 부르는데, 자바스크립트의 함수는 <code class=\"tui-language-text\">callable</code>이면서 <code class=\"tui-language-text\">constructor</code>일 수도 있고 아닐 수도 있다. 대표적으로 화살표 함수는 <code class=\"tui-language-text\">callable</code>이면서 <code class=\"tui-language-text\">non-constructor</code>이다.</p>\n<h2 id=\"함수-생성\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1\" aria-label=\"함수 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 생성</h2>\n<p>자바스크립트는 함수를 생성할 때 기본적으로 6가지의 정보를 사용한다.</p>\n<ol>\n<li>함수 생성 방식(종류) - <code class=\"tui-language-text\">Normal</code>, <code class=\"tui-language-text\">Arrow</code>, <code class=\"tui-language-text\">Method</code></li>\n<li>함수의 매개변수 리스트</li>\n<li>함수 몸체 (함수 코드)</li>\n<li>스코프 (Lexical Environment)</li>\n<li>strict mode 여부</li>\n<li>함수 객체의 프로토타입 - FunctionPrototype, Generator, AsyncFunctionPrototype 등과 같은 객체들로 사용</li>\n</ol>\n<p>다음 <code class=\"tui-language-text\">bar</code> 함수를 생성하는 경우를 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// bar 함수의 스코프는 foo의 Lexical Environment</span>\n\n  <span class=\"token comment\">// bar는 일반적인 함수 선언식 - 함수 생성 방식은 Normal, 프로토타입은 Function.prototype</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 매개변수 리스트 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar는 strict function</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수의 몸체</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ECMAScript는 이런 정보를 기반으로 함수를 생성한다.</p>\n<ol>\n<li>함수 생성 방식을 통해 생성자가 될 수 있는지를 판단하고,</li>\n<li><code class=\"tui-language-text\">strict</code> 여부와 실제 함수 객체의 종류(일반 함수(Function)인지, 제너레이터 함수인지, async 함수인지)를 구분하여 저장한다.</li>\n<li>\n<p>함수 객체의 프로토타입(FunctionPrototype, Generator, AsyncFunctionPrototype 등)을 저장한다.</p>\n<ul>\n<li>여기에서의 프로토타입은 bind, apply, call 등과 같은 메서드를 가지고 있는 함수 자체의 프로토타입이다.</li>\n</ul>\n</li>\n<li>그리고 마지막으로 Environment(스코프), 파라미터, 함수 몸체, <code class=\"tui-language-text\">this</code> 참조 방식 등의 정보를 저장한다.</li>\n</ol>\n<p>이때 함수를 구분하는 방식에서 조금 혼란이 있을 수도 있다. 함수를 생성할때 함수 생성 방식과 함수 자체의 종류 두 가지를 사용한다. 함수 자체의 종류는 앞서 언급한 <code class=\"tui-language-text\">[[FunctionKind]]</code>와 같으며, 함수 생성 방식은 생성 시에만 구분하여 사용하고 따로 저장하지는 않는다.</p>\n<h3 id=\"함수-생성-방식\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D\" aria-label=\"함수 생성 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 생성 방식</h3>\n<p>함수 생성 방식은 ES5와 ES6를 기준으로 생각하면 쉽다. ES5까지의 함수 표현(<code class=\"tui-language-text\">function</code> 키워드 사용)은 모두 <code class=\"tui-language-text\">Normal</code>이고, ES6의 화살표 함수는 <code class=\"tui-language-text\">Arrow</code>, 객체 리터럴에서 메서드 문법은 <code class=\"tui-language-text\">Method</code>가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Normal</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Arrow</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Method</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수 생성을 구분하는 이유는 <code class=\"tui-language-text\">Arrow</code>나 <code class=\"tui-language-text\">Method</code>인 경우 생성자로 동작하지 못하도록 방지( - <code class=\"tui-language-text\">[[Construct]]</code> 메서드를 구현하지 않고)하고, 함수의 <code class=\"tui-language-text\">this</code> 참조 방식을 결정하기 위해서다( - <code class=\"tui-language-text\">Arrow</code>인 경우 <code class=\"tui-language-text\">this</code> 키워드는 lexical 참조).</p>\n<p>기존의 ES5까지는 함수가 생성자 혹은 일반 함수 두 경우로 모두 호출 가능하였으나, ES6부터 이런 혼란을 줄이고자 구분하기 시작했다.</p>\n<p><strong>즉, ECMAScript 6 이후 함수를 어떻게 생성하는가에 따라 생성자로 쓰일 수 있는지 없는지가 결정되며, 이는 함수 생성 시 <code class=\"tui-language-text\">함수 할당(FunctionAllocate)</code>이라 부르는 단계에서 결정한다.</strong></p>\n<p>주의할 점은 <a href=\"https://babeljs.io/\">Babel</a>과 같은 트랜스파일러를 사용하는 경우, ECMAScript 명세와 다르게 동작할 수 있다. 예를 들어 화살표 함수는 <code class=\"tui-language-text\">[[Construct]]</code> 메서드가 없기 때문에 생성자로 사용할 경우 에러가 발생해야 하지만 트랜스파일링이 수행됐다면 에러가 발생하지 않을 수 있다.</p>\n<p>다음 코드를 크롬의 개발자도구에서 실행해 보자. 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: Foo is not a constructor</span></code></pre></div>\n<p>하지만 Babel로 변환된 코드를 보면 아래와 같다. 에러가 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>메서드 문법도 마찬가지로 생성자로 사용할 경우 에러가 발생해야 하지만 트랜스파일링으로 변환된 코드는 에러가 발생하지 않을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: obj.Foo is not a constructor</span></code></pre></div>\n<p>다음은 변환된 코드이다. 에러가 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">Foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>변환된 코드는 <code class=\"tui-language-text\">Normal</code> 함수로 처리하기 때문에 에러가 발생하지 않는다. 사실 화살표 함수나 메서드 문법으로 생성자를 정의하고 사용하는 경우는 거의 없겠지만, 혹시라도 이런 코드는 작성하지 않도록 주의해야 한다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 자바스크립트에서 함수를 표현하면 내부적으로 함수 객체를 어떻게 만드는지 대략 알아보았다.</p>\n<ol>\n<li>함수는 일반 객체를 특별하게 확장한 객체이다.</li>\n<li>함수를 생성할 때 생성자로 사용할 수 있는지 아닌지를 결정한다.</li>\n<li>우리가 흔히 사용하는 트랜스파일러는 ECMAScript의 에러를 모두 표현하지는 못하므로 주의해야 한다.</li>\n<li>함수가 생성될 때 여러 내부 데이터들을 저장하는데, 여기에는 함수의 스코프나, this 참조 방식 등 함수의 동작 방식을 이해하는데 중요한 여러 데이터가 있다.</li>\n</ol>\n<p>사실은 ES6부터 바뀐 <code class=\"tui-language-text\">this</code> 참조 방식을 알아보려고 ECMAScript 명세를 보기 시작했는데, 생각보다 바뀐 점들이 정말 많았다. 특히 함수 생성 부분부터 많은 변화가 있었기 때문에 다시 처음부터 공부한다고 생각하고 이 글을 작성하게 되었다. 이제 함수가 실제로 어떻게 동작하는지, <code class=\"tui-language-text\">this</code>는 어떻게 참조하는지, 생성자 함수로 호출될 때 <code class=\"tui-language-text\">super</code>는 어떻게 참조하는지 등의 기본적인 동작들을 더 자세히 알아보고 이 글을 꾸준히 이어가려 한다. 자바스크립트를 배우거나 다른 사람에게 설명할 때 조금이라도 더 도움이 되길 바라며 이번 글을 마친다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.ecma-international.org/ecma-262/8.0/index.html\">ECMAScript edition 8.0</a></li>\n</ul>","frontmatter":{"id":"ko_20170630","title":"자바스크립트 함수 (1) - 함수 객체, 함수 객체 생성","description":"자바스크립트로 유명한 개발자 Douglas Crockford의 말을 빌리면, 자바스크립트는 지구에서 가장 오해하고 있는 프로그래밍 언어다. 물론 지금 글을 작성하는 2017년에는 그 오해가 많이 풀리긴 했지만, 여전히 자바스크립트는 계속 진화하고 있고, 그 변화를 자세히 알고 있는 사람은 드물다.","date":"2017.06.30","author":"이민규","tags":["ecmascript"],"thumbnail":"https://image.toast.com/aaaadh/real/2017/techblog/ecmascriptfunction_thumbnail.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170630","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}