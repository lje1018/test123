{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20160725","result":{"data":{"post":{"html":"<h1 id=\"javascript의-객체-리터럴은-멋지다\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%80-%EB%A9%8B%EC%A7%80%EB%8B%A4\" aria-label=\"javascript의 객체 리터럴은 멋지다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript의 객체 리터럴은 멋지다</h1>\n<blockquote>\n<p>저자\nDmitri Pavlutin\n원문\n<a href=\"https://rainsoft.io/why-object-literals-in-javascript-are-cool/\">https://rainsoft.io/why-object-literals-in-javascript-are-cool/</a></p>\n</blockquote>\n<p>JavaScript 에서 ECMAScript 2015 이전의 객체 리터럴(객체 초기화자)는 꽤 기본적이었다. 2가지 종류의 속성을 정의하는것이 가능했다 :</p>\n<ul>\n<li>한쌍의 프로퍼티명과 값 <code class=\"tui-language-text\">{ name1: value1 }</code></li>\n<li>계산된 속성값을 위한 접근자들 <code class=\"tui-language-text\">{ get name() {...} }</code>과 설정자들 <code class=\"tui-language-text\">{ set name() {...} }</code></li>\n</ul>\n<p>안타깝지만 객체리터럴의 실현성은 다음 예제로 설명 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  myString<span class=\"token operator\">:</span> <span class=\"token string\">'value 1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">myNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_myNumber<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">myNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_myNumber <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span>myString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'value 1'  </span>\nmyObject<span class=\"token punctuation\">.</span>myNumber <span class=\"token operator\">=</span> <span class=\"token string\">'15'</span><span class=\"token punctuation\">;</span>  \nmyObject<span class=\"token punctuation\">.</span>myNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 15  </span></code></pre></div>\n<p>자바스크립트는 프로토타입 기반의 언어이며, 모든 것이 다 객체이다. 이런 언어에서는 객체 생성, 프로토타입 접근, 프로토타입 설정을 편하게 할 수 있다.</p>\n<p>객체를 정의하는 것과 프로토타입을 설정 하는 일은 똑같은 작업이다. 그래서 프로토타입도 한 문장의 객체 리터럴 안에서 설정할 수 있어야 한다고 생각한다.</p>\n<p>공교롭게도 객체 리터럴은 그런 면에서 간단하고 깔끔한 해결책이 될 수 없다. 그래서 <code class=\"tui-language-text\">Object.create()</code>와 리터럴을 조합하여 프로토타입을 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> myProto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function-variable function\">propertyExists</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myNumbers <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>myProto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nmyNumbers<span class=\"token punctuation\">[</span><span class=\"token string\">'array'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \nmyNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">propertyExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// => true  </span>\nmyNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">propertyExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'collection'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false  </span></code></pre></div>\n<p>이 해결책은 불편하기 그지없다. 자바스크립트는 프로토타입 기반의 언어인데, 왜 프로토타입을 이용해서 객체를 만들 때 이런 귀찮은 일들을 해야 하는 걸까?</p>\n<p>그래도 언어가 변화하고 있어서 비슷한 자바스크립트의 어려움들이 하나씩 해결되고 있다.</p>\n<p>이 글에서는 위에 언급된 문제들을 ES2015가 해결했는지, 객체 리터럴을 개선하기 위해 어떤 것들이 추가되었는지 보여줄 것이다.</p>\n<ul>\n<li>프로토타입을 객체 생성할때 설정하기</li>\n<li>축약 메소드 선언</li>\n<li>상위 호출하기</li>\n<li>계산된 속성이름</li>\n</ul>\n<p>그리고 앞으로는 어떻게 변화할 것인지, 새로운 제안은 어떤 것들이 있는지 볼 것이다.</p>\n<h3 id=\"1-프로토타입을-객체-생성할때-설정하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%ED%95%A0%EB%95%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"1 프로토타입을 객체 생성할때 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로토타입을 객체 생성할때 설정하기</h3>\n<p>이미 알고 있듯이 존재하는 객체의 프로토타입에 접근하기 위한 옵션으로 게터 속성 <code class=\"tui-language-text\">__proto__</code>가 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// => {}  </span>\nmyObject<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true  </span></code></pre></div>\n<p><code class=\"tui-language-text\">myObject.__proto__</code>는 객체 <code class=\"tui-language-text\">myObject</code>의 프로토타입을 반환한다.</p>\n<p>좋은 점은 ES2015에서 <code class=\"tui-language-text\">__proto__</code>를 리터럴로 생성하는 객체 내부에서 속성 이름으로 <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-__proto__-property-names-in-object-initializers\">사용할 수 있다</a> 는 것이다. <code class=\"tui-language-text\">{ __proto__: protoObject }</code></p>\n<p><code class=\"tui-language-text\">__proto__</code>를 객체 초기화 단계에서 사용한다면, 처음에 보여주었던 방법보다는 조금 나은 해결책이 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> myProto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function-variable function\">propertyExists</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  __proto__<span class=\"token operator\">:</span> myProto<span class=\"token punctuation\">,</span>\n  array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">propertyExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// => true  </span>\nmyNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">propertyExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'collection'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false  </span></code></pre></div>\n<p><code class=\"tui-language-text\">myNumbers</code>객체는 프로토타입 객체인 <code class=\"tui-language-text\">myProto</code>를 속성이름 <code class=\"tui-language-text\">__proto__</code>에 초기화 하여 생성했다.\n이 객체는 한 문장으로 바꿀 수 있는데, 바로 <code class=\"tui-language-text\">Object.create()</code>이다.</p>\n<p>보시다시피 <code class=\"tui-language-text\">__proto__</code>를 이용하는것은 간단하다.</p>\n<p>잠깐 다른 이야기를 하자면, 나는 단순하고 유연한 해결책이 많은 노력과 설계를 필요로 하는데에 의문점이 든다.\n만약 해결책이 간단하다면 설계하기 쉽다고 생각이 되고, 설계하기 쉬운 것이 간단한 해결책이라고 생각되기 때문이다:</p>\n<ul>\n<li>단순하고 간단하게 만들기는 어렵다</li>\n<li>복잡하고 이해하기 어렵게 만드는 것은 쉽다</li>\n</ul>\n<p>만약 어떤 것이 너무 복잡하게 보이거나 사용하기 어렵다면, 아마 충분한 고민을 통하지 않았을 것이다.</p>\n<p>단순함에 대한 여러분의 의견은 어떤가? (자유롭게 댓글로 적어보세요)</p>\n<h3 id=\"21-특별한-경우의-__proto__-사용\" style=\"position:relative;\"><a href=\"#21-%ED%8A%B9%EB%B3%84%ED%95%9C-%EA%B2%BD%EC%9A%B0%EC%9D%98-__proto__-%EC%82%AC%EC%9A%A9\" aria-label=\"21 특별한 경우의 __proto__ 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 특별한 경우의 <code class=\"tui-language-text\">__proto__</code> 사용</h3>\n<p><code class=\"tui-language-text\">__proto__</code>를 쓰는 것은 간단하지만, 조심해서 사용해야 하는 몇 가지 경우가 있다.\n<code class=\"tui-language-text\">__proto__</code>는 객체 리터럴에서 한 번만 사용 되어야 한다. 만약 두 번 이상 사용된다면 자바스크립트는 에러를 반환할것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  __proto__<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'[object Numbers]'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  numbers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  __proto__<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'[object ArrayOfNumbers]'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예제의 객체 리터럴에서 <code class=\"tui-language-text\">__proto__</code>는 두번 사용되었다. 이런 경우 <code class=\"tui-language-text\">SyntaxError: Duplicate __proto__ fields are not allowed in object literals</code>가 반환될 것이다.</p>\n<p>자바스크립트는 <code class=\"tui-language-text\">__proto__</code>에 객체 혹은 <code class=\"tui-language-text\">null</code>할당만 허용한다. 원시형 변수나 <code class=\"tui-language-text\">undefined</code>를 할당하려는 시도는 그대로 무시된다.</p>\n<p>다음의 예제를 보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> objUndefined <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  __proto__<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>objUndefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => {}  </span>\n<span class=\"token keyword\">var</span> objNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  __proto__<span class=\"token operator\">:</span> <span class=\"token number\">15</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>objNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// => {}</span></code></pre></div>\n<p>위의 객체 리터럴에서는 15와 <code class=\"tui-language-text\">undefined</code>를 <code class=\"tui-language-text\">__proto__</code>에 값으로 할당하려고 했다.\n객체 혹은 <code class=\"tui-language-text\">null</code>만 프로토타입이 될 수 있고 <code class=\"tui-language-text\">objectUndefined</code>, <code class=\"tui-language-text\">objectNumber</code>는 여전히 각자의 기본 프로토타입을 가지고 있다(기본 자바스크립트 객체 <code class=\"tui-language-text\">{}</code>).</p>\n<h3 id=\"2-축약-메소드-정의-shorthand-method-definition\" style=\"position:relative;\"><a href=\"#2-%EC%B6%95%EC%95%BD-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%A0%95%EC%9D%98-shorthand-method-definition\" aria-label=\"2 축약 메소드 정의 shorthand method definition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 축약 메소드 정의 (Shorthand method definition)</h3>\n<p>짧은 문법으로 객체 내부에서 함수를 선언하는 것이 가능하다. 마치 <code class=\"tui-language-text\">function</code> 키워드와  <code class=\"tui-language-text\">:</code> 를 빼고 말이다. 이를 축약 메소드 정의 라고 한다.</p>\n<p>한번 메소드를 축약 정의해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> collection <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  items<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncollection<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \ncollection<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \ncollection<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 15  </span></code></pre></div>\n<p><code class=\"tui-language-text\">add()</code> 와 <code class=\"tui-language-text\">get()</code> 메소드는 <code class=\"tui-language-text\">collection</code> 객체 내부에 축약형으로 정의되었다.</p>\n<p>이 방법은 디버깅에 유용하다는게 장점이다. 또한 <code class=\"tui-language-text\">collection.add.name</code>를 실행하면 <code class=\"tui-language-text\">&#39;add&#39;</code>를 반환한다.</p>\n<h3 id=\"3-상위-호출-하기\" style=\"position:relative;\"><a href=\"#3-%EC%83%81%EC%9C%84-%ED%98%B8%EC%B6%9C-%ED%95%98%EA%B8%B0\" aria-label=\"3 상위 호출 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 상위 호출 하기</h3>\n<p>재미있는 개선점 중 하나는 <code class=\"tui-language-text\">super</code> 키워드의 사용해서 프로토타입 체인을 통해 속성을 상속받을 수 있다는 점이다. 한번 예제를 통해 확인해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> calc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">sumArray</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  __proto__<span class=\"token operator\">:</span> calc<span class=\"token punctuation\">,</span>\n  numbers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">sumElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sumArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">sumElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 17  </span></code></pre></div>\n<p><code class=\"tui-language-text\">calc</code>는 <code class=\"tui-language-text\">numbers</code>객체의 프로토타입이다. 객체 <code class=\"tui-language-text\">numbers</code>의 메소드 <code class=\"tui-language-text\">sumElements</code>에서는 <code class=\"tui-language-text\">super</code>키워드를 통해 상위 메소드에 접근 가능하다.</p>\n<p>결국 <code class=\"tui-language-text\">super</code>는 프로토타입 체인 오브젝트로 상속받은 속성에 접근하는 지름길(shortcut)이다.\n이전의 예제에서는 프로토타입에서 직접 <code class=\"tui-language-text\">calc.sumArray()</code>를 호출해서 사용했다. 하지만 프로토타입 체인의 객체에 접근하기 때문에 <code class=\"tui-language-text\">super</code>키워드를 사용하는 것이 더 좋다. 그리고 상속받은 속성이라는 뜻이 명확히 전달되기 때문에 더 그렇다.</p>\n<h3 id=\"31-super의-사용의-제한점\" style=\"position:relative;\"><a href=\"#31-super%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%A0%9C%ED%95%9C%EC%A0%90\" aria-label=\"31 super의 사용의 제한점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 <code class=\"tui-language-text\">super</code>의 사용의 제한점</h3>\n<p><code class=\"tui-language-text\">super</code>는 오직 객체 리터럴의 축약 메소드 정의 내부에서만 사용할 수 있다.</p>\n<p>만약 일반적인 메소드 정의에서 사용하려고 하면 자바스크립트는 에러를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> calc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">sumArray</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  __proto__<span class=\"token operator\">:</span> calc<span class=\"token punctuation\">,</span>\n  numbers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sumElements</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sumArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Throws SyntaxError: 'super' keyword unexpected here</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">sumElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>메소드 <code class=\"tui-language-text\">sumElements</code>는 속성으로 정의되었다. 하지만 <code class=\"tui-language-text\">super</code>는 축약 메소드 내부에서만 사용될 수 있고, 위와 같은 상황에서는 <code class=\"tui-language-text\">SyntaxError: &#39;super&#39; keyword unexpected here</code> 에러가 발생한다.</p>\n<p>이런 제한은 객체 리터럴로 선언된 객체들에는 영향을 미치지 않는다. 메소드 축약 정의를 사용하는 대부분은 더 짧은 문법을 선호하기 때문이다.</p>\n<h3 id=\"4-계산된-속성-이름\" style=\"position:relative;\"><a href=\"#4-%EA%B3%84%EC%82%B0%EB%90%9C-%EC%86%8D%EC%84%B1-%EC%9D%B4%EB%A6%84\" aria-label=\"4 계산된 속성 이름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 계산된 속성 이름</h3>\n<p>ES2015 이전의 객체 리터럴 초기화에서 속성 이름은 대부분 고정된 문자열이었다. 속성 이름을 계산된 이름으로 사용하려면, 속성 접근자를 사용해야 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prefStr<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n   <span class=\"token keyword\">return</span> prefStr <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \nobject<span class=\"token punctuation\">[</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>  \nobject<span class=\"token punctuation\">[</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bool'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \nobject<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { number_pi: 3.14, bool_false: false }  </span></code></pre></div>\n<p>확실히 이 방법으로 속성을 정의하는 것은 기분이 썩 좋지 않다.</p>\n<p>계산된 속성명은 문제를 우아하게 해결할 수 있다.\n만약 속성명이 평가될 때 대괄호로 속성명 표현식을 감싼다면 표현식의 평가된 후 속성명이 된다.<code class=\"tui-language-text\">{[expression]: value}</code></p>\n<p>위의 예제를 개선해보자: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prefStr<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n   <span class=\"token keyword\">return</span> prefStr <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token punctuation\">[</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bool'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobject<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { number_pi: 3.14, bool_false: false }  </span></code></pre></div>\n<p><code class=\"tui-language-text\">[prefix(&#39;number&#39;, &#39;pi&#39;)]</code> 는 속성명을 <code class=\"tui-language-text\">prefix(&#39;number&#39;, &#39;pi&#39;)</code>의 수행결과로 저장한다. 결과는 <code class=\"tui-language-text\">&#39;number_pi&#39;</code>가 된다.\n마찬가지로 <code class=\"tui-language-text\">[prefix(&#39;bool&#39;, &#39;false&#39;)]</code>의 결과 는 <code class=\"tui-language-text\">&#39;bool_false&#39;</code>가 된다.</p>\n<h3 id=\"41-symbol을-속성명으로-사용하기\" style=\"position:relative;\"><a href=\"#41-symbol%EC%9D%84-%EC%86%8D%EC%84%B1%EB%AA%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"41 symbol을 속성명으로 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 Symbol을 속성명으로 사용하기</h3>\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a>또한 속성명으로 계산되어 사용될 수 있다. 위와 마찬가지로 대괄호로 감싸기만 하면 된다: <code class=\"tui-language-text\">{ [Symbol(&#39;name&#39;)]: &#39;Prop value&#39; }.</code></p>\n<p>예를 들어 특수한 속성인 Symbol.iterator로 객체 자신의 속성명들을 순회하는 경우를 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n   number1<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n   number2<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n   string1<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n   string2<span class=\"token operator\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">var</span> own <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       prop<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>prop <span class=\"token operator\">=</span> own<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">yield</span> prop<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ['number1', 'number2', 'string1', 'string2']</span></code></pre></div>\n<p><code class=\"tui-language-text\">[Symbol.iterator]: function *() { }</code>는 속성을 정의하는데 객체 자신의 속성들을 순회한다.\n펼침 연산자 <code class=\"tui-language-text\">[...object]</code>는 자신의 속성들을 리스트로 반환하는데 쓰인다.</p>\n<h3 id=\"5-앞으로는-rest와-spread속성\" style=\"position:relative;\"><a href=\"#5-%EC%95%9E%EC%9C%BC%EB%A1%9C%EB%8A%94-rest%EC%99%80-spread%EC%86%8D%EC%84%B1\" aria-label=\"5 앞으로는 rest와 spread속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 앞으로는? rest와 spread속성</h3>\n<p>객체 리터럴에서의 <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread\">Rest와 Spread 속성</a>은 현재 제안 단계중 초안 상태(stage 2)이다. 아마도 새로운 자바스크립트 버전에 포함될 가능성이 있는 단계이다.</p>\n<p>두 속성은 이미 ES2015의 배열에서는 사용 가능하다.</p>\n<p><a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread/blob/master/Rest.md\">Rest 속성</a>은 한 객체에서 속성들을 가져와 destructuring 할당하는 것을 가능하게 해준다.\n다음 예제를 보면 object가 destructuing되어도 프로퍼티들이 남아있는 것을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  \n  propA<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  propB<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  propC<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>propA<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restObject<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>  \npropA<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// => 1  </span>\nrestObject<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { propB: 2, propC: 3 }  </span></code></pre></div>\n<p><a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread/blob/master/Spread.md\">Spread 속성</a>은 객체리터럴 내부로 한 객체의 속성들을 복사하는 것을 가능하게 해준다.\n다음 예제를 보면 <code class=\"tui-language-text\">object</code>객체 리터럴에 <code class=\"tui-language-text\">source</code>객체의 속성들이 복사된 것을 알 수 있다.</p>\n<h3 id=\"6-결론\" style=\"position:relative;\"><a href=\"#6-%EA%B2%B0%EB%A1%A0\" aria-label=\"6 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 결론</h3>\n<p>자바스크립트는 큰 도약을 하고 있다.</p>\n<p>상대적으로 작은 부분인 객체 리터럴도 ES2015에서 개선되도록 고려되었다. 그리고 한 무더기의 새로운 기능들이 제안 되고 있다.</p>\n<p>여러분은 객체 프로토타입을 초기화 단계에서 <code class=\"tui-language-text\">__proto__</code>속성명으로 설정할 수 있다. 이것은 Object.create()보다 훨씬 쉬운 방법이다.</p>\n<p>메소드 선언은 더 짧아지고, <code class=\"tui-language-text\">function</code> 키워드를 직접 작성할 필요도 없다. 그리고 그 내부에서 <code class=\"tui-language-text\">super</code>키워드를 사용해서 프로토타입 체인을 통해 상속받은 속성에 쉽게 접근할 수도 있다.</p>\n<p>만약 속성명이 실행 시점에 계산되어야 한다면 대괄호를 이용해서 표현식을 감싸서 <code class=\"tui-language-text\">[표현식]</code> 이런 형태로 객체를 초기화할 수 있다.</p>\n<p>그러므로, 지금의 객체 리터럴은 멋지다!</p>","frontmatter":{"id":"ko_20160725","title":"JavaScript의 객체 리터럴은 멋지다","description":"자바스크립트는 프로토타입 기반의 언어이며, 모든 것이 다 객체이다. 이런 언어에서는 객체 생성, 프로토타입 접근, 프로토타입 설정을 편하게 할 수 있다. 객체를 정의하는 것과 프로토타입을 설정 하는 일은 똑같은 작업이다. 그래서 프로토타입도 한 문장의 객체 리터럴 안에서 설정할 수 있어야 한다고 생각한다. 공교롭게도 객체 리터럴은 그런 면에서 간단하고 깔끔한 해결책이 될 수 없다. 그래서 'Object.create()'와 리터럴을 조합하여 프로토타입을 설정할 수 있다.","date":"2016.07.25","author":"박정환","tags":["ecmascript"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20160725","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}