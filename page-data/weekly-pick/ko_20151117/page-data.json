{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20151117","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트의-함수형-프로그래밍-컨셉\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%BB%A8%EC%85%89\" aria-label=\"자바스크립트의 함수형 프로그래밍 컨셉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 함수형 프로그래밍 컨셉</h1>\n<blockquote>\n<p>원문<br>\nThomas Collardeau, <a href=\"https://medium.com/@collardeau/intro-to-functional-programming-concepts-in-javascript-b0650773139c\">https://medium.com/@collardeau/intro-to-functional-programming-concepts-in-javascript-b0650773139c</a></p>\n</blockquote>\n<br>\n<p>대부분의 함수형 프로그래밍은 보통 함수들을 조립하고, 데이터들을 예측하기 쉽게 다루는 그런 것들을 의미한다.</p>\n<p>간단한 함수들이 깔끔하게 합쳐지면서 복잡도는 증가할지라도, 신뢰할 수 있는 함수를 만들어낸다.</p>\n<p>이 글은 함수형 프로그래밍 컨셉에 대한 여러 파트 중의 첫 번째 파트로, 람다(Ramda)라이브러리, <strong>composition</strong>, <strong>pointfree style</strong> 그리고 <strong>functor</strong>의 컨셉을 소개하려 한다.</p>\n<br>\n## Getting Our Feet Wet\n<p>우선 \"Doc Emmett Brown\"이라는 사람이 있다 생각하고, 우리는 이 사람의 First name의 첫 이니셜을 얻어내는 일을 할 것인데, 결과적으로 단순하게 \"E\"를 만들어내면 된다.</p>\n<p>아마 여러분은 하나의 책임만을 갖는 작은 단위의 함수에 익숙할 것이다. ES6 문법으로 구현을 시작해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">person</span> <span class=\"token operator\">=></span> person<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstLetter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// first letter</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstInitial</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">person</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">getFirstLetter</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// nested function!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// try it</span>\n<span class=\"token function\">getFirstInitial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Doc Emmett Brown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"E\"</span></code></pre></div>\n<p>메인 함수는 <code class=\"tui-language-text\">getFirstInitial</code>이다. 여기에서 <strong>functional programming</strong>(함수 반환)과 <strong>composition</strong>(중첩 함수)의 기본적인 측면을 볼 수 있다. 우리는 두 개의 작은 함수들(테스트와 디버깅이 쉬운)로 조금 더 복잡한 함수를 만들었으며, 이는 바람직한 방식이라고 확신한다. </p>\n<blockquote>\n<p>역: <br>\n본문에서 <strong>functional programming - 함수 반환</strong>에 관련하여, 다음과 같이 표현하였다: <br>\n—> <em>essential aspect of functional programming (we return a function)</em><br>\n<br>\n그러나 실제 <code class=\"tui-language-text\">getFirstInitial</code>메인 함수에서 보면 결국 중첩된 함수 호출의 결과를 반환할 뿐이지, <strong><em>함수 자체를 반환하지는 않는다.</em></strong><br>\n개인적으로 이 형태는 단순한 반환문일 뿐이지, 함수형 프로그래밍의 개념은 아니라고 생각한다.<br>\n<em>return getFirstLetter(getFirstName(person));</em></p>\n</blockquote>\n<br>\n아직 위의 중첩 함수가 그리 좋아 보이지 않는다는 것에(비록 ES6는 조금 더 괜찮게 만들 수 있지만) 동의할 것이다. 그렇지만, 이는 극히 일부분이기도 하고 일할 때 별로 볼 일도 없기도 하고, 나름 로직을 간단하게 보여주기도 한다.\n<blockquote>\n<p><em><code class=\"tui-language-text\">return getFirstLetter(getFirstName(person));</code></em></p>\n</blockquote>\n<p>위처럼 중첩시켜 호출하는 것은 완전히 이해하지 못할 정도는 아니지만, 복잡도는 우리의 적이니 싹부터 잘라버리도록 하자.</p>\n<br>\n## In Comes Ramda\n<p>우리는 <a href=\"http://ramdajs.com\">Ramda</a> 라이브러리를 임포팅해서 함수적인 접근을 더 잘할 수 있다. 우리의 메인함수인 <code class=\"tui-language-text\">getFirstInitial</code>을 변경해보도록 하자. 그리고 이름도 명사형인 <code class=\"tui-language-text\">firstInitial</code>로 바꿀 것이다. (함수형 프로그래밍을 하는 사람들(\"Functioneers\")은 데이터를 동사가 아닌 명사로 생각하길 좋아한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> pipe <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ramda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// node or webpack/browserify</span>\n\n<span class=\"token keyword\">const</span> firstInitial <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>getFirstName<span class=\"token punctuation\">,</span> getFirstLetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>람다의 <code class=\"tui-language-text\">pipe</code>는 함수들을 좀 더 직관적으로 중첩, 끼워넣기를 할 수 있게 해준다. 어떤 데이터든지 <code class=\"tui-language-text\">firstInitial</code>에 들어가면, 첫 번째로 <code class=\"tui-language-text\">getFirstName</code>을 거칠 것이고, 그 결과가 <code class=\"tui-language-text\">getFirstLetter</code>를 거쳐서, 우리에게 최종 결과로 주어질 것이다!</p>\n<p>이 코드는 이해하기에도 더 쉽고, 이런 방식으로 유지 보수하기도 쉽다. 이제 우리는 함수들을 쉽게 중첩하거나 <strong>composing</strong>할 수 있다. 사실, 람다에서 <code class=\"tui-language-text\">pipe</code>와 정확히 같은 기능을 가지고 있는 <em><code class=\"tui-language-text\">compose</code></em>함수도 있는데, 인자들이 함수들을 통과하는 순서가 반대이다.</p>\n<blockquote>\n<p><em><code class=\"tui-language-text\">compose(getFirstLetter, getFirstName);</code></em></p>\n</blockquote>\n<p>나(저자)는 코드를 일반 영어처럼 읽는 것(왼쪽 -> 오른쪽)을 좋아하기 때문에 <code class=\"tui-language-text\">pipe</code>를 더 선호한다. 이 외에도 람다는 더 많은 기능이 있다. (다음 파트에서 볼 수 있다.)</p>\n<br>\n## PointFree Style\n<p>pipe, compose와 함께 또 다른 흥미로운 것이 있다. 우리의 첫 함수 <code class=\"tui-language-text\">getFirstInitial</code>에서 우리는 person대한 참조를 함수 내부에 가지고 있다는 것이다.<br>\n아래를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// Standalone ES6 composition mentions \"person\" twice</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstInitial</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">person</span> <span class=\"token operator\">=></span> <span class=\"token function\">getFirstLetter</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// vs. Ramda's pipe composition</span>\n<span class=\"token keyword\">const</span> firstInitial <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>getFirstName<span class=\"token punctuation\">,</span> getFirstLetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>람다의 함수 정의는 저런 귀찮은 데이터 참조로부터 벗어난다. 보기에(이해하기에도) 좋지 않는가? 이를 <strong>Pointfree</strong> 스타일이라 부른다.</p>\n<p>우리는 \"person\"이라는 함수의 입력값에 얽매일 필요가 없다(나중에 이름을 수정할 필요도 없다). 이렇게 하면 함수를 더욱 포괄적으로 만들 수 있다: 우리는 꼭 사람 이름일 필요 없이, 형식에 맞는 문자열이라면 함수에 넘길 수 있다.</p>\n<br>\n## More Syntax Goodness\n<p>다른 함수를 이런 함수 조립 중간에 쉽게 끼워 넣을 수 있는데, 우리가 첫 번째 이름을 잘 뽑아내고 있는지 확인하기 위해 로그 함수를 끼워 넣어 보자.</p>\n<blockquote>\n<p><em><code class=\"tui-language-text\">pipe(getFirstName, log, getFirstLetter);</code></em></p>\n</blockquote>\n<p>가장 처음 중첩 함수였다면 어땠을지 생각해보자.</p>\n<blockquote>\n<p><em><code class=\"tui-language-text\">return getFirstLetter(log(getFirstName(person)));</code></em></p>\n</blockquote>\n<p>못생겼다. 내가 괄호는 맞게 썼나?</p>\n<br>\n## The Real World\n<p>입력값이 <strong>null</strong>인 경우, 즉 <code class=\"tui-language-text\">firstInitial(null)</code>은 어떤 일이 발생할까? 깨진다! 이는 <code class=\"tui-language-text\">getFirstName</code>부터 시작되는데,  <code class=\"tui-language-text\">String.split</code>이 수행되면서 null 값을 확인하고 에러를 발생시킬 것이다.</p>\n<p>하지만 괜찮다, 별일 아니다, 우리는 null 체크 로직을 함수 안에 추가해서 에러가 발생하지 않도록 피하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// new</span>\n  <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstLetter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">word</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// new</span>\n  <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 우리가 null 값을 입력해서 첫번째 이니셜을 얻고자 하면 null 값이 다시 반환될 것이고, 이건 꽤 합리적이다. 그리고 더욱 중요한 것은, 애플리케이션이 죽지 않는다.</p>\n<p>그러나 이제 null뿐만 아니라 <strong>undefined</strong>도 체크하라는 새로운 요구사항이 뒤따른다! 우리는 뒤로 돌아가서 모든 null 체크 로직을 변경해야 한다. 이것은 일이고, 이상적이지 않다. 5분마다 우리의 구현이 엉망진창으로 변하길 원치 않는다.</p>\n<br>\n## Do it, Maybe\n<p>유효성 체크를 어떻게 외부로 빼내서 독립시킬 수 있을까? 어떻게 한 곳에서 관리할 수 있을까? 우리가 본 코드들의 패턴은 거의 항상 같다. 값이 null이면 return null인 것 처럼.</p>\n<blockquote>\n<p><em><code class=\"tui-language-text\">if (name === null) return null;</code></em></p>\n</blockquote>\n<p>여기서 중요한 추상화는 체크를 수행할 수 있는 컨테이너에 우리의 데이터를 감싸는 것에 있다. 그러고 나서 데이터를 바로 보내는 대신 컨테이너를 통해 보내도록 한다.</p>\n<p>약간 서둘렀지만, 이제 위 컨테이너를 만들어보도록 하자.</p>\n<p>자바스크립트에는 객체들이 있으니 사용해보도록 하자. 컨테이너(or wrapper)객체는 우리의 실제 값(person string 또는 null)을 저장할 뿐만 아니라, 그 값을 확인하고 새로운 값으로 감싸서 반환해주는 <strong>메서드</strong>를 가지고 있을 것이다!</p>\n<p>이 컨테이너의 메서드를 <strong>fmap</strong>이라고 부를 것이다. 이는 자료구조의 안에 있는 원시값들을 새로운 구조로 만들어서 반환한다는 점에서 Array.map을 연상시킨다.</p>\n<p>우리는 이 컨테이너들을 제공하는 컨테이너 팩토리를 만들 것이다. 가공된 값은 존재할 수도, 존재하지 않을 수도 있기 때문에, 이 팩토리를 <strong>Maybe</strong>라 부를 것이다.</p>\n<p>코드를 통해 컨테이너의 컨셉을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Maybe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    val<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fmap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// lets create some containers with our Maybe factory</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Slacker George McFly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> noUser <span class=\"token operator\">=</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"Slacker George McFly\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>noUser<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null</span></code></pre></div>\n<p>우리는 Maybe팩토리를 만들기 위해 ES6의 문법들을 사용하고 있는데, 이 팩토리는 값을 받아서 해당 값을 <strong>val</strong>프로퍼티로 가지고 있으면서 동시에 <strong>fmap</strong>메서드를 가지고 있는 새로운 객체를 반환한다.<br>\n<strong>fmap</strong>은 <strong>f</strong>라는 함수를 파라미터로 받아서, <strong>this.val</strong>을 체크하고 계산해서 새로운 값으로 감싸고 반환한다! ES6에 익숙하지 않다면, 여기 ES5 코드를 참고하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    val<span class=\"token operator\">:</span> val<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">fmap</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>재밌지 않나? Maybe는 실제로 하나의 <strong>functor</strong>를 반환하는데, 이는 대략 \"mapped over\"가 될 수 있는 자료 구조이다. \"mapped over\"는 단순하게 여러분이 원시 값을 기반으로 하여 만들고 있는(나타내고 있는) 새로운 값을 의미한다.</p>\n<br>\n## Fixing the building blocks\n<p>이제 우리는 <code class=\"tui-language-text\">getFirstName</code>, <code class=\"tui-language-text\">getFirstLetter</code>가 일반 문자열(null값이 될 수도 있는!) 대신 사용할 Maybe 컨테이너를 다룰 수 있도록 변경해야 할 필요가 있다. 수정해보도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">maybeName</span> <span class=\"token operator\">=></span> maybeName<span class=\"token punctuation\">.</span><span class=\"token function\">fmap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstLetter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">maybeString</span> <span class=\"token operator\">=></span> maybeString<span class=\"token punctuation\">.</span><span class=\"token function\">fmap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 null 체크를 Maybe 컨테이너에 위임하였다! 훌륭한 점은 Maybe가 충분히 (우리가 만든) 우리의 인터페이스를 제공할 수 있어서 내부적으로 함께 쓰일 수 있다는 것이다. 이제 <code class=\"tui-language-text\">fmap</code>메서드에 우리가 원하는 함수를 넘기기만 하면 알아서 내부의 값을 가지고 수행해 줄 것이다. 이렇게만 한다면 이 앱은 이제 죽지 않을 것이다.</p>\n<p>undefined 체크를 포함한 우리의 코드를 정리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Maybe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fmap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">maybeName</span> <span class=\"token operator\">=></span> maybeName<span class=\"token punctuation\">.</span><span class=\"token function\">fmap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFirstLetter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">maybeString</span> <span class=\"token operator\">=></span> maybeString<span class=\"token punctuation\">.</span><span class=\"token function\">fmap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> firstInitial <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>getFirstName<span class=\"token punctuation\">,</span> getFirstLetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// let's try this out </span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bully Biff Tannen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token function\">firstInitial</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>initial<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;br />\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"B\"</span>\n\n<span class=\"token keyword\">const</span> noUser <span class=\"token operator\">=</span> <span class=\"token function\">Maybe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> noInitial <span class=\"token operator\">=</span> <span class=\"token function\">firstInitial</span><span class=\"token punctuation\">(</span>noUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>noInitial<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// null</span></code></pre></div>\n<p>위 코드들을 맘대로 포크해서 수정해도 괜찮다.\n<a href=\"http://codepen.io/collardeau/pen/JYpLEY\">http://codepen.io/collardeau/pen/JYpLEY</a></p>\n<p>이제 우리는 <strong>Maybe</strong>라는 functor를 통해 더욱 쉽고 확실하게 코드를 구성할 수 있다.</p>\n<p>part2를 주목하라. <strong>currying</strong>에 대해 배울 것이다. : <a href=\"https://medium.com/@collardeau/intro-to-functional-programming-concepts-in-javascript-part-2-f45228c49eed\">Part2 link</a></p>","frontmatter":{"id":"ko_20151117","title":"자바스크립트의 함수형 프로그래밍 컨셉","description":"대부분의 함수형 프로그래밍은 보통 함수들을 조립하고, 데이터들을 예측하기 쉽게 다루는 그런 것들을 의미한다. 간단한 함수들이 깔끔하게 합쳐지면서 복잡도는 증가할지라도, 신뢰할 수 있는 함수를 만들어낸다. 이 글은 함수형 프로그래밍 컨셉에 대한 여러 파트 중의 첫 번째 파트로, 람다(Ramda)라이브러리, composition, pointfree style 그리고 functor의 컨셉을 소개하려 한다.","date":"2015.11.17","author":"이민규","tags":["ecmascript","design-pattern","etc"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20151117","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}