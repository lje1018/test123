{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190430","result":{"data":{"post":{"html":"<h1 id=\"앱-테마-구현--vuejs와-스타일드-컴포넌트로-실시간-테마-구현하기\" style=\"position:relative;\"><a href=\"#%EC%95%B1-%ED%85%8C%EB%A7%88-%EA%B5%AC%ED%98%84--vuejs%EC%99%80-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%93%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%ED%85%8C%EB%A7%88-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"앱 테마 구현  vuejs와 스타일드 컴포넌트로 실시간 테마 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>앱 테마 구현 : Vue.js와 스타일드 컴포넌트로 실시간 테마 구현하기</h1>\n<blockquote>\n<p>원문 : <a href=\"https://medium.com/maestral-solutions/coloring-your-app-implementing-live-theming-with-vue-js-and-styled-components-29e428900394\">https://medium.com/maestral-solutions/coloring-your-app-implementing-live-theming-with-vue-js-and-styled-components-29e428900394</a></p>\n</blockquote>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*RbnMsF6UczRQr92n5biDFA.png\" alt=\"image\"></p>\n<p>Vue.js 프로젝트를 진행하면서 구현하기 조금 까다로웠던 기능이 있다. 완벽한 Vue 문서(Docs)만으로 바로 답을 찾을 수 없었던 부분이 있었는데, 고객 요구 사항으로 <strong>사용자 프로필에 대한 테마를 직접 선택할 수 있도록 하는 기능</strong>이었다.</p>\n<p>개발 초기에는 요구 사항이 그리 복잡하지 않았다. 몇 가지 색상을 제공하고 사용자가 선택한 색상이 현재 페이지에 잘 반영되기만 하면 되므로 따로 사용자 프로필 테마 색상을 따로 저장할 필요가 없었다. 팀에서는 이 기능의 이름을 \"<strong>라이브 테마</strong>(<em>Live Theming</em>)\"라고 지었다.</p>\n<p>나는 이 기능을 구현하기 위한 좋은 해결책을 찾는 과정에서 <strong>스타일드 컴포넌트</strong>(<em>styled-components</em>)를 찾았다. 이것은 컴포넌트 기반의 웹앱을 만들 때 내가 가장 좋아하는 모듈 중 하나이기도 하다.</p>\n<p>알고 보니 스타일드 컴포넌트는 Vue와 Vuex 기반의 솔루션에서 꼭 필요한 부분이었다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Bnu_yD9VKtVBVX4s_Fx86Q.png\" alt=\"image\"></p>\n<p>이 글에서는 스타일드 컴포넌트를 실용적인 예와 함께 설명한다. 재미있게 읽고 Vue에 스타일드 컴포넌트를 적용할 때 도움이 되길 바란다.</p>\n<p>바로 시작해보자.</p>\n<p>라이브 테마 구현의 <strong>궁극적인 목표</strong>는 사용자가 색을 선택할 수 있는 컬러 피커 컴포넌트를 갖는 것이다. 사용자가 <strong>컬러피커에서 선택한 색상이 테마에 영향을 받도록 설계된 컴포넌트들에 바로 반영되는 것</strong>이었다.</p>\n<p>이 프로젝트를 진행할 때 중요한 점은 화면에 실행시키는 것이 아니라, 프로젝트의 라이프 사이클 전반에 걸쳐 사용하고 <strong>유지 보수하기 쉬운 방식으로</strong> 구현하는 것이다.</p>\n<p>실제 구현하기에 앞서, 다음과 같은 목표를 세웠다.</p>\n<ul>\n<li>테마 컴포넌트는 반복 스타일 또는 중복 코드를 지정하는 것에 대해 추가적으로 걱정하지 않고, 코드의 어느 곳에서도 쉽게 배치하고 사용할 수 있어야 한다.</li>\n<li>평상시처럼 html 태그로 사용할 수 있기를 원하지만, 이미 테마 컴포넌트 안에 통합되어 있어야 한다.</li>\n<li>예를 들어 호버 시 적용되는 스타일처럼, 더 복잡한 스타일을 해당 컴포넌트에 정의할 수 있어야 한다.</li>\n<li>Bulma 또는 Bootstrap과 같은 CSS 프레임워크를 컴포넌트 스타일 상단에서 사용할 때 문제가 되지 않아야 한다. 앱에서 테마를 입히고 나머지 부분은 CSS 프레임워크를 사용하여 스타일을 적용할 수 있기 때문이다. 만약 애플리케이션에서 사용하는 버튼이 Bulma 스타일의 버튼이면서, 동시에 사용자 테마를 적용할 수 있는 버튼을 사용할 수도 있다.</li>\n</ul>\n<h2 id=\"이를-실현하기-위해-다음과-같이-6단계에-걸쳐-진행해보자\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%A5%BC-%EC%8B%A4%ED%98%84%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%B4-6%EB%8B%A8%EA%B3%84%EC%97%90-%EA%B1%B8%EC%B3%90-%EC%A7%84%ED%96%89%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"이를 실현하기 위해 다음과 같이 6단계에 걸쳐 진행해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이를 실현하기 위해 다음과 같이 6단계에 걸쳐 진행해보자</h2>\n<h3 id=\"1-프로젝트-생성\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"1 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로젝트 생성</h3>\n<p>가장 먼저 해야 할 일은 새로운 Vue 프로젝트를 만드는 것이다. 데모에서는 프로토타입을 작성하기에 적합한 vue-loader와 웹팩을 포함하는 간단한 <a href=\"https://github.com/vuejs-templates/webpack-simple\">템플릿</a>을 사용했다. 사용법(README)에 나와있는 명령어들을 따라서 하면 손쉽게 Vue 프로젝트를 시작할 수 있다.</p>\n<h3 id=\"2-vuex-스토어-설정\" style=\"position:relative;\"><a href=\"#2-vuex-%EC%8A%A4%ED%86%A0%EC%96%B4-%EC%84%A4%EC%A0%95\" aria-label=\"2 vuex 스토어 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Vuex 스토어 설정</h3>\n<p>Vuex는 현재 선택된 테마 색상 정보를 가지고 있다. 이 색상 정보가 전역 스코프에 존재하기 때문에, 애플리케이션의 모든 컴포넌트에서 사용할 수 있다.</p>\n<p>아래의 명령어를 사용하여 <strong>Vuex를 설치</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">npm install vuex --save</code></pre></div>\n<p>모든 스토어(<em>store</em>) 모듈을 유지하기 위해 스토어를 폴더로 분리해서 사용하는 것을 추천한다. 지금처럼 간단한 예제인 경우 전역 스토어(<em>global store</em>) 하나만 사용하겠지만, 전체 프로젝트에서는 스토어를 모듈로 배치하여 사용할 것이다. 여기서는 빠르게 작성하기 위해 하나하나 모듈로 배치하지 않고, store 폴더 내 index.js에  바로 작성하겠다. src 폴더 내 store 폴더를 추가하고 index.js 파일을 생성한다. <strong>상태</strong>(<em>state</em>)는 기본 값으로 Vue의 색상이 할당된 테마 색 정보를 들고 있고, 컬러 피커에서 사용자의 입력에 따라 해당 색상 값을 설정해주는 <strong>뮤테이션</strong>(<em>mutation</em>)를 설정해준다.</p>\n<p>마지막으로, <strong>게터</strong>(<em>getter</em>)를 사용하여 해당 색상 값을 모든 테마를 사용하는 컴포넌트에 전달해주도록 한다. 아래 코드는 <strong>src/store/index.js</strong> 파일의 내용이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/* src/store/index.js */</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeColor<span class=\"token operator\">:</span> <span class=\"token string\">'#41B883'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setThemeColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>themeColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">themeColor</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>themeColor<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">,</span>\n  getters<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>App 컴포넌트(App.vue)를 사용할 때 위에서 만든 스토어 정보를 추가해주자. <strong>src/main.js</strong> 파일 시작 부분에 <code class=\"tui-language-text\">import store form &#39;./store&#39;;</code>를 추가하면 선언된 스토어를 가져올 수 있다. Vue 인스턴스를 생성할 때 스토어 정보를 추가해 주도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/* src/main.js */</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  store<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"3-컬러-피커colorpicker-컴포넌트-작성\" style=\"position:relative;\"><a href=\"#3-%EC%BB%AC%EB%9F%AC-%ED%94%BC%EC%BB%A4colorpicker-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"3 컬러 피커colorpicker 컴포넌트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 컬러 피커(<em>ColorPicker</em>) 컴포넌트 작성</h3>\n<p>이제, 색상 값을 설정하여 스토어와 상호작용할 컬러피커를 만들어보자. 데모에서는 실제 프로젝트에 적용할 예쁜 디자인을 제공해주는 <a href=\"https://github.com/xiaokaike/vue-color\">오픈소스 컬러피커</a>를 사용했다. 하지만 자유롭게 <code class=\"tui-language-text\">&lt;input type=&quot;color&quot;&gt;</code>를 사용해도 무방하다.</p>\n<p>먼저 src 폴더 내 컴포넌트를 위한 폴더를 생성하고 <strong>ThemePicker.vue</strong>라는 컬러 피커 컴포넌트 Vue 파일을 생성한다. 그리고 위에서 언급한 <a href=\"https://github.com/xiaokaike/vue-color\">오픈소스 컬러피커</a>를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">npm install vue-color --save</code></pre></div>\n<p><strong>ThemePicker.vue</strong>파일의 스크립트 태그 내에 <code class=\"tui-language-text\">import { Chrome } from &#39;vue-color&#39;;</code>를 추가하고, 크롬 컬러 피커를 사용하기 위해 <code class=\"tui-language-text\">components</code>속성에 크롬 컬러 피커 컴포넌트를 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Chrome <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-color'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'chrome-color-picker'</span><span class=\"token operator\">:</span> Chrome<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약  여기서 사용한 Vue 컬러피커 컴포넌트에 대해 좀 더 자세한 사항을 알고 싶거나, 다른 디자인을 사용하기 원한다면 사이트에서 <a href=\"https://github.com/xiaokaike/vue-colo\">사용법(README)</a>을 참조하길 바란다.</p>\n<p>컬러 피커 컴포넌트를 스토어와 연동해보자.\n이 연동 코드에서는 vuex의 <code class=\"tui-language-text\">mapGetters</code>와 <code class=\"tui-language-text\">mapMutation</code>을 import하고 현재 선택된 색상 정보(<code class=\"tui-language-text\">themeColor</code>)를 가져와서 사용한다. 사용자가 색상을 선택하면 스토어에 선택한 색상 정보를 업데이트할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Chrome <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-color'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapGetters<span class=\"token punctuation\">,</span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'chrome-color-picker'</span><span class=\"token operator\">:</span> Chrome<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'themeColor'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'setThemeColor'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>템플릿에 있는 <code class=\"tui-language-text\">chrome-color-picker</code> 컴포넌트에 스토어와 연동하여 <code class=\"tui-language-text\">ThemePicker</code> 컴포넌트를 완성하면 아래 코드와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\">/* src/components/ThemePicker.vue */\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>chrome-color-picker</span> <span class=\"token attr-name\">:value</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>themeColor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@input</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>setThemeColor($event.hex)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:disableAlpha</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Chrome <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-color'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapGetters<span class=\"token punctuation\">,</span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'chrome-color-picker'</span><span class=\"token operator\">:</span> Chrome<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'themeColor'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'setThemeColor'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>스토어의 모든 입력값이 뮤테이션을 통하여 업데이트 되면, getters의 값에 바로 바인딩되기 때문에, 컬리 피커는 항상 현재 선택되어 있는 <code class=\"tui-language-text\">themeColor</code>를 보여준다. 컬러 피커와 스토어의 저장된 색상 정보의 값이 항상 동기화를 보장한다.</p>\n<p>이제 <strong>App.vue</strong> 컴포넌트에 <code class=\"tui-language-text\">ThemePicker</code> 컴포넌트를 가져와서 <code class=\"tui-language-text\">components</code> 목록에 추가하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./assets/logo.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Live Theming with Styled-Components in Vue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>theme-picker</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> ThemePicker <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/ThemePicker'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ThemePicker<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">#app</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Avenir'</span><span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>화면에는 다음과 같이 표시된다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LNWbXu93u0_VH4wrVVlV1w.png\" alt=\"image\"></p>\n<h3 id=\"4-테마-컴포넌트-만들기\" style=\"position:relative;\"><a href=\"#4-%ED%85%8C%EB%A7%88-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"4 테마 컴포넌트 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 테마 컴포넌트 만들기</h3>\n<p>이제 입력받는 <strong>색상 정보를 넘겨받아 테마가 적용되는 컴포넌트</strong>를 만들 차례이다. 첫 번째로 인라인 스타일로 스토어에 저장된 색상 정보를 단순히 넘겨주기만 하면 완벽하게 잘 동작할 것이라고 생각했지만, 아쉽게도 인라인 스타일을 활용하는 방식을 사용하기에는 문제가 조금 있었다.</p>\n<p>1)유지 보수하기 어려우며, 2)테마 컴포넌트를 재사용하는 개발자가 구현 세부 사항을 일일히 확인하고 사용해야 하는 번거로움이 있으며, 3)호버 같은 복잡한 스타일 선택자는 사용할 수 없다.</p>\n<p>CSS를 따로 분리하면, <strong>관심사의 분리</strong>(<em>SoC</em>)가 되어서 나중에 유지 보수하기 좋아진다.</p>\n<p>또한, 나중에 작업하게 될 개발자들이 <strong>구현 세부 사항을 숨기고 싶을 때나</strong>, 테마가 적용된 컴포넌트라는 것을 명시적으로 표현하고 싶은 경우에 좀 더 유연하게 구현할 수 있도록 해야한다. 향후 이 컴포넌트를 사용하는 개발자는 구현 세부 사항에는 신경쓰지 않아야 한다.</p>\n<p>위에서 언급한 모든 문제점에 대한 완벽한 해결책은 <strong><a href=\"https://www.styled-components.com/\">스타일드 컴포넌트</a>를 사용</strong>하는 것이다. CSS를 분리할 수 있고, 페이지가 이미 로드된 이후에 컴포넌트의 색상을 변경할 수 있도록 <code class=\"tui-language-text\">props</code>를 전달해준다.</p>\n<p>가장 먼저 Vue용 스타일드 컴포넌트를 설치해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">npm install vue-styled-components --save</code></pre></div>\n<p>components 폴더 내 styled-components 폴더를 만들고 스타일링된 컴포넌트 파일을 생성하여 일반적인 컴포넌트와 분리한다.\n전체 애플리케이션 내에서 사용할 수 있는 모든 컴포넌트를 테마 컴포넌트로 추가해보자. 아래 코드는 테마가 적용되는 버튼 컴포넌트이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/* src/components/styled-components/ThemedButton.js */</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-styled-components'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> themeProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> String <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemedButton <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> themeProps<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  color: white;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemedButton<span class=\"token punctuation\">;</span></code></pre></div>\n<p>테마 버튼에서 배경 색과 텍스트 색만 정의했지만, CSS에서 제공하는 모든 규칙을 컴포넌트의 스타일을 정의하는 문자열 리터럴에 그대로 사용할 수 있다.</p>\n<p>이제 이 컴포넌트는 스토어에서 색상 정보가 변경되어 스토어가 업데이트되면 갱신된 색상 정보를 <code class=\"tui-language-text\">color</code> 프로퍼티를 통해 넘겨받아 테마를 바로 반영할 수 있게 되었다.</p>\n<h3 id=\"5-전역적으로-사용할-수-있는-컴포넌트-만들기\" style=\"position:relative;\"><a href=\"#5-%EC%A0%84%EC%97%AD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"5 전역적으로 사용할 수 있는 컴포넌트 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 전역적으로 사용할 수 있는 컴포넌트 만들기</h3>\n<p>테마 버튼을 가져와서 다음과 같이 사용한다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemedButton</span> <span class=\"token attr-name\">:color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$store.getters[<span class=\"token punctuation\">'</span>themeColor<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Some Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ThemedButton</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>하지만 템플릿에서 위처럼 <code class=\"tui-language-text\">ThemedButton</code>을 사용하면 테마 컴포넌트를 사용하고 싶을 때마다, 컴포넌트를 매번 import 하여, 매번 스토어에서 가리키는 color 프로퍼티를 추가해주어야 하는 반복적인 작업을 하게된다. 이러한 작업은 버튼처럼 자주 재사용하는 공통적인 컴포넌트를 사용할 때에 시간을 낭비하게 만들고, 지루한 작업의 연속이 된다.</p>\n<p>새로운 컴포넌트로 스타일 컴포넌트를 감싸는 방식으로 버튼 컴포넌트를 전체 애플리케이션 내에서 사용할 수 있는 전역 컴포넌트로 만들어주었다.</p>\n<p>styled-components 폴더 내  index.js 파일을 추가해주고, 이 파일에서 모든 스타일 전역 컴포넌트를 등록해준다. main.js에서 index.js 파일을 import한 후 사용할 수 있다. (<code class=\"tui-language-text\">import &#39;./components/styled-components&#39;;</code>)</p>\n<p>Vue와 이전에 정의한 테마 버튼(<em>ThemedButton.js</em>)을 import하고, <code class=\"tui-language-text\">themed-btn</code>이라는 새로운 컴포넌트를 전역으로 선언한다. 이제 버튼을 사용할 때마다 같은 코드를 매번 작성하는 대신, 간단히 <code class=\"tui-language-text\">themed-btn</code>을 바로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> ThemedButton <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemedButton'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> themedButton <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'themed-btn'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ThemedButton <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ThemedButton :color=\"$store.getters['themeColor']\">&lt;slot>&lt;/slot>&lt;/ThemedButton></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">&lt;themed-btn&gt; Some Button &lt;/ themed-btn&gt;</code>을 타이핑하여 쉽게 테마 버튼을 추가할 수 있다.</p>\n<h3 id=\"6-컴포넌트-사용\" style=\"position:relative;\"><a href=\"#6-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"6 컴포넌트 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 컴포넌트 사용</h3>\n<p>마지막으로 화면에서 레이아웃을 구성하기 위해 Bulma CSS 프레임워크를 사용할 것이다. 어떻게 전역으로 등록된 테마 버튼과 같은 스타일드 컴포넌트에 Bulma를 적용할 수 있는지 알아보자.</p>\n<p>우선 <code class=\"tui-language-text\">npm install bulma --save</code>를 실행하여 Bulma를 설치하고, App.vue에 bulma.css 파일을 import해준다.(<code class=\"tui-language-text\">import &#39;bulma/css/bulma.css&#39;;</code>)</p>\n<p>그런 다음, index.js파일의 <code class=\"tui-language-text\">ThemedButton</code>템플릿에 간단히 <code class=\"tui-language-text\">class=&quot;button&quot;</code>(<code class=\"tui-language-text\">.button</code>은 bulma에서 사용하는 Button관련 클래스)를 추가하면 된다. 아래 코드는 <code class=\"tui-language-text\">themed-btn</code> 컴포넌트만 사용해도 <code class=\"tui-language-text\">class=button</code>이 속성이 포함된 테마 버튼을 사용한 것과 같은 효과가 나타난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> themedButton <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'themed-btn'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>ThemedButton<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ThemedButton class=\"button\" :color=\"$store.getters['themeColor']\">&lt;slot>&lt;/slot>&lt;/ThemedButton></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>App.vue에 bulma 클래스를 추가하여 컴포넌트들의 레이아웃을 열(<em>column</em>)로 구성하고, <code class=\"tui-language-text\">ThemedTitle</code>과 <code class=\"tui-language-text\">ThemedFooter</code>라는 두 가지 다른 스타일 컴포넌트를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"># App.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./assets/logo.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title is-4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Live Theming with Styled-Components in Vue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>columns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>theme-picker</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column is-three-quarters<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>themed-title</span><span class=\"token punctuation\">></span></span>Examples of Themed Components<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>themed-title</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>themed-btn</span><span class=\"token punctuation\">></span></span>Themed Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>themed-btn</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>themed-btn</span><span class=\"token punctuation\">></span></span>Another Themed Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>themed-btn</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>themed-footer</span><span class=\"token punctuation\">></span></span>Made by Dalila Avdukic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>themed-footer</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> <span class=\"token string\">'bulma/css/bulma.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ThemePicker <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/ThemePicker'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ThemePicker<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">#app</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Avenir'</span><span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>전체 예제 코드는 <a href=\"https://github.com/dalilaavdukic/live-theming-with-vue\">이곳</a>에서 확인할 수 있다.</p>\n<p>프로젝트가 완성된 모습은 아래와 같다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*O6P7sNAOjjq_58Q6_fKsFQ.png\"></p>\n<p>이제 컬러 피커를 색상을 선택하면 테마 컴포넌트에 색상이 바로 반영된다. 더 나아가 사용자는 프로필 테마 색상을 저장하기 전에(사용자 프로필 테마 설정값 저장 기능) 미리 적용된 테마를 볼 수 있는 프리뷰 기능을 지원할 수 있게 되었다.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*yHUU6s-ZK3FzrpGiOzA19g.png\"></p>\n<p>이런 기능을 추가해 달라는 요청은 자주 있는 일이 아니지만, 개발하는 동안 매우 즐거웠다. Vue의 단순함과 스타일드 컴포넌트의 간결하지만 뛰어난 기능에 감사를 표한다.</p>\n<p>이 글에 대한 질문이나 제안할 것이 있다면 언제든지 dalilaav@maestralsolutions.com으로 문의하길 바란다.</p>","frontmatter":{"id":"ko_20190430","title":"앱 테마 구현 - Vue.js와 스타일드 컴포넌트로 실시간 테마 구현하기","description":"Vue.js 프로젝트를 진행하면서 구현하기 조금 까다로웠던 기능이 있다. 완벽한 Vue 문서(Docs)만으로 바로 답을 찾을 수 없었던 부분이 있었는데, 고객 요구 사항으로 사용자 프로필에 대한 테마를 직접 선택할 수 있도록 하는 기능이었다. 개발 초기에는 요구 사항이 그리 복잡하지 않았다. 몇 가지 색상을 제공하고 사용자가 선택한 색상이 현재 페이지에 잘 반영되기만 하면 되므로 따로 사용자 프로필 테마 색상을 따로 저장할 필요가 없었다. 팀에서는 이 기능의 이름을 \"라이브 테마(Live Theming)\"라고 지었다.","date":"2019.04.30","author":"조정은","tags":["VueJs","framework","etc"],"thumbnail":"https://cdn-images-1.medium.com/max/800/1*RbnMsF6UczRQr92n5biDFA.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190430","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}