{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170721","result":{"data":{"post":{"html":"<h1 id=\"웹-컴포넌트3---쉐도우-돔shadow-dom\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B83---%EC%89%90%EB%8F%84%EC%9A%B0-%EB%8F%94shadow-dom\" aria-label=\"웹 컴포넌트3   쉐도우 돔shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 컴포넌트(3) - 쉐도우 돔(#Shadow DOM)</h1>\n<ul>\n<li><a href=\"/test123/weekly-pick/ko_20170428\">웹 컴포넌트(1) - Keep calm and #UseThePlatform</a></li>\n<li><a href=\"/test123/weekly-pick/ko_20170609\">웹 컴포넌트(2) - 커스텀 엘리먼트</a></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28505135-c3829402-705b-11e7-9ecc-6f9950c142bb.png\" alt=\"image\"></p>\n<p>이 글은 <strong>웹 컴포넌트</strong> 소개 연재로 그중 세 번째인 <strong>쉐도우 돔</strong>에 대한 글이다.\n아마도 이전 글의 커스텀 엘리먼트 글을 읽고 온 분은 여러 스펙, API, 기억해 두어야 할 것들로 질렸을지도 모르겠다.(두 번으로 잘라서 글을 썼으면 좋았을 것 같다.)\n그러나 이번 시간 쉐도우 돔을 사용하는데 배워야 하는 API는 <code class=\"tui-language-text\">element.attachShadow()</code>함수 하나뿐이니 가벼운 마음으로 시작해도 된다.\n짧은 코드를 따라 해 보고, 조금 더 상세한 내용을 짚어보는 순서로 진행해 보겠다.\n오늘의 이야기는 HTML, CSS의 스코프를 주제로 시작한다.</p>\n<h2 id=\"모든-변수를-글로벌에-넣는-일은-그만둬\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B8%80%EB%A1%9C%EB%B2%8C%EC%97%90-%EB%84%A3%EB%8A%94-%EC%9D%BC%EC%9D%80-%EA%B7%B8%EB%A7%8C%EB%91%AC\" aria-label=\"모든 변수를 글로벌에 넣는 일은 그만둬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"모든 변수를 글로벌에 넣는 일은 그만둬.\"</h2>\n<p>아마도 이 글을 읽을 당신에게는 굳이 해줄 필요 없는 말일 것이다. 누군가는 발끈할지도 모르겠다.</p>\n<p>(╬ ಠ益ಠ) <em>\"날 뭘로 보고! 어제 컴퓨터 학원 등록한 내 조카도 그 얘기하면 지루해 한다고!\"</em></p>\n<p>왜 그런 반응을 하는지 충분히 이해하니 진정하자.\n하지만 놀랍게도 당신이 프런트엔드 개발자라면 우리 모두 글로벌로 모든 것을 해결하려는 코드를 만들고 있다.\n그럴 리 없다고 성급하게 말하지 말고 우리가 작성한 CSS, HTML, Java Script를 생각해보자.\nHTML, CSS 모두 하나의 페이지에 모든 엘레먼트, 모든 CSS 룰이 쓰여지고 있다.\n<code class=\"tui-language-text\">document.querySelector()</code>하나면 이 페이지의 알파와 오메가를 관통할 수 있다.</p>\n<p><em>\"아하! 무슨 얘기인지 알겠네. CSS는 정말 싫지. 하지만 난 SASS 쓰고 있으니 괜찮아. 그리고 HTML을 글로벌로 쓰지 말라는 말은 무슨 말이지?\"</em></p>\n<p>맞다. 당신의 잘못이 아니고, HTLM도 CSS도 원래 그렇게 생겼다. 모두 public이고 모두 global이다.\n하지만 SASS, LESS 같은 도구는 괴로운 환경을 이겨내기 위한 발버둥이지 근본적인 문제의 해결 방안은 아니다.</p>\n<p><img src=\"https://memeexplorer.com/cache/846.jpg\" alt=\"image\"></p>\n<p><em>나라고 처음부터 이러고 싶지는 않았어 ㅜㅜ - <a href=\"https://memeexplorer.com/internet-memes/batman-slap/important/846\">css meme</a></em></p>\n<h2 id=\"분리-shadow-root\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A6%AC-shadow-root\" aria-label=\"분리 shadow root permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분리: #shadow-root</h2>\n<p>그러면 쉐도우 돔은 어떻게 HTML과 CSS에 스코프를 줄 수 있다는 말인가?\nHTML이나 CSS 모두 페이지에 적용되는 것인데 쉽게 이해되지 않는다.</p>\n<p>일단 시작하자. 크롬 브라우저를 준비하고 아래의 코드를 개발자 도구를 열어 아무 페이지에서든 붙여 넣고, 어떤 일이 일어나는지 확인해 보자. 아래의 코드는 <code class=\"tui-language-text\">body</code>에 <code class=\"tui-language-text\">span</code>태그를 하나 추가하였고, 그 자식으로 <code class=\"tui-language-text\">style</code>, <code class=\"tui-language-text\">div</code>를 다시 추가하였다. 단순히 자식 노드에 추가된 <code class=\"tui-language-text\">style</code>의 스코프를 알아보기 위함이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// 어디까지 녹색으로 보이려나?</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML\n  <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;style>div { background-color: #82b74b; }&lt;/style>&lt;div>야호!&lt;/div>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28501686-01e0f634-701c-11e7-9836-42f8e7d6104c.png\" alt=\"image\"></p>\n<p>필자는 구글에서 붙여 넣어봤다.\n그림에서 볼 수 있듯, <code class=\"tui-language-text\">style</code>태그는 어디에 붙어있든 글로벌이기 때문에 페이지에 존재하는 모든 <code class=\"tui-language-text\">div</code>를 풀밭으로 만들어 버렸다.</p>\n<p>그러면 이번에는 쉐도우 돔을 사용해서 비슷한 일을 해보자.\n아래의 코드가 위의 코드와 달라진 것은 <code class=\"tui-language-text\">attachShadow({mode: &#39;open&#39;})</code>함수 실행이 하나 더 추가된 것 뿐이다.\n이 함수는 <strong>쉐도우 루트</strong>를 생성하는데, 이것은 DOM 스코프의 경계선 역할을 하게 된다.\n<code class=\"tui-language-text\">{mode: &#39;open&#39;}</code>은 지금 중요치 않으니 그냥 넘어가자.\n페이지를 새로 고침 한 다음 아래의 코드를 다시 넣어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// 이번에야 말로 `야호!`만 녹색으로!</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;style>div { background-color: #82b74b; }&lt;/style>&lt;div>야호!&lt;/div>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28501709-71577d80-701c-11e7-8c78-0a2717bb7611.png\" alt=\"image\"></p>\n<p>개발자 도구를 살펴보면 <code class=\"tui-language-text\">#shadow-root (open)</code>이라는 것이 생겼고, 그 밑에 있는 <code class=\"tui-language-text\">style</code>은 밖으로 새나가지 않는 다는 것을 확인할 수 있다.\n반대로 글로벌에 존재하는 스타일 역시 <code class=\"tui-language-text\">#shadow-root (open)</code>안에 있는 엘레먼트에는 영향을 미치지 못한다.\n이것을 확인해 보기 위해, 이번에는 about:blank 페이지로 이동해서 아래의 코드를 넣어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML\n  <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;style>div { background-color: #82b74b; }&lt;/style>&lt;div id=\"non-shadow\">야호!&lt;/div>'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;div id=\"shadow\">야호!&lt;/div>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28501975-23d7c8b0-7023-11e7-9366-4faefcd45e30.png\" alt=\"image\"></p>\n<p>위에서 언급한 대로 쉐도우 루트에 존재하는 엘리먼트에는 루트 밖에 있는 글로벌 스타일이 적용되지 않는 것을 확인할 수 있다.\n위의 예제에서는 스타일을 기준으로 설명하였지만, 쉐도우 돔은 돔 자체의 분리 역할을 한다.\n즉 쉐도우 루트를 기준으로 <code class=\"tui-language-text\">id</code>를 중복해서 써도 되고, 루트 안팎의 동일한 이름의 <code class=\"tui-language-text\">class</code>역시 전혀 다른 클래스의 역할을 수행한다.\n쉐도우 루트 밖에서 쉐도우 돔의 엘리먼트를 셀렉트 할 수도 없다.\nHTML 문서 하나에 수천 개 되는 엘리먼트의 스타일을 한 번에 모두 관리하기 위해 <code class=\"tui-language-text\">class</code> 이름을 고민할 필요도, <code class=\"tui-language-text\">id</code>의 중복이 무서워 쓰지 못하는 일도 필요 없다.\n쉐도우 돔 하나당 하나의 문서를 관리하듯, 적절한 <code class=\"tui-language-text\">id</code>를 배분하면, 혹은 그마저도 필요 없이 짧은 셀렉터로 충분히 그 역할을 수행할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28501454-f54ef66e-7016-11e7-8530-0e6796372726.png\" alt=\"image\"></p>\n<p><em>큰 기능 없는 페이지에도 스타일 수천줄은 우습게 나온다. 과연 이것이 정말 잘 관리되고 있는 것일까</em></p>\n<h2 id=\"조합-slot\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%95%A9-slot\" aria-label=\"조합 slot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조합: &#x3C;slot></h2>\n<p>쉐도우 돔을 사용하지 않더라도 <code class=\"tui-language-text\">iframe</code>을 사용하면 비슷한 기능을 수행할 수 있다.\n그러나 <code class=\"tui-language-text\">iframe</code>을 사용한 DOM의 분리는 다음과 같은 단점이 있다.</p>\n<ul>\n<li>http 요청이 한차례 더 일어난다</li>\n<li>별도의 페이지이기 때문에, 소비되는 리소스도 높고 느리다</li>\n<li>iframe의 주소가 같은 도메인이 아닌 경우 접근 불가능하다</li>\n</ul>\n<p>이와 같은 이유로 얼마 전 트위터는 <code class=\"tui-language-text\">iframe</code>형식으로 지원하던 기능을 브라우저가 지원하는 경우 쉐도우 돔 방식으로 전환했다.</p>\n<blockquote>\n<p>What does this change mean for you? Much lower memory utilization in the browser, and much faster render times. Tweets will appear faster and pages will scroll more smoothly, even when displaying multiple Tweets on the same page. - <em><a href=\"https://twittercommunity.com/t/upcoming-change-to-embedded-tweet-display-on-web/66215\">Upcoming Change to Embedded Tweet Display on Web</a></em></p>\n</blockquote>\n<p>이러한 장점과 더불어 <code class=\"tui-language-text\">iframe</code>으로는 절대 할 수 없지만, 쉐도우 돔이 할 수 있는 일로 <strong>슬롯 조합</strong>이 있다.\n<strong>슬롯</strong>은 HTML에서 조합을 지어 나타나 특별한 기능을 수행하는 경우에서 발견할 수 있다.\n여러분께 <strong>슬롯</strong>이 어색할 수 있겠지만, 걱정 마시라. 우리가 이미 잘 알고 있는 개념이다.\n바로 <code class=\"tui-language-text\">ol</code> + <code class=\"tui-language-text\">li</code>, <code class=\"tui-language-text\">select</code> + <code class=\"tui-language-text\">item</code>, <code class=\"tui-language-text\">form</code> + <code class=\"tui-language-text\">input</code> 등이 그 예이다.</p>\n<p>우리가 쉐도우 돔과 함께 사용할 <strong>슬롯</strong> 역시 위의 <code class=\"tui-language-text\">ol</code>, <code class=\"tui-language-text\">li</code>, <code class=\"tui-language-text\">select</code>등과 동일한 개념을 가지고 동작한다.\n<code class=\"tui-language-text\">ol</code>은 <code class=\"tui-language-text\">li</code>자식 노드에 숫자를 부여한다거나 하는 식이다.\n특별한 마크업을 부여할 수도 있고, 스타일을 달리하거나, 동작을 수행하는 기능을 부여할 수도 있다.\n아래 예제는 자식 노드(라이트 돔)을 블럭 엘리먼트로 감싸는 일을 하는 셈이다.</p>\n<p>아래의 예제는 개발자 도구에서 편집하여 사용하거나, 작은 HTML 파일을 만들어 테스트해볼 수 있다.\n아래의 문법을 설명하기 이전, 앞으로 원활한 소통을 위해 몇가지 정의를 이야기 하고 넘어가자.\n<a href=\"https://dom.spec.whatwg.org/#shadow-trees\">whatwg - 쉐도우 트리</a></p>\n<ul>\n<li><strong>쉐도우 돔</strong>: 아래의 코드에서 h1, p등 <strong>쉐도우 루트</strong>에 붙어있는 DOM</li>\n<li><strong>쉐도우 루트</strong>: <code class=\"tui-language-text\">#shadow-root</code> :)</li>\n<li><strong>쉐도우 호스트</strong>: <strong>쉐도우 루트</strong>의 부모. 아래의 코드에서 <code class=\"tui-language-text\">div#slot-test</code></li>\n<li><strong>라이트 돔</strong>: 도큐먼트의 <strong>쉐도우 호스트</strong>에 붙어있는 노드들. <code class=\"tui-language-text\">span</code></li>\n</ul>\n<p>아래의 코드 동작을 위의 정의로 풀이해보면 \"<em>쉐도우 돔의 슬롯이 가진 이름에 맞는 라이트 돔의 노드가 각 슬롯에 삽입된다</em>\" 라고 할 수 있겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot-test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Light DOM --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>desc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// Shadow DOM</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#slot-test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  &lt;h1>\n    &lt;slot name=\"title\">&lt;/slot>\n  &lt;/h1>\n  &lt;p>\n    &lt;slot name=\"desc\">&lt;/slot>\n  &lt;/p>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28503299-fea0a6a4-703e-11e7-8100-12abb579d833.png\" alt=\"image\"></p>\n<p><em>슬롯의 이름에 맞는 라이트 돔이 자리를 찾아간다</em></p>\n<h2 id=\"컴포넌트-커스텀-엘리먼트--쉐도우-돔--dom-oop\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8--%EC%89%90%EB%8F%84%EC%9A%B0-%EB%8F%94--dom-oop\" aria-label=\"컴포넌트 커스텀 엘리먼트  쉐도우 돔  dom oop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트: 커스텀 엘리먼트 + 쉐도우 돔 = DOM OOP</h2>\n<p>쉐도우 돔을 사용하지 않고 돔의 분리를 할 수 있는 방법으로 <code class=\"tui-language-text\">iframe</code>을 사용할 수 있다.\n실제 쉐도우 돔 <code class=\"tui-language-text\">mode: close</code>의 polyfill은 <code class=\"tui-language-text\">iframe</code>으로 작성되었다.\n위에서 작성했던 쉐도우 돔을 예제로 아래처럼 쉐도우 돔의 엘리먼트에 외부에서 접근해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#non-shadow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;div id=\"non-shadow\">야호!&lt;/div></span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#shadow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span></code></pre></div>\n<p>우리가 여태까지 알아본 바와 같이, 쉐도우 돔에 있는 노드는 <code class=\"tui-language-text\">id</code>를 통해 가져올 수 없다.\n쉐도우 돔에 존재하는 엘리먼트를 쉐도우 돔 밖에서 얻어오기 위해서는 아래와 같이 조금 더 복잡한 방법을 통해 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#shadow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;div id=\"shadow\">야호!&lt;/div></span></code></pre></div>\n<p><em>\"아~ 이런! 쿼리가 저렇게 밖에 안돼서는 쓸 모 없겠군!\"</em></p>\n<p>전혀 그렇지 않다. 오히려 이것은 좋은 일이다.\n왜 그러한지 설명을 위해 먼저 지난 글에서 알아보았던 커스텀 엘리먼트에 대해 다시 기억을 되살려보자.\n커스텀 엘리먼트는 HTML 엘리먼트를 자바스크립트 오브젝트로서 관리할 수 있도록 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// 자바스크립트와 HTML 엘리먼트를 한몸으로 만들어 준다</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">yey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yey'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">yey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'yey'</span></code></pre></div>\n<p>기억이 조금 돌아왔는가? 그럼 이번에는 커스텀 엘리먼트와 쉐도우 돔을 묶은 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lang'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// add shadow root in constructor</span>\n      <span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      shadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;style>div { background-color: #82b74b; }&lt;/style>\n        &lt;div>yey&lt;/div>\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_yey <span class=\"token operator\">=</span> shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attr<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attr <span class=\"token operator\">==</span> <span class=\"token string\">'lang'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> yey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'ko'</span><span class=\"token operator\">:</span>\n            yey <span class=\"token operator\">=</span> <span class=\"token string\">'만세!'</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'es'</span><span class=\"token operator\">:</span>\n            yey <span class=\"token operator\">=</span> <span class=\"token string\">'hoora!'</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'jp'</span><span class=\"token punctuation\">;</span>\n            yey <span class=\"token operator\">=</span> <span class=\"token string\">'万歳!'</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            yey <span class=\"token operator\">=</span> <span class=\"token string\">'yey!'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_yey<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> yey<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_yey<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">,</span> MyElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이쯤에서 지난 기억이 조금 더 돌아왔기를 바란다. 그리고 아래의 그림과 위의 코드를 서로 대입해 보기로 하자.\n아래의 그림은 커스텀 엘리먼트, 그리고 쉐도우 돔을 OOP 오브젝트 개념도와 비슷하게 그려놓은 것이다.\n커스텀 엘리먼트는 HTML 엘리먼트를 확장해 오브젝트로 만들어 주고,\n쉐도우 돔은 그 오브젝트에 스코프를 제공해준다.\n다시 얘기하자면 <strong>커스텀 엘리먼트와 쉐도우 돔은 DOM을 OOP의 대상으로 바라볼 수 있게 해준다</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/28505135-c3829402-705b-11e7-9ecc-6f9950c142bb.png\" alt=\"image\">\n<em>본인의 의견이 많~이 반영된 그림이다. :)</em></p>\n<p>커스텀 엘리먼트가 가지고 있는 쉐도우 돔 트리의 엘리먼트들은 OOP에서 내부 구현에 해당한다.\n외부에서 어떠한 오브젝트의 private 속성을 변경하고 싶다면 그것은 어떠한 상황인가?\nprivate를 수정한다는 시도가 먼저 잘못되었고, 오브젝트의 정체성에 맞게 필요하다면 메서드를 새로 추가해야 한다.</p>\n<p>웹 컴포넌트(커스텀 엘리먼트 + 쉐도우 돔)에서도 마찬가지이다.\n내부 돔을 직접 수정하려 하는 시도가 잘못된 것이고, 웹 컴포넌트의 정체성에 맞게 필요하다면 메서드를 추가해야 한다.\n우리가 알아보고 있는 기술은 <strong>웹 컴포넌트</strong>이다.\n그 자체로 독립적이고 완결성 있는 것이어야 한다는 뜻이다.</p>\n<p>위에서 언급한 불편한 쿼리문은 우리가 기다리는 자바스크립트 private 속성만큼이나 반갑고 유용한 존재이다.\n추후 직접 프로젝트를 시작할 때, 아래의 나쁜 예처럼 셀렉터를 작성하고 있다면 위의 그림을 다시 떠올리기 바란다.</p>\n<h3 id=\"예제-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-1\" aria-label=\"예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token comment\">&lt;!-- GOOD! DOM OOP! --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-element</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-element</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// BAD IDEA!</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>shadowRoot\n    <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'만세!'</span></code></pre></div>\n<h3 id=\"예제-2\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-2\" aria-label=\"예제 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">  <span class=\"token comment\">// GOOD! DOM OOP!</span>\n  <span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myElement<span class=\"token punctuation\">.</span><span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">  <span class=\"token comment\">// BAD IDEA!</span>\n  <span class=\"token keyword\">const</span> yey <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-element'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>shadowRoot\n    <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>yey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"dom을-인터페이스로\" style=\"position:relative;\"><a href=\"#dom%EC%9D%84-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C\" aria-label=\"dom을 인터페이스로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM을 인터페이스로</h3>\n<p>구글 폴리머팀의 Rob Dodson은 위 그림에서 DOM에 해당하는 <strong>events</strong>, <strong>attributes</strong>로 인터페이스를 구성하라고 권고한다.\n엘리먼트는 결국 어떠한 상태를 나타내고 있기에, method를 실행하는 것보다 attributes값을 할당하는 것이 맞다는 말이다.\n그 다음, 커스텀 엘리먼트는 attributes값이 변경될 때, 그에 맞는 동작을 수행하면 된다.\n또한 중요한 attributes 값이나 상태가 있다면 그것은 <strong>events</strong>로 내보내, 필요한 곳에서 수행해야 한다고 제안한다.</p>\n<p>나도 분명 좋은 방법이라고 생각한다. 그러나 attributes값은 문자열, 존재 유무로 불린 값만을 처리할 수 밖에 없다. 실제 컴포넌트를 구성할 때 얼만큼 효용이 있을지는 모르겠다. 필자 생각에는 위에서 말한바와 같이 DOM의 스코프만 잘 지키면 충분히 좋은 컴포넌트 인터페이스가 만들어 질 것이라 생각한다.</p>\n<h2 id=\"쉐도우-돔-자세한-내용들\" style=\"position:relative;\"><a href=\"#%EC%89%90%EB%8F%84%EC%9A%B0-%EB%8F%94-%EC%9E%90%EC%84%B8%ED%95%9C-%EB%82%B4%EC%9A%A9%EB%93%A4\" aria-label=\"쉐도우 돔 자세한 내용들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쉐도우 돔 자세한 내용들</h2>\n<p>다른 충실히 쓰여진 튜토리얼들이 많으므로, 여기서는 간단히 주요한 점들만 언급하고 넘어가겠다.</p>\n<ul>\n<li><code class=\"tui-language-text\">textarea</code>, <code class=\"tui-language-text\">input</code>, <code class=\"tui-language-text\">image</code>와 같은 엘리먼트들은 쉐도우 돔을 가질 수 없다. (가질 수 있는  것이 이상하다)</li>\n<li>쉐도우 돔은 여러번 중첩될 수 있다. <code class=\"tui-language-text\">slot</code>도 마찬가지이다.</li>\n<li>슬롯에 배포된 엘리먼트는 <code class=\"tui-language-text\">slot.assignedNodes()</code>를 통해 접근할 수 있다.</li>\n<li>슬롯안의 엘리먼트가 변경될 때 <code class=\"tui-language-text\">slotchange</code> 이벤트를 <code class=\"tui-language-text\">slot</code>엘리먼트에 리스너를 달아 받아오자.</li>\n<li>쉐도우 호스트의 스타일은 <code class=\"tui-language-text\">:host</code>로 변경한다.</li>\n<li>쉐도우 호스트의 클래스에 따른 스타일은 <code class=\"tui-language-text\">:host-context(.classname)</code>으로 가능하다.</li>\n<li>슬롯 스타일은 <code class=\"tui-language-text\">::sloted(h1)</code> 방식으로 한다.</li>\n<li><code class=\"tui-language-text\">attachShadow({mode: &#39;closed&#39;})</code>로 쉐도우 루트를 생성하면, 쉐도우 돔에 접근이 불가능해진다.</li>\n<li>쉐도우 돔 내부에서 발생한 이벤트의 <code class=\"tui-language-text\">target</code>은 외부에서 쉐도우 호스트로 변경된다.</li>\n</ul>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>이전 웹 컴포넌트에 대한 글을 공개하며 받았던 피드백들 중에는 다른 프레임워크(React, Angulr..)와의 비교가 적지 않았다.\n웹 컴포넌트는 오늘 알아본 것과 같이 보다 근본적인 문제를 해결하는데 집중되어 있다.\n다른 프레임워크처럼 생산성이나 어플리케이션 구조 등에 주안점이 있는 것이 아니다.\n때문에 웹 컴포넌트는 다른 프레임워크들과 상호 보완 구조에 가깝지, 대체하는 관계가 아님을 다시 말하고 싶다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/shadow-dom/\">Shadow DOM - W3C Working Draft 13 Feb 2017</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\">Shadown DOM v1: Self-Contained Web Components</a></li>\n<li><a href=\"https://css-tricks.com/playing-shadow-dom/\">Playing with Shadow DOM</a></li>\n<li><a href=\"https://twittercommunity.com/t/upcoming-change-to-embedded-tweet-display-on-web/66215\">Twitter - IFrame to Shadow DOM</a></li>\n<li><a href=\"https://dom.spec.whatwg.org/#shadow-trees\">Whatwg - Shadow Trees</a></li>\n<li><a href=\"https://drafts.csswg.org/selectors-4/#the-scope-pseudo\">Selector Level 4</a></li>\n<li><a href=\"http://robdodson.me/shadow-dom-css-cheat-sheet/\">Shadow DOM Cheat Sheet</a></li>\n</ul>","frontmatter":{"id":"ko_20170721","title":"웹 컴포넌트(3) - 쉐도우 돔(#Shadow DOM)","description":"이 글은 웹 컴포넌트 소개 연재로 그중 세 번째인 쉐도우 돔에 대한 글이다. 아마도 이전 글의 커스텀 엘리먼트 글을 읽고 온 분은 여러 스펙, API, 기억해 두어야 할 것들로 질렸을지도 모르겠다.(두 번으로 잘라서 글을 썼으면 좋았을 것 같다.) 그러나 이번 시간 쉐도우 돔을 사용하는데 배워야 하는 API는 element.attachShadow()함수 하나뿐이니 가벼운 마음으로 시작해도 된다.","date":"2017.07.21","author":"최규우","tags":["html5","es6"],"thumbnail":"https://user-images.githubusercontent.com/1215767/28505135-c3829402-705b-11e7-9ecc-6f9950c142bb.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170721","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}