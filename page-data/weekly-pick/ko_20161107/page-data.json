{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20161107","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트로-컴파일러-만들기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"자바스크립트로 컴파일러 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트로 컴파일러 만들기</h1>\n<blockquote>\n<p>원글<br>\nMariko Kosaka, <a href=\"https://medium.com/@kosamari/how-to-be-a-compiler-make-a-compiler-with-javascript-4a8a13d473b4\">https://medium.com/@kosamari/how-to-be-a-compiler-make-a-compiler-with-javascript-4a8a13d473b4</a></p>\n</blockquote>\n<p>어느 멋진 일요일 Bushwick, Brooklyn의 한 책방에서 <a href=\"https://mitpress.mit.edu/books/design-numbers\">John Maeda가 쓴 \"Design by Numbers\"</a>라는 책을 보았다. 이 책은 <a href=\"http://dbn.media.mit.edu/\">DBN 프로그래밍 언어</a>(90년대 말 MIT 미디어 연구소에서 시각적인 방법으로 프로그래밍 개념을 소개하도록 고안된 언어)를 차근 차근 설명했다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*l2yQRbwlojZhNyEJi8uVDA.png\" alt=\"DBN-code-sample\"></p>\n<blockquote>\n<p>DBN 코드 샘플: <a href=\"http://dbn.media.mit.edu/introduction.html\">http://dbn.media.mit.edu/introduction.html</a></p>\n</blockquote>\n<p>자바 환경에서 DBN 코드를 실행시키는 것보다 브라우저에서 실행할 수 있도록 SVG로 DBN을 만드는 것이 2016년의 꽤 흥미로운 프로젝트가 될 것으로 생각했다.</p>\n<p>우선 DBN-to-SVG 컴파일러를 만들 필요가 있었다. 그래서 컴파일러 만들기를 공부하기 시작했다. \"Making Compiler\"는 수 많은 컴퓨터 과학처럼 들린다. 그런데 코딩 인터뷰에서조차 노드를 탐색해본적이 없던 내가 컴파일러를 만들 수 있을까?</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*mihwNKQqerkXUZ4GQhqgsg.png\" alt=\"compiler\"></p>\n<blockquote>\n<p>내 상상 속 컴파일러는 코드가 벌 받기 위해 가는 곳이다. 만약 코드가 나쁘면, 에러 메시지에 영원히 찍혀있을 것이다.</p>\n</blockquote>\n<h3 id=\"먼저-컴파일러가-되어-보자\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EA%B0%80-%EB%90%98%EC%96%B4-%EB%B3%B4%EC%9E%90\" aria-label=\"먼저 컴파일러가 되어 보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 컴파일러가 되어 보자.</h3>\n<p>컴파일러는 코드 조각을 가져와서 다른 어떤 무언가로 돌리는 매커니즘이다. 간단한 DBN 코드를 가져와서 직접 그려보자.</p>\n<p>다음 DBN 코드로 된 3개의 커맨드가 있다. \"Paper\"는 종이의 색을 정의하며, \"Pen\"은 펜의 색을 정의한다. 마지막으로 \"Line\"은 선을 그린다. 색을 나타내는 파라미터에서 100은 흑색 100%, CSS의 RGB(0%, 0%, 0%)을 의미한다. DBN으로 만들어진 이미지는 전부 흑백(그레이 스케일)이다. DBN에서 종이는 항상 100x100 사이즈이고, 선의 두께는 항상 1이다. 그리고 선은 왼쪽 최하단을 기준으로 한 x-y 좌표계를 이용하며 시작점과 끝점으로 정의한다.</p>\n<p>이제 종이와 펜을 쥐고 직접 컴파일러가 되어 다음 코드를 컴파일하고 그려보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">Paper 0\nPen 100\nLine 0 50 100 50</code></pre></div>\n<p>종이의 한 가운데를 횡단하는 검은색 선을 그렸는가? 축하한다. 당신은 컴파일러가 되었다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*aDJskliFHSIIfYhr8aN3UA.png\" alt=\"compiled-result\"></p>\n<blockquote>\n<p>컴파일 결과</p>\n</blockquote>\n<h3 id=\"컴파일러는-어떻게-동작할까\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%A0%EA%B9%8C\" aria-label=\"컴파일러는 어떻게 동작할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러는 어떻게 동작할까?</h3>\n<p>우리의 머리가 컴파일러로서 어떤 일을 했는지 생각해보자.</p>\n<h4 id=\"1-어휘-분석lexical-analysis-tokenization\" style=\"position:relative;\"><a href=\"#1-%EC%96%B4%ED%9C%98-%EB%B6%84%EC%84%9Dlexical-analysis-tokenization\" aria-label=\"1 어휘 분석lexical analysis tokenization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 어휘 분석(Lexical Analysis, Tokenization)</h4>\n<p>우리는 먼저 (토큰이라 부르는) 각 키워드를 공백 기준으로 분리하였다. 또한, 우리가 이 분리작업을 하는 동안 \"단어\", \"숫자\"와 같은 원시적인 타입으로 각 토큰을 구분했다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*lM4hjuI28Dodn-DfnXQu4A.png\" alt=\"lexical-analysis\"></p>\n<blockquote>\n<p>어휘 분석</p>\n</blockquote>\n<h4 id=\"2-파싱parsing-syntactical-analysis\" style=\"position:relative;\"><a href=\"#2-%ED%8C%8C%EC%8B%B1parsing-syntactical-analysis\" aria-label=\"2 파싱parsing syntactical analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 파싱(Parsing, Syntactical Analysis)</h4>\n<p>텍스트가 토큰들로 분리되고나면, 각각 살펴보며 토큰들 사이의 관계를 찾는다. 앞의 커맨드에서 우리가 숫자와 연관된 키워드를 함께 그룹화한 경우이다. 그리고나서 이 코드의 구조를 파악하기 시작했다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*Masaunh04PyclWIGhztHmg.png\" alt=\"parsing\"></p>\n<blockquote>\n<p>파싱</p>\n</blockquote>\n<h4 id=\"3-변형transformation\" style=\"position:relative;\"><a href=\"#3-%EB%B3%80%ED%98%95transformation\" aria-label=\"3 변형transformation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 변형(Transformation)</h4>\n<p>파싱을 통해 문법을 분석하고 나면, 그 구조를 적합하게 변형하여 최종 결과를 얻고자 한다. 앞에서 우리가 컴파일할 때 우리가 이미지를 그리고자 했기에 명령(Instruction)을 차근차근 사람이 이해하기 쉽도록 변형한 것이다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*ExV6vUNKZ4-IpG15-CAeFw.png\" alt=\"transformation\"></p>\n<blockquote>\n<p>변형</p>\n</blockquote>\n<h4 id=\"4-코드-생성\" style=\"position:relative;\"><a href=\"#4-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"4 코드 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 코드 생성</h4>\n<p>마지막으로 우리는 컴파일된 결과로 그림을 그린다. 이때, 우리는 이전에 만들었던 명령들을 단순히 따르는것 뿐이다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*250m-6zI6slTBirOxHX7kw.png\" alt=\"code-generation\"></p>\n<blockquote>\n<p>코드 생성</p>\n</blockquote>\n<p>그리고 바로 컴파일러가 하는 일이다.</p>\n<p>우리가 그린 그림은 컴파일된 (C 코드를 컴파일해서 만든 .exe 파일과 같은)결과이다. 우리는 컴파일된 결과로서의 그림을 누구에게나, 어느 기기(스캐너, 카메라 등)에게나 연결할 수 있고, 다 함께 중앙에 그어진 검은 선 하나를 볼 수 있을 것이다.</p>\n<h3 id=\"컴파일러를-만들어-보자\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EC%9E%90\" aria-label=\"컴파일러를 만들어 보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러를 만들어 보자.</h3>\n<p>이제 컴파일러가 어떤 일을 하는지 알았으니, JavaScript로 컴파일러를 하나 만들어보자. 이 컴파일러는 DBN 코드를 입력받아 SVG 코드로 변환한다.</p>\n<h4 id=\"1-렉서-함수lexer-function\" style=\"position:relative;\"><a href=\"#1-%EB%A0%89%EC%84%9C-%ED%95%A8%EC%88%98lexer-function\" aria-label=\"1 렉서 함수lexer function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 렉서 함수(Lexer function)</h4>\n<p>우리는 영어 문장 \"I have a pen\"을 [I, have, a, pen]으로 분리할 수 있는 것처럼, 렉서 함수는 코드 문자열을 작고 의미 있는 조각(토큰)들로 분리한다. DBN은 각 토큰을 공백들로 구분하고, \"단어\" 또는 \"숫자\"로 분류한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">lexer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'word'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>코드: <a href=\"https://gist.github.com/kosamari/dbfa64a22482640f6ec717e6e445b544#file-lexer-js\">https://gist.github.com/kosamari/dbfa64a22482640f6ec717e6e445b544#file-lexer-js</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">input: &quot;Paper 100&quot;\noutput: [\n    { type: &quot;word&quot;, value: &quot;Paper&quot; }, { type: &quot;number&quot;, value: 100 }\n]</code></pre></div>\n<h4 id=\"2-파서-함수parser-function\" style=\"position:relative;\"><a href=\"#2-%ED%8C%8C%EC%84%9C-%ED%95%A8%EC%88%98parser-function\" aria-label=\"2 파서 함수parser function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 파서 함수(Parser function)</h4>\n<p>파서 함수는 각 토큰들을 돌아다니며 문법적 정보를 찾고, AST(추상 구문 트리)라 부르는 객체를 만든다. 우리의 각 코드가 어떻게 구성되는지를 이해하기 위한 방법으로 AST를 하나의 맵으로도 생각할 수 있다.</p>\n<p>우리 코드에는 \"NumberLiteral\"과 \"CallExpression\"의 2개의 문법적 타입이 있다. NumberLiteral은 숫자 값을 의미하고, 이를 CallExpression의 파라미터 인자로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parser</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tokens</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">AST</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'Drawing'</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// extract a token at a time as current_token. Loop until we are out of tokens.</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> current_token <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Since number token does not do anything by it self, we only analyze syntax when we find a word.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current_token<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'word'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>current_token<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'Paper'</span> <span class=\"token operator\">:</span>\n          <span class=\"token keyword\">var</span> expression <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'CallExpression'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Paper'</span><span class=\"token punctuation\">,</span>\n            arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\">// if current token is CallExpression of type Paper, next token should be color argument</span>\n          <span class=\"token keyword\">var</span> argument <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            expression<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">// add argument information to expression object</span>\n              type<span class=\"token operator\">:</span> <span class=\"token string\">'NumberLiteral'</span><span class=\"token punctuation\">,</span>\n              value<span class=\"token operator\">:</span> argument<span class=\"token punctuation\">.</span>value\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token constant\">AST</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// push the expression object to body of our AST</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token string\">'Paper command must be followed by a number.'</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'Pen'</span> <span class=\"token operator\">:</span>\n          <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'Line'</span><span class=\"token operator\">:</span>\n          <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">AST</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>코드: <a href=\"https://gist.github.com/kosamari/041282ca510f9d5e699dc4c419688422#file-parser-js\">https://gist.github.com/kosamari/041282ca510f9d5e699dc4c419688422#file-parser-js</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">input: [\n  { type: &quot;word&quot;, value: &quot;Paper&quot; }, { type: &quot;number&quot;, value: 100 }\n]\noutput: {\n  &quot;type&quot;: &quot;Drawing&quot;,\n  &quot;body&quot;: [{\n    &quot;type&quot;: &quot;CallExpression&quot;,\n    &quot;name&quot;: &quot;Paper&quot;,\n    &quot;arguments&quot;: [{ &quot;type&quot;: &quot;NumberLiteral&quot;, &quot;value&quot;: &quot;100&quot; }]\n  }]\n}</code></pre></div>\n<h4 id=\"3-변형-함수transformer-function\" style=\"position:relative;\"><a href=\"#3-%EB%B3%80%ED%98%95-%ED%95%A8%EC%88%98transformer-function\" aria-label=\"3 변형 함수transformer function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 변형 함수(Transformer function)</h4>\n<p>이전 단계에서 만든 AST는 코드에서 어떤 일이 발생했는지는 잘 설명해줄 수 있지만, SVG 파일을 만드는데는 유용하지 않다. 예를 들어 \"Paper\"는 오직 DBN에만 존재하는 컨셉일 뿐이다. SVG에서는 Paper를 나타내기 위해 <rect> 엘리먼트를 사용해야 한다. 변형 함수는 AST를 SVG에 더 가까운 또 다른 AST로 변환시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">transformer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> svg_ast <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    tag <span class=\"token operator\">:</span> <span class=\"token string\">'svg'</span><span class=\"token punctuation\">,</span>\n    attr<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> viewBox<span class=\"token operator\">:</span> <span class=\"token string\">'0 0 100 100'</span><span class=\"token punctuation\">,</span>\n      xmlns<span class=\"token operator\">:</span> <span class=\"token string\">'http://www.w3.org/2000/svg'</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">:</span> <span class=\"token string\">'1.1'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> pen_color <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// default pen color is black</span>\n\n  <span class=\"token comment\">// Extract a call expression at a time as `node`. Loop until we are out of expressions in body.</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'Paper'</span> <span class=\"token operator\">:</span>\n        <span class=\"token keyword\">var</span> paper_color <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value\n        svg_ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// add rect element information to svg_ast's body</span>\n          tag <span class=\"token operator\">:</span> <span class=\"token string\">'rect'</span><span class=\"token punctuation\">,</span>\n          attr <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            width<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            fill<span class=\"token operator\">:</span> <span class=\"token string\">'rgb('</span> <span class=\"token operator\">+</span> paper_color <span class=\"token operator\">+</span> <span class=\"token string\">'%,'</span> <span class=\"token operator\">+</span> paper_color <span class=\"token operator\">+</span> <span class=\"token string\">'%,'</span> <span class=\"token operator\">+</span> paper_color <span class=\"token operator\">+</span> <span class=\"token string\">'%)'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'Pen'</span><span class=\"token operator\">:</span>\n        pen_color <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token comment\">// keep current pen color in `pen_color` variable</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'Line'</span><span class=\"token operator\">:</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> svg_ast\n <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>코드: <a href=\"https://gist.github.com/kosamari/0dd2a76984e3375c11462276cdf014e1#file-transformer-js\">https://gist.github.com/kosamari/0dd2a76984e3375c11462276cdf014e1#file-transformer-js</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">input: {\n  &quot;type&quot;: &quot;Drawing&quot;,\n  &quot;body&quot;: [{\n    &quot;type&quot;: &quot;CallExpression&quot;,\n    &quot;name&quot;: &quot;Paper&quot;,\n    &quot;arguments&quot;: [{ &quot;type&quot;: &quot;NumberLiteral&quot;, &quot;value&quot;: &quot;100&quot; }]\n  }]\n}\noutput: {\n  &quot;tag&quot;: &quot;svg&quot;,\n  &quot;attr&quot;: {\n    &quot;width&quot;: 100,\n    &quot;height&quot;: 100,\n    &quot;viewBox&quot;: &quot;0 0 100 100&quot;,\n    &quot;xmlns&quot;: &quot;http://www.w3.org/2000/svg&quot;,\n    &quot;version&quot;: &quot;1.1&quot;\n  },\n  &quot;body&quot;: [{\n    &quot;tag&quot;: &quot;rect&quot;,\n    &quot;attr&quot;: {\n      &quot;x&quot;: 0,\n      &quot;y&quot;: 0,\n      &quot;width&quot;: 100,\n      &quot;height&quot;: 100,\n      &quot;fill&quot;: &quot;rgb(0%, 0%, 0%)&quot;\n    }\n  }]\n}</code></pre></div>\n<h4 id=\"4-생성-함수generator-function\" style=\"position:relative;\"><a href=\"#4-%EC%83%9D%EC%84%B1-%ED%95%A8%EC%88%98generator-function\" aria-label=\"4 생성 함수generator function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 생성 함수(Generator function)</h4>\n<p>컴파일러의 마지막 단계로, 생성 함수는 이전 단계에서 새로 만든 AST를 기반으로 SVG 코드를 만들어낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">generator</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">svg_ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// create attributes string out of attr object</span>\n  <span class=\"token comment\">// { \"width\": 100, \"height\": 100 } becomes 'width=\"100\" height=\"100\"'</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createAttrString</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">attr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> key <span class=\"token operator\">+</span> <span class=\"token string\">'=\"'</span> <span class=\"token operator\">+</span> attr<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// top node is always &lt;svg>. Create attributes string for svg tag</span>\n  <span class=\"token keyword\">var</span> svg_attr <span class=\"token operator\">=</span> <span class=\"token function\">createAttrString</span><span class=\"token punctuation\">(</span>svg_ast<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// for each elements in the body of svg_ast, generate svg tag</span>\n  <span class=\"token keyword\">var</span> elements <span class=\"token operator\">=</span> svg_ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;'</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token function\">createAttrString</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'>&lt;/'</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">+</span> <span class=\"token string\">'>'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n\\t'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// wrap with open and close svg tag to complete SVG code</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;svg '</span><span class=\"token operator\">+</span> svg_attr <span class=\"token operator\">+</span><span class=\"token string\">'>\\n'</span> <span class=\"token operator\">+</span> elements <span class=\"token operator\">+</span> <span class=\"token string\">'\\n&lt;/svg>'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>코드: <a href=\"https://gist.github.com/kosamari/82209aadb7f5b974a9637c438b19bdad#file-generator-js\">https://gist.github.com/kosamari/82209aadb7f5b974a9637c438b19bdad#file-generator-js</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">input: {\n  &quot;tag&quot;: &quot;svg&quot;,\n  &quot;attr&quot;: {\n    &quot;width&quot;: 100,\n    &quot;height&quot;: 100,\n    &quot;viewBox&quot;: &quot;0 0 100 100&quot;,\n    &quot;xmlns&quot;: &quot;http://www.w3.org/2000/svg&quot;,\n    &quot;version&quot;: &quot;1.1&quot;\n  },\n  &quot;body&quot;: [{\n    &quot;tag&quot;: &quot;rect&quot;,\n    &quot;attr&quot;: {\n      &quot;x&quot;: 0,\n      &quot;y&quot;: 0,\n      &quot;width&quot;: 100,\n      &quot;height&quot;: 100,\n      &quot;fill&quot;: &quot;rgb(0%, 0%, 0%)&quot;\n    }\n  }]\n}\noutput:\n&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;0 0 100 100&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;\n  &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;100&quot; fill=&quot;rgb(0%, 0%, 0%)&quot;&gt;\n  &lt;/rect&gt;\n&lt;/svg&gt;</code></pre></div>\n<h4 id=\"5-이-모든것을-합쳐-하나의-컴파일러가-된다\" style=\"position:relative;\"><a href=\"#5-%EC%9D%B4-%EB%AA%A8%EB%93%A0%EA%B2%83%EC%9D%84-%ED%95%A9%EC%B3%90-%ED%95%98%EB%82%98%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EA%B0%80-%EB%90%9C%EB%8B%A4\" aria-label=\"5 이 모든것을 합쳐 하나의 컴파일러가 된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 이 모든것을 합쳐 하나의 컴파일러가 된다.</h4>\n<p>지금까지 만든 함수들을 합쳐 \"sbn compiler\"(SVG by numbers compiler)라 부르자. 렉서, 파서, 변형, 생성 메서드를 가지는 sbn 객체를 만들고, 메서드들을 체인으로 연결하는 \"compile\"이라는 메서드를 추가하자.</p>\n<p>이제 코드 문자열을 컴파일 메서드에 넘기면 SVG 출력을 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> sbn <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nsbn<span class=\"token punctuation\">.</span><span class=\"token constant\">VERSION</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.1'</span>\nsbn<span class=\"token punctuation\">.</span>lexer <span class=\"token operator\">=</span> lexer\nsbn<span class=\"token punctuation\">.</span>parser <span class=\"token operator\">=</span> parser\nsbn<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> transformer\nsbn<span class=\"token punctuation\">.</span>generator <span class=\"token operator\">=</span> generator\n\nsbn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">compile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">lexer</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// call sbn compiler</span>\n<span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> <span class=\"token string\">'Paper 0 Pen 100 Line 0 50 100 50'</span>\n<span class=\"token keyword\">var</span> svg <span class=\"token operator\">=</span> sbn<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> svg</code></pre></div>\n<blockquote>\n<p>코드: <a href=\"https://gist.github.com/kosamari/6c610165c0f48c699679bc5a8bab6327#file-compiler-js\">https://gist.github.com/kosamari/6c610165c0f48c699679bc5a8bab6327#file-compiler-js</a></p>\n</blockquote>\n<p>위에 나온 컴파일러의 각 스텝들을 보여줄 수 있는 <a href=\"https://kosamari.github.io/sbn/\">반응형 데모</a>와, sbn 컴파일러 코드를 <a href=\"https://github.com/kosamari/sbn\">github</a>에 공유하고 있으며, 지금도 더 많은 기능을 추가하고 있다. 만약 이번 글에서 만든 기본 컴파일러를 확인하고 싶다면 <a href=\"https://github.com/kosamari/sbn/tree/simple\">simple branch</a>를 확인하면 된다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*7ADpMcLo1VOnW4-fF2vjDg.png\" alt=\"https://kosamari.github.io/sbn/\"></p>\n<blockquote>\n<p><a href=\"https://kosamari.github.io/sbn/\">https://kosamari.github.io/sbn/</a></p>\n</blockquote>\n<h3 id=\"컴파일러는-재귀와-탐색traversal-등을-하면-안되는가\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%8A%94-%EC%9E%AC%EA%B7%80%EC%99%80-%ED%83%90%EC%83%89traversal-%EB%93%B1%EC%9D%84-%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"컴파일러는 재귀와 탐색traversal 등을 하면 안되는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러는 재귀와 탐색(Traversal) 등을 하면 안되는가?</h3>\n<p>그렇다. 재귀와 탐색 모두 컴파일러를 만들기 위한 멋진 기술들이지만, 컴파일러를 만들기 위해 처음부터 접근해야 할 방식을 뜻하는 것은 아니다.</p>\n<p>이 컴파일러는 DNB 프로그래밍 언어의 부분 집합으로 아주 작고 한정된 기능으로 만들기 시작하였다. 그리고서 그 범위를 확장하여 변수, 코드 블록, 루프 등의 기능을 추가할 계획이다. 재귀 탐색과 같은 기술을 사용하는 것은 좋은 아이디어일 수 있지만, 시작할 때부터 필요하지는 않다.</p>\n<h3 id=\"컴파일러를-만드는것은-멋지다\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B2%83%EC%9D%80-%EB%A9%8B%EC%A7%80%EB%8B%A4\" aria-label=\"컴파일러를 만드는것은 멋지다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러를 만드는것은 멋지다.</h3>\n<p>자신만의 컴파일러를 만들면 무엇을 할 수 있을까? 아마 스페인어 버전의 자바스크립트 같은 것들을 만들어 보고 싶을 수도 있는데, español 스크립트는 어떤가?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">// ES (español script)\nfunción () {\n  si (verdadero) {\n    return «¡Hola!»\n  }\n}</code></pre></div>\n<p>프로그래밍 언어를 <a href=\"http://www.emojicode.org/\">Emoji (Emojicode)</a>로 만드는 사람들도 있고, <a href=\"http://www.dangermouse.net/esoteric/piet.html\">색상 이미지 (Piet programming language)</a>로 만드는 사람들도 있다. 가능성은 무궁무진하다.</p>\n<h3 id=\"컴파일러-만들기를-통해-배운것\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B4%EA%B2%83\" aria-label=\"컴파일러 만들기를 통해 배운것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러 만들기를 통해 배운것</h3>\n<p>컴파일러 만들기는 재밌기도 했지만 가장 중요했던 점은 내가 소프트웨어 개발에대한 많은 것들을 생각해볼 수 있었던 것이다. 다음은 내가 컴파일러를 만들며 몇가지 배운 것들이다.</p>\n<p><img src=\"https://cdn-images-2.medium.com/max/800/1*AREFc7UVIAu_YIgk46EwaA.png\" alt=\"box-of-fun\"></p>\n<blockquote>\n<p>How I imagine compiler after making one self</p>\n</blockquote>\n<h4 id=\"1-익숙하지-않은-것을-해보는-것도-괜찮다\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B5%EC%88%99%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EA%B2%83%EC%9D%84-%ED%95%B4%EB%B3%B4%EB%8A%94-%EA%B2%83%EB%8F%84-%EA%B4%9C%EC%B0%AE%EB%8B%A4\" aria-label=\"1 익숙하지 않은 것을 해보는 것도 괜찮다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 익숙하지 않은 것을 해보는 것도 괜찮다.</h4>\n<p>처음 만든 어휘 분석기처럼, 처음부터 모든것을 알 필요는 없다. 만약 코드나 기술을 이해하지 못한 것이 있더라도, 그냥 \"그런게 있다.\" 정도로만 말해도 괜찮다. 그리고 다음 스텝으로 넘어가자. 다 이해하지 못한 것에 스트레스 받지 말자. 결국엔 이해하지 못했던 지점에 도착하고 이해하게 될 것이다.</p>\n<h4 id=\"2-나쁜-에러-메시지로-못되게-굴지-말자\" style=\"position:relative;\"><a href=\"#2-%EB%82%98%EC%81%9C-%EC%97%90%EB%9F%AC-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A1%9C-%EB%AA%BB%EB%90%98%EA%B2%8C-%EA%B5%B4%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"2 나쁜 에러 메시지로 못되게 굴지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 나쁜 에러 메시지로 못되게 굴지 말자.</h4>\n<p>파서의 역할은 규칙을 따르고 코드가 규칙에 따라 쓰였는지 확인한다. 그래서 자주 에러가 발생할 것이다. 에러가 발생했을 때, 도움이되고 환영 받는 메시지로 넘기자. \"그렇게 동작하지 않아.\"라고 (자바스크립트의 \"ILLEGAL Token\"이나 \"undefined is not a function\"처럼)말하는 것은 쉽지만, 사용자에게 더 많은 것들을 알려주려고 노력해보자.</p>\n<p>팀 내 커뮤니케이션도 마찬가지다. 누군가가 어떤 질문에 쩔쩔매고 있다면, 아마 당신은 \"난 어떤 문서의 몇 페이지를 읽어보길 추천해.\"나 \"난 구글에 어떤 키워드로 검색하려 했어.\" 처럼 대답해줄 수 있을 것이다. 직접 대신 일을 해줄 필요는 없지만, 조금 더 많은 정보를 주는 등의 도움은 줄 수 있고, 그럼 그 누군가도 일을 더 잘하고 빨리할 수 있을 것이다.</p>\n<p>Elm은 <a href=\"http://elm-lang.org/blog/compiler-errors-for-humans\">이런 방식을 채택한</a> 프로그래밍 언어다. 이 언어는 에러메시지에 \"Maybe you want to try this?\"과 같은 문구가 있다.</p>\n<h4 id=\"3-컨텍스트가-전부다\" style=\"position:relative;\"><a href=\"#3-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%A0%84%EB%B6%80%EB%8B%A4\" aria-label=\"3 컨텍스트가 전부다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 컨텍스트가 전부다.</h4>\n<p>우리의 변형 함수가 기존 AST를 결과에 조금 더 적합한 또 다른 AST로 변형했던것 처럼, 모든 것들은 맥락에 따라 다르다.</p>\n<p>어떤 일을 하는 완벽한 방법은 없다. 단순히 인기가 있었던 방식이나, 예전에 해보지 못했던 방식이라고 그대로 따라하지 말자. 맥락을 먼저 생각하자. 한 사용자가 쓰는 방법이 또 다른 사용자에게는 재앙일 수 있다.</p>\n<p>그리고 이런 변형기와 같은 역할을 하는 이에게 고마워하자. 당신은 아마 당신의 팀에서 이런 역할을 잘하는 사람을 알고 있을 것이다. 비록 직접 코드를 만들지 않는다 해도 우수한 산출물을 만드는 데는 매우 중요한 것이다.</p>\n<hr>\n여러분이 이 글을 즐겼으면 좋겠다. 컴파일러가 되어보고 만들어보는 것이 얼마나 멋진 일인지 이제 알았을 것이다.\n<p>이 글은 \"JSConf Colombia 2016 in Medellin\"에서 발췌한 것으로, 더 자세히 알고 싶다면 <a href=\"http://kosamari.com/presentation/jsconfcolombia-2016\">발표 슬라이드</a>를 참고해보길 바란다.</p>\n<br>\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"크리에이티브 커먼즈 라이선스\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />이 저작물은 <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">크리에이티브 커먼즈 저작자표시-비영리-동일조건변경허락 4.0 국제 라이선스</a>에 따라 이용할 수 있습니다.","frontmatter":{"id":"ko_20161107","title":"자바스크립트로 컴파일러 만들기","description":"어느 멋진 일요일 Bushwick, Brooklyn의 한 책방에서 John Maeda가 쓴 \"Design by Numbers\"라는 책을 보았다. 이 책은 DBN 프로그래밍 언어(90년대 말 MIT 미디어 연구소에서 시각적인 방법으로 프로그래밍 개념을 소개하도록 고안된 언어)를 차근 차근 설명했다.","date":"2016.11.07","author":"이민규","tags":["etc"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20161107","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}