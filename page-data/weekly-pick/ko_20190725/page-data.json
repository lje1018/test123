{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190725","result":{"data":{"post":{"html":"<h1 id=\"리액트-렌더러를-최적화하는-간단한-트릭\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%9F%AC%EB%A5%BC-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%8A%94-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%8A%B8%EB%A6%AD\" aria-label=\"리액트 렌더러를 최적화하는 간단한 트릭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 렌더러를 최적화하는 간단한 트릭</h1>\n<blockquote>\n<p>원문: <a href=\"https://kentcdodds.com/blog/optimize-react-re-renders\">https://kentcdodds.com/blog/optimize-react-re-renders</a></p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/37766175/62363255-e7f7bc00-b559-11e9-90e7-16fd05d2ffeb.png\" alt=\"banner\">\nPhoto by <a href=\"https://unsplash.com/photos/wDCq6GSvMps\">Evan Dvorkin</a>\n<br></p>\n<p><em>React.memo, PureComponent 또는 shouldComponentUpdate 를 사용하지 않고 최적화하는 방법</em></p>\n<p>필자는 리액트의 리렌더링과 관련된 주제로 블로그 글을 준비하다가 당신이 감사할만한 이 작은 보석같은 리액트 지식을 발견했다.</p>\n<p>(트위터 내용: <a href=\"https://twitter.com/kentcdodds/status/1143200604065431552?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1143200604065431552&#x26;ref_url=https%3A%2F%2Fkentcdodds.com%2Fblog%2Fusememo-and-usecallback\">당신이 마지막 렌더링 때와 동일한 리액트 엘리먼트를 넘긴다면, 리액트는 그 엘리먼트를 리렌더링하지 않을 것이다.</a>)</p>\n<p><img src=\"https://user-images.githubusercontent.com/37766175/61605719-c22d0600-ac81-11e9-9900-a137a2218c1f.png\" alt=\"twitter\"></p>\n<p>이 글을 읽고 난 후, <a href=\"https://twitter.com/BrooksLybrand\">Brooks Lybrand</a>는 이 트릭을 적용하였고 아래와 같은 결과를 얻었다.</p>\n<p>(트위터 내용: <a href=\"https://twitter.com/BrooksLybrand/status/1149800755404185609\">리액트 컴포넌트의 최적화 이전과 이후를 나타낸 것이다. 필자는 메모이제이션을 사용하지 않고, 13.4ms 에서 3.6ms로 렌더링 시간을 줄일 수 있었다. 그리고 이것은 27줄의 코드를 옮기는 것만으로 가능했다.</a>)</p>\n<p><img src=\"https://user-images.githubusercontent.com/37766175/61605727-c8bb7d80-ac81-11e9-8e9c-8f0126e862d4.png\" alt=\"twitter\"></p>\n<p>흥미롭지 않은가? 그럼 인위적으로 작성한 간단한 예제를 보고 실제 앱에서 어떻게 적용할 수 있을지 이야기 해보자.</p>\n<h2 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// codesandbox: https://codesandbox.io/s/react-codesandbox-g9mt5</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>label<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> rendered</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기서 반환되는 값은 부적절하다...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The count is <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Logger label<span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 예제 코드가 실행되면 초기에 \"counter rendered\" 가 콘솔에 기록되며, count 값이 증가 할 때마다 \"counter rendered\" 가 콘솔에 기록될 것이다. 이는 버튼을 클릭 할 때, 상태가 변경되고 리액트가 해당 상태 변경을 기반으로 렌더링 할 새로운 리액트 엘리먼트를 가져와야하기 때문에 발생한다. 그리고 리액트는 새로운 엘리먼트들을 얻으면 이것들을 DOM에 적용하여 렌더링한다.</p>\n<p>여기서 흥미로운 점이 있다. <code class=\"tui-language-text\">&lt;Logger label=&quot;counter&quot; /&gt;</code> 엘리먼트는 렌더링할 때 절대 변하지 않는다는 사실이다. 이는 정적인 엘리먼트이고 따로 추출할 수 있다. 한 번 재미삼아 작업을 해보자.(필자는 당신이 이 방법을 적용하는 것을 추천하지 않는다. 실용적인 권장 사항은 블로그 글 후반에서 다루고 있으니 기다려달라.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// codesandbox: https://codesandbox.io/s/react-codesandbox-o9e9f</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>label<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> rendered</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기서 반환되는 값은 부적절하다...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The count is <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Counter logger<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Logger label<span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>변경된 점을 보았는가? 그렇다! 우리는 초기의 로그는 볼 수 있지만, 더 이상 버튼을 누를 때 새로운 로그는 볼 수 없다! WHAAAAT!?</p>\n<blockquote>\n<p>자세한 기술적인 내용은 모두 넘기고 \"이것이 어떤 의미가 있는가\" 알고 싶다면, <a href=\"https://kentcdodds.com/blog/optimize-react-re-renders#practical\">글의 아래 부분</a>으로 넘어가라.</p>\n</blockquote>\n<h2 id=\"어떻게-된-것-일까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%9C-%EA%B2%83-%EC%9D%BC%EA%B9%8C\" aria-label=\"어떻게 된 것 일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 된 것 일까?</h2>\n<p>무엇이 이런 차이점을 발생시킨 것일까? 그것은 리액트 엘리먼트와 관련이 있다. 원인을 살펴보기 전에 내 블로그의 <a href=\"https://kentcdodds.com/blog/what-is-jsx\">\"What is JSX?\"</a>를 읽으며 리액트 엘리먼트와 JSX 의 관계에 대해 간략히 이해하는 것도 좋다.</p>\n<p>리액트가 counter 함수를 호출하면, 아래와 유사한 무언가를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// 몇 가지를 제거한 예제</span>\n<span class=\"token keyword\">const</span> counterElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          onClick<span class=\"token operator\">:</span> increment<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 클릭 이벤트 핸들러 함수</span>\n          children<span class=\"token operator\">:</span> <span class=\"token string\">\"The count is 0\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Logger<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Logger 컴포넌트 함수</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">\"counter\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것들은 UI 기술 객체라고 불리우며, 리액트가 DOM에서 만들어야 하는 UI를 표현한다(react native에서는 native component들을 표현한다). 버튼을 눌렀을 때 이 객체에 어떤 변화가 생기는지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> counterElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          onClick<span class=\"token operator\">:</span> increment<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 변경</span>\n          children<span class=\"token operator\">:</span> <span class=\"token string\">\"The count is 1\"</span> <span class=\"token comment\">// 변경</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Logger<span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">\"counter\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 <code class=\"tui-language-text\">button</code> 엘리먼트의 props 인 <code class=\"tui-language-text\">onClick</code> 과 <code class=\"tui-language-text\">children</code> 만 변경되었다고 말할 수 있다. 하지만 전체가 완전히 새로운 것으로 변경된다! 이전부터 리액트를 사용하여, 당신은 렌더링할 때마다 이런 새로운 객체들을 만들어왔다 (운좋게, 모바일 브라우저조차도 이런 작업을 굉장히 빠르게 수행하기 때문에 중요한 성능의 문제는 없었다).</p>\n<p>아마 실제로는 리액트 엘리먼트들의 트리 구조에서 렌더링 사이에 동일한 부분을 찾는 것이 더 쉬운 일일 것이다. 여기 버튼을 누르기 전과 누른 후 두 렌더링 사이에 변하지 않는 부분을 나타냈다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> counterElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 불변</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 불변</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          onClick<span class=\"token operator\">:</span> increment<span class=\"token punctuation\">,</span>\n          children<span class=\"token operator\">:</span> <span class=\"token string\">\"The count is 1\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Logger<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 불변</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">\"counter\"</span>  <span class=\"token comment\">// 불변</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>모든 엘리먼트들의 type은 동일하며(이것은 당연한 것이다.), Logger 엘리먼트의 <code class=\"tui-language-text\">label</code> 속성도 변하지 않는다. 그러나 객체의 속성이 이전의 props 객체와 같더라도, props 객체 자체는 매 번 렌더링할 때마다 변경된다.</p>\n<p><strong>바로 여기에 해답이 있다.</strong> Logger props 객체는 변경되기 때문에, 리액트는 새로운 props 객체(또는 props 객체 변화에 따라 실행되는 부수적 효과)에 기반한 JSX를 얻기 위해 Logger 함수를 다시 실행한다. 하지만 만약 렌더링 사이에 props 객체가 변경되는 것을 막을 수 있다면 어떨까? 리액트는 props 객체가 변경되지 않으면, 우리가 발생시킨 변경으로 인해 리렌더링할 필요가 없고, JSX가 변경되어서 안된다는 것을 알고 있다 (<a href=\"https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning\">리액트는 우리의 렌더링 메소드가 멱등수가 되어야한다는 사실에 의존하기 때문이다</a>). 리액트는 처음 나온 이후부터 계속 이런 방식으로 동작하였고, 해당 부분의 리액트 코드는 <a href=\"https://github.com/facebook/react/blob/d420d2ccb6223a66d5e8fe824ac0d31ed5bf87a1/packages/react-reconciler/src/ReactFiberBeginWork.js#L2571-L2575\">여기</a>서 볼 수 있다.</p>\n<p>하지만 문제는 <a href=\"https://github.com/facebook/react/blob/745baf2e061bdb7a07b511fa6fd8c1c5e8106313/packages/react/src/ReactElement.js#L177\">리액트가 리액트 엘리먼트를 생성할 때마다 props 객체를 새로 만든다는 것이다</a>. 그러면 우리는 렌더링 사이에 props 객체가 변화하지 않는다는 것을 어떻게 확실하게 할 수 있을까? 이제 당신이 위의 두 번째 예제에서 왜 Logger 엘리먼트가 리렌더링 되지 않았는지 이해했으면 좋겠다. 우리가 JSX 엘리먼트를 한 번 만들고, 그것을 재사용한다면 우리는 항상 같은 JSX 엘리먼트를 얻을 수 있는 것이다!</p>\n<h2 id=\"같이-이전으로-돌아가-보자\" style=\"position:relative;\"><a href=\"#%EA%B0%99%EC%9D%B4-%EC%9D%B4%EC%A0%84%EC%9C%BC%EB%A1%9C-%EB%8F%8C%EC%95%84%EA%B0%80-%EB%B3%B4%EC%9E%90\" aria-label=\"같이 이전으로 돌아가 보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>같이 이전으로 돌아가 보자</h2>\n<p>다시 두 번째 예제를 보자.(스크롤을 올려 되돌아갈 필요가 없다)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// codesandbox: https://codesandbox.io/s/react-codesandbox-o9e9f</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>label<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> rendered</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기서 반환되는 값은 부적절하다...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The count is <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Counter logger<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>Logger label<span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그럼 렌더링 사이에 동일한 부분을 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> counterElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 불변</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 불변</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          onClick<span class=\"token operator\">:</span> increment<span class=\"token punctuation\">,</span>\n          children<span class=\"token operator\">:</span> <span class=\"token string\">\"The count is 1\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Logger element 자체가 불변한다.</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Logger<span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">\"counter\"</span>\n        <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Logger 엘리먼트 자체는 전혀 변경되지 않았기 때문에(props 도 역시 변경되지 않았다), 리액트가 자동으로 이런 최적화를 제공할 수 있고 다시 렌더링 할 필요가 없는 Logger 엘리먼트를 렌더링하지 않는다. 이 방법은 각각의 props를 모두 체크하는 것 대신에, 리액트가 props 객체 전체만 체크한다는 것을 제외하고 기본적으로 <code class=\"tui-language-text\">React.memo</code> 동작 방식과 같다.</p>\n<h2 id=\"그래서-이것이-어떤-의미가-있는가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EA%B0%80-%EC%9E%88%EB%8A%94%EA%B0%80\" aria-label=\"그래서 이것이 어떤 의미가 있는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 이것이 어떤 의미가 있는가?</h2>\n<p>요약하면, 성능 문제를 겪고 있다면 이것을 시도해봐라:</p>\n<ol>\n<li>렌더링 비용이 비싼 컴포넌트는 부모 컴포넌트와 같은 레벨로 \"끌어 올려서\" 렌더링을 횟수를 줄인다.</li>\n<li>그리고 해당 컴포넌트를 prop으로 내려준다.</li>\n</ol>\n<p>당신은 거슬리는 반창고와 같이 코드베이스 전체에 <code class=\"tui-language-text\">React.memo</code>를 적용할 필요없이 성능 문제를 해결할 수 있다.🤕😉</p>\n<h2 id=\"데모\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EB%AA%A8\" aria-label=\"데모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데모</h2>\n<p>리액트에서 느린 앱의 실용적인 데모를 만드는 것은 다소 어려운 일이다. 그 이유는 앱 전체를 빌드해야하기 때문이다. 하지만 여기 당신이 이전 / 이후를 확인하고 수정할 수 있는 인위적인 예제 앱이 있다.</p>\n<p><a href=\"https://codesandbox.io/s/react-codesandbox-qtdob?from-embed\">데모 링크</a></p>\n<blockquote>\n<p>한 가지 추가적으로 말하고 싶은 것은 이 코드의 더 빠른 버전을 사용하여도, 초기 렌더링의 성능은 여전히 좋지 않다는 것이다. 그리고 다른 하향식 렌더링을 다시 수행해야 한다면(또는 행/열을 업데이트하거나) 성능이 매우 좋지 않을 것이다. 이는 자체적으로 처리해야 하는 성능상의 문제이다(리렌더링이 얼마나 필요한지와 관계없다). 또한 codesandbox에서 당신에게 제공하는 리액트의 버전은 편리한 개발의 경험을 제공해줄 뿐이고, 리액트의 production 버전보다 느리게 수행된다는 것을 기억해달라.</p>\n</blockquote>\n<p>그리고 이 방법은 앱의 최상위 레벨에서만 유용한 것이 아니다. 렌더링 성능 문제를 해결하기 위해 당신의 앱 어디에서든 적용 가능하다. 내가 이 방법을 좋아하는 이유는 다음과 같다 <a href=\"https://twitter.com/dan_abramov/status/1143201204094341120\">\"이 방식은 자연스러운 컴포넌트의 구성 방식이면서 최적화에도 도움을 줄 수 있다.\"</a>(Dan이 말한 것이다). 필자는 자연스럽게 이 방법을 적용하였고 더불어 성능 향상의 효과까지 얻었다. 그리고 그것이 항상 내가 리액트에서 좋아했던 부분이다. <strong>리액트는 기본적으로 리액트 앱이 빠르게 동작할 수 있도록 작성되었고, 당신이 필요한 경우 사용할 수 있는 여러 최적화 헬퍼들을 제공한다.</strong></p>\n<p>행운을 빈다!</p>\n<blockquote>\n<p>필자는 만약 당신이 기존 context를 사용하는 경우라면 <a href=\"https://github.com/facebook/react/blob/d420d2ccb6223a66d5e8fe824ac0d31ed5bf87a1/packages/react-reconciler/src/ReactFiberBeginWork.js#L2576\">리액트 내부의 특별한 처리때문에</a> 이 최적화 방법을 적용할 수 없을 거라 알려주고 싶다. 따라서 성능에 관심이 있는 사람들은 기존 context에서 마이그레이션 작업을 해야만 할 것이다.</p>\n</blockquote>","frontmatter":{"id":"ko_20190725","title":"리액트 렌더러를 최적화하는 간단한 트릭","description":"React.memo, PureComponent 또는 shouldComponentUpdate 를 사용하지 않고 최적화하는 방법. 필자는 리액트의 리렌더링과 관련된 주제로 블로그 글을 준비하다가 당신이 감사할만한 이 작은 보석같은 리액트 지식을 발견했다. 이 글을 읽고 난 후, Brooks Lybrand는 이 트릭을 적용하였고 아래와 같은 결과를 얻었다. 흥미롭지 않은가? 그럼 인위적으로 작성한 간단한 예제를 보고 실제 앱에서 어떻게 적용할 수 있을지 이야기 해보자.","date":"2019.07.25","author":"이재성","tags":["React","performance"],"thumbnail":"https://user-images.githubusercontent.com/37766175/62363255-e7f7bc00-b559-11e9-90e7-16fd05d2ffeb.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190725","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}