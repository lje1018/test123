{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170609","result":{"data":{"post":{"html":"<h1 id=\"웹-컴포넌트2---커스텀-엘리먼트\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B82---%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8\" aria-label=\"웹 컴포넌트2   커스텀 엘리먼트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 컴포넌트(2) - 커스텀 엘리먼트</h1>\n<p>오늘은 이전에 썼던 글 <a href=\"/test123/weekly-pick/ko_20170428\">WebComponents: Keep calm and #UseThePlatform</a>에 이어지는 것으로, Web Components의 주요 표준 중 하나인 Custom Elements에 대한 글이다.</p>\n<h2 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tl;dr</h2>\n<ul>\n<li><code class=\"tui-language-text\">&lt;div&gt;</code> 대신 <code class=\"tui-language-text\">&lt;current-time&gt;</code>처럼 적절한 이름의 태그를 사용할 수 있다</li>\n<li>HTML Element와 Javascript Class를 한 몸으로 만들어 준다</li>\n<li>IE11 이상만 지원, Polyfill 필요할 수도 있다</li>\n<li>긴 MutationObserver 코드는 굿바이</li>\n</ul>\n<p>사용법은 아래의 코드를 보는 것이 빠르겠다. 아래의 코드를 크롬이나 사파리에 올려보자. 이외의 브라우저에서는 아래의 <strong>브라우저 지원과 Polyfill</strong> 섹션을 참조하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../src/CurrentTime.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>current-time</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- fallback value --></span>\n      6/11/2017, 11:55:49\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>current-time</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 클래스 초기화. 속성이나 하위 노드는 접근할 수는 없다.</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 모니터링 할 속성 이름</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// DOM에 추가되었다. 렌더링 등의 처리를 하자.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// DOM에서 제거되었다. 엘리먼트를 정리하는 일을 하자.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrName<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 속성이 추가/제거/변경되었다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>attrName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldDoc<span class=\"token punctuation\">,</span> newDoc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 다른 Document에서 옮겨져 왔음</span>\n    <span class=\"token comment\">// 자주 쓸 일은 없을 것.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필요에 따라 메서드를 추가할 수 있다.</span>\n    <span class=\"token comment\">// 이 클래스 인스턴스는 HTMLElement이다.</span>\n    <span class=\"token comment\">// 따라서 `document.querySelector('current-time').start()`로 호출할 수 있다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이 메서드 역시 CurrentTime클래스의 필요에 의해 추가했다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// &lt;current-time> 태그가 CurrentTime 클래스를 사용하도록 한다.</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time\"</span><span class=\"token punctuation\">,</span> CurrentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래에는 참고로 비슷한 역할을 수행하도록 Custom Elements를 사용하지 않고 작성한 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../src/CurrentTime.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>current-time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- fallback value --></span>\n      6/11/2017, 11:55:49\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 속성 변경을 모니터</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_localeChangedObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      mutations<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"attributes\"</span> <span class=\"token operator\">&amp;&amp;</span>\n          mutation<span class=\"token punctuation\">.</span>attributeName <span class=\"token operator\">===</span> <span class=\"token string\">\"locale\"</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_localeChangedObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attributes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      attributeFilter<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 엘리먼트가 DOM에서 제거되었는지 모니터</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      mutations<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"childList\"</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>removedNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span>\n            <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      childList<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_localeChangedObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CurrentTime</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".current-time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      CurrentTime<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"modernizing-html-빠진-조각\" style=\"position:relative;\"><a href=\"#modernizing-html-%EB%B9%A0%EC%A7%84-%EC%A1%B0%EA%B0%81\" aria-label=\"modernizing html 빠진 조각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modernizing HTML: 빠진 조각</h2>\n<p>천천히 글을 읽어보기로 했다면 아래의 W3C에서 발췌한 서문부터 시작해 본다.</p>\n<blockquote>\n<p>This specification describes the method for enabling the author to <strong>define and use new types of DOM elements in a document.</strong> - <a href=\"https://www.w3.org/TR/custom-elements/\">W3C: Custom Elements</a></p>\n</blockquote>\n<p>W3C의 Custom Elements 표준 서문은 이를 <strong>새로운 DOM Elements를 정의하고 사용하는 방법</strong>이라 말하고 있다. 필자에 따라서는 <strong>Missing Piece of HTML(HTML에 빠진 조각)</strong>, <strong>Association of a tag with a class(태그와 클래스의 연동)</strong> 이라고도 한다.</p>\n<p>HTML은 우리 모두 잘 알다시피 웹 페이지 문서의 구조를 설명하기 위해 태어난 언어로, 현대의 웹 애플리케이션을 만들기 위해 컴포넌트로써 사용하는 것은 어색하다. HTML 표준은 우리가 애플리케이션을 만들 때 필요한 컴포넌트들의 정의는 포함하지 않기 때문이다.</p>\n<h3 id=\"div-중독증\" style=\"position:relative;\"><a href=\"#div-%EC%A4%91%EB%8F%85%EC%A6%9D\" aria-label=\"div 중독증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Div 중독증</h3>\n<p>우리가 웹 애플리케이션을 작성할 때 가장 많이 사용하는 태그는 무엇인가? 기억을 돌이킬 필요도 없이 <code class=\"tui-language-text\">div</code>태그이다. 아래는 gmail의 마크업이지만, 우리 모두 이렇게 사용하고 있음을 부정할 사람은 없을 것이다. 때에 따라서 <code class=\"tui-language-text\">figure</code>, <code class=\"tui-language-text\">code</code>, <code class=\"tui-language-text\">nav</code>등의 태그들을 조금 더 섞어 줄 수 있겠으나, 그 의미적인 태그들이 우리가 <code class=\"tui-language-text\">div</code>를 쓰고 있는 이유를 없애 주지는 않는다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/27008633-a01da004-4eb1-11e7-9513-8bfd45f30538.png\" alt=\"image\">\n<em>'div' soup: 묻지도 따지지도 말고 몽땅 div에 넣고 저어라!</em></p>\n<p>한번은 왜 <code class=\"tui-language-text\">div</code>인가? 하는 물음을 가지고 다른 방법을 찾아보기도 했지만, HTML 표준에 따르자면 다른 태그들도 마땅치 해결책이 되지는 않았다. 비슷한 용도로 쓰이는 <code class=\"tui-language-text\">span</code>으로 만들라 한들 문제가 될 리 없으나, 인라인 태그 안에 블록 태그를 넣는 것은 HTML 스펙을 무시하는 일이니 결국 어떤 컴포넌트던지 블록 태그인 <code class=\"tui-language-text\">div</code>에 담는 것으로 돌아오고 만다.</p>\n<blockquote>\n<p>Authors are strongly encouraged to view the div element as an element of last resort, for when <strong>no other element is suitable</strong>. - <a href=\"https://www.w3.org/TR/2016/REC-html51-20161101/grouping-content.html#the-div-element\">W3C HTML5.1: The div element</a> > <em>아무런 엘리먼트도 어울리지 않으니 <code class=\"tui-language-text\">div</code>를 사용한다</em></p>\n</blockquote>\n<p>할 수만 있다면, 의미 없는 div를 남발하는 것보다 의미 있는 태그 이름을 주는 쪽이 좋지 않을까? 기존 HTML 표준은 <code class=\"tui-language-text\">div</code>이외에 마땅한 해결책을 주지 않았지만, 아래는 Custom Elements를 사용하여 적절한 이름을 가지게 한 마크업의 예시이다. 이쁘다!</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user-profile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layout card small<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user-profile</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>card-layout</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>small<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>card-layout</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user-profile</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"자바스크립트---html-마리오네트-인형극\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8---html-%EB%A7%88%EB%A6%AC%EC%98%A4%EB%84%A4%ED%8A%B8-%EC%9D%B8%ED%98%95%EA%B7%B9\" aria-label=\"자바스크립트   html 마리오네트 인형극 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 - HTML: 마리오네트 인형극</h3>\n<p><img src=\"https://user-images.githubusercontent.com/1215767/27008642-f9cc38b8-4eb1-11e7-9873-49ccb33a0103.png\" alt=\"image\"></p>\n<p><em>div 인형들을 실로 묶어 자바스크립트가 연출하는 꼭두각시 인형극 - [Polymer 2.0: Under the Hood - Rob Dodson](<a href=\"https://www.youtube.com/watch?v=9vYJ8K6A\">https://www.youtube.com/watch?v=9vYJ8K6A</a></em>Kc)_</p>\n<p>위에서부터 얘기했지만 사실 <code class=\"tui-language-text\">div</code> 엘리먼트는 자바스크립트와 연관이 없다. \"음? 무슨 말이지? 자바스크립트로 웹 애플리케이션 잘 만들고 있는데!\" 물론 그렇다. 다시 고쳐 말하자면 엘리먼트들은 자바스크립트를 알지 못하며, 자바스크립트는 엘리먼트들을 조정해 꼭두각시 인형처럼 연출한다. 아래의 익숙한 코드들을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// 자바스크립트 컨트롤을 묶을 엘리먼트를 받아와야 한다.</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 이 클래스 인스턴스가 `유지하는 엘리먼트`의 innerText</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 클래스 인스턴스와 엘리먼트의 라이프사이클은 다르다.</span>\n<span class=\"token comment\">// bootstrap</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    CurrentTime<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.current-time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// finalize</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    childList<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리에게 너무나도 익숙하기에 당연하게 느껴지겠지만 아래의 Custom Elements를 정의하는 코드와 비교하며 어떠한 점이 다른지 찾아보자. 아래의 자세한 로직은 곧 설명할 테니 걱정 말자!</p>\n<p>위의 코드에서는 자바스크립트에게 엘리먼트를 패스해주기 전까지 서로 어떠한 관계도 없다. 자바스크립트에게 패스해 준 이후에도 엘리먼트는 프로퍼티에 저장해 두고 조작해야 할 3인칭 대상이다. 또한 클래스 인스턴스와 엘리먼트는 라이프 사이클을 달리하기에 항상 부트스트랩 코드가 필요하며 경우에 따라서는 길고 고통스러운 MutationObserver 코드를 작성해야 하기도 한다. (<em>심지어 대상 엘리먼트가 DOM에서 제거되었는지 알기 위해서는 대상 엘리먼트의 상위 엘리먼트까지 살펴야 한다!</em>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// connect</span>\n<span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// disconnect</span>\n<span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Custom Elements의 코드에서는 클래스의 인스턴스 <code class=\"tui-language-text\">this</code>가 엘리먼트 인스턴스 자체이다. 엘리먼트와 클래스 인스턴스는 동일한 라이프 사이클을 가지기에, 엘리먼트의 라이프 사이클에 맞추기 위한 어떠한 부트스트랩 코드나 MutationObserver가 필요하지 않다. 첫번째 코드는 우리에게 익숙하지만 두번째 코드는 생소하지만 무척이나 간결하고도 자연스럽다.</p>\n<p><strong>Custom Elements는 웹 애플리케이션을 작성하는데 필요한 HTML의 빠진 조각을 자연스러우면서도 직관적인 방법으로 제공해준다.</strong></p>\n<h2 id=\"구현-한-걸음씩\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%ED%95%9C-%EA%B1%B8%EC%9D%8C%EC%94%A9\" aria-label=\"구현 한 걸음씩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현: 한 걸음씩</h2>\n<h3 id=\"엘리먼트와-클래스-묶어주기\" style=\"position:relative;\"><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"엘리먼트와 클래스 묶어주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엘리먼트와 클래스 묶어주기</h3>\n<p>무엇을 하고 싶은지 알아봤으니, 이제 Custom Elements를 등록하는 방법부터 차근차근 알아보겠다. 아래는 가장 간단한 코드로 Custom Elements를 등록하는 방법이다. 이는 <code class=\"tui-language-text\">window</code>의 <a href=\"https://www.w3.org/TR/custom-elements/#custom-elements-api\">CustomElementRegistry</a>에 <code class=\"tui-language-text\">custom-time</code>태그와 주어진 클래스를 묶는 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>current-time</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>current-time</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이것으로 HTML에서 <code class=\"tui-language-text\">&lt;current-time&gt;</code>태그를 사용할 수 있게 되었다. 아무런 로직을 주지 않았으므로 별 의미 없는 일이 되었지만 엄연히 <code class=\"tui-language-text\">current-time</code>은 HTML에서 사용될 수 있는 Custom Element가 되었다.</p>\n<h3 id=\"이름-규칙--를-포함하자\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%A6%84-%EA%B7%9C%EC%B9%99--%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%98%EC%9E%90\" aria-label=\"이름 규칙  를 포함하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이름 규칙: <code class=\"tui-language-text\">-</code>를 포함하자</h3>\n<p>주의할 점은 태그의 이름인데, Custom Elements는 특별한 이름 규칙을 필요로 한다. 쉽게 설명하면 글자 가운데 <code class=\"tui-language-text\">-</code>를 하나 이상 포함해야 한다는 것이다.\n<a href=\"https://www.w3.org/TR/custom-elements/#valid-custom-element-name\">W3C Custom Elements: 올바른 이름 규칙</a></p>\n<h4 id=\"올바른-이름-예\" style=\"position:relative;\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%9D%B4%EB%A6%84-%EC%98%88\" aria-label=\"올바른 이름 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>올바른 이름 예</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tui-editor</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tui-editor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-element</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-element</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>super-awsome-carousel</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>super-awsome-carousel</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"잘못된-이름-예\" style=\"position:relative;\"><a href=\"#%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%9D%B4%EB%A6%84-%EC%98%88\" aria-label=\"잘못된 이름 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잘못된 이름 예</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tuieditor</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tuieditor</span><span class=\"token punctuation\">></span></span> /* `-` 없음 */ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font-face</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font-face</span><span class=\"token punctuation\">></span></span> /* 예약된 태그\n이름 SVG */ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>missing-glyph</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>missing-glyph</span><span class=\"token punctuation\">></span></span> /* 예약된 태그 이름 SVG */</code></pre></div>\n<p>이러한 제약을 가지는 이유는 HTML파서가 자바스크립트에서 선언된 Custom Elements를 모르는 상황에서도 Custom Elements가 <strong>될지도</strong> 모르는 태그들을 구분하기 위해서이다. HTML표준에 정의되어 있지 않으면서도 Custom Elements 이름 규칙에 맞지 않는 태그들은 <code class=\"tui-language-text\">HTMLUnknownElement</code>인터페이스가 할당된다. 그러나 Custom Elements들은 <code class=\"tui-language-text\">HTMLElement</code>로부터 직접 상속되어야 하므로 Custom Elements 이름 규칙에 맞는 것들의 <code class=\"tui-language-text\">HTMLUnknownElement</code> 상속을 막기 위해서이다.\n<a href=\"https://html.spec.whatwg.org/multipage/dom.html#elements-in-the-dom\">WHATWG: 태그 이름에 따라 HTMLElement 인터페이스가 할당되는 방법</a></p>\n<h3 id=\"htmlelement의-상속과-constructor\" style=\"position:relative;\"><a href=\"#htmlelement%EC%9D%98-%EC%83%81%EC%86%8D%EA%B3%BC-constructor\" aria-label=\"htmlelement의 상속과 constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTMLElement의 상속과 constructor</h3>\n<p>여태까지의 예제에서도 그러했지만, Custom Elements 스펙은 기본적으로 es6 클래스를 등록하도록 정의 되어있다(<em>es5 prototype 형태를 사용하는 방법은 뒤에서 다룬다</em>). 그리고 당연하지만 Custom Elements 클래스 <code class=\"tui-language-text\">constructor</code>는 여타 es6 클래스의 <code class=\"tui-language-text\">constructor</code>와 다를 바 없이 동작한다.\n아래의 'yey!'메시지는 예상할 수 있는 대로 <code class=\"tui-language-text\">new CurrentTime()</code>을 통해 새로운 인스턴스를 생성할 때마다 확인할 수 있다. 또한 DOM에 <code class=\"tui-language-text\">&lt;current-time&gt;</code>엘리먼트가 추가될 때마다도 메시지를 보여줄 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>current-time</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>current-time</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 항상 맨 앞에!</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yey!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time\"</span><span class=\"token punctuation\">,</span> CurrentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다만 사용법에 있어서 주의할 점이 있는데, 전통적인 방법에서 우리는 아래의 코드처럼 <code class=\"tui-language-text\">constructor</code>에서 DOM을 조작하는 데 익숙하다. 이것이 가능한 이유는 우리가 Document의 'DOMContentLoaded'이벤트를 받아 DOM이 로드되고 나서 class를 초기화하기에 <code class=\"tui-language-text\">constructor</code>가 실행되는 시점에서 엘리먼트는 DOM에 붙어있는 상태이다. 따라서 <code class=\"tui-language-text\">constructor</code>에서 어떠한 DOM 조작을 해도 무방하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initDOM</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DOM 조작들</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나 HTMLElement를 상속받은 Custom Elements의 constructor의 실행 시점은 아직 DOM에 추가지되지 않은 상태이다. 그렇기에 아래처럼 <code class=\"tui-language-text\">constructor</code>에서는 어떠한 DOM 조작도 할 수 없다. 그러므로, 이곳에서는 DOM과 무관한 클래스 인스턴스 자체의 준비만 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 항상 맨 앞에!</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\"</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'locale'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'locale'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ko-KR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러: Uncaught DOMException: Failed to construct 'CustomElement': The result must not have attributes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'Arr'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러: Uncaught DOMException: Failed to construct 'CustomElement': The result must not have children</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"connectedcallback--disconnectedcallback\" style=\"position:relative;\"><a href=\"#connectedcallback--disconnectedcallback\" aria-label=\"connectedcallback  disconnectedcallback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>connectedCallback &#x26; disconnectedCallback</h3>\n<p><code class=\"tui-language-text\">connectedCallback</code>과 <code class=\"tui-language-text\">disconnectedCallback</code>은 <code class=\"tui-language-text\">HTMLElement</code>를 상속받은 경우, 이 Custom Element가 DOM에 추가되거나/제거될 때마다 실행된다. 이때마다 인스턴스 객체가 생성/파괴되는 것은 아니므로, DOM을 수정함에 따라 얼마든지 여러 번 실행될 수 있다.\n또한 한번 생성된 객체는 자동으로 파괴되지 않으므로 <code class=\"tui-language-text\">disconnectedCallback</code>에서 적절히 인스턴스 객체를 정리하는 작업을 해 줄 필요도 있다.\n<code class=\"tui-language-text\">connectedCallback</code>의 실행 시점은 이 인스턴스가 DOM에 추가된 후이기 때문에 DOM을 조작하는 작업을 이곳에서 하는 것이 알맞다. 밑의 코드를 실행해보면 예상하는 대로 속성/부모/자식의 값을 수정할 수 있다.</p>\n<p>이 콜백들을 사용할 때에도 주의할 점이 있는데, <code class=\"tui-language-text\">connectedCallback</code>이 실행되는 시점에 이 엘리먼트가 DOM에 추가되어 있기는 하지만, 자식 엘리먼트들은 아직 DOM에 추가되지 않았다. 따라서 자식 엘리먼트를 수정할 수는 있더라도, HTML에서 삽입한 자식 엘리먼트들에 접근할 수는 없다는 점에 유의하자.</p>\n<p>별도로 자식 엘리먼트들에 접근하는 방법은 뒤에서 알아보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>current-time</span> <span class=\"token attr-name\">locale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko-KR<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  자식!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>current-time</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이 엘리먼트는 DOM에 추가되었다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok \"&lt;body>&lt;/body>\"</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null &lt;--- 아직 자식 엘리먼트에 접근할 수는 없다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\" &lt;--- 아직 자식 엘리먼트에 접근할 수는 없다.</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'locale'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok \"ko=KR\"</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'locale'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'en-US'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'Arr'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이 엘리먼트가 DOM에서 제거되었다.</span>\n        <span class=\"token comment\">// connectedElement에서 수행한 셋업을 청소하는 일을 하자</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current-time'</span><span class=\"token punctuation\">,</span> CurrentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 콜백 메서드들은 <code class=\"tui-language-text\">MutationObserver</code>의 <code class=\"tui-language-text\">chlidList</code>를 통해 처리하는 방식보다 간결하고 직관적인 방법을 제공해준다. 아래의 <code class=\"tui-language-text\">MutationObserver</code>를 통한 방식과 비교해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mutations<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'childList'</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>removedNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disconnectedObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_el<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    childList<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>이 <code class=\"tui-language-text\">MutationObserver</code>가 IE11부터 지원하고, 비슷한 기능을 제공하는 <code class=\"tui-language-text\">MutationEvents</code>는 deprecated 되었다. 이러한 점들과 Custom Elements 역시 IE11부터 지원하는 점을 고려해 볼 때, <code class=\"tui-language-text\">MutationObserver</code>를 사용해야 할 프로젝트에서는 Custom Elements 도입을 적극 고려해 보아도 좋겠다는 생각이다.</p>\n<p>(<em>Mutation Events는 성능에도 문제가 있다 - <a href=\"https://lists.w3.org/Archives/Public/public-webapps/2011JulSep/0779.html\">Mutation Events Replacement: The story so far / existring points of consensus</a></em>)</p>\n<h3 id=\"attributechangedcallback--observedattributes\" style=\"position:relative;\"><a href=\"#attributechangedcallback--observedattributes\" aria-label=\"attributechangedcallback  observedattributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>attributeChangedCallback &#x26; observedAttributes</h3>\n<p><code class=\"tui-language-text\">attributeChangedCallback</code>은 위의 콜백들과 마찬가지로 <code class=\"tui-language-text\">MutationObserver</code>에서 <code class=\"tui-language-text\">attributes</code>를 모니터링하는 기능을 한다. 주어진 이름으로 메서드를 등록해 놓으면 속성이 변경될 때마다 콜백 메서드가 실행된다. 한가지 잊지 말아야 할 것은 <code class=\"tui-language-text\">observedAttributes</code>에서 관심 있는 속성들의 이름을 나열해 주어야 한다는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 모니터링 할 속성 이름</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'locale'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">attrName<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 속성이 추가/제거/변경되었다.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>attrName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h3 id=\"adoptedcallback\" style=\"position:relative;\"><a href=\"#adoptedcallback\" aria-label=\"adoptedcallback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>adoptedCallback</h3>\n<p>이 콜백 메서드는 해당 엘리먼트가 다른 Document에서 옮겨져 올 때 수행된다. <code class=\"tui-language-text\">document.adoptNode()</code>가 이 엘리먼트를 대상으로 실행되었을 때 호출된다고 설명되어 있다. 아직 특별한 쓰임새는 보이지 않으므로 알고만 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldDoc<span class=\"token punctuation\">,</span> newDoc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 다른 Document에서 옮겨져 왔음</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이로써 Custom Elements의 스펙을 기준으로 하나씩 구현에 필요한 내용들을 살펴보았다. Custom Elements가 새로운 개념을 도입하기에 독자에 생소하고 어려워 보일 수 있다고 본다. 하지만 위의 내용들을 정리해 보면 결코 많은 내용을 담고 있지 않다. 더불어 엘리먼트와 인스턴스 콜백들의 주의점 들은 엘리먼트의 라이프 사이클을 고려해보면 당연하다고도 볼 수 있는 내용들이니 겁내지 말자.</p>\n<ul>\n<li>window.customElements.define: 태그 이름과 클래스를 연결해 준다.</li>\n<li>태그 이름에는 반드시 하나 이상의 <code class=\"tui-language-text\">-</code>를 포함해야 한다.</li>\n<li>constructor: 인스턴스의 생성이며 DOM 조작은 할 수 없다.</li>\n<li>connectedCallback / disconnectedCallback: 엘리먼트가 DOM에 추가/제거되었다. DOM 조작을 할 수 있다.</li>\n<li>attributeChangedCallback / observedAttributes: 관심 있는 속성들을 모니터링 할 수 있다.</li>\n<li>adoptedCallback: 잊자.</li>\n</ul>\n<h2 id=\"브라우저-지원과-polyfill\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A7%80%EC%9B%90%EA%B3%BC-polyfill\" aria-label=\"브라우저 지원과 polyfill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 지원과 Polyfill</h2>\n<h3 id=\"브라우저-지원\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A7%80%EC%9B%90\" aria-label=\"브라우저 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 지원</h3>\n<ul>\n<li>\n<p><a href=\"https://www.chromestatus.com/features/4696261944934400\">Chrome</a>: 지원</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/1215767/27018660-0cbada7c-4f6d-11e7-87cb-ef7b18a02c35.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/?q=custom%20elements\">Edge</a>: 개발 예정, 현재 Polyfill로 지원</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/1215767/27018695-4b6cd68a-4f6d-11e7-9fac-87c06317ffe9.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://platform-status.mozilla.org/\">Firefox</a>: 개발 중, 현재 Polyfill로 지원</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/1215767/27018732-8a4085be-4f6d-11e7-83f1-c1711db5cf17.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://webkit.org/status/#?search=custom%20elements\">Safari</a>: 지원</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/1215767/27018752-b14624d4-4f6d-11e7-85a3-289b14f545d1.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/webcomponents/webcomponentsjs\">IE11</a>: 네이티브 지원 없음, 현재 Polyfill로 지원</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/1215767/27018784-fff29716-4f6d-11e7-9bc4-3d5f63dfd9b5.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://caniuse.com/#feat=custom-elementsv1\">Chrome Android, Mobile Safari</a>: 지원</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/1215767/27018852-90a301d8-4f6e-11e7-9d7b-f2d01c10504a.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"polyfill\" style=\"position:relative;\"><a href=\"#polyfill\" aria-label=\"polyfill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Polyfill</h3>\n<p>모바일을 포함 IE11 이상의 최신 브라우저에서 Polyfill을 사용하면 Custom Elements를 사용할 수 있다. 쉬운 접근은 <code class=\"tui-language-text\">webcomponents-loader.js</code>를 사용하는 것이며, 만약 프로젝트 소스들을 babel로 트랜스파일 하고있다면 <code class=\"tui-language-text\">custom-elements-es5-adapter.js</code>를 추가해준다.\n구글 스타일 답다고 해야할지 모르겠으나 Polyfill 사용에 다양한 옵션을 제공해 주는데 크게 아래의 3가지 방법으로 해결 가능하다.</p>\n<ul>\n<li><a href=\"https://github.com/webcomponents/custom-elements\">Custom Elements polyfill</a> Custom Elements Polyfill만 포함</li>\n<li><a href=\"https://github.com/webcomponents/webcomponentsjs\">webcomponentjs concatenated</a>의 Polyfill은 약간 복잡한 모양새를 가지고 있는데, <code class=\"tui-language-text\">webcomponents-hi-ce.js</code>, <code class=\"tui-language-text\">webcomponents-hi-sd-ce.js</code>등의 Custom Elements의 약자인 <code class=\"tui-language-text\">ce</code>가 포함된 파일을 사용하거나, 모든 폴리필을 포함한 <code class=\"tui-language-text\">webcomponents-lite.js</code>를 사용하면 된다.</li>\n<li><a href=\"https://github.com/webcomponents/custom-elements\">webcomponentsjs loader</a> 다이나믹으로 필요한 것만 로드하는 polyfill loader</li>\n</ul>\n<p>우리는 종종 브라우저 지원을 넓히기 위해 es5로 자바스크립트를 트랜스파일 하는데, Custom Elements 표준은 <code class=\"tui-language-text\">customElements.define</code>에 es6 class를 요구한다. 이러한 경우에는 <code class=\"tui-language-text\">custom-elements-es5-adapter.js</code>를 추가적으로 로드할 필요가 있다.\n주의할 점은 <code class=\"tui-language-text\">custom-elements-es5-adapter.js</code>는 네이티브로 브라우저에서 Custom Elements를 지원하는데, 자바스크립트 파일을 es5로 트랜스파일 한 경우에 필요한 것이지, IE11에 필요한 것은 아니라는 것이다.</p>\n<h2 id=\"조금-더-자세한-얘기들\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%9E%90%EC%84%B8%ED%95%9C-%EC%96%98%EA%B8%B0%EB%93%A4\" aria-label=\"조금 더 자세한 얘기들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조금 더 자세한 얘기들</h2>\n<p>위의 내용은 주요한 개념에 따라 움직이는 것들이기에 확실히 이해해두면 좋다. 이제부터는 위에서 알아본 주요한 스펙 이외에 실제 Custom Elements를 구현할 때 만날 수 있는 내용들을 조금 더 자세히 알아볼 것인데, 바로 이해하지 않더라도 추후 참고할 수 있을 정도로 읽어두자.</p>\n<h3 id=\"업그레이드\" style=\"position:relative;\"><a href=\"#%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C\" aria-label=\"업그레이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>업그레이드</h3>\n<p>만일 Custom Elements를 <code class=\"tui-language-text\">customElements.define</code>을 통해 정의하였으나 DOM에서는 사용되지 않는 경우가 있을 수 있다. 그러나 한번 정의되고 나면 나중에 DOM에 해당 이름의 엘리먼트가 추가되는 경우라도 곧바로 주어진 엘리먼트를 묶어주며, 알맞은 콜백 메서드들을 정상적으로 호출한다.</p>\n<p>반대로 DOM에 엘리먼트가 존재하지만 <code class=\"tui-language-text\">customElements.define</code>메서드를 통해 선언되지 않았다면, DOM에 있는 엘리먼트는 <code class=\"tui-language-text\">span</code>과 마찬가지로 동작하며, 추후 <code class=\"tui-language-text\">customeElements.define</code>을 통해 선언되면 주어진 클래스를 바로 묶어준다.\n이러한 과정을 특별히 <a href=\"https://www.w3.org/TR/custom-elements/#upgrades\">upgrade</a>라고 한다.</p>\n<p>이 upgrade 과정은 특별히 중요한데 우리가 'DOMContentLoaded'이벤트를 보고 인스턴스를 초기화하는 이유와 마찬가지로 DOM이 생성된 이후에 자바스크립트가 수행될 경우 DOM에 있는 Custom Elements는 스타일도, 동작도 못 가진 채로 화면에 노출될 수 있기 때문이다.</p>\n<p>이러한 경우 <a href=\"https://www.w3.org/TR/custom-elements/#selector-defined\">:defined pseudo 클래스</a>를 사용해 아래처럼 <code class=\"tui-language-text\">customeElements.define</code>을 통해 정의되기 이전까지 해당 엘리먼트를 가려둘 수도 있고, 필요에 따른 스타일을 적용해 볼 수 있겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"tui-language-css\"><code class=\"tui-language-css\"><span class=\"token selector\">current-time:not(:defined)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"자식-엘리먼트들\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%9D-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EB%93%A4\" aria-label=\"자식 엘리먼트들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자식 엘리먼트들</h3>\n<p><code class=\"tui-language-text\">connectedCallback</code>메서드에서 자식 엘리먼트들에 접근할 수 없다는 사실은 위에서 알아본 바 있다. 이 콜백 메서드에서 자식 엘리먼트들이 DOM에 추가되었으며, <code class=\"tui-language-text\">define</code>되었는지 알기 위해서는 조금 다른 전략이 필요하다.\n<code class=\"tui-language-text\">MutationObserver</code>, <code class=\"tui-language-text\">Promise</code> 등 여러 방법들이 있겠으나 가장 간단하고 확실한 방법은 자식 Custom Elements들의 <code class=\"tui-language-text\">connectedCallback</code>에서 부모 Custom Element의 메서드를 수행시켜 주거나 Custom Event를 발생시키는 것이다.\nDOM을 수정할 <code class=\"tui-language-text\">connectedCallback</code>이 이러한 특성을 가지므로 <a href=\"https://webkit.org/blog/7027/introducing-custom-elements/\">Introducing Custom Elements</a>의 Asynchronously Defining Custom Elements 부분에서 얘기하는 전략을 더 읽어보는 것도 도움이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTimeText</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// call parents callback</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">childReady</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// or</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">'childReady'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 어느 위의 방법이 마음에 들지 않을 수 있는 독자도 있을 것이다. 잠시 참아보자. 다음 글에서 소개할 <strong>Shadow DOM</strong>과 함께 보다 아름다운 모습으로 해결하는 방법을 얘기하겠다.</p>\n<h3 id=\"windowcustomelements--customelementregistry\" style=\"position:relative;\"><a href=\"#windowcustomelements--customelementregistry\" aria-label=\"windowcustomelements  customelementregistry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>window.customElements &#x26; CustomElementRegistry</h3>\n<p><code class=\"tui-language-text\">window</code>가 생성될 때, 브라우저는 <code class=\"tui-language-text\">CustomElementRegistry</code> 인스턴스를 초기화하여, <code class=\"tui-language-text\">window.customElements</code>에 할당한다. 이 객체의 3가지 인스턴스 메서드들은 다음과 같다.\n<a href=\"https://www.w3.org/TR/custom-elements/#custom-elements-api\">W3C: CustomElementRegistry</a></p>\n<ul>\n<li>\n<p>window.customElements.define: 태그 이름에 자바스크립트 클래스를 Custom Elements로 등록한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time\"</span><span class=\"token punctuation\">,</span> CurrentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>window.customElements.get: 태그 이름으로 정의된 클래스를 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> CurrentTime <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> anotherTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>window.customElements.whenDefined: 태그 이름의 Custom Elements가 등록될 때 이벤트를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">whenDefined</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current-time defined!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"fallback-strategy\" style=\"position:relative;\"><a href=\"#fallback-strategy\" aria-label=\"fallback strategy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fallback strategy</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>current-time</span><span class=\"token punctuation\">></span></span>\n  /* fallback html */ 13:00\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>current-time</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Custom Elements를 이해하지 못하는 IE8~10 레거시 브라우저에서 <code class=\"tui-language-text\">&lt;current-time&gt;</code> 커스텀 태그이름을 가진 엘리먼트는 <code class=\"tui-language-text\">HTMLUnknownElement</code>인터페이스를 가지게 되며, <code class=\"tui-language-text\">innerHTML</code>을 그대로 렌더링 하게 된다. 또한 <code class=\"tui-language-text\">HTMLUnknownElement</code>역시 스타일을 입힐 수 있으므로, 레거시 브라우저를 고려해야 하는 환경에서는 <code class=\"tui-language-text\">span</code>이라 생각하고 <strong>fallback html</strong>을 자식으로 가지고 있는 것이 좋다.</p>\n<p>이는 Github에서 사용하고 있는 Custom Elements의 실패 전략인데, 동적으로 Custom Elements의 콘텐츠가 변화하지 않더라도, 페이지가 서버를 통해 리프레시 될 때 서버에서 랜더링한 적절한 콘텐츠를 보여줄 수 있도록 하는 방법이다.</p>\n<h3 id=\"autonomous-custom-elements-vs-customized-built-in-elements\" style=\"position:relative;\"><a href=\"#autonomous-custom-elements-vs-customized-built-in-elements\" aria-label=\"autonomous custom elements vs customized built in elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Autonomous custom elements vs Customized built-in elements</h3>\n<p><strong>Autonomouse custom elements</strong>는 여태까지 우리가 알아보아온 <code class=\"tui-language-text\">HTMLElement</code>를 직접 상속받는 Custom Elements의 형태이고, <strong>Customized built-in elements</strong>는 HTML 표준에 정의된 <code class=\"tui-language-text\">div</code>, <code class=\"tui-language-text\">input</code> <code class=\"tui-language-text\">table</code>등의 빌트인 엘리먼트들을 상속하는 형태이다.</p>\n<p>빌트인 엘리먼트를 상속받는 이유는 해당 엘리먼트의 동작을 그대로 상속받으면서도 이외의 기능이나 스타일을 추가하기 위함이다. 이는 다만 조금(많이) 번거로운 문법을 요구한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>current-time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>6/11/2017, 11:55:49<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentTime</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current-time'</span><span class=\"token punctuation\">,</span> CurrentTime<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>악! HTML에서는 <code class=\"tui-language-text\">is</code>라는 녀석이 붙고, 클래스 <code class=\"tui-language-text\">extends</code>에서 분명 <code class=\"tui-language-text\">HTMLButtonElement</code>를 상속받음을 알려주었음에도 불구하고, 또다시 <code class=\"tui-language-text\">customElements.define</code>에서 버튼을 상속받고 있음을 또 알려준다. <em>이것이 정말 최선입니까</em></p>\n<p>표준에 대한 논의 글을 따라가보면 HTML과 자바스크립트 <strong>생태계</strong>를 고려한 어쩔 수 없는 문법이라는 것인데, HTML 파서, 자바스크립트 파서는 브라우저만 존재하는 것도 아니고, <code class=\"tui-language-text\">button</code>이 각 파서들에게 <code class=\"tui-language-text\">button</code>으로 인식되기 위해서는 이러한 문법이 필요하다는 것이다. Autonomouse custom elements가 <code class=\"tui-language-text\">-</code>를 반드시 포함하면서 <code class=\"tui-language-text\">HTMLElement</code>를 바로 상속하는 명시적인 방법임에 반해, HTML 파서들에게(브라우저가 아닌) Customized built-in elements는 <code class=\"tui-language-text\">button</code> 혹은 <code class=\"tui-language-text\">table</code> 등 상속받은 엘레먼트로 인식되어야만 한다는 이유이다.</p>\n<p>이유는 어쩔 수 없다 하겠으나, 이 사태에 대해 우리 또한 느낄 수 있듯이 각 브라우저 진영에서도 이 난잡한 문법에 대한 <a href=\"https://github.com/w3c/webcomponents/issues/509\">논의</a>들이 있었다. 논의 끝에 <em>어쩔 수 없는 문법</em>을 <em>마지못해</em> 동의한 것으로 보이지만, 아직 제대로 구현된 브라우저가 없는 만큼 이러한 표준이 있다는 것만 알고 넘어가자.</p>\n<h2 id=\"보너스-htmlelement--htmlunknownelement\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%84%88%EC%8A%A4-htmlelement--htmlunknownelement\" aria-label=\"보너스 htmlelement  htmlunknownelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>+보너스: <a href=\"https://html.spec.whatwg.org/multipage/dom.html#htmlelement\">HTMLElement</a> &#x26; <a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html\">HTMLUnknownElement</a></h2>\n<p>사실 HTML 표준에서 정한 이름 이외의 태그를 사용하는 일은 이 문서에서 사용한 Custom Elements 표준이 아니라 하더라도 이전부터(<em>이름만 바꾸는 일이라면 IE8부터도!</em>) 사용 가능했다. 궁금하다면 지금 에디터를 열어 HTML문서를 하나 작성해서 띄워봐도 좋겠다.</p>\n<p>HTML 표준에 따르면 태그 이름에 따라 적절한 <code class=\"tui-language-text\">HTMLElement</code>하위 인터페이스를 연결하며, 표준 이름의 어느것 에도 맞지 않는 태그에는 <code class=\"tui-language-text\">HTMLUnknownElement</code>인터페이스를 할당한다. <code class=\"tui-language-text\">HTMLUnknownElement</code>이름이 무언가 오류처럼 느껴질지 모르겠으나, <code class=\"tui-language-text\">HTMLSpanElement</code>와 다를 바 없다.</p>\n<p><code class=\"tui-language-text\">HTMLSpanElement</code>는 <code class=\"tui-language-text\">HTMLElement</code>를 상속하며, <code class=\"tui-language-text\">display</code>속성으로 <code class=\"tui-language-text\">inline</code>값을 가지는 인터페이스인데, <code class=\"tui-language-text\">HTMLElement</code>의 <code class=\"tui-language-text\">display</code>기본 속성값이 <code class=\"tui-language-text\">inline</code>이므로, 동일하게 <code class=\"tui-language-text\">HTMLElement</code>를 상속하는 <code class=\"tui-language-text\">HTMLUnknownElement</code>역시 <code class=\"tui-language-text\">HTMLSpanElement</code>와 다를 바 없다. 즉 <code class=\"tui-language-text\">&lt;lol&gt;</code>태그는 <code class=\"tui-language-text\">&lt;span&gt;</code>태그와 다를 바 없다. 즉 특별한 이름의 <code class=\"tui-language-text\">&lt;random&gt;</code>, <code class=\"tui-language-text\">&lt;lol&gt;</code>등을 CustomElements 표준 이전에도 적절한 스타일을 할당하여 얼마든지 사용 가능했다.</p>\n<p><a href=\"http://ryanmorr.com/determine-html5-element-support-in-javascript/\">Determine HTML5 Element Support in Javascript: HTMLUnknownElement</a>은 <code class=\"tui-language-text\">HTMLUnknownElement</code>에 대한 재미있는 시점을 보여주기도 한다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>필자는 Custom Elements의 튜토리얼들을 보며 \"아! 이런 나이스 한!\"이라며 이걸 어느 프로젝트에 적용해볼까 전전긍긍해왔던 기억이 있다. 하지만 이 표준을 지원하는 브라우저는 Chrome뿐이었고, 표준도 v0에서 v1으로 바뀌며 계속 제대로 써볼 기회는 손에 잡히지 않았었다. 물론 그사이 Chrome 베이스의 Electron 프로젝트에서 무작정 시도해 보기도 했지만! 이제는 IE11이상의 프로젝트라면 충분히 도전해 볼 환경이 되었다고 생각된다. 특히나 MutationObserver의 사용이 빈번한 프로젝트라면 과감히 Custom Elements를 시도해 볼만 하다.</p>\n<p>다음 글로는 Web Components의 두 번째 표준 <strong>Shadow DOM</strong>에 대해서 써보려 한다. Web Components의 표준들은 각각 쓰임새도 있지만, 같이 쓰이면 더욱 시너지가 있는 만큼 Custom Elements에 Shadow DOM이 결합되며 어떻게 더 힘을 발휘하는지 기대해주면 좋겠다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements\">Custom Elements v1: Reusable Web Components</a></li>\n<li><a href=\"https://github.com/w3c/webcomponents/issues/509\">W3C: The is=\"\" attribute is confusing</a></li>\n<li><a href=\"https://github.com/whatwg/html/issues/896\">WHATWG element constructor</a></li>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/customelements/\">HTMLUnknownElement &#x26; HTML Upgrade</a></li>\n<li><a href=\"https://github.com/webcomponents/custom-elements/blob/master/DEVELOPING.md\">custom elements polyfill developing</a></li>\n<li><a href=\"http://ryanmorr.com/determine-html5-element-support-in-javascript/\">Determine HTML5 Element Support in Javascript: HTMLUnknownElement</a></li>\n<li><a href=\"https://lists.w3.org/Archives/Public/public-webapps/2011JulSep/0779.html\">Mutation Events Replacement: The story so far / existring points of consensus</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/dom.html#htmlelement\">HTMLElement</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html\">HTMLUnknownElement</a></li>\n<li><a href=\"https://www.w3.org/TR/custom-elements/#custom-elements-api\">W3C: CustomElementRegistry</a></li>\n<li><a href=\"https://webkit.org/blog/7027/introducing-custom-elements/\">Introducing Custom Elements</a></li>\n<li><a href=\"https://www.w3.org/TR/custom-elements/#selector-defined\">:defined pseudo클래스</a></li>\n<li><a href=\"https://www.w3.org/TR/custom-elements/#upgrades\">upgrade</a></li>\n<li><a href=\"https://github.com/webcomponents/custom-elements\">webcomponentsjs</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/dom.html#elements-in-the-dom\">WHATWG: 태그 이름에 따라 HTMLElement 인터페이스가 할당되는 방법</a></li>\n<li><a href=\"https://www.w3.org/TR/2016/REC-html51-20161101/grouping-content.html#the-div-element\">W3C HTML5.1: The div element</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9vYJ8K6A_Kc\">Polymer 2.0: Under the Hood - Rob Dodson</a></li>\n<li><a href=\"https://www.w3.org/TR/custom-elements/\">W3C: Custom Elements</a></li>\n</ul>","frontmatter":{"id":"ko_20170609","title":"웹 컴포넌트(2) - 커스텀 엘리먼트","description":"오늘은 이전에 썼던 글 WebComponents- Keep calm and UseThePlatform)에 이어지는 것으로, Web Components의 주요 표준 중 하나인 Custom Elements에 대한 글이다. 사용법은 아래의 코드를 보는 것이 빠르겠다. 아래의 코드를 크롬이나 사파리에 올려보자. 이외의 브라우저에서는 아래의 브라우저 지원과 Polyfill 섹션을 참조하자.","date":"2017.06.09","author":"최규우","tags":["html5"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170609","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}