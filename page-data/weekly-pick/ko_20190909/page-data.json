{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190909","result":{"data":{"post":{"html":"<h1 id=\"타입스크립트-36이-나왔다\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-36%EC%9D%B4-%EB%82%98%EC%99%94%EB%8B%A4\" aria-label=\"타입스크립트 36이 나왔다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 3.6이 나왔다!</h1>\n<blockquote>\n<p>원문: <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/\">https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/</a></p>\n</blockquote>\n<p>타입스크립트 3.6이 배포되었다. 유용하게 사용할 수 있는 타입스크립트 3.6의 기능을 소개한다.</p>\n<p>타입스크립트는 선택적 정적 타입(<em>optional static types</em>) 개념이 추가된 자바스크립트 기반 언어이다. 타입은 타입스크립트 컴파일러를 통해 검사되는데, 맞춤법 오류와 잘못된 방식으로 호출된 함수와 같이 프로그램에서 발생될 수 있는 일반적인 오류들을 검출한다. 타입스크립트 컴파일러와 바벨과 같은 도구들을 사용하면, 최신 표준 기능을 사용하여 작성된 타입스크립트 코드를 모든 브라우저와 런타임(ES3 또는 ES5를 지원하는 훨씬 오래된 코드)에서 작동하는 호환성있는 표준 ECMAScript 코드로 변환할 수 있다.</p>\n<p>타입스크립트는 단순히 타입을 검사하고, 새로운 ECMAScript 기능을 가지는 것 외에도 다른 강력한 기능을 제공한다.\n편집 도구 설정(<em>tooling</em>)은 타입스크립트 프로젝트에서 중요한 핵심 부분이다. <a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\">다양한 편집기</a>에서 코드 자동 완성 기능, 리팩토링 및 빠른 해결책을 제공한다. 비주얼 스튜디오/비주얼 스튜디오 코드에서 자바스크립트 파일을 수정해 보았다면, 이미 타입스크립트를 사용하고 있었을 수도 있다. 실제로 타입스크립트에 의해 타입 정보가 제공되기 때문이다.</p>\n<p>자세한 내용은 <a href=\"https://www.typescriptlang.org/\">타입스크립트 웹사이트에서 확인</a>할 수 있다. 바로 시작하려면 <a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\">NuGet</a>을 통해 얻거나 npm 명령어를 사용하여 설치할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">npm install -g typescript</code></pre></div>\n<p>아래 링크를 통해 편집기에서 타입스크립트에 대한 지원 정보를 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.TypeScript-362\">비주얼 스튜디오 2019/2017용 다운로드</a></li>\n<li><a href=\"https://code.visualstudio.com/Docs/languages/typescript#_using-newer-typescript-versions\">비주얼 스튜디오 코드에서 타입스크립트 사용설명서</a></li>\n<li><a href=\"https://packagecontrol.io/packages/TypeScript\">패키지 컨트롤을 통한 서브라임 텍스트3</a></li>\n</ul>\n<p>조만간 <a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\">다른 편집기에 대한 지원</a>도 시작될 것이다.</p>\n<p>3.6의 내용을 살펴보자!</p>\n<ul>\n<li>\n<p>언어와 컴파일러</p>\n<ul>\n<li><a href=\"##-%EB%8D%94-%EC%97%84%EA%B2%A9%ED%95%B4%EC%A7%84-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0\">더 엄격해진 제너레이터</a></li>\n<li><a href=\"##-%EB%8D%94-%EC%A0%95%ED%99%95%ED%95%B4%EC%A7%84-%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EC%A0%84%EA%B0%9C-(*Spread*)-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9\">더 정확해진 배열에서 전개(<em>Spread</em>) 연산자 사용</a></li>\n<li><a href=\"##-Promise-%EA%B4%80%EB%A0%A8-%EA%B0%9C%EC%84%A0%EB%90%9C-UX-%EC%A0%9C%EA%B3%B5\">Promise 관련 개선된 UX 제공</a></li>\n<li><a href=\"##-%EC%8B%9D%EB%B3%84%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8D%94-%EB%82%98%EC%9D%80-%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90\">식별자에 대한 더 나은 유니코드 지원</a></li>\n<li><a href=\"##-SystemJS%EC%97%90%EC%84%9C-%60import.meta%60-%EC%A7%80%EC%9B%90\">SystemJS에서 <code class=\"tui-language-text\">import.meta</code> 지원</a></li>\n<li><a href=\"##-%EC%95%B0%EB%B9%84%EC%96%B8%ED%8A%B8(*Ambient*)-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%60get%60%EA%B3%BC-%60set%60%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%97%88%EC%9A%A9\">앰비언트(<em>Ambient</em>) 컨텍스트에서 <code class=\"tui-language-text\">get</code>과 <code class=\"tui-language-text\">set</code>접근자 허용</a></li>\n<li><a href=\"##-%EC%95%B0%EB%B9%84%EC%96%B8%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B3%91%ED%95%A9\">앰비언트 클래스와 함수의 병합</a></li>\n<li><a href=\"\"><code class=\"tui-language-text\">--build</code>와 <code class=\"tui-language-text\">--incremental</code>을 지원하는 API</a></li>\n</ul>\n</li>\n<li><a href=\"##-%EC%83%88-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%8C%EB%A0%88%EC%9D%B4%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C\">새 타입스크립트 플레이그라운드</a></li>\n<li>\n<p>편집기 지원 기능 개선</p>\n<ul>\n<li><a href=\"##-%ED%8E%B8%EC%A7%91%EA%B8%B0%EC%97%90%EC%84%9C-%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0-%EC%9E%90%EB%8F%99-%EC%82%BD%EC%9E%85-%EA%B0%9C%EC%84%A0\">편집기에서 세미콜론 자동 삽입 개선</a></li>\n<li><a href=\"##-%EB%8D%94-%EB%98%91%EB%98%91%ED%95%B4%EC%A7%84-Auto-Imports\">더 똑똑해진 Auto-Imports</a></li>\n</ul>\n</li>\n<li><a href=\"##-%EC%A3%BC%EC%9A%94%EB%B3%80%EA%B2%BD-%EC%82%AC%ED%95%AD\">주요 변경 사항</a></li>\n<li><a href=\"##-%ED%96%A5%ED%9B%84-%EA%B3%84%ED%9A%8D\">향후 계획</a></li>\n</ul>\n<h2 id=\"더-엄격해진-제너레이터\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%97%84%EA%B2%A9%ED%95%B4%EC%A7%84-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"더 엄격해진 제너레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 엄격해진 제너레이터</h2>\n<p>타입스크립트 3.6에서는 이터레이터와 제너레이터 함수에 대해 좀 더 엄격한 타입 검사가 도입되었다. 이전 버전에서는 제너레이터 사용자가 제너레이터 함수에서 반환된 값인지, <code class=\"tui-language-text\">yield</code>가 반환한 값인지 구별할 방법이 없었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Finished\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 타입스크립트 3.5 이하 버전에서 작업할 때는 curr.value가 '문자열'이거나 '숫자'라고 생각했다.</span>\n  <span class=\"token comment\">// 'done'이 '참'일 때 curr.value는 '문자열'임을 알고 있어야 한다!</span>\n  curr<span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한, 제너레이터는 <code class=\"tui-language-text\">yield</code>의 타입을 항상 <code class=\"tui-language-text\">any</code>라고 가정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n  x<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 앗! 런타임 오류 발생!</span></code></pre></div>\n<p>타입스크립트 3.6에서 검사기는 첫번째 예제의 <code class=\"tui-language-text\">curr.value</code>의 올바른 타입이 <code class=\"tui-language-text\">string</code>임을 알고 있으며, 두번째 예제의 마지막 라인에 <code class=\"tui-language-text\">next(123)</code> 호출 시 올바르게 오류를 발생할 것이다. 몇 개의 매개변수 타입 정보을 포함하고 있는 <code class=\"tui-language-text\">Iterator</code>와 <code class=\"tui-language-text\">IteratorResult</code> 타입 선언에 변경 사항이 있었으며, 타입스크립트가 제너레이터를 표현하기 위한 새로운 <code class=\"tui-language-text\">Generator</code>타입도 추가되었다.</p>\n<p><code class=\"tui-language-text\">Iterator</code> 타입은 yield로 반환된 타입, 함수에서 반환된 타입, <code class=\"tui-language-text\">next</code>에서 받을 수 있는 매개 변수의 타입을 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TNext <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 0 또는 1 개의 인자를 가진다 - undefined는 허용하지 않음</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>TNext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token operator\">:</span> TReturn<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>새로운 <code class=\"tui-language-text\">Generator</code>타입은 <code class=\"tui-language-text\">Iterator</code>이며, <code class=\"tui-language-text\">return</code>과 <code class=\"tui-language-text\">throw</code> 둘 다 항상 가지고 있다. 또한 반복가능(<em>iterable</em>)한 특성을 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Generator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span> TReturn <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TNext <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">,</span> TNext<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>TNext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> TReturn<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Generator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">,</span> TNext<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입스크립트 3.6에서는, 함수에서 반환된 값과 yield에서 반환된 값을 허용하도록 <code class=\"tui-language-text\">IteratorResult</code> 타입을 <code class=\"tui-language-text\">union</code>타입으로 변환하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> IteratorYieldResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> IteratorReturnResult<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorYieldResult<span class=\"token operator\">&lt;</span>TYield<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    done<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> TYield<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorReturnResult<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> TReturn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, 제너레이터를 다룰 때 이터레이터 값의 타입을 적절히 나눠서 처리할 수 있다.</p>\n<p>또한 타입스크립트 3.6에서는, <code class=\"tui-language-text\">next()</code>호출하면서 제너레이터 함수에 전달할 수 있는 타입을 올바르게 검사하기 위해 제너레이터 함수 본문 내에서 <code class=\"tui-language-text\">yield</code>사용 시 타입을 추론할 수 있도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫번째 'next' 호출은 항상 무시됨.</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류! '숫자'는 '문자열'로 할당될 수 없음</span></code></pre></div>\n<p>명시적인 작성법을 선호한다면, 명시적 반환 타입을 사용하여 반환된 값, <code class=\"tui-language-text\">yield</code> 표현식으로부터 평가된 값, <code class=\"tui-language-text\">yield</code>에서 반환된 값의 타입을 명시적으로 지정할 수 있다. 아래 코드는, <code class=\"tui-language-text\">next()</code>를 <code class=\"tui-language-text\">boolean</code>값으로만 호출할 수 있으며, <code class=\"tui-language-text\">done</code>값에 따라 <code class=\"tui-language-text\">value</code>값이 문자열이나 숫자가 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token comment\">/**\n * - yields numbers (yield 숫자 반환)\n * - returns strings (함수의 반환 타입은 문자열)\n * - can be passed in booleans (next의 매개변수 타입은 boolean)\n */</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Generator<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"done!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> curr <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>curr<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    curr <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// prints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// DONE!</span></code></pre></div>\n<p>좀 더 자세한 변경 사항을 보고싶다면, <a href=\"https://github.com/Microsoft/TypeScript/issues/2983\">깃헙 PR에서 확인할 수 있다</a>.</p>\n<h2 id=\"더-정확해진-배열에서-전개spread-연산자-사용\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%A0%95%ED%99%95%ED%95%B4%EC%A7%84-%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EC%A0%84%EA%B0%9Cspread-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9\" aria-label=\"더 정확해진 배열에서 전개spread 연산자 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 정확해진 배열에서 전개(<em>Spread</em>) 연산자 사용</h2>\n<p>대상(<em>target</em>)이 ES2015 이전으로 설정된 환경에서, <code class=\"tui-language-text\">for/of</code>루프나 배열 전개(<em>Array Spread</em>)로 작성된 코드를 JS로 내보내면(<em>emit</em>) 코드량이 많아져 무거워질 수 있다. 이 때문에, 타입스크립트에서는 기본적인 배열 타입만 지원하여 JS로 내보내며, <code class=\"tui-language-text\">--downlevelIteration</code> 플래그를 사용하여 다른 타입의 이터레이팅을 지원한다. <code class=\"tui-language-text\">--downlevelIteration</code>를 사용하면 정확하게 코드를 내보낼 수 있지만 코드량이 엄청나게 커진다.</p>\n<p><code class=\"tui-language-text\">--downlevelIteration</code>옵션은 기본적으로 비활성화되어있다. ES5를 대상으로 하는 대부분의 사용자들은 일반적인 반복 기능을 사용하여 배열을 사용할테니 문제 없이 잘 동작할 것이다. 그러나 경우에 따라서는, 작성한 배열 코드가 의도하지 않는 동작으로 내보내어질 때가 있었다.</p>\n<p>예를 들어, 아래처럼 작성한 코드가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>다음과 같이 평가될 것이라 예상했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>그러나 타입스크립트 3.5 이전 버전에서 <code class=\"tui-language-text\">[...Array(5)]</code>를 아래와 같이 변환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"tui-language-text\">Array(5).slice()</code>를 하면 엘리먼트가 배치되는 슬롯은 정의되지 않고, 길이가 5인 배열을 만들게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">in</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>타입스크립트에서 <code class=\"tui-language-text\">slice()</code>를 호출하면, 인덱스가 설정되어 있지 않는 배열을 만든다.</p>\n<p>조금 이해하기 어려울 수 있는데, 실제로 많은 사용자들이 의도하지 않는 동작으로 어려움을 겪고 있었다.</p>\n<p>타입스크립트 3.6에서는 내장된 <code class=\"tui-language-text\">slice()</code>를 사용하는 대신, 새로운 <code class=\"tui-language-text\">__spreadArrays</code>헬퍼 함수가 도입되었다. 배열에서 전개 연산자를 사용할 때 ECMAScript 2015에서 보여지는 결과와 정확히 같게 나올 것이다. <code class=\"tui-language-text\">--downlevelIteration.__spreadArrays</code>을 사용하지 않는 더 오래된 대상(<em>target</em>)으로 설정된 환경에서도 <a href=\"https://github.com/Microsoft/tslib/\">tslib</a>로 <code class=\"tui-language-text\">__spreadArrays</code>를 사용할 수 있다.(작은 크기의 번들을 원한다면 tslib를 확인해보는 것도 도움이 될 것이다.)</p>\n<p>자세한 내용은 <a href=\"https://github.com/microsoft/TypeScript/pull/31166\">해당 작업의 PR을 참조해라</a>.</p>\n<h2 id=\"promise-관련-개선된-ux-제공\" style=\"position:relative;\"><a href=\"#promise-%EA%B4%80%EB%A0%A8-%EA%B0%9C%EC%84%A0%EB%90%9C-ux-%EC%A0%9C%EA%B3%B5\" aria-label=\"promise 관련 개선된 ux 제공 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise 관련 개선된 UX 제공</h2>\n<p><code class=\"tui-language-text\">Promise</code>는 비동기 데이터를 다루는 가장 흔한 방법 중 하나이다. 하지만 <code class=\"tui-language-text\">Promise</code>지향의 API를 사용하는 것은 종종 사용자들에게 혼란을 준다. 타입스크립트 3.6에서는 <code class=\"tui-language-text\">Promise</code>를 잘못 사용했을 때를 위한 몇 가지 개선 사항을 알려준다.</p>\n<p>예를 들어, <code class=\"tui-language-text\">Promise</code>의 응답 객체를 다른 함수로 전달하기 전에 <code class=\"tui-language-text\">.then()</code> 하거나 <code class=\"tui-language-text\">await</code> 하는 것을 잊어버릴 수 있다. 타입스크립트의 오류 메세지는 전문화 되어, 이러한 사용자들에게 <code class=\"tui-language-text\">await</code> 키워드 사용을 고려해야 한다고 알려준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    location<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">displayUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">displayUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//              ~~~~~~~~~~~~~</span>\n<span class=\"token comment\">//  getUserData()에서 반환된 'Promise&lt;User>'타입은 displayUser의 파라미터 타입(User)으로 넘길 수 없다.</span>\n<span class=\"token comment\">//   ...</span>\n<span class=\"token comment\">// 'await' 사용을 잊었습니까?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또 흔한 실수 중의 하나는 <code class=\"tui-language-text\">Promise</code>가 <code class=\"tui-language-text\">await</code> 또는 <code class=\"tui-language-text\">.then()</code>을 받기 전에 응답 객체의 메서드에 접근을 시도하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCuteAnimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://reddit.com/r/aww.json\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//   ~~~~</span>\n    <span class=\"token comment\">//'Promise&lt;Response>'타입에 'json'속성이 존재하지 않는다.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// 'await' 사용을 잊었습니까?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 타입스크립트의 오류 메세지는 적어도 사용자가 <code class=\"tui-language-text\">await</code>을 몰랐더라도 어떤 액션을 취해야할지 알려준다.</p>\n<p><code class=\"tui-language-text\">Promise</code>의 오류 메세지 개선 외에도 빠른 해결책을 제공하는 등 개발 편의성을 향상시킨다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/3277153/61071690-8ca53480-a3c6-11e9-9b08-4e6d9851c9db.gif\" alt=\"image\"></p>\n<p>자세한 내용은 <a href=\"https://github.com/microsoft/TypeScript/issues/30646\">이슈를 확인</a>한다음, 해당 이슈에 연결된 PR을 통해 알아보자.</p>\n<h2 id=\"식별자에-대한-더-나은-유니코드-지원\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8D%94-%EB%82%98%EC%9D%80-%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EC%A7%80%EC%9B%90\" aria-label=\"식별자에 대한 더 나은 유니코드 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식별자에 대한 더 나은 유니코드 지원</h2>\n<p>타입스크립트 3.6에서는 대상(<em>target</em>)이 ES2015이상이면 식별자에 사용된 유니코드 문자열을 더욱 잘 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token comment\">// 이전에는 허용되지 않았음.</span>\n<span class=\"token comment\">// target이 es2015이상일 때 허용 (예: '--target es2015')</span>\n<span class=\"token keyword\">const</span> 𝓱𝓮𝓵𝓵𝓸 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"systemjs에서-importmeta-지원\" style=\"position:relative;\"><a href=\"#systemjs%EC%97%90%EC%84%9C-importmeta-%EC%A7%80%EC%9B%90\" aria-label=\"systemjs에서 importmeta 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SystemJS에서 <code class=\"tui-language-text\">import.meta</code> 지원</h2>\n<p>타입스크립트 3.6에서는 tsconfig.json파일 <code class=\"tui-language-text\">compilerOptions</code>에서 <code class=\"tui-language-text\">&quot;module&quot;: &quot;system&quot;</code>인 경우 <code class=\"tui-language-text\">import.meta</code>를 <code class=\"tui-language-text\">context.meta</code>로 변환할 수 있도록 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token comment\">// 모듈:</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 다음과 같이 변함:</span>\n\nSystem<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    setters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"앰비언트ambient-컨텍스트에서-get과-set접근자-허용\" style=\"position:relative;\"><a href=\"#%EC%95%B0%EB%B9%84%EC%96%B8%ED%8A%B8ambient-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-get%EA%B3%BC-set%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%97%88%EC%9A%A9\" aria-label=\"앰비언트ambient 컨텍스트에서 get과 set접근자 허용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>앰비언트(<em>Ambient</em>) 컨텍스트에서 <code class=\"tui-language-text\">get</code>과 <code class=\"tui-language-text\">set</code>접근자 허용</h2>\n<p>이전 버전의 타입스크립트에서는, 앰비언트 컨텍스트(일반적으로 <code class=\"tui-language-text\">.d.ts</code>파일 또는 <code class=\"tui-language-text\">declare class [클래스 명]</code>를 의미)의 <code class=\"tui-language-text\">get</code>, <code class=\"tui-language-text\">set</code> 접근자를 허용하지 않았다. <code class=\"tui-language-text\">get</code>, <code class=\"tui-language-text\">set</code> 접근자를 사용하면 해당 속성을 읽거나 쓰는것이 구별되지 않았다. 그러나 <a href=\"https://github.com/tc39/proposal-class-fields/issues/248\">ECMAScript의 클래스 필드 스펙과는 다르게 기존 타입스크립트 버전에서 동작할 수 있다</a>. 이렇게 다르게 동작하는 것을 서브클래스에 알려주고 적절한 오류를 표시해야 한다고 판단했다.</p>\n<p>이제, 타입스크립트 3.6에서는 앰비언트 컨텍스트의 getter와 setter로 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 3.6 이상에서 허용.</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입스크립트 3.7에서는 컴파일러 자체에서 이 기능을 이용하여, 생성된 <code class=\"tui-language-text\">.d.ts</code>파일 내용에는 사용된 <code class=\"tui-language-text\">get</code>/<code class=\"tui-language-text\">set</code> 접근자도 포함될 것이다.</p>\n<h2 id=\"앰비언트-클래스와-함수의-병합\" style=\"position:relative;\"><a href=\"#%EC%95%B0%EB%B9%84%EC%96%B8%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B3%91%ED%95%A9\" aria-label=\"앰비언트 클래스와 함수의 병합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>앰비언트 클래스와 함수의 병합</h2>\n<p>타입스크립트 이전 버전에서는, 클래스와 함수의 타입을 병합할 수 없었다. 같은 이름으로 function과 class 타입을 선언하면 무조건 오류가 표시되었지만 3.6에서는 앰비언트 클래스와 함수(<code class=\"tui-language-text\">declare</code>수식어가 붙은 클래스나 함수 또는 <code class=\"tui-language-text\">.d.ts</code>파일을 의미)를 병합할 수 있다.\n아래와 같이 사용해도 오류를 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Point2D</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에는 아래 코드처럼 작성했을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> Point2D<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 이름으로 함수와 클래스 선언이 가능해지면서 호출 가능한 생성자 패턴이 쉽게 표현될 수 있으며 네임스페이스가 이러한 선언들과 병합될 수 있는 이점이 있다. (<code class=\"tui-language-text\">var</code>로 선언된 타입은 같은 이름으로 선언된 다른 타입과 병합 불가하다.)</p>\n<p>타입스크립트 3.7에서, 컴파일러는 이 기능을 활용할 것이다. <code class=\"tui-language-text\">.js</code>파일에서 생성된 <code class=\"tui-language-text\">.d.ts</code>파일은 생성자를 사용하거나 호출 가능한 클래스형 함수를 적절하게 찾을 수 있을 것이다.</p>\n<p>좀 더 자세한 내용을 알고 싶다면 <a href=\"https://github.com/microsoft/TypeScript/pull/32584\">깃헙 PR을 확인해라</a>.</p>\n<h2 id=\"--build와---incremental-지원-api\" style=\"position:relative;\"><a href=\"#--build%EC%99%80---incremental-%EC%A7%80%EC%9B%90-api\" aria-label=\"  build와   incremental 지원 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"tui-language-text\">--build</code>와 <code class=\"tui-language-text\">--incremental</code> 지원 API</h2>\n<p>타입스크립트 3.0에서는 다른 프로젝트를 참조하고, 참조된 프로젝들의 빌드 시간을 향상시키기 위해 <code class=\"tui-language-text\">--build</code>플래그를 도입했다. 또한, 타입스크립트 3.4에서 <code class=\"tui-language-text\">--incremental</code>플래그가 도입되었는데, 이전 컴파일 정보는 저장되고 특정 파일에 대해서만 다시 빌드할 수 있는 기능을 제공하였다. <code class=\"tui-language-text\">--build</code>와 <code class=\"tui-language-text\">--incremental</code>플래그를 사용하면, 프로젝트를 좀 더 유연하게 만들고, 빌드하는 속도가 크게 개선되는 이점이 있다. 그러나 이러한 플래그는 걸프(<em>Gulp</em>)와 웹팩(<em>Webpack</em>)과 같은 써드 파티 빌드 도구와 함께 동작할 수 없었다. 타입스크립트 3.6에서는 프로젝트를 참조하고 증분 빌드(<em>incremental build</em> - 반복적인 빌드 과정에서 변경된 소스코드에 의존성이 있는 대상들만 모아 다시 빌드하는 기능)를 위한 두 세트의 API를 공개한다.</p>\n<p><code class=\"tui-language-text\">--incremental</code>빌드를 하기 위해서는, 사용자는 <code class=\"tui-language-text\">createIncrementalProgram</code>과 <code class=\"tui-language-text\">createIncrementalCompilerHost</code> API를 활용할 수 있다. 새로 공개된 <code class=\"tui-language-text\">readBuilderProgram</code>함수를 사용하여 생성된 <code class=\"tui-language-text\">.tsbuildinfo</code>파일에서 이전 프로그램에서 만들어진 인스턴스 정보를 재공급할 수 있다. 이는 새 프로그램 생성 시에만 사용될 수 있다. 즉, 다른 <code class=\"tui-language-text\">create*Program</code>함수에서 <code class=\"tui-language-text\">oldProgram</code>파라미터에 사용되고,반환된 인스턴스는 수정할 수 없다.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">프로젝트 참조(<em>project references</em>)</a> 기능을 활용하기 위해 새로운 <code class=\"tui-language-text\">createSolutionBuilder</code>함수가 공개되었으며, 이 함수는 새로운 타입의 <code class=\"tui-language-text\">SolutionBuilder</code> 인스턴스를 반환한다.</p>\n<p>API에 대한 자세한 내용은 <a href=\"https://github.com/microsoft/TypeScript/pull/31432\">깃헙 PR에서 확인할 수 있다</a>.</p>\n<h2 id=\"새-타입스크립트-플레이그라운드\" style=\"position:relative;\"><a href=\"#%EC%83%88-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%8C%EB%A0%88%EC%9D%B4%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C\" aria-label=\"새 타입스크립트 플레이그라운드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새 타입스크립트 플레이그라운드</h2>\n<p>새 플레이그라운드는 커뮤니티 구성원들이 점점 더 많이 사용하고 있는 <a href=\"https://github.com/agentcooper\">아르템 타이루린(<em>Artem Tyurin</em>)</a>의 <a href=\"https://github.com/agentcooper/typescript-play\">타입스크립트 플레이그라운드</a>를 포크해서 사용했다. 편리한 새 기능들을 지원할 수 있게 되었으며 감사를 표한다.</p>\n<p>새 옵션들을 지원한다.</p>\n<ul>\n<li><code class=\"tui-language-text\">target</code>옵션 지원 (사용자가 <code class=\"tui-language-text\">es5</code>에서 <code class=\"tui-language-text\">es3</code>, <code class=\"tui-language-text\">es2015</code>, <code class=\"tui-language-text\">esnext</code> 등으로 전환할 수 있도록 허용한다)</li>\n<li><code class=\"tui-language-text\">strict</code>옵션을 포함하여 모든 엄격(<em>strictness</em>) 모드에 관한 옵션 사용 가능</li>\n<li>일반 자바스크립트 파일 지원(<code class=\"tui-language-text\">allowJs</code>와 선택적으로 <code class=\"tui-language-text\">checkJs</code>옵션 사용 가능)</li>\n</ul>\n<p>이러한 옵션은 플레이그라운드에서 작성한 예제를 링크로 공유할 때도 유지된다. 작성자가 다른사람에게 공유할 때 따로 옵션 사항에 대해 말하지 않아도 안정적으로 예제를 공유할 수 있다. 예를 들어, 다른 사람에게 예제를 공유할 때 <code class=\"tui-language-text\">noImplicitAny</code>옵션을 켜서 확인해야한다고 따로 말하지 않아도 된다.</p>\n<p>조만간, 플레이그라운드의 예제 코드들을 수정하고, JSX 지원 기능을 추가할 것이다. 또한 자동 완성 기능까지 지원할 계획이다. 개개인의 편집기를 사용할 때와 비슷한 느낌을 받을 것이다.</p>\n<p>플레이그라운드와 타입스크립트 웹사이트가 꾸준히 개선될 수 있도록, 사이트에 대한 <a href=\"https://github.com/microsoft/TypeScript-Website/\">피드백과 PR을 남겨주길 바란다</a>.</p>\n<h2 id=\"편집기에서-세미콜론-자동-삽입-개선\" style=\"position:relative;\"><a href=\"#%ED%8E%B8%EC%A7%91%EA%B8%B0%EC%97%90%EC%84%9C-%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0-%EC%9E%90%EB%8F%99-%EC%82%BD%EC%9E%85-%EA%B0%9C%EC%84%A0\" aria-label=\"편집기에서 세미콜론 자동 삽입 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>편집기에서 세미콜론 자동 삽입 개선</h2>\n<p>비주얼 스튜디오와 비주얼 스튜디오 코드와 같은 편집기를 사용하면 다른 모듈에서 값을 Auto-Import하고, 빠른 해결책 및 리팩토링 기능이 제공되면서 쉽게 수정할 수 있다.</p>\n<p>이러한 제공되는 기능중에 하나로, 이전 타입스크립트에서는 모든 명령문 끝에 무조건 세미콜론을 추가해주었다. 그러나, 많은 사용자들이 명령문 끝이 무조건 세미콜론을 추가해주는 방식의 스타일 가이드를 동의하지 않았으며, 세미콜론을 편집기에서 자동으로 삽입해주는 것에 대해 불만을 가졌다.</p>\n<p>이제 타입스크립트는 파일에서 세미콜론 사용 여부를 판단할 수 있다. 해당 파일이 세미콜론을 사용하지 않는다면 타입스크립트는 세미콜론을 추가하지 않을 것이다.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/31801\">자세한 내용은 해당 작업의 PR을 통해 확인할 수 있다.</a></p>\n<h2 id=\"더-똑똑해진-auto-imports\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%98%91%EB%98%91%ED%95%B4%EC%A7%84-auto-imports\" aria-label=\"더 똑똑해진 auto imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 똑똑해진 Auto-Imports</h2>\n<p>자바스크립트는 ECMAScript 표준 모듈 시스템, Node 환경에서 지원하는 CommonJS, 그리고 AMD, System.js 등 다양한 모듈 구문과 규칙(<em>convetions</em>)을 가지고 있다. 타입스크립트는 ECMAScript 모듈 구문을 사용하여 Auto-Import 하도록 기본으로 설정되어있다. 그러나 다른 컴파일러 설정을 사용하는 타입스크립트 프로젝트이거나 일반 자바스크립트와 <code class=\"tui-language-text\">require</code>호출을 사용하는 Node 프로젝트에서는 적합하지 않을 수도 있다.</p>\n<p>타입스크립트 3.6은 더욱 똑똑해져서 현재 사용 중인 Import 방법에 따라 다른 모듈을 Auto-Import하는 방법을 결정한다.\n<a href=\"https://github.com/microsoft/TypeScript/pull/32684\">Auto-Import에 대한 자세한 내용은 여기에서 확인할 수 있다.</a></p>\n<h2 id=\"주요-변경-사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EB%B3%80%EA%B2%BD-%EC%82%AC%ED%95%AD\" aria-label=\"주요 변경 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 변경 사항</h2>\n<h3 id=\"클래스-멤버로-작성된-constructor메서드는-생성자-함수이다\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%A4%EB%B2%84%EB%A1%9C-%EC%9E%91%EC%84%B1%EB%90%9C-constructor%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%9D%B4%EB%8B%A4\" aria-label=\"클래스 멤버로 작성된 constructor메서드는 생성자 함수이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 멤버로 작성된 <code class=\"tui-language-text\">&quot;constructor&quot;</code>메서드는 생성자 함수이다</h3>\n<p>ECMAScript 스펙에 따라, <code class=\"tui-language-text\">constructor</code>메서드를 사용하여 선언한 클래스는 문자열(<code class=\"tui-language-text\">&quot;constructor&quot;</code>)이든 식별자(<code class=\"tui-language-text\">constructor</code>)를 사용하여 선언하든 생성자 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"생성자 함수이다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단, <code class=\"tui-language-text\">&quot;constructor&quot;</code>가 계산된 속성으로 사용되면 일반 메서드(<em>plain method</em>)가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"생성자 함수가 아니고 일반 메서드이다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"dom-업데이트\" style=\"position:relative;\"><a href=\"#dom-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"dom 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 업데이트</h3>\n<p><code class=\"tui-language-text\">lib.dom.d.ts</code>파일 내 선언되어 있는 많은 타입들이 제거되거나 변경되었다. 변경 내역을 확인해보자.</p>\n<ul>\n<li>전역 <code class=\"tui-language-text\">window</code>는 더이상 <code class=\"tui-language-text\">Window</code> 타입으로 정의되지 않는다. <code class=\"tui-language-text\">Window &amp; typeof globalThis</code>타입으로 정의 된다. 경우에 따라, <code class=\"tui-language-text\">typeof window</code> 타입으로 참조할 수 있다.</li>\n<li><code class=\"tui-language-text\">GlobalFetch</code>는 제거되었다. 대신에, <code class=\"tui-language-text\">WindowOrWorkerGlobalScope</code>를 사용해라.</li>\n<li><code class=\"tui-language-text\">Navigator</code>에서 몇 가지 비표준 속성이 제거되었다.</li>\n<li><code class=\"tui-language-text\">experimental-webgl</code> 컨텍스트가 제거되었다. 대신에, <code class=\"tui-language-text\">webgl</code> 또는 <code class=\"tui-language-text\">webgl2</code>를 사용해라.</li>\n</ul>\n<p>잘못된 변경이라고 생각되면 <a href=\"https://github.com/Microsoft/TSJS-lib-generator/\">이슈로 제기해주길 바란다</a>.</p>\n<h3 id=\"병합되지-않는-jsdoc-주석\" style=\"position:relative;\"><a href=\"#%EB%B3%91%ED%95%A9%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-jsdoc-%EC%A3%BC%EC%84%9D\" aria-label=\"병합되지 않는 jsdoc 주석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>병합되지 않는 JSDoc 주석</h3>\n<p>자바스크립트 파일에서 타입스크립트는 선언된 유형을 파악하기 위해 바로 앞의 JSDoc 주석만 참조한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token comment\">/**\n * @param {string} arg\n */</span>\n<span class=\"token comment\">/**\n * 또 다른 주석 추가\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">whoWritesFunctionsLikeThis</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 'arg'는 'any'타입을 가진다. (string 타입이 아님)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"키워드는-이스케이프-시퀀스를-포함할-수-없다\" style=\"position:relative;\"><a href=\"#%ED%82%A4%EC%9B%8C%EB%93%9C%EB%8A%94-%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84-%EC%8B%9C%ED%80%80%EC%8A%A4%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"키워드는 이스케이프 시퀀스를 포함할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키워드는 이스케이프 시퀀스를 포함할 수 없다.</h3>\n<p>이전에는 이스케이프 시퀀스가 포함될 수 있었다. 그러나 타입스크립트 3.6에서는 허용하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"tui-language-ts\"><code class=\"tui-language-ts\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \\u0063ontinue<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  ~~~~~~~~~~~~~</span>\n<span class=\"token comment\">//  오류! 키워드는 이스케이프 문자열을 포함할 수 없다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"향후-계획\" style=\"position:relative;\"><a href=\"#%ED%96%A5%ED%9B%84-%EA%B3%84%ED%9A%8D\" aria-label=\"향후 계획 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>향후 계획</h2>\n<p>타입스크립트 팀에서 앞으로 진행할 작업에 대해 알고 싶다면 <a href=\"https://github.com/microsoft/TypeScript/issues/33118\">이번 년도 7월부터 12월까지의 6개월 로드맵을 확인</a>해라.</p>\n<p>언제나 그렇듯이, 이번 타입스크립트 릴리즈로 코딩 환경을 개선하고 즐겁게 개발할 수 있기를 기대한다. 제안할 것이 있거나 문제가 발생한다면 <a href=\"https://github.com/microsoft/TypeScript/issues/new/choose\">깃헙 이슈로 언제든지 문의하길 바란다</a>.</p>\n<p>-Daniel Rosenwasser 와 TypeScript 팀</p>","frontmatter":{"id":"ko_20190909","title":"타입스크립트 3.6이 나왔다!","description":"타입스크립트 3.6이 배포되었다. 유용하게 사용할 수 있는 타입스크립트 3.6의 기능을 소개한다.","date":"2019.09.09","author":"조정은","tags":["typescript"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190909","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}