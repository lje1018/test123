{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20180514","result":{"data":{"post":{"html":"<h1 id=\"redux-saga-test-plan---간편한-redux-saga-테스트---jeremy-fairbank-인터뷰\" style=\"position:relative;\"><a href=\"#redux-saga-test-plan---%EA%B0%84%ED%8E%B8%ED%95%9C-redux-saga-%ED%85%8C%EC%8A%A4%ED%8A%B8---jeremy-fairbank-%EC%9D%B8%ED%84%B0%EB%B7%B0\" aria-label=\"redux saga test plan   간편한 redux saga 테스트   jeremy fairbank 인터뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-saga-test-plan - 간편한 Redux Saga 테스트 - Jeremy Fairbank 인터뷰</h1>\n<blockquote>\n<p>원문<br>\nJuho Vepsäläinen, <a href=\"https://survivejs.com/blog/redux-saga-test-plan-interview/\">https://survivejs.com/blog/redux-saga-test-plan-interview/</a></p>\n</blockquote>\n<p>Redux Saga는 테스트가 쉽기로 유명하다. 하지만, 더 간단해질 수 있다면 어떨까? <a href=\"https://twitter.com/elpapapollo\">Jeremy Fairbank</a>는 더 간단한 테스트를 위해 <em>redux-saga-test-plan</em>을 디자인했다.</p>\n<h2 id=\"본인-소개를-부탁한다\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EC%9D%B8-%EC%86%8C%EA%B0%9C%EB%A5%BC-%EB%B6%80%ED%83%81%ED%95%9C%EB%8B%A4\" aria-label=\"본인 소개를 부탁한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본인 소개를 부탁한다.</h2>\n<p><a href=\"https://testdouble.com/\">Test Double</a>의 소프트웨어 엔지니어이자 컨설턴트다. 소프트웨어가 고장 나면 그것을 고치는 일을 하고, 전 세계의 소프트웨어 개발 방식을 개선시키는 것을 목표로 한다.</p>\n<p>약 10년 동안 프론트엔드 개발을 해왔고, React와 Redux가 프론트엔드 세상에 도움을 준 패러다임을 즐기고 있다. <a href=\"https://github.com/jfairbank/revalidate\">revalidate</a>, <a href=\"https://github.com/jfairbank/redux-saga-router\">redux-saga-router</a>, 그리고 이 인터뷰의 주제인 <a href=\"https://github.com/jfairbank/redux-saga-test-plan\"><em>redux-saga-test-plan</em></a>과 같은 React, Redux 생태계에서 잘 동작하는 오픈 소스 프로젝트를 개발했다.</p>\n<p>함수형 프로그래밍과 Elm을 정말 좋아한다. 현재는 <a href=\"https://pragprog.com/\">The Pragmatic Programmers</a>에서 <em>Programming Elm: Build Safe and Maintainable Front-End Applications.</em> 라는 책을 작성하고 있다. 절반 이상 완성했으며 2018년 봄 즈음 보실 수 있을 것 같다.</p>\n<h2 id=\"redux-saga-test-plan을-전혀-들어본-적이-없는-사람에게-설명한다면\" style=\"position:relative;\"><a href=\"#redux-saga-test-plan%EC%9D%84-%EC%A0%84%ED%98%80-%EB%93%A4%EC%96%B4%EB%B3%B8-%EC%A0%81%EC%9D%B4-%EC%97%86%EB%8A%94-%EC%82%AC%EB%9E%8C%EC%97%90%EA%B2%8C-%EC%84%A4%EB%AA%85%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"redux saga test plan을 전혀 들어본 적이 없는 사람에게 설명한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-saga-test-plan을 전혀 들어본 적이 없는 사람에게 설명한다면?</h2>\n<p><em>redux-saga-test-plan</em>은 <a href=\"https://redux-saga.js.org/\">redux-saga</a>를 더 쉽게 테스트하기 위한 라이브러리다.</p>\n<blockquote>\n<p>만약 redux-saga가 익숙지 않다면 <a href=\"https://survivejs.com/blog/redux-saga-interview/\">redux-saga의 개발자 Yassine Elouafi 인터뷰</a>를 확인해보자.</p>\n</blockquote>\n<p><em>redux-saga-test-plan</em>은 사가(Saga) 제너레이터 함수를 테스트할 때, 실제 구현 로직과 테스트 코드가 갖는 커플링, 그리고 매뉴얼 한 테스트에 대한 문제를 해결해준다. 테스트에 선언적이고, 체이닝(chainable) API를 제공해서 실제 구현체인 사가에서 원하는 이펙트만을 테스트할 수 있도록 도와준다. 이외 어떤 이펙트들을 나타내는지, 이펙트들의 순서는 어떻게 되는지 신경쓰지 않고 걱정하지 않도록 한다. redux-saga의 런타임을 함께 사용하므로, 통합 테스트를 할 수도 있고, <em>redux-saga-test-plan</em>에 내장된 이펙트 목킹(mocking)을 활용해 유닛 테스트도 작성할 수 있다.</p>\n<h2 id=\"redux-saga-test-plan는-어떻게-동작하는지\" style=\"position:relative;\"><a href=\"#redux-saga-test-plan%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%EC%A7%80\" aria-label=\"redux saga test plan는 어떻게 동작하는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>redux-saga-test-plan</em>는 어떻게 동작하는지?</h2>\n<p>간단한 saga 예시를 보고 <em>redux-saga-test-plan</em>이 그 사가들을 어떻게 쉽게 테스트하는지 소개하겠다.</p>\n<h3 id=\"간단한-api-saga\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-api-saga\" aria-label=\"간단한 api saga permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 API Saga</h3>\n<p>다음은 유저 목록을 요청하는 간단한 사가다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga/effects\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchUsersSaga</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>redux-saga-test-plan</em>을 사용해 다음과 같은 테스트를 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expectSaga <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga-test-plan\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetches users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jeremy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tucker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getUsers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expectSaga</span><span class=\"token punctuation\">(</span>fetchUsersSaga<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">expectSaga</code>는 사가와 그 arguments를 받는 함수다. 위에선 <code class=\"tui-language-text\">fetchUsersSaga</code>와 <code class=\"tui-language-text\">api</code>를 목킹해서 가짜 응답을 받도록 했다.</p>\n<p><code class=\"tui-language-text\">expectSaga</code>는 체이닝이 가능한 API를 반환한다. 여기에는 여러 유용한 메서드들이 있다. 위의 <code class=\"tui-language-text\">put</code>메서드는 사가가 <code class=\"tui-language-text\">put</code> 이펙트를 확인하기 위한 확인(assertion) 메서드로, <code class=\"tui-language-text\">FETCH_USERS_SUCCESS</code> 액션이 발생했는지 테스트한다.</p>\n<p><code class=\"tui-language-text\">run</code> 메서드는 사가를 실행시킨다. <em>redux-saga-test-plan</em>은 redux-saga의 <code class=\"tui-language-text\">run-saga</code> 함수를 사용한다. 따라서 사가는 실제 애플리케이션에서 실행되는 것과 같이 처리된다. <code class=\"tui-language-text\">expectSaga</code>는 사가가 yield하는 모든 이펙트들을 추적하기 때문에 위의 <code class=\"tui-language-text\">put</code> 메서드처럼 모두 테스트할 수 있다.</p>\n<p>일반적으로 사가는 비동기이기 때문에 <em>redux-saga-test-plan</em>은 <code class=\"tui-language-text\">run</code> 메서드에서 프로미스(promise)를 반환한다. 단, 프로미스를 사용하기 때문에 언제 테스트가 완료되는지 알아야 한다. 위의 예시에서는 Jest를 사용하기 때문에 프로미스를 바로 반환하면 된다.</p>\n<p><em>redux-saga-test-plan</em>은 비동기로 동작하기 때문에, 일정 시간에 따라 사가를 타임아웃 시킨다. <a href=\"http://redux-saga-test-plan.jeremyfairbank.com/integration-testing/timeout.html#adjusting-timeout\">타임아웃 시간은 설정</a>할 수 있다.</p>\n<h3 id=\"내장된-목킹\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9E%A5%EB%90%9C-%EB%AA%A9%ED%82%B9\" aria-label=\"내장된 목킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내장된 목킹</h3>\n<p>위의 <code class=\"tui-language-text\">api</code> 객체처럼 의존성을 주입하지 않는다면, <code class=\"tui-language-text\">expectSaga</code>에 내장된 목킹 메커니즘을 사용할 수 있다. <em>providers</em>라 부른다. 다른 파일에서 <code class=\"tui-language-text\">api</code>를 import 하여 사용한다 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga/effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> api <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchUsersSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">provide</code> 메서드를 사용해 다음과 같은 목킹을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expectSaga <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga-test-plan\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> api <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetches users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jeremy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tucker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expectSaga</span><span class=\"token punctuation\">(</span>fetchUsersSaga<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">provide</code> 메서드는 매처(matcher)-값(value) 쌍을 배열로 받는다. 각 매처-값 쌍은 매칭할 이펙트와 이에 반환할 가짜 값을 엘리먼트로 가진 배열이다. <em>redux-saga-test-plan</em>은 이펙트를 가로채고, 매칭을 확인한 후 <code class=\"tui-language-text\">redux-saga</code>에 이펙트 처리를 넘기지 않고 바로 가짜 값을 반환하도록 한다. 이 예시에서는 모든 <code class=\"tui-language-text\">call</code> 이펙트에 대해서 <code class=\"tui-language-text\">api.gerUsers</code>를 처리하는지 확인하고, 맞는다면 가짜 유저 목록을 반환하도록 한다.</p>\n<h3 id=\"이펙트-디스패치dispatching와-포크fork된-사가\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%8E%99%ED%8A%B8-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98dispatching%EC%99%80-%ED%8F%AC%ED%81%ACfork%EB%90%9C-%EC%82%AC%EA%B0%80\" aria-label=\"이펙트 디스패치dispatching와 포크fork된 사가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이펙트 디스패치(Dispatching)와 포크(Fork)된 사가</h3>\n<p><em>redux-saga-test-plan</em>은 다음과 같은 복잡한 사가를 처리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> takeLatest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga/effects\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> api <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchUserSaga</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUser<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USER_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">watchFetchUserSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FETCH_USER_REQUEST\"</span><span class=\"token punctuation\">,</span> fetchUserSaga<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">watchFetchUserSaga</code>는 <code class=\"tui-language-text\">FETCH_USER_REQUEST</code>의 가장 마지막 액션을 처리하기 위해 <code class=\"tui-language-text\">takeLatest</code>를 사용하고 있다. 만약 <code class=\"tui-language-text\">FETCH_USER_REQUEST</code>를 디스패치하면 redux-saga는 <code class=\"tui-language-text\">fetchUserSaga</code>를 포크하고 액션을 넘긴다. <code class=\"tui-language-text\">fetchUserSaga</code>는 액션에 담긴(payload) 아이디로 유저 정보를 요청한다. 이 처리를 <em>redux-saga-test-plan</em>을 이용해 다음과 같이 테스트할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expectSaga <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga-test-plan\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> api <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetches a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jeremy\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expectSaga</span><span class=\"token punctuation\">(</span>watchFetchUserSaga<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUser<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USER_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USER_REQUEST\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">silentRun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>redux-saga-test-plan</em>는 포크된 사가의 이펙트들도 모두 추적한다. 위 예시에서 <code class=\"tui-language-text\">expectSaga</code>는 단지 <code class=\"tui-language-text\">watchFetchUserSaga</code>만을 받았지만, <code class=\"tui-language-text\">fetchUserSaga</code>가 yield하는 <code class=\"tui-language-text\">put</code> 이펙트도 테스트한다는 점을 알아두자.</p>\n<p><code class=\"tui-language-text\">dispatch</code> 메서드를 사용해 <code class=\"tui-language-text\">FETCH_USER_REQUEST</code> 액션을 <code class=\"tui-language-text\">watchFetchUserSaga</code>에 dispatch했다. 액션에는 <code class=\"tui-language-text\">payload</code>의 <code class=\"tui-language-text\">id</code>에 <code class=\"tui-language-text\">42</code>를 지정했다. redux-saga는 이 액션을 받아서 <code class=\"tui-language-text\">fetchUserSaga</code>를 포크하고 실행했다.</p>\n<p><code class=\"tui-language-text\">takeLatest</code>는 루프(loop)로 동작히기 때문에 <em>redux-saga-test-plan</em>은 경고 메시지와 함께 사가를 타임아웃 시킨다. 하지만 이미 타임아웃을 예상하기 때문에 경고 메시지를 나타내지 않도록 <code class=\"tui-language-text\">silentRun</code> 메서드를 사용했다.</p>\n<blockquote>\n<p>역주: 일반적인 사가 테스트에는 <code class=\"tui-language-text\">run</code>을 사용해서 경고메시지를 확인해야 함이 옳다. 하지만 위의 예시에서 <code class=\"tui-language-text\">watchFetchUserSaga</code>의 <code class=\"tui-language-text\">takeLatest</code>는 무한 루프이고, 종료가 없다. 따라서 타임아웃처리를 하는 것이고, 경고 메시지를 생략하도록 <code class=\"tui-language-text\">slientRun</code>을 사용한다.</p>\n</blockquote>\n<h3 id=\"에러-처리\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC\" aria-label=\"에러 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 처리</h3>\n<p><em>providers</em>를 사가의 에러 처리 테스트를 위해 사용할 수도 있다. <code class=\"tui-language-text\">try-catch</code>를 사용하는 새로운 <code class=\"tui-language-text\">fetchUsersSaga</code>를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchUsersSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_FAIL\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">redux-saga-test-plan/providers</code>에서 <code class=\"tui-language-text\">throwError</code>를 import하여 <code class=\"tui-language-text\">provide</code>메서드에서 에러를 시뮬레이션할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expectSaga <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga-test-plan\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> throwError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga-test-plan/providers\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handles errors\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Whoops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expectSaga</span><span class=\"token punctuation\">(</span>fetchUsersSaga<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_FAIL\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"redux의-상태state\" style=\"position:relative;\"><a href=\"#redux%EC%9D%98-%EC%83%81%ED%83%9Cstate\" aria-label=\"redux의 상태state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux의 상태(State)</h3>\n<p>Redux의 리듀서(reducer)를 Saga와 함께 테스트할 수도 있다. 유저 목록을 받아 스토어의 상태를 업데이트하는 리듀서를 같이 테스트해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INITIAL_STATE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token constant\">INITIAL_STATE</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> users<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">withReducer</code> 메서드를 사용해서 리듀서에 연결한 후 <code class=\"tui-language-text\">hasFinalState</code>를 사용해 최종 상태를 확인할 수 있다. 다음 예시를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expectSaga <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga-test-plan\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetches the users into the store state\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jeremy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tucker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expectSaga</span><span class=\"token punctuation\">(</span>fetchUsersSaga<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">hasFinalState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"테스트-가능한-이펙트-목록\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%9D%B4%ED%8E%99%ED%8A%B8-%EB%AA%A9%EB%A1%9D\" aria-label=\"테스트 가능한 이펙트 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 가능한 이펙트 목록</h3>\n<p>다음은 이펙트 테스트를 위한 메서드 목록이다.</p>\n<ul>\n<li><code class=\"tui-language-text\">take(pattern)</code></li>\n<li><code class=\"tui-language-text\">take.maybe(pattern)</code></li>\n<li><code class=\"tui-language-text\">put(action)</code></li>\n<li><code class=\"tui-language-text\">put.resolve(action)</code></li>\n<li><code class=\"tui-language-text\">call(fn, ...args)</code></li>\n<li><code class=\"tui-language-text\">call([context, fn], ...args)</code></li>\n<li><code class=\"tui-language-text\">apply(context, fn, args)</code></li>\n<li><code class=\"tui-language-text\">cps(fn, ...args)</code></li>\n<li><code class=\"tui-language-text\">cps([context, fn], ...args)</code></li>\n<li><code class=\"tui-language-text\">fork(fn, ...args)</code></li>\n<li><code class=\"tui-language-text\">fork([context, fn], ...args)</code></li>\n<li><code class=\"tui-language-text\">spawn(fn, ...args)</code></li>\n<li><code class=\"tui-language-text\">spawn([context, fn], ...args)</code></li>\n<li><code class=\"tui-language-text\">join(task)</code></li>\n<li><code class=\"tui-language-text\">select(selector, ...args)</code></li>\n<li><code class=\"tui-language-text\">actionChannel(pattern, [buffer])</code></li>\n<li><code class=\"tui-language-text\">race(effects)</code></li>\n</ul>\n<h3 id=\"추가-기능들\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-%EA%B8%B0%EB%8A%A5%EB%93%A4\" aria-label=\"추가 기능들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가 기능들</h3>\n<ul>\n<li><a href=\"https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/snapshot-testing.html\">스냅샷 테스트(Snapshot testing)</a></li>\n<li><a href=\"https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/partial-matching.html\">부분 확인(Partial assertions)</a></li>\n<li><a href=\"https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/negated-assertions.html\">부정 확인(Negated assertions)</a></li>\n<li><a href=\"https://redux-saga-test-plan.jeremyfairbank.com/integration-testing/return-value.html\">사가의 반환 값 확인(Assert a saga's return value)</a></li>\n</ul>\n<h2 id=\"redux-saga-test-plan은-다른-솔루션과-무엇이-다른가\" style=\"position:relative;\"><a href=\"#redux-saga-test-plan%EC%9D%80-%EB%8B%A4%EB%A5%B8-%EC%86%94%EB%A3%A8%EC%85%98%EA%B3%BC-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EA%B0%80\" aria-label=\"redux saga test plan은 다른 솔루션과 무엇이 다른가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>redux-saga-test-plan</em>은 다른 솔루션과 무엇이 다른가?</h2>\n<ul>\n<li><code class=\"tui-language-text\">expectSaga</code>에서 오직 관심이 있는 이펙트만 테스트할 수 있다. 매뉴얼하게 사가의 이펙트들을 모두 확인할 필요가 없고, 구현 로직과의 커플링을 없앨 수 있다.</li>\n<li>선언적이고 체이닝이 가능한 API로 사가를 테스트하는데 간단한 준비만 하면 된다. 지금까지 본 다른 솔루션들은 명령형의 API와 더 많은 준비 단계가 필요했고, 특정 API만 테스트할 수 있었다.</li>\n<li>사가를 리듀서와 함께 테스트할 수 있는 몇 안 되는 라이브러리 중 하나다.</li>\n<li>여러 레이어로 깊게 포크된 사가를 테스트할 수 있다.</li>\n<li>내장된 목킹으로 정적/동적 <em>providers</em>를 사용할 수 있다.</li>\n<li>부정 확인. 사가가 특정 이펙트를 yield하지 않았는지로 확인할 수 있다.</li>\n<li>부분 확인. 예를 들어, 특정 <code class=\"tui-language-text\">type</code>의 액션의 <code class=\"tui-language-text\">put</code> 이펙트를 그 액션의 패이로드와 관계없이 테스트할 수 있다.</li>\n</ul>\n<h2 id=\"redux-saga-test-plan을-왜-개발했는지\" style=\"position:relative;\"><a href=\"#redux-saga-test-plan%EC%9D%84-%EC%99%9C-%EA%B0%9C%EB%B0%9C%ED%96%88%EB%8A%94%EC%A7%80\" aria-label=\"redux saga test plan을 왜 개발했는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>redux-saga-test-plan</em>을 왜 개발했는지?</h2>\n<p>다음과 같이 사가를 매뉴얼하게 반복하며 테스트하는 것에 지쳤었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchUsersSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetches users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jeremy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tucker\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">fetchUsersSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>getUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"FETCH_USERS_SUCCESS\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 테스트는 작성하는 데 오래 걸리고, 실제 구현과 커플링 된다. 사가의 전체적인 동작과 관계없는 이펙트 순서의 작은 변화도 항상 테스트를 실패시킨다. 역설적으로, <a href=\"https://redux-saga-test-plan.jeremyfairbank.com/unit-testing/\"><code class=\"tui-language-text\">testSaga API</code></a>도 만들었다. 몇 가지 boilerplate를 제거했지만, 여전히 실제 구현과 커플링은 있다.</p>\n<p>사용자 친화적인 API와 대부분의 boilerplate를 제거하고 관심 있는 동작만을 테스트하는 데 집중하길 원했고, 그래서 <code class=\"tui-language-text\">expectSaga</code>가 만들어졌다.</p>\n<h2 id=\"다음-계획은\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%8C-%EA%B3%84%ED%9A%8D%EC%9D%80\" aria-label=\"다음 계획은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음 계획은?</h2>\n<p>Elm 책을 작성하는데 대부분 시간을 보내고 있어서 <em>redux-saga-test-plan</em> 개발은 조금 쉬고 있다. 하지만 다음 큰 계획은 redux-saga 버전 1을 지원하는 것으로, 이펙트 미들웨어에 대한 기능이 추가된다. 이펙트 미들웨어는 이펙트를 가로채고 가짜 값을 반환할 수 있게 한다. <code class=\"tui-language-text\">expectSaga</code>의 <em>providers</em> 구현을 이펙트 미들웨어로 더 단순화하고자 한다.</p>\n<blockquote>\n<p>역주: 번역하는 현재 redux-saga는 아직 v1.0.0-beta.1 릴리스 상태다.</p>\n</blockquote>\n<p>Redux 스토어에 대한 전체적인 통합, 새로운 단언문(assertions) 등 또한 계획에 있다.</p>\n<p>컨트리뷰터를 환영한다!</p>\n<h2 id=\"redux-saga-test-plan이나-웹-개발의-미래는-전반적으로-어떻게-보는지-앞으로의-트렌드는\" style=\"position:relative;\"><a href=\"#redux-saga-test-plan%EC%9D%B4%EB%82%98-%EC%9B%B9-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EB%AF%B8%EB%9E%98%EB%8A%94-%EC%A0%84%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EB%8A%94%EC%A7%80-%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98-%ED%8A%B8%EB%A0%8C%EB%93%9C%EB%8A%94\" aria-label=\"redux saga test plan이나 웹 개발의 미래는 전반적으로 어떻게 보는지 앞으로의 트렌드는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>redux-saga-test-plan</em>이나 웹 개발의 미래는 전반적으로 어떻게 보는지? 앞으로의 트렌드는?</h2>\n<p>redux-saga에 의존하고 있어서 확신할 수는 없다. <a href=\"https://github.com/Andarist\">Mateusz Burzyński</a>와 모든 컨트리뷰터들은 유지보수를 훌륭히 하고 있다. redux-saga가 v1으로 향하는데 좋은 신호다. 하지만 프론트엔드 개발은 빠르게 변하고 움직인다. 예를 들어, <a href=\"https://github.com/ReactiveX/rxjs\">RxJS</a>나 <a href=\"https://github.com/redux-observable/redux-observable\">redux-observable</a>의 인기가 크게 상승했다.</p>\n<p>프론트엔드 애플리케이션에서 redux-saga에 대한 많은 지원이 있는 한, <em>redux-saga-test-plan</em>은 테스트 부분에서 많은 도움을 주도록 유지될 것으로 생각한다. 사가 제너레이터를 테스트하는 것은 어렵고, <em>redux-saga-test-plan</em>은 계속해서 이를 쉽게 만들어 주길 희망한다. 즉, 나는 고객의 프로젝트에 항상 redux-saga를 사용하진 않지만, 다른 컨트리뷰터들의 지원으로 <em>redux-saga-test-plan</em>을 테스팅에 최선의 방법이 되도록 할 수 있다.</p>\n<p>트렌드에 대해서, 프론트엔드 개발은 정적 타입으로 유지 보수와 안전성을 향상시키는 방향으로 가고 있다고 생각한다. Elm, TypeScript, 그리고 Flow는 단단한 프론트엔드 애플리케이션을 더 쉽게 만들 수 있도록 한다. 정적 타입은 많은 단순한 버그와 실수를 잡을 수 있고, 코드를 더 자신 있게 리팩토링하도록 도와준다.</p>\n<h2 id=\"웹-개발을-시작하는-프로그래머들에게-조언한다면\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%93%A4%EC%97%90%EA%B2%8C-%EC%A1%B0%EC%96%B8%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"웹 개발을 시작하는 프로그래머들에게 조언한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 개발을 시작하는 프로그래머들에게 조언한다면?</h2>\n<p>새로 나오는 모든 라이브러리와 프레임워크를 따라갈 필요는 없다. 당신이 만드는, 좋아하는 소프트웨어 개발에 집중하라. 최신 자바스크립트 프레임워크를 사용하지 않는다고 해서 다른 개발자들로부터 자신이 진짜 개발자가 아니라 여겨진다고 생각하지 말라. 가장 중요한 것은 당신이 사용하는 개발 언어를 이해하고, 올바른 소프트웨어 엔지니어링 방법을 지키는 것이다. 당신을 공감하고 돕고 싶어 하는 멘토를 찾아라.</p>\n<p>또한 컨퍼런스, 밋업에 참여하라. 때때로 얼마나 많은 사람이 그들이 공유하는 주제에 대해 전문가가 아닌지(본인도 물론이다)에도 놀랄 것이다. 당신이 기술을 경험하고 학습한 것에 힘들었던 점을 공유할 수도 있고, 그 기술을 왜 좋아하는지에 대한 자신의 고유한 관점을 제공할 수도 있다. 그리고 새로운 사람들에게 영감을 주고 힘을 줄 수 있다.</p>\n<h2 id=\"다음-인터뷰는-누가-좋을까요\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%8C-%EC%9D%B8%ED%84%B0%EB%B7%B0%EB%8A%94-%EB%88%84%EA%B0%80-%EC%A2%8B%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"다음 인터뷰는 누가 좋을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음 인터뷰는 누가 좋을까요?</h2>\n<p>본인은 Test Double에서 일하기 때문에 약간 편견이 있을 수 있지만, <a href=\"https://twitter.com/searls\">Justin Searls</a>를 인터뷰하면 좋겠다. 테스팅에 대한 많은 발표를 했고, 그의 통찰력이 자바스크립트 세계에 큰 도움이 될 것이다. 그는 우리의 Test Doulbe의 라이브러리인 <a href=\"https://github.com/testdouble/testdouble.js\">testdouble.js</a>를 개발하고 있다. testdouble.js는 테스트에서의 목킹에 대한 내 생각을 변화시켰다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>인터뷰에 응해주어 고맙다. Jeremy! <em>redux-saga-test-plan</em>은 redux-saga를 잘 보완해주는 것으로 보인다.</p>\n<p>더 많은 내용들은 <a href=\"http://redux-saga-test-plan.jeremyfairbank.com/\">redux-saga-test-plan 사이트</a>와 <a href=\"https://github.com/jfairbank/redux-saga-test-plan\">redux-saga-test-plan Github 페이지</a>에서 배울 수 있다.</p>\n<p>2017년 12월 20일\n<a href=\"https://twitter.com/bebraw\">Juho Vepsäläinen</a></p>","frontmatter":{"id":"ko_20180514","title":"redux-saga-test-plan - 간편한 Redux Saga 테스트 - Jeremy Fairbank 인터뷰","description":"Redux Saga는 테스트가 쉽기로 유명하다. 하지만, 더 간단해질 수 있다면 어떨까? Jeremy Fairbank는 더 간단한 테스트를 위해 redux-saga-test-plan을 디자인했다.","date":"2018.05.14","author":"이민규","tags":["Redux","test"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20180514","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}