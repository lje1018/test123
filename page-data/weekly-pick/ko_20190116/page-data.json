{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190116","result":{"data":{"post":{"html":"<h1 id=\"실용적인-프론트엔드-테스트-전략-2\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%9A%A9%EC%A0%81%EC%9D%B8-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-2\" aria-label=\"실용적인 프론트엔드 테스트 전략 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실용적인 프론트엔드 테스트 전략 (2)</h1>\n<p><a href=\"/test123/weekly-pick/ko_20181226\">1부</a>에서는 테스트 자동화와 테스트 전략의 중요성, 시각적 테스트를 자동화하는 것이 어려운 이유 등을 살펴보았다. 사실 시각적 테스트를 자동화하는 것이 불가능하지는 않지만, 현재 우리가 가진 도구로는 기대하는 만큼 효용을 얻기가 어렵다. 이 글은 \"실용적인\" 테스트 전략을 다루고 있으므로, 한발 물러서서 다른 접근 방식을 시도해 보도록 하겠다. 즉, 결과물을 시각적으로 검증하는 행위는 자동화하지 않고 \"사람의 눈\"에 맡기되, 검증을 위한 준비 작업을 최대한 자동화하는 것이다. 이러한 작업을 위한 가장 효과적인 도구가 바로 스토리북이다.</p>\n<p>1부에서도 말했지만, 스토리북은 사실 테스트 도구라기 보다는 <strong>UI 개발 환경</strong>에 가깝다. 스토리북의 가장 큰 목적은 \"<strong>UI 컴포넌트를 애플리케이션 외부의 독립된 환경에서 개발할 수 있도록</strong>\" 하는 것이다. 하지만 우리가 일반적으로 사용하는 테스트 도구가 \"모듈 혹은 함수를 애플리케이션 외부의 독립된 환경에서 실행해서 결과를 검증할 수 있도록\" 돕는다는 것을 생각해보면, 스토리북도 테스트 도구의 역할을 일부 수행하고 있다는 것을 알 수 있을 것이다.</p>\n<p><em>(이 글에서 작성한 모든 소스코드는 <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress\">깃헙 리포지토리</a>에 공개되어 있다. 글에서 대부분의 중요 소스 코드를 보여주고 있지만, 전체 소스 코드가 궁금하다면 리포지토리에서 직접 소스 코드를 확인하길 바란다.)</em></p>\n<h2 id=\"스토리북-시작하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"스토리북 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리북 시작하기</h2>\n<p>스토리북은 처음에 리액트 스토리북으로 시작했지만, 현재는 리액트 네이티브, 뷰, 앵귤러, Ember, Riot 등 대부분의 프레임워크를 지원한다. 물론 프레임워크 없이 DOM을 직접 사용하는 경우에도 사용할 수 있으며, 지원하는 프레임워크의 목록은 <a href=\"https://github.com/storybooks/storybook/tree/master/app\">리포지토리의 app 폴더</a>에서 확인할 수 있다.</p>\n<p>지원하는 프레임워크마다 별도의 npm 모듈을 제공하고 있기 때문에, 스토리북을 사용하기 위해서는 프로젝트 환경에 맞는 npm 모듈을 설치해야 한다. 예를 들어, 이 글에서는 리액트 기반의 할 일 관리 애플리케이션을 테스트할 것이므로, 리액트 버전의 스토리북을 설치해야 한다. 스토리북은 이런 설치 과정을 편하게 만들기 위해 CLI 도구를 제공하고 있으며, 다음의 <code class=\"tui-language-text\">npx</code> 명령을 통해 별도의 설치 없이도 간단하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">npx -p @storybook/cli sb init</code></pre></div>\n<p>커맨드 라인에 위의 명령을 입력하고 실행하면, <code class=\"tui-language-text\">package.json</code>의 의존성을 읽어들여 어떤 프레임워크를 사용하고 있는지를 자동으로 판별하고 적절한 버전의 스토리북을 설치해준다. 그뿐만 아니라, 처음 시작하기 위해 필요한 몇 가지 보일러 플레이트를 같이 설치해주기 때문에 별도의 설정 과정 없이 바로 스토리북을 시작할 수 있다.</p>\n<p>프로젝트 폴더를 열어 보면 <code class=\"tui-language-text\">.storybook</code> 폴더와 <code class=\"tui-language-text\">stories</code> 폴더가 추가된 것을 볼 수 있다. <code class=\"tui-language-text\">.storybook</code> 폴더는 스토리북을 사용하기 위한 설정 파일이 저장되는 곳이고, <code class=\"tui-language-text\">stories</code> 폴더는 실제로 컴포넌트를 등록하는 코드를 작성하는 곳이다. 또한 <code class=\"tui-language-text\">package.json</code> 파일에 <code class=\"tui-language-text\">storybook</code>과 <code class=\"tui-language-text\">build-storybook</code> 이라는 스크립트가 추가된 것을 확인할 수 있다. <code class=\"tui-language-text\">build-storybook</code>은 나중에 설명하기로 하고, 먼저 <code class=\"tui-language-text\">storybook</code> 스크립트를 사용해서 스토리북을 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">npm run storybook</code></pre></div>\n<p>위의 명령을 실행하면 <code class=\"tui-language-text\">9009</code> 포트에 로컬 웹 서버가 실행되고, 브라우저가 자동 실행되어 해당 페이지(<code class=\"tui-language-text\">localhost:9009</code>)를 보여줄 것이다. 커맨드 라인 명령 단 두 줄로 모든 설치 및 설정 과정이 끝났다. 만약 CLI 도구의 도움 없이 직접 설치 및 설정을 해 보고 싶다면 <a href=\"https://storybook.js.org/basics/guide-react/\">공식 문서</a>를 참고하면 된다.</p>\n<h2 id=\"스토리-작성하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"스토리 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리 작성하기</h2>\n<p>스토리북은 테스트 케이스라는 이름 대신 \"스토리\"라는 이름을 사용한다. 보통 테스트 케이스가 하나의 모듈의 한 가지 입력값에 대한 결과를 검증하는 것과 유사하게, 스토리도 보통 하나의 컴포넌트의 한 가지 상태를 표현한다고 볼 수 있다. 스토리를 어떤 단위로 구분하는 게 좋을지는 차차 살펴보기로 하고, 먼저 가장 간단한 컴포넌트인 <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/components/Header.js\"><code class=\"tui-language-text\">&lt;Header&gt;</code></a> 컴포넌트를 스토리로 등록해 보자.</p>\n<p>먼저, <code class=\"tui-language-text\">stories/index.js</code> 파일을 열어 보면, CLI 도구가 <code class=\"tui-language-text\">&lt;Button&gt;</code> 컴포넌트에 대한 예제를 등록해 놓은 것을 볼 수 있다. 이를 삭제하고, 다음과 같이 코드를 작성자다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> storiesOf <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Header <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/Header\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"../components/App.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stories <span class=\"token operator\">=</span> <span class=\"token function\">storiesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoApp\"</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Header addTodo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">storiesOf</code> 함수는 스토리를 등록하고 여러 개의 스토리를 관리할 수 있는 있는 객체를 반환한다. 첫 번째 인자는 일종의 카테고리 명과 같은 역할을 하며, 등록되는 스토리들을 하나의 카테고리로 묶어서 표시할 때 사용된다. 두 번째 인자인 <code class=\"tui-language-text\">module</code>은 스토리북이 내부적으로 <a href=\"https://webpack.js.org/api/hot-module-replacement/\">Hot Module Replacement</a>를 사용해서 페이지 새로고침 없이 변경 사항을 적용하기 위해 필요하므로, 항상 전달해 주어야 한다.</p>\n<p><code class=\"tui-language-text\">storiesOf</code>를 통해 반환된 객체의 <code class=\"tui-language-text\">add</code> 메소드를 사용하면 스토리를 등록할 수 있다. 첫 번째 인자는 스토리의 이름이며, 두 번째 인자는 컴포넌트를 렌더링하기 위한 리액트 엘리먼트를 반환하는 함수이다. 이 예제에서는 <code class=\"tui-language-text\">&lt;Header&gt;</code> 컴포넌트가 <code class=\"tui-language-text\">todoapp</code> 클래스를 갖는 DOM 엘리먼트 하위에 있어야만 CSS가 제대로 적용되기 때문에 <code class=\"tui-language-text\">&lt;div className=&quot;todoapp&quot;&gt;</code>을 최상위 노드에 추가했다. 또한 행위를 테스트하는 것은 아니기 때문에, <code class=\"tui-language-text\">addTodo</code>를 빈 함수로 제공해서 에러가 발생하지 않게만 한다.</p>\n<p>이 코드를 저장하면, 브라우저에서 다음과 같은 화면을 볼 수 있을 것이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221101-59379f00-197b-11e9-9cae-a7f654d3c83b.png\" alt=\"Storybook-Header\"></p>\n<h2 id=\"단일-컴포넌트의-상태에-따른-스토리-작성\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%83%81%ED%83%9C%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%9E%91%EC%84%B1\" aria-label=\"단일 컴포넌트의 상태에 따른 스토리 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 컴포넌트의 상태에 따른 스토리 작성</h2>\n<p><code class=\"tui-language-text\">&lt;Header&gt;</code> 컴포넌트는 props에 따라 변하는 상태가 없기 때문에 위와 같이 간단하게 스토리를 등록할 수 있다. 하지만 props에 따라 상태가 변하는 컴포넌트는 각 상태에 대한 스토리를 따로 등록해 주는 것이 좋다. 예를 들어 <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/components/TodoItem.js\"><TodoItem></a> 컴포넌트는 할 일의 내용 외에도 \"일반\", \"완료\", \"편집 중\"이라는 세 가지의 상태를 갖기 때문에 다음과 같이 각각에 대한 스토리를 따로 등록해 주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">stories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoItem - Normal\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-list\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TodoItem\n        id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"Have a Breakfast\"</span>\n        completed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n        editing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoItem - Completed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-list\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TodoItem\n        id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"Have a Breakfast\"</span>\n        completed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n        editing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoItem - Editing\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"todo-list\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TodoItem\n        id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        text<span class=\"token operator\">=</span><span class=\"token string\">\"Have a Breakfast\"</span>\n        completed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n        editing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>주의할 점은 <code class=\"tui-language-text\">&lt;TodoItem&gt;</code>가 제대로 표시되기 위해서는 부모 엘리먼트인 <code class=\"tui-language-text\">&lt;ul className=&quot;todo-list&quot;&gt;</code>가 필요하다는 것이다. 이렇게 스토리를 작성하고 나면 다음과 같이 <code class=\"tui-language-text\">&lt;TodoItem&gt;</code>의 개별 상태에 대한 스토리가 추가된 것을 볼 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221089-445b0b80-197b-11e9-82ae-053b7c81be96.gif\" alt=\"StoryBook-TodoItem\"></p>\n<h2 id=\"단일-컴포넌트-스토리의-문제점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"단일 컴포넌트 스토리의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 컴포넌트 스토리의 문제점</h2>\n<p>지금까지는 작성한 스토리는 모두 자식 컴포넌트를 갖지 않는 단일 컴포넌트에 대한 스토리였다. 보통 컴포넌트라고 하면 \"목록 아이템\", \"버튼\", \"입력 박스\"와 같이 아주 작은 단위의 컴포넌트를 떠올리고, 스토리도 이러한 작은 단위에 대해서만 작성하게 된다. 하지만 실제 애플리케이션은 컴포넌트들의 조합에 의해 만들어지며, 여러 개의 컴포넌트가 조합된 복합 컴포넌트도 다수 존재한다. 이런 복합 컴포넌트에 대한 스토리를 작성하지 않고 단일 컴포넌트에 대해서만 스토리를 작성하는 것은, 마치 통합 테스트를 작성하지 않고 최소 단위의 단위 테스트만을 작성하는 것과 같다.</p>\n<p>1부에서 살펴본 \"좋은 테스트의 조건\"을 고려해보면, 이러한 접근 방식은 다음과 같은 문제가 있다.</p>\n<h3 id=\"1-실제-애플리케이션의-컴포넌트-조합을-검증할-수-없다\" style=\"position:relative;\"><a href=\"#1-%EC%8B%A4%EC%A0%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%A1%B0%ED%95%A9%EC%9D%84-%EA%B2%80%EC%A6%9D%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"1 실제 애플리케이션의 컴포넌트 조합을 검증할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 실제 애플리케이션의 컴포넌트 조합을 검증할 수 없다.</h3>\n<p>당연한 이야기지만, 개별 컴포넌트가 시각적으로 문제없이 표시된다는 것이 전체 애플리케이션이 시각적으로 문제없이 표시된다는 의미가 될 수 없다. 특히 HTML/CSS로 이루어진 UI는 각 DOM 엘리먼트의 부모/자식 관계 및 순서, CSS 선택자, z-index 등 많은 요인에 의해 영향을 받는다. 실제 애플리케이션이 문제없이 표시되는지를 확인하려면 각 컴포넌트들이 올바른 순서로 조합되어 있는지, 서로 영향을 주고 있지 않은지 등을 확인해야만 한다.</p>\n<p>또한 너무 작은 단위로 작성된 스토리는 실제 디자인 시안과 시각적으로 비교하기가 어렵다. 여러 개의 버튼이 한 화면에 정렬된 디자인 시안에 대해 버튼 하나만 표시되고 있는 스토리를 일일이 바꿔가며 검증하는 것은 번거롭고 어려울 것이다.</p>\n<h3 id=\"2-부모-컴포넌트의-내부-구현-변경-시-깨지기-쉽다\" style=\"position:relative;\"><a href=\"#2-%EB%B6%80%EB%AA%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%ED%98%84-%EB%B3%80%EA%B2%BD-%EC%8B%9C-%EA%B9%A8%EC%A7%80%EA%B8%B0-%EC%89%BD%EB%8B%A4\" aria-label=\"2 부모 컴포넌트의 내부 구현 변경 시 깨지기 쉽다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 부모 컴포넌트의 내부 구현 변경 시 깨지기 쉽다.</h3>\n<p>앞서 작성했던 <code class=\"tui-language-text\">&lt;Todoitem&gt;</code>에 대한 스토리에서 단일 컴포넌트가 제대로 표시되기 위해 <code class=\"tui-language-text\">&lt;div className=&quot;todoapp&quot;&gt;</code>과 <code class=\"tui-language-text\">&lt;ul className=&quot;todo-list&quot;&gt;</code> 등을 추가해 주었던 것을 생각해보자. 이는 사실 <code class=\"tui-language-text\">&lt;TodoItem&gt;</code>의 부모 컴포넌트에서 하는 일이며, 부모 컴포넌트의 내부 구현을 목킹한 것이나 마찬가지다. 이 경우 디자인적인 변경 사항이 없더라도 리팩토링 등으로 인해 부모 컴포넌트의 내부 구현이 바뀌게 되면 스토리가 제대로 표시되지 않는다. 즉, 부모 컴포넌트의 내부 구현이 변경될 때마다 스토리를 같이 변경해야만 한다.</p>\n<p>또한 컴포넌트의 prop 값을 직접 주입해주고 있기 때문에, 해당 컴포넌트의 prop 인터페이스가 변경되는 경우에도 스토리를 함께 변경해 주어야 한다. 사실 어떤 컴포넌트의 props 인터페이스가 변경되든, 그 컴포넌트를 사용하는 부모 컴포넌트 입장에서는 내부 구현이 변경되는 것이나 마찬가지다. 보통 컴포넌트를 작은 단위로 사용할수록 영향을 받는 부모 컴포넌트의 수가 늘어난다는 점을 생각해보면, 컴포넌트 단위가 작아질수록 스토리에 대한 관리 비용이 증가한다고 볼 수 있다.</p>\n<h2 id=\"복합-컴포넌트-스토리의-문제점\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%ED%95%A9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"복합 컴포넌트 스토리의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복합 컴포넌트 스토리의 문제점</h2>\n<p>이번에는 반대로 아주 큰 단위의 컴포넌트를 사용해서 스토리를 작성하는 경우를 생각해 보자. 이 경우는 다음과 같은 문제가 발생할 수 있다.</p>\n<h3 id=\"1-개별-컴포넌트의-엣지-케이스를-검증하기-힘들다\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EB%B3%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%97%A3%EC%A7%80-%EC%BC%80%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0-%ED%9E%98%EB%93%A4%EB%8B%A4\" aria-label=\"1 개별 컴포넌트의 엣지 케이스를 검증하기 힘들다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개별 컴포넌트의 엣지 케이스를 검증하기 힘들다.</h3>\n<p>3개의 컴포넌트가 각각 3개의 상태를 갖는다고 가정하면, 모든 컴포넌트가 조합된 상태에서는 최대 27(3 _ 3 _ 3)개의 상태를 갖는다고 할 수 있다. 이 경우 모든 케이스를 개별 스토리로 등록하려면 많은 양의 중복이 발생하게 될 것이다.</p>\n<h3 id=\"2-컴포넌트의-입력값을-제공하기가-어렵다\" style=\"position:relative;\"><a href=\"#2-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%9E%85%EB%A0%A5%EA%B0%92%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0%EA%B0%80-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"2 컴포넌트의 입력값을 제공하기가 어렵다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 컴포넌트의 입력값을 제공하기가 어렵다.</h3>\n<p>컴포넌트가 복잡할수록 입력값의 조합도 복잡해진다. 하나의 컴포넌트는 3~4개의 입력값만 제공하면 되지만, 컴포넌트 5개가 모이면 20개에 가까운 입력값을 제공해야만 한다. 또한 리덕스의 스토어와 같은 별도의 상태 관리 객체를 사용하는 경우, 자식 컴포넌트 중 스토어 등에 연결된 컴포넌트가 하나라도 있다면 해당 상태 관리 객체 또한 주입해 주어야 한다.</p>\n<h3 id=\"3-외부-환경에-대한-의존성이-증가한다\" style=\"position:relative;\"><a href=\"#3-%EC%99%B8%EB%B6%80-%ED%99%98%EA%B2%BD%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%B4-%EC%A6%9D%EA%B0%80%ED%95%9C%EB%8B%A4\" aria-label=\"3 외부 환경에 대한 의존성이 증가한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 외부 환경에 대한 의존성이 증가한다.</h3>\n<p>컴포넌트는 단순히 시각적인 요소를 표현할 뿐 아니라 외부 환경에 반응해서 다양한 부수 효과를 만들어내기도 한다. 브라우저의 URL 변경에 따른 라우팅을 처리하거나, 컴포넌트가 마운트될 때 API 서버에 요청을 보내서 데이터를 받아오는 일 등을 예로 들 수 있다. 컴포넌트의 단위가 높아질수록 이러한 역할을 하는 컴포넌트가 포함되어 있을 확률이 높아지기 때문에, 외부 환경에 대한 의존성을 제어할 방법이 필요해진다.</p>\n<h2 id=\"스토리의-단위-정하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%9D%98-%EB%8B%A8%EC%9C%84-%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"스토리의 단위 정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리의 단위 정하기</h2>\n<p>이처럼 양쪽 극단을 이용할 경우 각각의 장단점이 있다. 그러므로 애플리케이션의 성격에 맞게 적절한 크기로 스토리의 단위를 나누는 것이 중요하다. 개인적으로는 페이지 단위의 컴포넌트를 사용하되, 레이아웃상 컨텐츠 영역에 해당하는 컴포넌트만 따로 분리해서 스토리로 등록하는 것을 선호한다. 또한 특별히 페이지의 컨텐츠와 연관이 없는 레이어의 경우 모두 별도의 스토리로 분리하는 것이 좋다. 이렇게 하면 단일 컴포넌트를 등록할 때 발생하는 문제들을 대부분 해결할 수 있다.</p>\n<p>대신 복합 컴포넌트 스토리의 문제점들은 별도의 해결 방법이 필요하다. 1번의 경우 <a href=\"https://github.com/storybooks/storybook/tree/master/addons/knobs\">Knobs 애드온</a> 등을 사용해서 하나의 스토리에서 다수의 상태를 검증하는 식으로 해결할 수 있다. 2번은 사실 피하기 어려운 문제인데, 다양한 상태를 한 번에 표현할 수 있는 입력값을 만들어 공통으로 사용하는 방식으로 완화할 수 있다. 그리고 리덕스의 스토어 등을 목킹해서 커스텀 애드온 형태로 만들면 스토어 등에 입력값을 주입하는 코드를 단순하게 만들 수 있다.</p>\n<p>3번의 경우 실제 애플리케이션 코드를 잘 구성하는 것이 중요하다. 외부 환경에 의존성을 갖는 컴포넌트를 최대한 최상위로 이동시키고, 시각적 요소를 담당하는 컴포넌트와 역할을 확실하게 분리하는 것이 도움이 된다. 그리고 대부분의 부수 효과를 redux-thunk, redux-saga 등과 같은 별도의 레이어에서 처리하도록 만들어 컴포넌트를 최대한 순수(pure)하게 유지하는 것이 좋다.</p>\n<h2 id=\"할-일-관리-애플리케이션-적용\" style=\"position:relative;\"><a href=\"#%ED%95%A0-%EC%9D%BC-%EA%B4%80%EB%A6%AC-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%A0%81%EC%9A%A9\" aria-label=\"할 일 관리 애플리케이션 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>할 일 관리 애플리케이션 적용</h2>\n<p>아마 지금까지 설명한 것만으로는 쉽게 감이 오지 않을 것이다. 이제 이 내용을 실제 애플리케이션에 적용하면서 문제점들을 하나씩 해결해 보도록 하자.</p>\n<h3 id=\"컴포넌트의-시각적-요소-분리\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%8B%9C%EA%B0%81%EC%A0%81-%EC%9A%94%EC%86%8C-%EB%B6%84%EB%A6%AC\" aria-label=\"컴포넌트의 시각적 요소 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트의 시각적 요소 분리</h3>\n<p>사실 할 일 관리 애플리케이션은 일반적인 애플리케이션에 비해 규모가 작고 단순하기 때문에, 최상위 컴포넌트를 바로 스토리로 등록해도 된다. 하지만 최상위 컴포넌트는 라우팅, 스토어 생성 및 주입, 초기 데이터 로드 등의 역할을 같이 담당하고 있기 때문에 만일 이런 코드가 섞여 있다면 별도로 분리하는 것이 좋다. 예제 소스를 보면 <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/index.js\">src/index.js</a> 파일에서 대부분의 작업을 처리하고 <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/components/App.js\"><App></a> 컴포넌트는 렌더링 역할만 담당하고 있는 것을 확인할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// components/App.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Main <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Main\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Header\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Footer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Footer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./App.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"todoapp\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Main <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"스토어-목킹\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EC%96%B4-%EB%AA%A9%ED%82%B9\" aria-label=\"스토어 목킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토어 목킹</h3>\n<p>이제 이 <code class=\"tui-language-text\">&lt;App&gt;</code> 컴포넌트에 대한 스토리를 작성하면 된다. 하지만 스토리를 작성하려고 보니, 컴포넌트에 입력값을 제공할 방법이 없다. <code class=\"tui-language-text\">&lt;App&gt;</code> 컴포넌트에는 별도의 prop이 없고, 자식 컴포넌트를 렌더링할 뿐이기 때문이다. 그리고 자식 컴포넌트들은 모든 입력값을 리덕스의 스토어로부터 주입받는다. 즉, 입력값을 제공하기 위해서는 스토어가 필요하다. 하지만 스토어는 리듀서와 액션을 통해서만 상태를 변경할 수 있기 때문에 입력값을 원하는 형태로 제공하기가 불편하다. 대신 스토어의 API는 사실 매우 단순하기 때문에, 다음과 같이 간단하게 모의 객체를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createMockStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>현재 이 스토어의 역할은 초기 입력값을 제공할 뿐, 스토어의 상태를 변경할 필요가 없기 때문에 <code class=\"tui-language-text\">dispatch</code>, <code class=\"tui-language-text\">subscribe</code> 등의 메소드는 기능을 구현할 필요가 없다. 단지 <code class=\"tui-language-text\">getState</code> 메소드가 초기 입력값을 제대로 반환해 주기만 하면 된다.</p>\n<h3 id=\"스토리-작성\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%9E%91%EC%84%B1\" aria-label=\"스토리 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리 작성</h3>\n<p>이제 입력값을 제공할 수 있게 되었으니 스토리를 작성할 수 있다. 하지만 문제는 자식 컴포넌트 중 스토어 외의 입력값이 필요한 컴포넌트가 있다는 것이다. 그 입력값은 바로 <a href=\"https://reacttraining.com/react-router/\">react-router</a>로부터 전달받는 데이터이다. <code class=\"tui-language-text\">&lt;Footer&gt;</code>나 <code class=\"tui-language-text\">&lt;Main&gt;</code> 컴포넌트 모두 <code class=\"tui-language-text\">withRouter</code>를 통해 라우터로부터 현재 페이지의 파라미터 정보를 가져오고 있다. 그렇기 때문에 최상위 컴포넌트를 렌더링할 때 라우터의 정보를 제공하는 컴포넌트로 감싸주어야 한다. 다만 실제 애플리케이션에서 사용되는 <code class=\"tui-language-text\">BrowserRouter</code>를 사용하게 되면 브라우저의 URL에 영향을 받기 때문에 입력값을 제어할 수 있는 다른 종류의 라우터를 사용하거나 직접 모의 라우터를 만들어야 한다. 여기서는 백엔드에서 환경에서 주로 사용하는 <code class=\"tui-language-text\">StaticRouter</code>를 사용하기로 하겠다.</p>\n<p>그럼, 이제 실제 스토리를 작성해보자. 먼저 <code class=\"tui-language-text\">createMockStore</code>를 이용해 모의 스토어를 생성한 다음, <code class=\"tui-language-text\">&lt;Provider&gt;</code> 컴포넌트와 <code class=\"tui-language-text\">&lt;StaticRouter&gt;</code> 컴포넌트를 함께 렌더링한다. 일단 입력값은 최대한 단순하게 할 일 항목 하나만 제공하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">stories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createMockStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Breakfast\"</span><span class=\"token punctuation\">,</span>\n        completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing?\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 화면에 다음과 같이 전체 애플리케이션이 표시되는 것을 볼 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221401-acf6b800-197c-11e9-8858-e3d456b6f790.png\" alt=\"Storybook-App1\"></p>\n<h3 id=\"입력값-구성하기\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5%EA%B0%92-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"입력값 구성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력값 구성하기</h3>\n<p>전체 애플리케이션을 하나의 스토리로 작성했기 때문에, 한눈에 최대한 다양한 상태를 볼 수 있는 것이 좋다. 예를 들어 단일 컴포넌트를 사용할 때는 할 일 항목의 상태에 따라 각각 다른 스토리를 등록했지만, 지금은 각각 다른 상태를 갖는 할 일 항목을 동시에 보여줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createMockStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Breakfast\"</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Lunch\"</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Dinner\"</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  editing<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>입력값을 이렇게 작성하면 다음과 같이 각각 \"일반(1)\", \"완료됨(2)\", \"수정 중(3)\" 상태인 할 일 항목을 한눈에 볼 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221487-08c14100-197d-11e9-80db-ed2600f16725.png\" alt=\"Storybook-App2\"></p>\n<h2 id=\"knobs-애드온-사용하기\" style=\"position:relative;\"><a href=\"#knobs-%EC%95%A0%EB%93%9C%EC%98%A8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"knobs 애드온 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Knobs 애드온 사용하기</h2>\n<p>이제 할 일 항목의 다양한 상태를 한눈에 볼 수 있게 되었지만, 여전히 고려해야 할 상태가 많이 남아있다. 하단의 \"All\", \"Active\", \"Completed\" 버튼이 각각 활성화 상태가 되었을 때와, 상단의 \"전체 선택\" 체크 박스의 상태 등이다. 이러한 개별 컴포넌트의 상태를 위해 각각 다른 <code class=\"tui-language-text\">&lt;App&gt;</code> 스토리를 등록하면 변경을 알아보기도 어렵고 관리 비용도 많이 든다. 이 때 애드온을 사용하면 이런 문제를 해결할 수 있다.</p>\n<p>애드온은 스토리북의 핵심 기능 중의 하나이다. 주로 스토리상에 등록된 컴포넌트와 상호작용을 하기 위해 사용하며, 스토리가 보이는 \"프리뷰\" 영역 외부에 있는 \"패널\" 영역을 통해 스토리를 조작하거나 내부 정보를 확인할 수 있다. 애드온에 대한 <a href=\"https://storybook.js.org/addons/introduction/\">자세한 설명</a>과 <a href=\"https://storybook.js.org/addons/using-addons/\">사용법</a>은 공식 문서에서 확인할 수 있으며, <a href=\"https://storybook.js.org/addons/addon-gallery/\">애드온 갤러리</a>에서 수십 개의 유용한 애드온들을 확인할 수 있다.</p>\n<p>이 중 Knobs 애드온은 패널에 입력 컨트롤을 추가해서 컴포넌트에 제공되는 입력값을 동적으로 변경할 수 있도록 도와주기 때문에, 이를 이용하면 하나의 스토리에서 세부 상태를 변경하면서 화면을 확인할 수 있다. 이 글에서는 실제 사용 예를 중심으로 설명할 것이므로, Knobs 애드온의 자세한 사용법은 <a href=\"https://github.com/storybooks/storybook/tree/master/addons/knobs\">깃헙 리포지토리</a>를 참조하기 바란다.</p>\n<h3 id=\"knobs-애드온-설치-및-설정\" style=\"position:relative;\"><a href=\"#knobs-%EC%95%A0%EB%93%9C%EC%98%A8-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"knobs 애드온 설치 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Knobs 애드온 설치 및 설정</h3>\n<p>설치 및 설정은 아주 간단하다. 먼저 다음 npm 명령을 통해 애드온을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">npm install @storybook/addon-knobs --save-dev</code></pre></div>\n<p>그 다음, <code class=\"tui-language-text\">./stories/addons.js</code> 파일을 열어보면 기존에 스토리북 CLI가 기본으로 추가해 놓은 코드가 있을 것이다. 모두 삭제한 다음 아래의 코드를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"@storybook/addon-knobs/register\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음으로 스토리가 등록된 <code class=\"tui-language-text\">src/stories/index.js</code> 파일을 열고 상단에 아래의 코드를 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withKnobs<span class=\"token punctuation\">,</span> radios <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/addon-knobs\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 <code class=\"tui-language-text\">storiesOf</code>로 생성된 객체에 데코레이터를 추가해 주면 모든 준비가 끝난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> stories <span class=\"token operator\">=</span> <span class=\"token function\">storiesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Todo-App\"</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withKnobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"라우터의-상태-제어하기\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-%EC%83%81%ED%83%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0\" aria-label=\"라우터의 상태 제어하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우터의 상태 제어하기</h3>\n<p>이제 라우터의 입력값을 제어해서 하단 버튼의 상태를 바꿔보겠다. 여기서는 라디오 버튼을 사용하기 위해 <code class=\"tui-language-text\">radios</code> 함수를 사용한다. 첫 번째 인자는 레이블명, 두 번째 인자는 라디오 버튼의 옵션 목록, 마지막은 기본값이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">stories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... 기존 코드와 동일</span>\n\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">radios</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Filter\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      All<span class=\"token operator\">:</span> <span class=\"token string\">\"/All\"</span><span class=\"token punctuation\">,</span>\n      Active<span class=\"token operator\">:</span> <span class=\"token string\">\"/Active\"</span><span class=\"token punctuation\">,</span>\n      Completed<span class=\"token operator\">:</span> <span class=\"token string\">\"/Completed\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/All\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">&lt;StaticRouter&gt;</code>는 location 값을 사용해서 라우터의 URL을 임의로 설정할 수 있다. location 값을 지정할 때 문자열 대신에 <code class=\"tui-language-text\">radios</code> 함수가 반환하는 값을 사용하면 Knobs 애드온에 해당 연결된다. 이제 코드를 저장하면 다음과 같이 Knobs 패널에 <strong>Filter</strong> 항목이 추가된다. 각 라디오 버튼을 클릭할 때마다 Footer에 있는 버튼의 상태가 변경되는 것을 확인할 수 있을 것이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221735-162afb00-197e-11e9-8200-0735120d856e.gif\" alt=\"Storybook-App3\"></p>\n<h3 id=\"스토어의-상태-제어하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EC%96%B4%EC%9D%98-%EC%83%81%ED%83%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0\" aria-label=\"스토어의 상태 제어하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토어의 상태 제어하기</h3>\n<p>이제, \"전체 선택\" 체크박스가 제대로 표시되는지를 확인해보자. \"전체 선택\" 체크박스는 모든 할 일 항목이 <code class=\"tui-language-text\">completed</code> 상태가 되어야만 체크되기 때문에 상태를 변경하기 위해서는 스토어의 상태를 변경해야 한다. 하지만 <code class=\"tui-language-text\">&lt;Provider&gt;</code> 컴포넌트는 처음에 지정된 스토어 객체의 참조가 변경되는 것을 허용하지 않기 때문에, 매번 <code class=\"tui-language-text\">createMockStore</code>를 호출하는 방식으로는 스토어의 상태를 변경할 수 없다. 또한 스토어는 보통 <code class=\"tui-language-text\">dispatch</code>에 의해서만 상태를 변경하기 때문에, 원하는 상태를 임의로 지정하기 위해서는 <code class=\"tui-language-text\">setState</code>와 같은 별도의 메소드를 추가로 구현해야 한다.</p>\n<p>즉, 스토어와 Knobs 애드온을 연결하기 위해서는 스토리에 등록된 함수가 실행될 때마다 스토어를 새로 생성하지 않고 기존 스토어의 상태만 변경해 주어야 한다. 이 경우 직접 애드온을 만들어 데코레이터 형태로 사용하게 되면 일련의 작업을 훨씬 단순하게 만들 수 있다. 이 작업이 몹시 어렵지는 않지만, 이 글에서 커스텀 애드온을 만들는 과정을 모두 설명하면서 구현 코드를 모두 보여주기에는 분량상 부담스럽기 때문에 실제 구현 코드는 생략하기로 한다. 관심 있으신 분들은 <a href=\"https://storybook.js.org/addons/writing-addons/\">스토리북의 튜토리얼 문서</a>와 <a href=\"https://github.com/dongwoo-kim/react-redux-todomvc-storybook-cypress/blob/master/src/stories/addons/store.js\">store 애드온의 소스코드</a>를 확인하길 바란다.</p>\n<p>여기서는 만들어진 애드온을 사용해서 Knobs 애드온과 스토어를 연결하는 과정만 살펴보도록 하겠다. 완성된 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> storiesOf <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withKnobs<span class=\"token punctuation\">,</span> radios<span class=\"token punctuation\">,</span> boolean <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/addon-knobs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StaticRouter<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./addons/store\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/App\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stories <span class=\"token operator\">=</span> <span class=\"token function\">storiesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Todo-App\"</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withKnobs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstories<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      All<span class=\"token operator\">:</span> <span class=\"token string\">\"/All\"</span><span class=\"token punctuation\">,</span>\n      Active<span class=\"token operator\">:</span> <span class=\"token string\">\"/Active\"</span><span class=\"token punctuation\">,</span>\n      Completed<span class=\"token operator\">:</span> <span class=\"token string\">\"/Completed\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">radios</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Filter\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>All<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>StaticRouter location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>location<span class=\"token punctuation\">}</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/:nowShowing\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StaticRouter<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> isAllCompleted <span class=\"token operator\">=</span> <span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Complete All\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> editing <span class=\"token operator\">=</span> <span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Editing\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Breakfast\"</span><span class=\"token punctuation\">,</span>\n            completed<span class=\"token operator\">:</span> isAllCompleted <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Lunch\"</span><span class=\"token punctuation\">,</span>\n            completed<span class=\"token operator\">:</span> isAllCompleted <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token string\">\"Have a Dinner\"</span><span class=\"token punctuation\">,</span>\n            completed<span class=\"token operator\">:</span> isAllCompleted <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        editing\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존에 모의 스토어를 생성하고 <code class=\"tui-language-text\">&lt;Provider&gt;</code>를 통해 스토어를 제공하던 로직이 제거되고, <code class=\"tui-language-text\">add</code> 함수의 세 번째 인자로 <code class=\"tui-language-text\">state</code> 라는 키를 갖는 객체를 넘겨주는 것을 볼 수 있을 것이다. <code class=\"tui-language-text\">add</code> 함수의 세 번째 인자는 <code class=\"tui-language-text\">addDecorator</code>로 등록한 데코레이터가 전달받을 값을 지정하기 위해 사용된다. <code class=\"tui-language-text\">withStore</code> 데코레이터는 <code class=\"tui-language-text\">state</code>라는 키의 값을 받아서 내부적으로 스토어의 상태를 갱신하게 되어 있다. 또한 Knobs의 패널에서 값을 변경할 때마다 세 번째 인자의 값도 새로 갱신되어야 하므로 <code class=\"tui-language-text\">state</code>의 값은 함수로 전달하고 있다.</p>\n<p><code class=\"tui-language-text\">addon-knobs</code> 모듈에서 제공하는 <code class=\"tui-language-text\">boolean</code> 함수를 사용하면 토글 기능을 쉽게 추가할 수 있다. 위의 코드에서는 전체 선택 상태와 더불어, 현재 편집중인 할 일 항목을 토글할 수 있는 기능도 추가했다. 이제 위의 코드를 실행하면 다음과 같이 Knobs 패널에 <code class=\"tui-language-text\">Complete All</code>, <code class=\"tui-language-text\">Editing</code> 이라는 레이블이 추가된 것을 볼 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/12269489/51221928-d284c100-197e-11e9-8a1e-63d627aa214e.gif\" alt=\"Storybook-App4\"></p>\n<h2 id=\"스토리북-공유하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81-%EA%B3%B5%EC%9C%A0%ED%95%98%EA%B8%B0\" aria-label=\"스토리북 공유하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리북 공유하기</h2>\n<p>위와 같이 작성된 스토리는 정적 파일 형태로 만들어서 웹서버에 배포할 수도 있다. 처음에 설명하지 않고 넘어갔던 npm 스크립트인 <code class=\"tui-language-text\">build-storybook</code>을 실행해보자. 그러면 프로젝트 루트에 <code class=\"tui-language-text\">storybook-static</code> 폴더가 생성되는 것을 확인할 수 있다. 이 폴더를 깃헙 페이지 등의 정적 서버를 활용해서 배포하면 개발자뿐만 아니라 기획자, 디자이너 등 다른 부서의 동료들도 이 프로젝트의 모든 스토리를 확인할 수 있게 된다. 이렇게 서버에 배포된 페이지는 디자인 QA, 문서화 등의 커뮤니케이션 도구로 사용하면 매우 유용하다.</p>\n<p><em>(이렇게 스토리북을 활용해서 커뮤니케이션 도구로 사용하는 방법은 이전에 FE 위클리에서 <a href=\"https://github.com/nhn/fe.javascript/wiki/%23190:-%EC%A6%90%EA%B1%B0%EC%9A%B4-%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81-%EC%9B%8C%ED%81%AC%ED%94%8C%EB%A1%9C%EC%9A%B0\">즐거운 스토리북 워크플로우</a>를 통해 소개한 적이 있다.)</em></p>\n<p>이 글에서 작성한 스토리도 <a href=\"https://dongwoo-kim.github.io/react-redux-todomvc-storybook-cypress/index.html\">깃헙 페이지</a>에 등록되어 있으니 확인해보길 바란다.</p>\n<h2 id=\"2부를-마치며\" style=\"position:relative;\"><a href=\"#2%EB%B6%80%EB%A5%BC-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"2부를 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2부를 마치며</h2>\n<p>이처럼 할 일 관리 애플리케이션은 단 하나의 스토리로 모든 상태를 검증할 수 있다. 물론 단순히 prop을 주입하기만 하면 되는 단일 컴포넌트에 비해서는 코드가 더 복잡해졌지만, 마지막으로 작성된 스토리의 코드를 보면 검증을 위한 입력값 외에는 불필요한 코드가 없이 한눈에 잘 읽히는 것을 알 수 있다. 또한 이 스토리를 위한 코드의 전체 라인 수가 40줄 정도밖에 안되는 걸 고려해 보면, 단일 컴포넌트를 여러 개 등록하는 것보다 코드의 양도 상당히 줄어든다는 것을 알 수 있을 것이다.</p>\n<p>좀 더 복잡한 애플리케이션의 경우 하나의 스토리로 모든 상태를 검증할 수는 없을 것이다. 이 경우 애플리케이션의 규모나 특징에 따라 어떤 단위로 스토리를 나눌 것인가를 신중하게 고려해야 한다. 앞서 언급했던 단일 컴포넌트 스토리와 복합 컴포넌트 스토리의 장단점과 할 일 애플리케이션의 예제를 참고해서 적절한 전략을 세울 수 있길 바란다.</p>\n<p>이 글에서 작성한 <a href=\"https://dongwoo-kim.github.io/react-redux-todomvc-storybook-cypress/index.html\">스토리북 페이지</a>를 확인해 보면, 시각적인 요소는 표시되지만 사용자의 입력을 처리하는 부분은 대부분 동작하지 않는 것을 볼 수 있을 것이다. 스토리북은 단지 시각적인 요소를 눈으로 확인하기 위한 용도라는 것을 잊지 말자. 스토리북을 이용해서 기능적인 요소까지 테스트하려는 것은 도구의 용도를 벗어나서 사용하는 것이다. 1부에서도 언급했지만, 시각적인 요소를 나머지 부분과 분리하는 이유는 테스트를 자동화하기가 어렵기 때문이다. 나머지 기능적인 요소에 대한 테스트를 자동화하는 내용은 3부에서 <a href=\"https://www.cypress.io/\">Cypress</a>를 사용해서 다루도록 하겠다.</p>\n<h3 id=\"추가-시각적-회귀-테스트\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-%EC%8B%9C%EA%B0%81%EC%A0%81-%ED%9A%8C%EA%B7%80-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"추가 시각적 회귀 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가: 시각적 회귀 테스트</h3>\n<p>분량상 다루지는 못했지만, 시각적 회귀 테스트 자동화를 위한 도구들도 최근 대부분 스토리북을 지원하고 있다. 이런 도구에는 대표적으로 <a href=\"https://percy.io/\">Perci</a>, <a href=\"https://applitools.com/\">Applitools</a>, <a href=\"https://www.chromaticqa.com/\">Chromatic</a> 등이 있으며, 아래에 관련 링크를 첨부하니 관심 있는 분들은 확인해보길 바란다.</p>\n<ul>\n<li>Percy: <a href=\"https://docs.percy.io/docs/storybook-tutorial\">Visual testing for Storybook for React</a></li>\n<li>Applitools: <a href=\"https://applitools.com/storybook\">Visual Testing With Storybook</a></li>\n<li>Chromatic: <a href=\"http://docs.chromaticqa.com/storybook\">Storybook and Chromatic tutorial</a></li>\n</ul>","frontmatter":{"id":"ko_20190116","title":"실용적인 프론트엔드 테스트 전략 (2)","description":"테스트 자동화와 테스트 전략의 중요성, 시각적 테스트를 자동화하는 것이 어려운 이유 등을 살펴보았다. 사실 시각적 테스트를 자동화하는 것이 불가능하지는 않지만, 현재 우리가 가진 도구로는 기대하는 만큼 효용을 얻기가 어렵다. 이 글은 \"실용적인\" 테스트 전략을 다루고 있으므로, 한발 물러서서 다른 접근 방식을 시도해 보도록 하겠다. 즉, 결과물을 시각적으로 검증하는 행위는 자동화하지 않고 \"사람의 눈\"에 맡기되, 검증을 위한 준비 작업을 최대한 자동화하는 것이다. 이러한 작업을 위한 가장 효과적인 도구가 바로 스토리북이다.","date":"2019.01.16","author":"김동우","tags":["test"],"thumbnail":"https://user-images.githubusercontent.com/12269489/51221101-59379f00-197b-11e9-9cae-a7f654d3c83b.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190116","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}