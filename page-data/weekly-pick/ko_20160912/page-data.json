{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20160912","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트의-화살표-함수-도입\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EB%8F%84%EC%9E%85\" aria-label=\"자바스크립트의 화살표 함수 도입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 화살표 함수 도입</h1>\n<blockquote>\n<p>원문: <a href=\"http://wesbos.com/arrow-functions/\">http://wesbos.com/arrow-functions/</a></p>\n</blockquote>\n<p>ES6는 화살표 함수를 도입했다.</p>\n<p>화살표 함수는 3가지 장점이 있는데 첫째로, 간결한 문법을 가졌다.\n둘째, 명시적인 반환을 하며 한 줄로 멋지게 작성할 수 있게 해준다.\n셋째, 다른 함수 내부에서 화살표 함수를 사용할 때 this를 재차 바인드 하지 않는다. 세 번째 장점은 클릭 핸들러와 비슷한 여러 가지의 구현을 정말 편리하게 해준다.</p>\n<p>자, 이제 여러 예제를 살펴보면서 나아가 ES6의 화살표 함수도 한번 사용해 보자.</p>\n<p>여기 <code class=\"tui-language-text\">names</code>라는 배열이 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Wes'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kaid'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lux'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 배열의 각 요소 끝에  <code class=\"tui-language-text\">Bos</code>라는 이름을 붙이고 싶다면,</p>\n<p>일반적으로 이렇게 사용했을 것이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> fullNames <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wes Bos, Kait Bos, Lux Bos</span></code></pre></div>\n<p>여기 사용된 억음 부호( `, backtick)는 템플릿 문자이다. 템플릿이 무엇인지 몰라도 걱정할 필요는 없다. 추후 다른 장에서 살펴볼 예정이다.</p>\n<p>어쨌든, 이 결과는 <code class=\"tui-language-text\">Wes Bos, Kait Bos, Lux Bos</code>를 가진 배열을 반환하는데, 배열을 받아서 어떤 요소든지 끝에 \"Bos\" 를 붙여준다.</p>\n<p>괜찮은 코드처럼 보이지만, 이게 화살표 함수는 아니다. 그렇다면 이것을 어떻게 다시 작성할 수 있을지 보자.</p>\n<h2 id=\"화살표-함수로-변경하기\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"화살표 함수로 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수로 변경하기</h2>\n<p>맨 처음 화살표 함수로 할 일은 <code class=\"tui-language-text\">function</code>예약어를 지우고 굵은 화살표 즉,  <code class=\"tui-language-text\">=&gt;</code>로 바꾸는 일이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> fullNames2 <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullNames2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wes Bos, Kait Bos, Lux Bos</span></code></pre></div>\n<p>만약 다른 프로그래밍 언어를 사용하다 왔다면, 한 번쯤 보았을 것이지만, 자바 스크립트에서의 굵은 화살표는 처음 볼 것이다.</p>\n<p>이 함수는 <code class=\"tui-language-text\">function</code>과 같은 동작을 한다. <code class=\"tui-language-text\">console.log</code>를 통해 차이가 없다는 것을 확인할 수 있다.</p>\n<h2 id=\"인자가-하나일-경우-괄호-지우기\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90%EA%B0%80-%ED%95%98%EB%82%98%EC%9D%BC-%EA%B2%BD%EC%9A%B0-%EA%B4%84%ED%98%B8-%EC%A7%80%EC%9A%B0%EA%B8%B0\" aria-label=\"인자가 하나일 경우 괄호 지우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자가 하나일 경우 괄호 지우기</h2>\n<p>좀 더 나아가서 한 개의 인자만 함수에 넘겨질 때, 괄호 없이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> fullNames3 <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullNames3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wes Bos, Kait Bos, Lux Bos</span></code></pre></div>\n<p>이것은 코딩 스타일에 대한 선택의 문제다.\n어떤 개발자들은 한 개 이상의 인자에 대해서 모두 괄호로 묶는 것을 선호할 수 있지만, 대부분 콜백함수인 경우 괄호 없이 사용하는 게 더 깔끔하고 멋진 문법이 된다.</p>\n<h2 id=\"화살표-함수의-암시적-반환\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%9D%98-%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%98%ED%99%98\" aria-label=\"화살표 함수의 암시적 반환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수의 암시적 반환</h2>\n<p>화살표 함수로 바꾸려면 어떤 것을 더 해볼 수 있을까? 암시적 반환이라는 것을 한번 해보자.</p>\n<p>잠깐, 명시적 반환은 무엇일까?</p>\n<p>명시적 반환은 반환하려는 것을 직접 작성하는 것을 일컫는다.\n하지만 한 줄로 쓰인 자바스크립트의 많은 콜백 함수들은 그저 무엇인가를 직접 반환한다. 우리는 그런 거대한 행의 함수 모두가 필요하지 않다.</p>\n<p>그래서 - 화살표 함수의 목적은 무엇인가를 반환하는 것이고, 그러므로 <code class=\"tui-language-text\">return</code> 예약어가 필요하지 않다.\n이전에 수정했던 3줄짜리 함수는 암시적 반환을 통해 한 줄짜리 함수로 바꿀 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> fullNames4 <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullNames4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Wes Bos, Kait Bos, Lux Bos</span></code></pre></div>\n<p>지금까지 세 가지를 해보았다.</p>\n<ol>\n<li><code class=\"tui-language-text\">return</code>문 지우기</li>\n<li>한 줄로 작성하기</li>\n<li>중괄호 지우기</li>\n</ol>\n<p>만약 중괄호를 지웠다면 암시적 반환이 된 것이고, 구체적인 것 필요 없이 <code class=\"tui-language-text\">${name} Bos</code>를 반환하는 것만 알면 된다.</p>\n<p>그리고 우리의 가정이 맞다면, <code class=\"tui-language-text\">console.log</code>를 통해 같은 결과를 확인할 수 있다.</p>\n<h2 id=\"인자-없이-화살표-함수-사용하기\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90-%EC%97%86%EC%9D%B4-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"인자 없이 화살표 함수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자 없이 화살표 함수 사용하기</h2>\n<p>마지막으로, 아무 인자 없이 사용하는 경우를 살펴볼 것이다. (물론 위의 예제들은 인자가 필요했다)\n하지만, 인자가 필요 없다면 그냥 빈 괄호를 넘기면 된다.</p>\n<p>만약 그저 <code class=\"tui-language-text\">Cool Bos</code>를 반환한다면, 모든 요소는 결국 <code class=\"tui-language-text\">Cool Bos</code>가 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> fullNames5 <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cool Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullNames5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cool Bos, Cool Bos, Cool Bos</span></code></pre></div>\n<p><code class=\"tui-language-text\">()</code>를 다른 모양으로 사용할 수도 있는데, 개발자들이 <code class=\"tui-language-text\">_</code>를 사용하는 것을 보았을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cool Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것은 사용 후 버리는 변수(throwaway variable)라고 부르는데 그 이유가 실제로 <code class=\"tui-language-text\">_</code>를 생성하지만 사용하지 않기 때문이다.\n이것은 <code class=\"tui-language-text\">_</code>라서 버리는 변수가 된 것이 아니다. 이와 같은 방식으로 선언 후, 사용하지 않는다면 어떤 변수든지 사용 후 버리는 변수가 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">names<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cool Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">WESBOS</span></span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cool Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_ya___Yayayayay</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cool Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">do_yaget_the_point</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cool Bos</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>선택은 여러분의 몫이지만 필자는 인자가 없는 경우 <code class=\"tui-language-text\">_=&gt;</code>보다 <code class=\"tui-language-text\">() =&gt;</code>를 사용하는 것을 권한다.</p>\n<h2 id=\"화살표-함수는-항상-익명함수다\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%8A%94-%ED%95%AD%EC%83%81-%EC%9D%B5%EB%AA%85%ED%95%A8%EC%88%98%EB%8B%A4\" aria-label=\"화살표 함수는 항상 익명함수다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수는 항상 익명함수다</h2>\n<p>아직 자바스크립트는 변하고 있고 추후 버전에서 바뀔 수 있지만, 현재까지의 화살표 함수가 일반함수와 다른 점으로는 항상 익명함수라는 것이다.</p>\n<p>기명 함수는 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayMyName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기명 함수의 장점은 stack trace를 확인할 때 드러난다.\n에러가 발생했을 때 어디서 문제가 일어났는지 확인하려면 두 가지 방법이 있다.\n첫 번째로, 행 번호를 따라가서 문제가 되는 부분을 확인할 수 있지만 크게 도움이 되진 않는다.\n둘째는 발생한 함수의 이름을 확인하는 것이다. 쉽게 에러 위치를 파악하려면 호출된 함수의 실제 이름이 필요하다.</p>\n<p>만약 화살표 함수를 사용한다면 이름을 붙일 수 없다. 모든 화살표 함수는 이름을 가지고 있지 않다.</p>\n<p>하지만 변수에 할당한다면 가능하다: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayMyName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayMyName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 한가지 알아둬야 할 게 있다. 익명 함수는 우리에게 좋은 stack trace를 제공하지 못한다.\n만약 당신이 그런 단점에 개의치 않는다면 지금 바로 화살표 함수를 사용해보자.</p>","frontmatter":{"id":"ko_20160912","title":"자바스크립트의 화살표 함수 도입","description":"ES6는 화살표 함수를 도입했다. 화살표 함수는 3가지 장점이 있는데 첫째로, 간결한 문법을 가졌다. 둘째, 명시적인 반환을 하며 한 줄로 멋지게 작성할 수 있게 해준다. 셋째, 다른 함수 내부에서 화살표 함수를 사용할 때 this를 재차 바인드 하지 않는다. 세 번째 장점은 클릭 핸들러와 비슷한 여러 가지의 구현을 정말 편리하게 해준다.","date":"2016.09.12","author":"박정환","tags":["ecmascript","es6"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20160912","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}