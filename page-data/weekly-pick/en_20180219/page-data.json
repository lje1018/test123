{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/en_20180219","result":{"data":{"post":{"html":"<h1 id=\"basics-of-web-word-processor-2\" style=\"position:relative;\"><a href=\"#basics-of-web-word-processor-2\" aria-label=\"basics of web word processor 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basics of Web Word Processor (2)</h1>\n<p>Web Word Processor (“Web Word”) is attractive software that allows users to edit documents anywhere as long as they have access to a browser. It does not support all the features of the native Word processor, but I hope it will do so in the near future. I have been through hard times developing Web Word for the two years working on this, only looking on the bright side. I've experienced a variety of thrills and excitement in the course of implementing each feature. I wish that you would feel the same as you read this article.</p>\n<p><a href=\"/test123/weekly-pick/en_20171226\">My previous article</a> explained the criteria for categorizing Web Words, the necessity and complexity of implementing pages, contentEditable, and the principles behind displaying and placing layouts of pages in HTML. In this article, I will discuss the ways to implement simple page views and editing features using actual code.</p>\n<h2 id=\"what-to-implement\" style=\"position:relative;\"><a href=\"#what-to-implement\" aria-label=\"what to implement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What to Implement</h2>\n<p>As discussed in the previous article, the simple requirements for implementing page views are as follows:</p>\n<ul>\n<li>When a paragraph overhangs between pages, it should be able to be wrapped in two separate pages.</li>\n<li>Text should be updated in real time as user enters or deletes characters.</li>\n</ul>\n<p>A lot more implementations and considerations are needed when it comes to implementing tables. This article discusses mainly focusing on texts. In CSS, the element handled as <code class=\"tui-language-text\">display: Inline</code> is the target for layout.</p>\n<h2 id=\"lets-get-started\" style=\"position:relative;\"><a href=\"#lets-get-started\" aria-label=\"lets get started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's Get Started</h2>\n<p>In the previous article, I explained the steps to implement Layout. This process is done in the following procedure:</p>\n<ul>\n<li>Dividing a Paragraph between Two Pages</li>\n<li>Dividing a Paragraph into Lines</li>\n<li>Events Requiring Page Layouts Again</li>\n</ul>\n<p>Let's see the actual code implementing these steps.</p>\n<h3 id=\"dividing-a-paragraph-between-two-pages\" style=\"position:relative;\"><a href=\"#dividing-a-paragraph-between-two-pages\" aria-label=\"dividing a paragraph between two pages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dividing a Paragraph between Two Pages</h3>\n<p>Each page has its own margins, and text can be typed in any area inside the margins. Therefore, the actual area for text display is anywhere except the margins. In the code below, it is an element that has <code class=\"tui-language-text\">class=&quot;page-body&quot;</code>. Simply put, I will call it <code class=\"tui-language-text\">pageBodyElement</code>.</p>\n<p>The actual size of an A4 sheet is <code class=\"tui-language-text\">210mm x 297mm</code>, but this is rather oversized to fit in the space of this article, so I will use an arbitrary size of <code class=\"tui-language-text\">150mm x 80</code>mm for our convenience.</p>\n<p>Write HTML code to implement pages as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n  <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10mm<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>245<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>170mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>110mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n    <span class=\"token attr-name\">data-page-number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n    <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20mm 10mm<span class=\"token punctuation\">;</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0px 0px 10mm<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150mm<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 70mm<span class=\"token punctuation\">;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-body<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">contenteditable</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n      <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px dashed black<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"setting-pagebodyelement\" style=\"position:relative;\"><a href=\"#setting-pagebodyelement\" aria-label=\"setting pagebodyelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting pageBodyElement</h4>\n<p><code class=\"tui-language-text\">contentEditable=&quot;true”</code> is set to <code class=\"tui-language-text\">pageBodyElement</code>, so it is in an editable mode at the moment. <code class=\"tui-language-text\">style=&quot;outline: 0px;&quot;</code> is used to remove the outlines that are visible in the edit mode. I used the p tag to indicate paragraphs. For an empty paragraph, I added a bogus (<code class=\"tui-language-text\">br</code> tag) to display cursor.</p>\n<p>Now we've got a very basic document editor.</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/36352750-2291c234-1501-11e8-9544-6170b6506a10.gif\" alt=\"2018-02-18 23_10_39\"></p>\n<h4 id=\"we-will-now-move-the-leftover-part-of-the-paragraph-to-the-next-page\" style=\"position:relative;\"><a href=\"#we-will-now-move-the-leftover-part-of-the-paragraph-to-the-next-page\" aria-label=\"we will now move the leftover part of the paragraph to the next page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>We will now move the leftover part of the paragraph to the next page.</h4>\n<p>If additional texts are entered in this state, the texts will exceed the margin as shown below.\n<img src=\"https://user-images.githubusercontent.com/26706716/36352920-edac2db4-1502-11e8-88f8-7bf585c9d719.png\" alt=\"image\"></p>\n<p>If we were going to create a Word Processor that didn't require page implementation, we could have simply specified <code class=\"tui-language-text\">overflow-y: hidden</code> or <code class=\"tui-language-text\">overflow-y: scroll</code>. However, since our aim is higher, let's take a look at how we can deal with this.</p>\n<p>Simply put, we are going to find all paragraph elements of which bottom value is greater than page 1, and then move them all to the next page.</p>\n<p>This task is done by <strong>firstly</strong> find whether such a paragraph exists by using <code class=\"tui-language-text\">_findExceedParagraph()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Find a first exceed paragraph\n * @param {HTMLElement} pageBodyElement - page body element\n * @param {number} pageBodyBottom - page bottom\n * @returns {HtmlElement} a first exceed paragraph\n */</span>\n<span class=\"token function\">_findExceedParagraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> paragraphs <span class=\"token operator\">=</span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> paragraphBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageBodyBottom <span class=\"token operator\">&lt;</span> paragraphBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> paragraph<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As it is clearly shown in the code, only <code class=\"tui-language-text\">p</code> tags are currently regarded as paragraphs. As there are many more types of Block-Level Elements, visit <a href=\"https://developer.mozilla.org/ko/docs/HTML/Block-level_elements\">MDN</a> to see what else you can add.</p>\n<p>The <strong>second</strong> task is to find all the exceeding paragraphs (<code class=\"tui-language-text\">_getExceedAllParagraphs()</code>) and move them across to the next page (<code class=\"tui-language-text\">_insertParagraphsToBodyAtFirst()</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Get all exceed paragraphs\n * @param {HTMLElement} pageBodyElement - page body element\n * @param {number} pageBodyBottom - page bottom\n * @returns {Array.&lt;HTMLElement>} all exceed paragraph array\n */</span>\n<span class=\"token function\">_getExceedAllParagraphs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> paragraphs <span class=\"token operator\">=</span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> exceedParagraphs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> paragraphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> paragraphBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageBodyBottom <span class=\"token operator\">&lt;</span> paragraphBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            exceedParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Remain a bigger paragraph than page height.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paragraphs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> exceedParagraphs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        exceedParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> exceedParagraphs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Please note the presence of the line of code in the <code class=\"tui-language-text\">_getExceedAllParagraphs()</code> function, which handles a case when the height of a single paragraph is greater than the that of a page.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// Remain a bigger paragraph than page height.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paragraphs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> exceedParagraphs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  exceedParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This happens when the height of the first paragraph is greater than that of the page. When this happens, an infinite number of pages will be created unless it is properly handled within the layout flow. If this kind of oversized paragraph is left as it is, the text will cross the margin as shown below. We will take care of this problem in the <code class=\"tui-language-text\">Dividing a Paragraph into Lines</code> section. In reality, a paragraph that contains a large picture or a tall table is likely to cause this problem. If this is the case, we need more advanced handling process of the layout.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Insert paragraphs to body at first\n * @param {HTMLElement} pageBodyElement - page body element\n * @param {Array.&lt;HTMLElement>} paragraphs - paragraph array\n */</span>\n<span class=\"token function\">_insertParagraphsToBodyAtFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageBodyElement<span class=\"token punctuation\">,</span> paragraphs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// merge split paragraphs before.</span>\n        paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paragraph</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> splitParagraphId <span class=\"token operator\">=</span> paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> appended <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>splitParagraphId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> nextParagraph <span class=\"token operator\">=</span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>splitParagraphId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextParagraph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>firstChild<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nextParagraph<span class=\"token punctuation\">;</span>\n                    paragraph<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> nextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> firstChild<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    paragraph<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    appended <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>appended<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">,</span> pageBodyElement<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">paragraph</span> <span class=\"token operator\">=></span> pageBodyElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">_insertParagraphsToBodyAtFirst()</code> moves all the exceeding paragraphs across to the next page. If the next page is blank, we could simply add a paragraph element to <code class=\"tui-language-text\">pageBodyElement</code>. If the page is not blank, we could insert it at the top of the page. Any paragraphs previously split must be combined back into one at this stage. Otherwise, we will see two separate paragraphs that should've been one.</p>\n<p>Applying layout to a page results in the increased number of pages. Layout must be applied to the newly created pages up to the very last page. Let's take a look at the code of the entire page layout.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Layout pages\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">_layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> pageNumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pageNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_layoutPage</span><span class=\"token punctuation\">(</span>pageNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">_layout()</code> applies page layout to the first page through the very last page. <code class=\"tui-language-text\">_layoutPage()</code> uses the function mentioned earlier to apply Layout to the specified page.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Layout a page and return next page number\n * @param {number} pageNumber - page number\n * @returns {Promise} promise\n */</span>\n<span class=\"token function\">_layoutPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageNumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> pageIndex <span class=\"token operator\">=</span> pageNumber <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> totalPageCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">></span> totalPageCount <span class=\"token operator\">||</span> pageNumber <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> pageBodyElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">[</span>pageIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pageBodyBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> exceedParagraph <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_findExceedParagraph</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> insertBodyParagraph <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> allExceedParagraphs<span class=\"token punctuation\">,</span> nextPageBodyElement<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exceedParagraph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            allExceedParagraphs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getExceedAllParagraphs</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">>=</span> totalPageCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_appendPage</span><span class=\"token punctuation\">(</span>insertBodyParagraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            nextPageBodyElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageBodyElements<span class=\"token punctuation\">[</span>pageIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_insertParagraphsToBodyAtFirst</span><span class=\"token punctuation\">(</span>nextPageBodyElement<span class=\"token punctuation\">,</span> allExceedParagraphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>pageNumber <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the picture of applying Layout to all pages. I applied a bit of delay to see the process of Page Layout in action.</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/36353801-1337919e-150e-11e8-87df-f9bbf1181a0f.gif\" alt=\"2018-02-19 00_44_29\"></p>\n<h3 id=\"dividing-a-paragraph-into-lines\" style=\"position:relative;\"><a href=\"#dividing-a-paragraph-into-lines\" aria-label=\"dividing a paragraph into lines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dividing a Paragraph into Lines</h3>\n<p>Now is the right time to take care of a paragraphs of which height is greater than that of the page. This is shown in the image.\n<img src=\"https://user-images.githubusercontent.com/26706716/36353819-79761476-150e-11e8-8fec-9e299852b19e.png\" alt=\"image\"></p>\n<p>As you can see, the last line crossed the margin. As I mentioned earlier, you cannot gain the coordinates of letters with Text Node only; you actually need to wrap all text nodes with span tags. There are two points you need to know here. First is <code class=\"tui-language-text\">to detect lines</code> within the paragraph, and the second is <code class=\"tui-language-text\">to split a paragraph that goes out of the page</code>. Let’s take a look at the actual code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Layout a page and return next page number\n * @param {number} pageNumber - page number\n * @returns {Promise} promise\n */</span>\n<span class=\"token function\">_layoutPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageNumber <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">let</span> allExceedParagraphs<span class=\"token punctuation\">,</span> nextPageBodyElement<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exceedParagraph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_splitParagraph</span><span class=\"token punctuation\">(</span>exceedParagraph<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            allExceedParagraphs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getExceedAllParagraphs</span><span class=\"token punctuation\">(</span>pageBodyElement<span class=\"token punctuation\">,</span> pageBodyBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">_splitParagraph()</code> has been added. If there is an over-the-margin paragraph, we need to separate the paragraph in two, starting with the exceeding line of the paragraph. All other paragraphs separated as a result of executing <code class=\"tui-language-text\">_getExceedAllParagraphs()</code> are also collected and moved across to the next page.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Split a paragraph to two paragraphs\n * @param {HTMLElement} paragraph - paragraph element\n */</span>\n<span class=\"token function\">_splitParagraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">paragraph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> treeWalker <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTreeWalker</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>treeWalker<span class=\"token punctuation\">.</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> treeWalker<span class=\"token punctuation\">.</span>currentNode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> Node<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT_NODE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            textNodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// wrap text nodes with span</span>\n    textNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">textNode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> texts <span class=\"token operator\">=</span> textNode<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        texts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chararcter<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> span <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            span<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> chararcter<span class=\"token punctuation\">;</span>\n            wrappers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            textNode<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">,</span> textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// for keeping the cursor</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range\n                <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startContainer <span class=\"token operator\">===</span> textNode\n                <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startOffset <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                range<span class=\"token punctuation\">.</span><span class=\"token function\">setStartBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                range<span class=\"token punctuation\">.</span><span class=\"token function\">setEndBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        textNode<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For better understanding of wrapping text nodes with spans, I highlighted the wrapping of each letter in red. (In reality, borders should not be displayed in order to avoid paragraph distortion.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/26706716/36354265-21adcdc2-1515-11e8-8da8-cff7bc871487.png\" alt=\"image\"></p>\n<p>Another thing you've got to focus is how cursor is kept. I assumed the case of cursor being <code class=\"tui-language-text\">collapsed</code>, but this must be dealt with to keep the current cursor. (In fact, implementing this alone in depth requires a lot of work.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// for keeping the cursor</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range\n    <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startContainer <span class=\"token operator\">===</span> textNode\n    <span class=\"token operator\">&amp;&amp;</span> range<span class=\"token punctuation\">.</span>startOffset <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">setStartBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">setEndBefore</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// keep the cursor</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    selection<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllRanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    selection<span class=\"token punctuation\">.</span><span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the step where the number of lines in a paragraph is detected.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// recognize lines</span>\n<span class=\"token keyword\">let</span> prevSpan<span class=\"token punctuation\">;</span>\nwrappers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">span</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevSpanBottom <span class=\"token operator\">=</span> prevSpan <span class=\"token operator\">?</span> prevSpan<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> spanTop <span class=\"token operator\">=</span> span<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevSpanBottom <span class=\"token operator\">&lt;</span> spanTop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lines<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  prevSpan <span class=\"token operator\">=</span> span<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is the step where the exceeding lines in a paragraph are detected.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// find a exceed first line</span>\n<span class=\"token keyword\">let</span> nextParagraphCharacters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> line <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lineBottom <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getBottom</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lineBottom <span class=\"token operator\">></span> pageBodyBottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> splitIndex <span class=\"token operator\">=</span> wrappers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nextParagraphCharacters <span class=\"token operator\">=</span> wrappers<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>splitIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is where exceeding paragraphs are split into two. Store the ID of a split paragraph so that you can combine it back later.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// split the paragraph to two paragraphs</span>\n<span class=\"token keyword\">const</span> extractRange <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nextractRange<span class=\"token punctuation\">.</span><span class=\"token function\">setStartBefore</span><span class=\"token punctuation\">(</span>nextParagraphCharacters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nextractRange<span class=\"token punctuation\">.</span><span class=\"token function\">setEndAfter</span><span class=\"token punctuation\">(</span>\n  nextParagraphCharacters<span class=\"token punctuation\">[</span>nextParagraphCharacters<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> extractRange<span class=\"token punctuation\">.</span><span class=\"token function\">extractContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nextParagraph <span class=\"token operator\">=</span> paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnextParagraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\nnextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nparagraph<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>nextParagraph<span class=\"token punctuation\">,</span> paragraph<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>splitParagraphId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_PARAGRAPH_ID</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>splitParagraphId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>splitParagraphId <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Remove the wrapping span tags, maintain Cursor, and <code class=\"tui-language-text\">normalize()</code> the split texts.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// unwrap text nodes</span>\nwrappers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">span</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textNode <span class=\"token operator\">=</span> span<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">,</span> span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// keep the cursor</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  selection<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllRanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  selection<span class=\"token punctuation\">.</span><span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nparagraph<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnextParagraph<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now when text overhangs between pages, it should be able to be wrapped on a line basis and displayed in the next page.</p>\n<p><strong>Before</strong>\n<img src=\"https://user-images.githubusercontent.com/26706716/36353819-79761476-150e-11e8-8fec-9e299852b19e.png\" alt=\"image\">\n<strong>After</strong>\n<img src=\"https://user-images.githubusercontent.com/26706716/36355436-881a2bbc-1526-11e8-9f25-14d26cef666d.png\" alt=\"image\"></p>\n<h3 id=\"events-requiring-page-layouts-again\" style=\"position:relative;\"><a href=\"#events-requiring-page-layouts-again\" aria-label=\"events requiring page layouts again permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events Requiring Page Layouts Again</h3>\n<p>In this example, I made a layout to be applied starting from the first page when the <code class=\"tui-language-text\">keyup</code> event letter is entered. We also need to handle other events such as Copy &#x26; Paste and Delete.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">/**\n * Add event listners to layout pages\n */</span>\n<span class=\"token function\">_addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>isContentEditable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Page layout during typing in text</strong>\n<img src=\"https://user-images.githubusercontent.com/26706716/36356381-c1dfb5f2-1534-11e8-9b0c-cb08b234fb98.gif\" alt=\"2018-02-19 05_21_17\"></p>\n<h2 id=\"closing\" style=\"position:relative;\"><a href=\"#closing\" aria-label=\"closing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing</h2>\n<p>We have looked at how we could implement pages, which is essential in developing a Web Word. I do not encourage you to jump right into the development of a Web Word. Rather, be cautious and take a careful approach because there are a lot of features still to be considered as follows:</p>\n<ul>\n<li>Adding more Block-Level Elements</li>\n<li>Processing Block-Level Elements when they are in deep places within the DOM Tree</li>\n<li>In this case, paragraphs must be split until pageBodyElement becomes a parent</li>\n<li>Processing a single paragraph that does not fit in the remaining area of a page (images, tables, etc.).</li>\n<li>Splitting and rejoining the table which has exceeded the margin of the previous page in the next page (splitting cells is a quite difficult task).</li>\n<li>For Korean letters, maintaining cursor and text compositing</li>\n<li>And taking care of those subtle 1-pixel differences!</li>\n</ul>\n<p>In my experience, you are better to discuss the necessary features in the Web Word in advance with your client. Otherwise, your software will constantly be compared to the native Word processor. In my opinion, if the specification of providing coordinates from Text Node is added or DOM access support in WebAssembly is supported, the development and performance of your Web Word will be a lot better.</p>\n<p>If you are a front-end developer who would dare to give his or her best shot despite all the challenges, give it a try, brave one! Here are my little gifts: the source code (<a href=\"https://github.com/dongsik-yoo/html-page-layout\">html-page-layout</a>) and the <a href=\"https://dongsik-yoo.github.io/html-page-layout/\">demo</a>.</p>","frontmatter":{"id":"en_20180219","title":"Basics of Web Word Processor (2)","description":"Web Word Processor (“Web Word”) is attractive software that allows users to edit documents anywhere as long as they have access to a browser. It does not support all the features of the native Word processor","date":"2018.02.19","author":"DongSik Yoo","tags":["etc"],"thumbnail":"https://image.toast.com/aaaadh/real/2018/repimg/mainmeetupuC6F9 uC6CCuB4DC2re_thumbnail.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_20180219","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}