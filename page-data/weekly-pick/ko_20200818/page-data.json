{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20200818","result":{"data":{"post":{"html":"<h1 id=\"rust로-spasingle-page-applications만들기\" style=\"position:relative;\"><a href=\"#rust%EB%A1%9C-spasingle-page-applications%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"rust로 spasingle page applications만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rust로 SPA(Single Page Applications)만들기</h1>\n<blockquote>\n<p>원문: <a href=\"http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/\">http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/</a></p>\n</blockquote>\n<p>WebAssembly(wasm)을 사용하면 자바스크립트 외의 언어로 작성된 코드를 브라우저에서 실행할 수 있다. 대부분의 주요 브라우저에서 wasm을 지원하고 전 세계적으로 <a href=\"https://caniuse.com/#feat=wasm\">90% 이상의 사용자</a>가 wasm을 동작시키는 브라우저를 사용한다.</p>\n<p>Rust가 wasm으로 컴파일이 되니, 자바스크립트 코드를 작성하지 않고 순수하게 Rust로 SPAs(Single Page Applications)를 만들 수 있는가? 라고 묻는다면 대답은 그렇다!이다. 구현 결과가 궁금하다면 <a href=\"https://rustmart-yew.netlify.app/\">데모 사이트</a>에 방문하거나 더 글을 자세히 읽어보면 좋을 것 같다.</p>\n<p>여기서는 두 페이지로 구성된 \"RustMart\"라는 간단한 이커머스 사이트를 만들어 볼 것이다.</p>\n<ul>\n<li>HomePage - 장바구니에 추가할 수 있는 모든 상품이 나열된 페이지</li>\n<li>ProductDetailPage - 상품을 클릭하면 상품의 정보가 나오는 페이지</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354417-4075fa80-e084-11ea-9cca-f411292d25fb.png\" alt=\"1\"></p>\n<p>모던 SPA 페이지를 구성하는 데 필요한 최소한의 기능만 이 예제를 구성하는데 사용했다.</p>\n<ul>\n<li>페이지 새로 고침 없이 여러 페이지를 이동</li>\n<li>페이지 새로 고침 없이 네트워크 요청 보내기</li>\n<li>여러 페이지에서 컴포넌트를 공유하면서 재사용하기</li>\n<li>UI 계층에서 여러 계층의 컴포넌트를 업데이트하기</li>\n</ul>\n<h2 id=\"준비\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84\" aria-label=\"준비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비</h2>\n<p>Rust가 설치되어 있지 않다면 이 <a href=\"https://www.rust-lang.org/tools/install\">링크</a>에서 설치하자.</p>\n<p>다음 Rust 도구들 또한 설치하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">$ cargo install wasm-pack          # Rust를 컴파일 해 Wasm과 JS Interop 코드를 생성\n$ cargo install cargo-make         # 태스크 러너\n$ cargo install simple-http-server # assets을 실행하는 Simple Server</code></pre></div>\n<p>그리고 새 프로젝트를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">$ cargo new --lib rustmart &amp;&amp; cd rustmart</code></pre></div>\n<p>이 프로젝트에서는 UI컴퍼넌트를 빌드하기 위해 <a href=\"https://yew.rs/docs/en/intro/\"><code class=\"tui-language-text\">Yew</code></a> 라이브러리를 사용한다. wasm 디펜던시를 <code class=\"tui-language-text\">Cargo.toml</code>에 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"tui-language-toml\"><code class=\"tui-language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rlib\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">yew</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.17\"</span>\n<span class=\"token key property\">wasm-bindgen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2\"</span></code></pre></div>\n<p><code class=\"tui-language-text\">Makefile.toml</code>도 생성해 다음 내용을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"tui-language-toml\"><code class=\"tui-language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tasks.build</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">command</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"wasm-pack\"</span>\n<span class=\"token key property\">args</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--dev\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--target\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"web\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--out-name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wasm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--out-dir\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./static\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">watch</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token key property\">ignore_pattern</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"static/*\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tasks.serve</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">command</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"simple-http-server\"</span>\n<span class=\"token key property\">args</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./static/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3000\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--nocache\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--try-file\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./static/index.html\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>빌드를 시작해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">$ cargo make build</code></pre></div>\n<p>Rust가 처음인 사람들을 위해 <a href=\"http://www.sheshbabu.com/tags/Rust-Beginners/\">몇 가지 가이드</a>를 작성했으니 도움이 되길 바란다.</p>\n<h2 id=\"hello-world\" style=\"position:relative;\"><a href=\"#hello-world\" aria-label=\"hello world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello world</h2>\n<p>\"Hello world\"예제를 만들어보자.</p>\n<p><code class=\"tui-language-text\">static/index.html</code>을 만들고 다음 코드를 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>RustMart<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">import</span> init <span class=\"token keyword\">from</span> <span class=\"token string\">\"/wasm.js\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 다음 코드 또한 <code class=\"tui-language-text\">src/lib.rs</code>에 추가해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/lib.rs\nuse wasm_bindgen::prelude::*;\nuse yew::prelude::*;\n\nstruct Hello {}\n\nimpl Component for Hello {\n    type Message = ();\n    type Properties = ();\n\n    fn create(_: Self::Properties, _: ComponentLink&lt;Self&gt;) -&gt; Self {\n        Self {}\n    }\n\n    fn update(&amp;mut self, _: Self::Message) -&gt; ShouldRender {\n        true\n    }\n\n    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n        true\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        html! { &lt;span&gt;{&quot;Hello World!&quot;}&lt;/span&gt; }\n    }\n}\n\n#[wasm_bindgen(start)]\npub fn run_app() {\n    App::&lt;Hello&gt;::new().mount_to_body();\n}</code></pre></div>\n<p>많은 일이 진행되지만 \"Hello\"라는 새로운 컴퍼넌트를 생성해 DOM에 <code class=\"tui-language-text\">&lt;span&gt;Hello World!&lt;/span&gt;</code>을 생성하는 작업을 한다는 것을 알 수 있다. Yew 컴포넌트에 대해서는 이후에 살펴보도록 하겠다.</p>\n<p>터미널에서 태스크를 실행한 뒤 브라우저에서 <code class=\"tui-language-text\">http://localhost:3000</code>에 접속해 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\">$ cargo make serve</code></pre></div>\n<img width=\"983\" alt=\"2\" src=\"https://user-images.githubusercontent.com/35371660/90354425-453aae80-e084-11ea-858e-c5cc401c7fee.png\">\n<p>작동했다! 단지 \"Hello world\"일 뿐이지만 모든 코드가 Rust로 작성됐다.</p>\n<p>더 진행하기 전에 먼저 다른 SPA의 컨셉과 컴포넌트에 대해 살펴보도록 하자</p>\n<h2 id=\"컴포넌트로-생각하기\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"컴포넌트로 생각하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트로 생각하기</h2>\n<p>컴포넌트를 합성하고 데이터를 단방향으로 전송하며 UI를 만드는 것으로 프론트엔드 세계의 큰 패러다임 변화가 있었다. UI에 대해 추론하는 방식이 크게 발전되었으며 이런 방식에 익숙해지면 명령형(imperative) DOM 조작에 돌아가기 매우 어렵게 된다.</p>\n<p>React나 Vue, Yew, Flutter 등 여러 라이브러리의 <code class=\"tui-language-text\">Component</code>는 다음과 같은 기능을 갖는다.</p>\n<ul>\n<li>더 큰 컴포넌트로 합성하는 기능</li>\n<li><code class=\"tui-language-text\">Props</code> - 해당 컴포넌트에서 자식 컴포넌트로 데이터나 콜백을 전달</li>\n<li><code class=\"tui-language-text\">State</code> - 컴포넌트의 로컬 상태를 조작</li>\n<li><code class=\"tui-language-text\">AppState</code> - 전역 상태를 조작</li>\n<li>\"Instantiated\", \"Mounted in DOM\" 등 라이프 사이클 이벤트가 존재</li>\n<li>remote data를 받아오거나, 로컬 스토리지를 조작하는 등의 사이드 이펙트를 수행</li>\n</ul>\n<p>또한, 컴포넌트는 다음과 같은 상황에 업데이트(리렌더링) 된다.</p>\n<ul>\n<li>부모 컴포넌트가 리렌더링 된 경우</li>\n<li><code class=\"tui-language-text\">Props</code>의 변경</li>\n<li><code class=\"tui-language-text\">State</code>의 변경</li>\n<li><code class=\"tui-language-text\">AppState</code>의 변경</li>\n</ul>\n<p>정리해보면, 명시적(imperatively)으로 UI를 업데이트하는 대신 사용자의 상호 작용이나 네트워크 요청 등이 발생할 때 데이터(Props, State, AppState)를 업데이트하고 이 데이터를 기반으로 UI는 업데이트된다. 이 말은 누군가가 \"UI는 상태의 함수다(UI is a function of state)\"라고 하는 것을 의미한다고 할 수 있다.</p>\n<p>정확한 세부 사항은 라이브러리마다 다르지만, 일반적으로 사용되고 있는 아이디어이다. 만약 이런 아이디어가 처음이라면 익숙해지는데 시간이 조금 걸릴 수 있다.</p>\n<h2 id=\"homepage\" style=\"position:relative;\"><a href=\"#homepage\" aria-label=\"homepage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HomePage</h2>\n<p>홈페이지를 먼저 만들어보자. 우선 단일 컴포넌트로 만든 뒤 이후에 분해하며 재사용 가능한 컴포넌트로 만들 것이다</p>\n<p>아래 파일을 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/pages/home.rs\nuse yew::prelude::*;\n\npub struct Home {}\n\nimpl Component for Home {\n    type Message = ();\n    type Properties = ();\n\n    fn create(_: Self::Properties, _: ComponentLink&lt;Self&gt;) -&gt; Self {\n        Self {}\n    }\n\n    fn update(&amp;mut self, _: Self::Message) -&gt; ShouldRender {\n        true\n    }\n\n    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n        true\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        html! { &lt;span&gt;{&quot;Home Sweet Home!&quot;}&lt;/span&gt; }\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/pages/mod.rs\nmod home;\n\npub use home::Home;</code></pre></div>\n<p><code class=\"tui-language-text\">src/lib.rs</code>를 다음처럼 바꿔 작성한 뒤 HomePage 컴포넌트를 import 해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/lib.rs\n+ mod pages;\n\n+ use pages::Home;\n  use wasm_bindgen::prelude::*;\n  use yew::prelude::*;\n\n- struct Hello {}\n\n- impl Component for Hello {\n-     type Message = ();\n-     type Properties = ();\n\n-     fn create(_: Self::Properties, _: ComponentLink&lt;Self&gt;) -&gt; Self {\n-         Self {}\n-     }\n\n-     fn update(&amp;mut self, _: Self::Message) -&gt; ShouldRender {\n-         true\n-     }\n\n-     fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n-         true\n-     }\n\n-     fn view(&amp;self) -&gt; Html {\n-         html! { &lt;span&gt;{&quot;Hello World!&quot;}&lt;/span&gt; }\n-     }\n- }\n\n  #[wasm_bindgen(start)]\n  pub fn run_app() {\n-   App::&lt;Hello&gt;::new().mount_to_body();\n+   App::&lt;Home&gt;::new().mount_to_body();\n  }</code></pre></div>\n<p>이렇게 작성하면 \"Hello World!\" 대신 \"Home Sweet Home!\"이 브라우저에 렌더링 된 것을 볼 수 있다.</p>\n<p>이제 이 컴포넌트의 <code class=\"tui-language-text\">State</code>를 구성해보자.</p>\n<ul>\n<li>서버로부터 불러온 상품 리스트를 저장해야 한다.</li>\n<li>사용자가 장바구니에 담은 상품을 저장해야 한다.</li>\n</ul>\n<p>단순하게 <code class=\"tui-language-text\">Product</code> 정보를 저장할 구조체를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">struct Product {\n    name: String,\n    description: String,\n    image: String,\n    price: f64,\n}</code></pre></div>\n<p>다음으로 서버로 부터 불러온 상품의 정보를 담는 새 필드 <code class=\"tui-language-text\">products</code>를 만들어 <code class=\"tui-language-text\">State</code>에 선언해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">struct State {\n    products: Vec&lt;Product&gt;,\n}</code></pre></div>\n<p>바뀐 HomePage 컴포넌트를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  use yew::prelude::*;\n\n+ struct Product {\n+     id: i32,\n+     name: String,\n+     description: String,\n+     image: String,\n+     price: f64,\n+ }\n\n+ struct State {\n+     products: Vec&lt;Product&gt;,\n+ }\n\n- pub struct Home {}\n+ pub struct Home {\n+     state: State,\n+ }\n\n  impl Component for Home {\n      type Message = ();\n      type Properties = ();\n\n      fn create(_: Self::Properties, _: ComponentLink&lt;Self&gt;) -&gt; Self {\n+       let products: Vec&lt;Product&gt; = vec![\n+           Product {\n+               id: 1,\n+               name: &quot;Apple&quot;.to_string(),\n+               description: &quot;An apple a day keeps the doctor away&quot;.to_string(),\n+               image: &quot;/products/apple.png&quot;.to_string(),\n+               price: 3.65,\n+           },\n+           Product {\n+               id: 2,\n+               name: &quot;Banana&quot;.to_string(),\n+               description: &quot;An old banana leaf was once young and green&quot;.to_string(),\n+               image: &quot;/products/banana.png&quot;.to_string(),\n+               price: 7.99,\n+           },\n+       ];\n\n-       Self {}\n+       Self {\n+           state: State {\n+               products,\n+           },\n+       }\n      }\n\n      fn update(&amp;mut self, _: Self::Message) -&gt; ShouldRender {\n          true\n      }\n\n      fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n          true\n      }\n\n      fn view(&amp;self) -&gt; Html {\n+        let products: Vec&lt;Html&gt; = self\n+            .state\n+            .products\n+            .iter()\n+            .map(|product: &amp;Product| {\n+                html! {\n+                  &lt;div&gt;\n+                    &lt;img src={&amp;product.image}/&gt;\n+                    &lt;div&gt;{&amp;product.name}&lt;/div&gt;\n+                    &lt;div&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;\n+                  &lt;/div&gt;\n+                }\n+            })\n+            .collect();\n+\n+        html! { &lt;span&gt;{products}&lt;/span&gt; }\n-        html! { &lt;span&gt;{&quot;Home!&quot;}&lt;/span&gt; }\n      }\n  }</code></pre></div>\n<p><code class=\"tui-language-text\">create</code> 생명 주기 메서드는 컴포넌트가 생성될 때 호출되며 여기서 초기 상태를 설정한다. 잠시 동안 상품 목록을 모킹해서 초기 상태값으로 지정했다. 이후에 이 상품 리스트는 요청을 통해 값을 가져올 것이다.</p>\n<p><code class=\"tui-language-text\">view</code> 생명 주기 메서드는 컴포넌트가 렌더된 뒤 발생한다. 위 코드에서는 상품 카드를 생성하기 위해 <code class=\"tui-language-text\">products</code>를 반복했다. 만약 React에 익숙하다면, <code class=\"tui-language-text\">view</code>는 <code class=\"tui-language-text\">render</code>와 동일하며 <code class=\"tui-language-text\">html!</code>매크로는 <code class=\"tui-language-text\">JSX</code>와 비슷하다.</p>\n<p>임의의 이미지를 <code class=\"tui-language-text\">static/products/apple.png</code>와 <code class=\"tui-language-text\">static/products/apple.png</code>로 저장하면 아래와 같은 UI를 얻을 수 있다.</p>\n<img width=\"983\" alt=\"3\" src=\"https://user-images.githubusercontent.com/35371660/90354428-45d34500-e084-11ea-95b3-ed6f37509ccc.png\">\n<p>이제 \"장바구니에 추가\" 기능을 만들어보자.</p>\n<ul>\n<li>추가되는 상품들은 <code class=\"tui-language-text\">cart_products</code>라는 새로운 state 필드에 저장한다.</li>\n<li>\"장바구니에 추가\" 버튼을 각 상품에 렌더링 한다.</li>\n<li>\"장바구니에 추가\" 버튼을 클릭했을 때 <code class=\"tui-language-text\">cart_products</code>를 업데이트 하는 로직을 만든다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  use yew::prelude::*;\n\n+ #[derive(Clone)]\n  struct Product {\n      id: i32,\n      name: String,\n      description: String,\n      image: String,\n      price: f64,\n  }\n\n+ struct CartProduct {\n+     product: Product,\n+     quantity: i32,\n+ }\n\n  struct State {\n      products: Vec&lt;Product&gt;,\n+     cart_products: Vec&lt;CartProduct&gt;,\n  }\n\n  pub struct Home {\n      state: State,\n+     link: ComponentLink&lt;Self&gt;,\n  }\n\n+ pub enum Msg {\n+     AddToCart(i32),\n+ }\n\n  impl Component for Home {\n-   type Message = ();\n+   type Message = Msg;\n    type Properties = ();\n\n-   fn create(_: Self::Properties, _: ComponentLink&lt;Self&gt;) -&gt; Self {\n+   fn create(_: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n        let products: Vec&lt;Product&gt; = vec![\n            Product {\n                id: 1,\n                name: &quot;Apple&quot;.to_string(),\n                description: &quot;An apple a day keeps the doctor away&quot;.to_string(),\n                image: &quot;/products/apple.png&quot;.to_string(),\n                price: 3.65,\n            },\n            Product {\n                id: 2,\n                name: &quot;Banana&quot;.to_string(),\n                description: &quot;An old banana leaf was once young and green&quot;.to_string(),\n                image: &quot;/products/banana.png&quot;.to_string(),\n                price: 7.99,\n            },\n        ];\n+       let cart_products = vec![];\n\n        Self {\n            state: State {\n                products,\n+               cart_products,\n            },\n+           link,\n        }\n    }\n\n-   fn update(&amp;mut self, _: Self::Message) -&gt; ShouldRender {\n+   fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {\n+       match message {\n+           Msg::AddToCart(product_id) =&gt; {\n+               let product = self\n+                   .state\n+                   .products\n+                   .iter()\n+                   .find(|p: &amp;&amp;Product| p.id == product_id)\n+                   .unwrap();\n+               let cart_product = self\n+                   .state\n+                   .cart_products\n+                   .iter_mut()\n+                   .find(|cp: &amp;&amp;mut CartProduct| cp.product.id == product_id);\n+\n+               if let Some(cp) = cart_product {\n+                   cp.quantity += 1;\n+               } else {\n+                   self.state.cart_products.push(CartProduct {\n+                       product: product.clone(),\n+                       quantity: 1,\n+                   })\n+               }\n+               true\n+           }\n+       }\n-       true\n    }\n\n    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n        true\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        let products: Vec&lt;Html&gt; = self\n            .state\n            .products\n            .iter()\n            .map(|product: &amp;Product| {\n+              let product_id = product.id;\n                html! {\n                  &lt;div&gt;\n                    &lt;img src={&amp;product.image}/&gt;\n                    &lt;div&gt;{&amp;product.name}&lt;/div&gt;\n                    &lt;div&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;\n+                   &lt;button onclick=self.link.callback(move |_| Msg::AddToCart(product_id))&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n                  &lt;/div&gt;\n                }\n            })\n            .collect();\n\n+       let cart_value = self\n+           .state\n+           .cart_products\n+           .iter()\n+           .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));\n\n-       html! { &lt;span&gt;{products}&lt;/span&gt; }\n+       html! {\n+         &lt;div&gt;\n+           &lt;span&gt;{format!(&quot;Cart Value: {:.2}&quot;, cart_value)}&lt;/span&gt;\n+           &lt;span&gt;{products}&lt;/span&gt;\n+         &lt;/div&gt;\n+       }\n      }\n  }</code></pre></div>\n<ul>\n<li><code class=\"tui-language-text\">clone</code> - <code class=\"tui-language-text\">Product</code>구조체에서 <code class=\"tui-language-text\">Clone</code> 트레잇(traits)을 파생(derive)시켜줘 유저가 장바구니에 추가 할 때마다 복제된 <code class=\"tui-language-text\">Product</code>를 <code class=\"tui-language-text\">CartProduct</code>에 저장하도록 할 수 있게 했다.</li>\n<li><code class=\"tui-language-text\">update</code> - 이 메서드는 컴포넌트의 <code class=\"tui-language-text\">State</code>업데이트 로직이 존재하거나 사이드 이펙트(네트워크 요청 같은)작업이 위치하는 곳이다. 컴포넌트가 지원하는 모든 액션을 포함하는 <code class=\"tui-language-text\">Message</code> 열거형을 사용해 발생시킨다. 이 메서드에서 <code class=\"tui-language-text\">true</code>를 반환할 때 컴포넌트는 리렌더링 한다. 위 코드에서 \"장바구니에 추가\" 버튼을 누르면 <code class=\"tui-language-text\">Msg::AddToCart</code> 메세지를 <code class=\"tui-language-text\">update</code>로 보낸다. <code class=\"tui-language-text\">update</code>에서는 제품이 <code class=\"tui-language-text\">cart_product</code>에 없으면 추가하며, 존재할 경우 수량을 증가시킨다.</li>\n<li><code class=\"tui-language-text\">link</code> - <code class=\"tui-language-text\">update</code> 생명주기 함수를 발생시킬 수 있는 콜백 함수를 등록시킨다.</li>\n</ul>\n<p><a href=\"https://redux.js.org/\">Redux</a>를 이전에 사용해 본 적이 있다면, <code class=\"tui-language-text\">update</code>는 <a href=\"https://redux.js.org/basics/reducers\"><code class=\"tui-language-text\">리듀서</code></a>(state 업데이트)와 <a href=\"https://redux.js.org/basics/actions#action-creators\"><code class=\"tui-language-text\">액션 생성자</code></a>(사이드 이펙트)에 유사하며, <code class=\"tui-language-text\">Message</code>는 <a href=\"https://redux.js.org/basics/actions\"><code class=\"tui-language-text\">액션</code></a>, <code class=\"tui-language-text\">link</code>는 <a href=\"https://redux.js.org/basics/store#dispatching-actions\"><code class=\"tui-language-text\">Dispatch</code></a>와 유사하다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354431-47047200-e084-11ea-90b6-d49b050ad76e.png\" alt=\"4\"></p>\n<p>UI는 위처럼 변했다. \"Add to Cart\" 버튼을 눌러 \"Cart Value\"가 어떻게 변경되는지 살펴봐라.</p>\n<h2 id=\"데이터-가져오기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"데이터 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 가져오기</h2>\n<p>상품 데이터를 <code class=\"tui-language-text\">create</code>함수에서 <code class=\"tui-language-text\">static/products/products.json</code> 로 옮기고, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"><code class=\"tui-language-text\">fetch</code></a> api를 사용해 쿼리할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"tui-language-json\"><code class=\"tui-language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An apple a day keeps the doctor away\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/products/apple.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3.65</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An old banana leaf was once young and green\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/products/banana.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7.99</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Yew는 <a href=\"https://docs.rs/yew/0.17.2/yew/services/index.html\">\"services\"</a>를 통해 일반 브라우저에서 제공되는 fetch나 로컬 스토리지 등을 이용할 수 있게 한다. <code class=\"tui-language-text\">FetchService</code>를 사용해 네트워크 요청을 생성한다. 사용을 위해서는 <code class=\"tui-language-text\">anyhow</code>와 <code class=\"tui-language-text\">serde</code>가 필요한데, 한번 설치해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"tui-language-toml\"><code class=\"tui-language-toml\">  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rustmart\"</span>\n  <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n  <span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sheshbabu &lt;sheshbabu@gmail.com>\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rlib\"</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">yew</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.17\"</span>\n  <span class=\"token key property\">wasm-bindgen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2\"</span>\n+ anyhow <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.32\"</span>\n+ serde <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"derive\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"tui-language-text\">Product</code>와 <code class=\"tui-language-text\">CartProduct</code>를 <code class=\"tui-language-text\">src/types.rs</code>로 추출해 여러 파일에서 공유해 사용할 수 있도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">use serde::{Deserialize, Serialize};\n\n#[derive(Deserialize, Serialize, Clone, Debug)]\npub struct Product {\n    pub id: i32,\n    pub name: String,\n    pub description: String,\n    pub image: String,\n    pub price: f64,\n}\n\n#[derive(Clone, Debug)]\npub struct CartProduct {\n    pub product: Product,\n    pub quantity: i32,\n}</code></pre></div>\n<p>두 구조체와 필드 모두 public으로 만들어 준 뒤, <code class=\"tui-language-text\">Deserialize</code>와 <code class=\"tui-language-text\">Serialize</code> 트레잇을 파생시켜줬다.</p>\n<p>또한, <a href=\"http://www.sheshbabu.com/posts/organizing-http-requests-using-api-module-pattern/\">API 모듈 패턴</a>와 fetch 로직을 유지하기 위해 <code class=\"tui-language-text\">src/api.rs</code>에 분리된 모듈을 만들어 사용할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/api.rs\nuse crate::types::Product;\nuse anyhow::Error;\nuse yew::callback::Callback;\nuse yew::format::{Json, Nothing};\nuse yew::services::fetch::{FetchService, FetchTask, Request, Response};\n\npub type FetchResponse&lt;T&gt; = Response&lt;Json&lt;Result&lt;T, Error&gt;&gt;&gt;;\ntype FetchCallback&lt;T&gt; = Callback&lt;FetchResponse&lt;T&gt;&gt;;\n\npub fn get_products(callback: FetchCallback&lt;Vec&lt;Product&gt;&gt;) -&gt; FetchTask {\n    let req = Request::get(&quot;/products/products.json&quot;)\n        .body(Nothing)\n        .unwrap();\n\n    FetchService::fetch(req, callback).unwrap()\n}</code></pre></div>\n<p><code class=\"tui-language-text\">FetchSerive</code> api는 약간 어색한 부분이 존재한다. 요청 객체와 콜백을 인수로 받아 \"FetchTask\"를 반환한다는 것이다. 여기서 발생하는 한 가지 놀라운 문제는 \"FetchTask\"가 사라지면 이 네트워크 요청이 중단된다는 것이다. 그래서 우리는 이 FetchTask를 반환시켜 컴포넌트에 저장시킬 것이다.</p>\n<p><code class=\"tui-language-text\">lib.rs</code>를 수정해 새로운 모듈을 <a href=\"http://www.sheshbabu.com/posts/rust-module-system/\"><code class=\"tui-language-text\">모듈 트리</code></a>에 추가시키자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/lib.rs\n+ mod api;\n+ mod types;\n  mod pages;\n\n  use pages::Home;\n  use wasm_bindgen::prelude::*;\n  use yew::prelude::*;\n\n  #[wasm_bindgen(start)]\n  pub fn run_app() {\n      App::&lt;Home&gt;::new().mount_to_body();\n  }</code></pre></div>\n<p>마지막으로 HomePage 컴포넌트를 업데이트 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">+ use crate::api;\n+ use crate::types::{CartProduct, Product};\n+ use anyhow::Error;\n+ use yew::format::Json;\n+ use yew::services::fetch::FetchTask;\n  use yew::prelude::*;\n\n- #[derive(Clone)]\n- struct Product {\n-     id: i32,\n-     name: String,\n-     description: String,\n-     image: String,\n-     price: f64,\n- }\n\n- struct CartProduct {\n-     product: Product,\n-     quantity: i32,\n- }\n\n  struct State {\n      products: Vec&lt;Product&gt;,\n      cart_products: Vec&lt;CartProduct&gt;,\n+     get_products_error: Option&lt;Error&gt;,\n+     get_products_loaded: bool,\n  }\n\n  pub struct Home {\n      state: State,\n      link: ComponentLink&lt;Self&gt;,\n+     task: Option&lt;FetchTask&gt;,\n  }\n\n  pub enum Msg {\n      AddToCart(i32),\n+     GetProducts,\n+     GetProductsSuccess(Vec&lt;Product&gt;),\n+     GetProductsError(Error),\n  }\n\n  impl Component for Home {\n      type Message = Msg;\n      type Properties = ();\n\n      fn create(_: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n-         let products: Vec&lt;Product&gt; = vec![\n-             Product {\n-                 id: 1,\n-                 name: &quot;Apple&quot;.to_string(),\n-                 description: &quot;An apple a day keeps the doctor away&quot;.to_string(),\n-                 image: &quot;/products/apple.png&quot;.to_string(),\n-                 price: 3.65,\n-             },\n-             Product {\n-                 id: 2,\n-                 name: &quot;Banana&quot;.to_string(),\n-                 description: &quot;An old banana leaf was once young and green&quot;.to_string(),\n-                 image: &quot;/products/banana.png&quot;.to_string(),\n-                 price: 7.99,\n-             },\n-         ];\n+         let products = vec![];\n          let cart_products = vec![];\n\n+         link.send_message(Msg::GetProducts);\n\n          Self {\n              state: State {\n                  products,\n                  cart_products,\n+                 get_products_error: None,\n+                 get_products_loaded: false,\n              },\n              link,\n+             task: None,\n          }\n      }\n\n      fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {\n          match message {\n+             Msg::GetProducts =&gt; {\n+                 self.state.get_products_loaded = false;\n+                 let handler =\n+                     self.link\n+                         .callback(move |response: api::FetchResponse&lt;Vec&lt;Product&gt;&gt;| {\n+                             let (_, Json(data)) = response.into_parts();\n+                             match data {\n+                                 Ok(products) =&gt; Msg::GetProductsSuccess(products),\n+                                 Err(err) =&gt; Msg::GetProductsError(err),\n+                             }\n+                         });\n+                 self.task = Some(api::get_products(handler));\n+                 true\n+             }\n+             Msg::GetProductsSuccess(products) =&gt; {\n+                 self.state.products = products;\n+                 self.state.get_products_loaded = true;\n+                 true\n+             }\n+             Msg::GetProductsError(error) =&gt; {\n+                 self.state.get_products_error = Some(error);\n+                 self.state.get_products_loaded = true;\n+                 true\n+             }\n              Msg::AddToCart(product_id) =&gt; {\n                  let product = self\n                      .state\n                      .products\n                      .iter()\n                      .find(|p: &amp;&amp;Product| p.id == product_id)\n                      .unwrap();\n                  let cart_product = self\n                      .state\n                      .cart_products\n                      .iter_mut()\n                      .find(|cp: &amp;&amp;mut CartProduct| cp.product.id == product_id);\n\n                  if let Some(cp) = cart_product {\n                      cp.quantity += 1;\n                  } else {\n                      self.state.cart_products.push(CartProduct {\n                          product: product.clone(),\n                          quantity: 1,\n                      })\n                  }\n                  true\n              }\n          }\n      }\n\n      fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n          true\n      }\n\n      fn view(&amp;self) -&gt; Html {\n          let products: Vec&lt;Html&gt; = self\n              .state\n              .products\n              .iter()\n              .map(|product: &amp;Product| {\n                  let product_id = product.id;\n                  html! {\n                    &lt;div&gt;\n                      &lt;img src={&amp;product.image}/&gt;\n                      &lt;div&gt;{&amp;product.name}&lt;/div&gt;\n                      &lt;div&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;\n                      &lt;button onclick=self.link.callback(move |_| Msg::AddToCart(product_id))&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n                    &lt;/div&gt;\n                  }\n              })\n              .collect();\n\n          let cart_value = self\n              .state\n              .cart_products\n              .iter()\n              .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));\n\n+         if !self.state.get_products_loaded {\n+             html! {\n+               &lt;div&gt;{&quot;Loading ...&quot;}&lt;/div&gt;\n+             }\n+         } else if let Some(_) = self.state.get_products_error {\n+             html! {\n+               &lt;div&gt;\n+                 &lt;span&gt;{&quot;Error loading products! :(&quot;}&lt;/span&gt;\n+               &lt;/div&gt;\n+             }\n+         } else {\n              html! {\n                &lt;div&gt;\n                  &lt;span&gt;{format!(&quot;Cart Value: {:.2}&quot;, cart_value)}&lt;/span&gt;\n                  &lt;span&gt;{products}&lt;/span&gt;\n                &lt;/div&gt;\n              }\n+         }\n      }\n  }</code></pre></div>\n<p>꽤 많은 변경이 있었지만, 대부분은 이해를 하고 넘어가야 한다.</p>\n<ul>\n<li><code class=\"tui-language-text\">create</code>메소드에서 빈 배열로 하드코딩 되어있었던 상품 리스트가 대체 되었다. <code class=\"tui-language-text\">Msg::GetProducts</code>메세지를 보내 <code class=\"tui-language-text\">update</code>에서 <code class=\"tui-language-text\">api</code>모듈에 위치한 <code class=\"tui-language-text\">get_products</code>메서드를 호출시켰다. 반환된 <code class=\"tui-language-text\">FetchTask</code>는 <code class=\"tui-language-text\">task</code>에 저장된다.</li>\n<li>요청이 성공하면 <code class=\"tui-language-text\">Msg::GetProductsSuccess</code>메세지가 상품 리스트와 함께 호출되며, 실패할 경우 에러와 함께 <code class=\"tui-language-text\">Msg::getProductsError</code>가 호출된다.</li>\n<li>이 두 메세지는 <code class=\"tui-language-text\">products</code>와 <code class=\"tui-language-text\">get_products_error</code> 필드를 각각 설정한다. 또한 요청이 완료된 후 <code class=\"tui-language-text\">get_products_loaded</code> 상태 또한 true로 변경한다.</li>\n<li><code class=\"tui-language-text\">view</code>메서드에서는 조건부 렌더링을 통해 컴포넌트의 상태에 따라 로딩, 에러, 상품 리스트를 보여준다.</li>\n</ul>\n<img width=\"983\" alt=\"5\" src=\"https://user-images.githubusercontent.com/35371660/90354436-479d0880-e084-11ea-9bb7-40d245bd3e8c.png\">\n<h2 id=\"재사용-컴포넌트-분리하기\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EC%82%AC%EC%9A%A9-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"재사용 컴포넌트 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재사용 컴포넌트 분리하기</h2>\n<p>\"product cart\" 컴포넌트를 모듈화 시켜 다른 페이지에서 재사용할 수 있도록 분리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/components/product_card.rs\nuse crate::types::Product;\nuse yew::prelude::*;\n\npub struct ProductCard {\n    props: Props,\n}\n\n#[derive(Properties, Clone)]\npub struct Props {\n    pub product: Product,\n    pub on_add_to_cart: Callback&lt;()&gt;,\n}\n\nimpl Component for ProductCard {\n    type Message = ();\n    type Properties = Props;\n\n    fn create(props: Self::Properties, _link: ComponentLink&lt;Self&gt;) -&gt; Self {\n        Self { props }\n    }\n\n    fn update(&amp;mut self, _msg: Self::Message) -&gt; ShouldRender {\n        true\n    }\n\n    fn change(&amp;mut self, _props: Self::Properties) -&gt; ShouldRender {\n        true\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        let onclick = self.props.on_add_to_cart.reform(|_| ());\n\n        html! {\n          &lt;div&gt;\n            &lt;img src={&amp;self.props.product.image}/&gt;\n            &lt;div&gt;{&amp;self.props.product.name}&lt;/div&gt;\n            &lt;div&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;\n            &lt;button onclick=onclick&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n          &lt;/div&gt;\n        }\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/components/mod.rs\nmod product_card;\n\npub use product_card::ProductCard;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/lib.rs\n  mod api;\n+ mod components;\n  mod pages;\n  mod types;\n\n  // No changes</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/pages/home.rs\n\n  use crate::api;\n+ use crate::components::ProductCard;\n  use crate::types::{CartProduct, Product};\n  use anyhow::Error;\n  use yew::format::Json;\n  use yew::prelude::*;\n  use yew::services::fetch::FetchTask;\n\n  // No changes\n\n  impl Component for Home {\n      // No changes\n\n      fn view(&amp;self) -&gt; Html {\n          let products: Vec&lt;Html&gt; = self\n              .state\n              .products\n              .iter()\n              .map(|product: &amp;Product| {\n                  let product_id = product.id;\n                  html! {\n-                   &lt;div&gt;\n-                     &lt;img src={&amp;product.image}/&gt;\n-                     &lt;div&gt;{&amp;product.name}&lt;/div&gt;\n-                     &lt;div&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;\n-                     &lt;button onclick=self.link.callback(move |_| Msg::AddToCart(product_id))&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n-                   &lt;/div&gt;\n+                   &lt;ProductCard product={product} on_add_to_cart=self.link.callback(move |_| Msg::AddToCart(product_id))/&gt;\n                  }\n              })\n              .collect();\n\n          // No changes\n      }\n  }</code></pre></div>\n<p><code class=\"tui-language-text\">properties</code>, <code class=\"tui-language-text\">Callback</code> 그리고 <code class=\"tui-language-text\">reform</code>을 제외하고는 꽤 명료하다.</p>\n<ul>\n<li><code class=\"tui-language-text\">properties</code> - 글 시작 부분에서 언급했듯, \"Properties\"나 \"Props\"모두 컴포넌트에 입력된다. 만약 컴포넌트를 함수로 생각하고 있다면, Props는 함수의 인자일 것이다.</li>\n<li><code class=\"tui-language-text\">ProductCard</code>컴포넌트의 경우, <code class=\"tui-language-text\">Product</code> 구조체와 <code class=\"tui-language-text\">on_add_to_cart</code> 콜백을 넘겨준다. 이 컴포넌트는 상태가 없으므로, \"장바구니로 추가\" 버튼을 누를 경우 부모 컴포넌트의 <code class=\"tui-language-text\">cart_products</code> 상태를 업데이트한다. 이 콜백은 <code class=\"tui-language-text\">Callback&lt;T&gt;</code> 타입으로 사용되며 자식 컴포넌트에서 호출하려면 콜백에서 <code class=\"tui-language-text\">emit</code>또는 <code class=\"tui-language-text\">reform</code> 메소드를 사용한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90374966-4503d880-e0af-11ea-8c79-8578f222dce6.png\" alt=\"7\"></p>\n<h2 id=\"꾸미기\" style=\"position:relative;\"><a href=\"#%EA%BE%B8%EB%AF%B8%EA%B8%B0\" aria-label=\"꾸미기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>꾸미기</h2>\n<p>이 UI는 스타일을 추가하지 않았기 때문에 뼈대만 존재한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354436-479d0880-e084-11ea-9bb7-40d245bd3e8c.png\" alt=\"6\"></p>\n<p>Yew를 사용해 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class\">class 요소</a>와 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style\">인라인 스타일</a> 모두 사용할 수 있다. 몇가지 스타일을 추가해 UI를 보기 좋게 바꿔보자.</p>\n<p>CSS 파일을 <code class=\"tui-language-text\">static/styles.css</code>로 만들고, <code class=\"tui-language-text\">static/index.html</code>에 추가한 뒤 컴포넌트에 클래스를 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/pages/home.rs\n\n  html! {\n    &lt;div&gt;\n-     &lt;span&gt;{format!(&quot;Cart Value: {:.2}&quot;, cart_value)}&lt;/span&gt;\n-     &lt;span&gt;{products}&lt;/span&gt;\n+     &lt;div class=&quot;navbar&quot;&gt;\n+         &lt;div class=&quot;navbar_title&quot;&gt;{&quot;RustMart&quot;}&lt;/div&gt;\n+         &lt;div class=&quot;navbar_cart_value&quot;&gt;{format!(&quot;${:.2}&quot;, cart_value)}&lt;/div&gt;\n+     &lt;/div&gt;\n+     &lt;div class=&quot;product_card_list&quot;&gt;{products}&lt;/div&gt;\n    &lt;/div&gt;\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  html! {\n-   &lt;div&gt;\n-     &lt;img src={&amp;self.props.product.image}/&gt;\n-     &lt;div&gt;{&amp;self.props.product.name}&lt;/div&gt;\n-     &lt;div&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;\n-     &lt;button onclick=onclick&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n-   &lt;/div&gt;\n+   &lt;div class=&quot;product_card_container&quot;&gt;\n+     &lt;img class=&quot;product_card_image&quot; src={&amp;self.props.product.image}/&gt;\n+     &lt;div class=&quot;product_card_name&quot;&gt;{&amp;self.props.product.name}&lt;/div&gt;\n+     &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;\n+     &lt;button class=&quot;product_atc_button&quot; onclick=onclick&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n+   &lt;/div&gt;\n  }</code></pre></div>\n<p>몇 가지 스타일과 상품들을 추가한 뒤, UI를 살펴보자.</p>\n<img width=\"983\" alt=\"8\" src=\"https://user-images.githubusercontent.com/35371660/90354439-48359f00-e084-11ea-9c8a-ec7a64cdbbbd.png\">\n<p>CSS 변화는 이 글에서 다루지 않았다. <a href=\"https://github.com/sheshbabu/rustmart-yew-example\">Github 저장소</a>를 참고해달라.</p>\n<h2 id=\"라우팅\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85\" aria-label=\"라우팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우팅</h2>\n<p>서버 렌더링 페이지(Jinja, ERB, JSP emdemd)에서는 사용자가 보는 각 페이지는 다른 템플린 파일들에 매칭된다. 예를 들어 사용자가 \"/login\"으로 이동할 때, 서버는 \"login.html\"를 이용해 렌더링하며 \"/settings\"로 이동할 경우, \"settings.html\" 파일을 이용해 렌더링한다. 각각 다른 화면의 페이지를 렌더링 할때 고유한 URL을 사용하는 것은 북마크를 지정하거나 공유할 때도 유용하다.</p>\n<p>SPA는 하나의 html 페이지(SPA의 \"Single Page\"를 의미하는)만 가지며, 위에서 말한 동작을 수행할 수 있어야 한다. 이 작업은 <code class=\"tui-language-text\">Router</code>를 사용해 수행한다. Router는 다른 URL 경로(쿼리 매개변수나 fragment등)를 다른 페이지 컴포넌트에 매핑하고 새로 고침 없이 여러 페이지를 옮겨 다닐 수 있는 역할을 돕는다.</p>\n<p>지금 만드는 앱에서는, 다음처럼 매핑할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">/            =&gt; HomePage\n/product/:id =&gt; ProductDetailPage</code></pre></div>\n<p><code class=\"tui-language-text\">yew-router</code>를 설치해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"tui-language-toml\"><code class=\"tui-language-toml\">  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rustmart\"</span>\n  <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n  <span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sheshbabu &lt;sheshbabu@gmail.com>\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rlib\"</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">yew</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.17\"</span>\n+ yew-router <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.14.0\"</span>\n  <span class=\"token key property\">wasm-bindgen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2\"</span>\n  <span class=\"token key property\">log</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.4.6\"</span>\n  <span class=\"token key property\">wasm-logger</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2.0\"</span>\n  <span class=\"token key property\">anyhow</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.32\"</span>\n  <span class=\"token key property\">serde</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"derive\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>보기 쉽도록 모든 경로를 한 파일에 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/route.rs\nuse yew_router::prelude::*;\n\n#[derive(Switch, Debug, Clone)]\npub enum Route {\n    #[to = &quot;/&quot;]\n    HomePage,\n}</code></pre></div>\n<p>잠시 동안 하나의 경로만 추가한다. 이후에 추가할 것이다.</p>\n<p><code class=\"tui-language-text\">HomePage</code>를 대체할 새로운 루트 컴포넌트를 <code class=\"tui-language-text\">src/app.rs</code>에 생성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">use yew::prelude::*;\nuse yew_router::prelude::*;\n\nuse crate::pages::Home;\nuse crate::route::Route;\n\npub struct App {}\n\nimpl Component for App {\n    type Message = ();\n    type Properties = ();\n\n    fn create(_: Self::Properties, _link: ComponentLink&lt;Self&gt;) -&gt; Self {\n        Self {}\n    }\n\n    fn update(&amp;mut self, _msg: Self::Message) -&gt; ShouldRender {\n        true\n    }\n\n    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n        false\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        let render = Router::render(|switch: Route| match switch {\n            Route::HomePage =&gt; html! {&lt;Home/&gt;},\n        });\n\n        html! {\n            &lt;Router&lt;Route, ()&gt; render=render/&gt;\n        }\n    }\n}</code></pre></div>\n<p>그에 따라 <code class=\"tui-language-text\">lib.rs</code> 또한 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  mod api;\n+ mod app;\n  mod components;\n  mod pages;\n+ mod route;\n  mod types;\n\n- use pages::Home;\n  use wasm_bindgen::prelude::*;\n  use yew::prelude::*;\n\n  #[wasm_bindgen(start)]\n  pub fn run_app() {\n      wasm_logger::init(wasm_logger::Config::default());\n-     App::&lt;Home&gt;::new().mount_to_body();\n+     App::&lt;app::App&gt;::new().mount_to_body();\n  }</code></pre></div>\n<p>아래 그림은 앱의 컴포넌트 계층이 어떻게 되었는지 살펴 볼 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354442-48ce3580-e084-11ea-8500-7f0e3806defc.png\" alt=\"9\"></p>\n<h2 id=\"productdetailpage\" style=\"position:relative;\"><a href=\"#productdetailpage\" aria-label=\"productdetailpage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ProductDetailPage</h2>\n<p>라우터가 준비되었으니, 이를 이용해 다른 페이지로 이동하도록 만들어보자. 이 앱은 SPA이기 때문에 이동 중 페이지를 새로고침 하는 것을 피해야 한다.</p>\n<p><code class=\"tui-language-text\">/product/:id</code>경로로 ProductDetailPage에 대한 경로를 추가하자. <code class=\"tui-language-text\">ProductCard</code>를 클릭하면, <code class=\"tui-language-text\">id</code>를 Prop으로 경로에 전달해 세부 페이지로 이동할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/route.rs\n  use yew_router::prelude::*;\n\n  #[derive(Switch, Debug, Clone)]\n  pub enum Route {\n+     #[to = &quot;/product/{id}&quot;]\n+     ProductDetail(i32),\n      #[to = &quot;/&quot;]\n      HomePage,\n  }</code></pre></div>\n<p>위 경로의 순서에 따라 먼저 렌더링 되는 페이지가 결정 된다. 예를 들어, <code class=\"tui-language-text\">/product/2</code>는 <code class=\"tui-language-text\">/product/{id}</code>와 <code class=\"tui-language-text\">/</code> 둘 다 매칭되지만 <code class=\"tui-language-text\">/product/{id}</code>를 먼저 작성해줬으므로, <code class=\"tui-language-text\">Home</code> 대신 <code class=\"tui-language-text\">ProductDetail</code> 페이지가 렌더링 될 것이다.</p>\n<p><code class=\"tui-language-text\">app.rs</code>로 경로를 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  use yew::prelude::*;\n  use yew_router::prelude::*;\n\n- use crate::pages::{Home};\n+ use crate::pages::{Home, ProductDetail};\n  use crate::route::Route;\n\n  pub struct App {}\n\n  impl Component for App {\n      // No changes\n\n      fn view(&amp;self) -&gt; Html {\n          let render = Router::render(|switch: Route| match switch {\n+             Route::ProductDetail(id) =&gt; html! {&lt;ProductDetail id=id/&gt;},\n              Route::HomePage =&gt; html! {&lt;Home/&gt;},\n          });\n\n          html! {\n              &lt;Router&lt;Route, ()&gt; render=render/&gt;\n          }\n      }\n  }</code></pre></div>\n<p><code class=\"tui-language-text\">ProductCard</code>를 수정해 상품 이미지나 이름, 가격을 클릭하면 새로운 페이지로 이동하도록 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/components/product_card.rs\n+ use crate::route::Route;\n  use crate::types::Product;\n  use yew::prelude::*;\n+ use yew_router::components::RouterAnchor;\n\n  // No changes\n\n  impl Component for ProductCard {\n      // No changes\n\n      fn view(&amp;self) -&gt; Html {\n+         type Anchor = RouterAnchor&lt;Route&gt;;\n          let onclick = self.props.on_add_to_cart.reform(|_| ());\n\n          html! {\n              &lt;div class=&quot;product_card_container&quot;&gt;\n+                 &lt;Anchor route=Route::ProductDetail(self.props.product.id) classes=&quot;product_card_anchor&quot;&gt;\n                      &lt;img class=&quot;product_card_image&quot; src={&amp;self.props.product.image}/&gt;\n                      &lt;div class=&quot;product_card_name&quot;&gt;{&amp;self.props.product.name}&lt;/div&gt;\n                      &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;\n+                 &lt;/Anchor&gt;\n                  &lt;button class=&quot;product_atc_button&quot; onclick=onclick&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n              &lt;/div&gt;\n          }\n      }\n  }</code></pre></div>\n<p><code class=\"tui-language-text\">Anchor</code>에 <code class=\"tui-language-text\">class</code>대신 <code class=\"tui-language-text\">classes</code>를 사용하는 부분도 주의해서 살펴보자.</p>\n<p>이제 모킹된 데이터가 있는 파일들을 <code class=\"tui-language-text\">static/products/1.json</code>, <code class=\"tui-language-text\">static/products/2.json</code> 등등 으로 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"tui-language-json\"><code class=\"tui-language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An apple a day keeps the doctor away\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"image\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/products/apple.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3.65</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고, <code class=\"tui-language-text\">api.rs</code> 모듈을 수정해 새로운 경로를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\"> use crate::types::Product;\n  use anyhow::Error;\n  use yew::callback::Callback;\n  use yew::format::{Json, Nothing};\n  use yew::services::fetch::{FetchService, FetchTask, Request, Response};\n\n  pub type FetchResponse&lt;T&gt; = Response&lt;Json&lt;Result&lt;T, Error&gt;&gt;&gt;;\n  type FetchCallback&lt;T&gt; = Callback&lt;FetchResponse&lt;T&gt;&gt;;\n\n  pub fn get_products(callback: FetchCallback&lt;Vec&lt;Product&gt;&gt;) -&gt; FetchTask {\n      let req = Request::get(&quot;/products/products.json&quot;)\n          .body(Nothing)\n          .unwrap();\n\n      FetchService::fetch(req, callback).unwrap()\n  }\n\n+ pub fn get_product(id: i32, callback: FetchCallback&lt;Product&gt;) -&gt; FetchTask {\n+     let req = Request::get(format!(&quot;/products/{}.json&quot;, id))\n+         .body(Nothing)\n+         .unwrap();\n+\n+     FetchService::fetch(req, callback).unwrap()\n+ }</code></pre></div>\n<p>그럼, 최종 <code class=\"tui-language-text\">ProductDetail</code> 페이지를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/pages/product_detail.rs\nuse crate::api;\nuse crate::types::Product;\nuse anyhow::Error;\nuse yew::format::Json;\nuse yew::prelude::*;\nuse yew::services::fetch::FetchTask;\n\nstruct State {\n    product: Option&lt;Product&gt;,\n    get_product_error: Option&lt;Error&gt;,\n    get_product_loaded: bool,\n}\n\npub struct ProductDetail {\n    props: Props,\n    state: State,\n    link: ComponentLink&lt;Self&gt;,\n    task: Option&lt;FetchTask&gt;,\n}\n\n#[derive(Properties, Clone)]\npub struct Props {\n    pub id: i32,\n}\n\npub enum Msg {\n    GetProduct,\n    GetProductSuccess(Product),\n    GetProductError(Error),\n}\n\nimpl Component for ProductDetail {\n    type Message = Msg;\n    type Properties = Props;\n\n    fn create(props: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n        link.send_message(Msg::GetProduct);\n\n        Self {\n            props,\n            state: State {\n                product: None,\n                get_product_error: None,\n                get_product_loaded: false,\n            },\n            link,\n            task: None,\n        }\n    }\n\n    fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {\n        match message {\n            Msg::GetProduct =&gt; {\n                let handler = self\n                    .link\n                    .callback(move |response: api::FetchResponse&lt;Product&gt;| {\n                        let (_, Json(data)) = response.into_parts();\n                        match data {\n                            Ok(product) =&gt; Msg::GetProductSuccess(product),\n                            Err(err) =&gt; Msg::GetProductError(err),\n                        }\n                    });\n\n                self.task = Some(api::get_product(self.props.id, handler));\n                true\n            }\n            Msg::GetProductSuccess(product) =&gt; {\n                self.state.product = Some(product);\n                self.state.get_product_loaded = true;\n                true\n            }\n            Msg::GetProductError(error) =&gt; {\n                self.state.get_product_error = Some(error);\n                self.state.get_product_loaded = true;\n                true\n            }\n        }\n    }\n\n    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n        false\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        if let Some(ref product) = self.state.product {\n            html! {\n                &lt;div class=&quot;product_detail_container&quot;&gt;\n                    &lt;img class=&quot;product_detail_image&quot; src={&amp;product.image}/&gt;\n                    &lt;div class=&quot;product_card_name&quot;&gt;{&amp;product.name}&lt;/div&gt;\n                    &lt;div style=&quot;margin: 10px 0; line-height: 24px;&quot;&gt;{&amp;product.description}&lt;/div&gt;\n                    &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;\n                    &lt;button class=&quot;product_atc_button&quot;&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n                &lt;/div&gt;\n            }\n        } else if !self.state.get_product_loaded {\n            html! {\n                &lt;div class=&quot;loading_spinner_container&quot;&gt;\n                    &lt;div class=&quot;loading_spinner&quot;&gt;&lt;/div&gt;\n                    &lt;div class=&quot;loading_spinner_text&quot;&gt;{&quot;Loading ...&quot;}&lt;/div&gt;\n                &lt;/div&gt;\n            }\n        } else {\n            html! {\n                &lt;div&gt;\n                    &lt;span&gt;{&quot;Error loading product! :(&quot;}&lt;/span&gt;\n                &lt;/div&gt;\n            }\n        }\n    }\n}</code></pre></div>\n<p>HomePage 컴포넌트와 매우 유사하다. 그럼 이 파일 또한 module tree에 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/pages/mod.rs\n  mod home;\n+ mod product_detail;\n\n  pub use home::Home;\n+ pub use product_detail::ProductDetail;</code></pre></div>\n<p>화면을 살펴보자.</p>\n<img width=\"983\" alt=\"10\" src=\"https://user-images.githubusercontent.com/35371660/90354443-4966cc00-e084-11ea-972a-4a4bf35dbfce.png\">\n<p>이제 새로고침 없이 여러 페이지를 이동할 수 있게 되었다!</p>\n<h2 id=\"상태-관리\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태 관리</h2>\n<p><code class=\"tui-language-text\">ProductDetail</code> 페이지에서 눈치챘는지 모르겠지만, \"장바구니로 추가\" 버튼을 누르면 현재는 작동하지 않는다. <code class=\"tui-language-text\">cart_products</code>가 현재 <code class=\"tui-language-text\">Home</code> 페이지 컴포넌트에 존재하기 때문이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354444-49ff6280-e084-11ea-9efc-710b4a3c42c5.png\" alt=\"11\"></p>\n<p>두 컴포넌트에서 상태를 공유하기 위해서는 두 가지를 할 수 있는데,</p>\n<ul>\n<li>상태를 공통 조상으로 호이스팅 하거나</li>\n<li>전역 앱 상태로 이동 시키는 것이다.</li>\n</ul>\n<p><code class=\"tui-language-text\">App</code> 컴포넌트는 <code class=\"tui-language-text\">ProductDetail</code>과 <code class=\"tui-language-text\">Home</code>의 공통 조상 컴포넌트이다. 따라서, <code class=\"tui-language-text\">cart_products</code> 상태를 옮기면 이 상태를 prop으로 <code class=\"tui-language-text\">ProductDetail</code>과 <code class=\"tui-language-text\">Home</code>에 전달해 줄 수 있게 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354445-49ff6280-e084-11ea-9aec-1aeca45cdca8.png\" alt=\"12\"></p>\n<p>이 방법은 컴포넌트들이 얕은 계층을 가질 경우 잘 동작하지만, 계층 구조가 깊은 경우(더 큰 규모의 SPA의 경우) 원하는 컴포넌트에 도달하기 위해서는 여러 계층의 컴포넌트(이 prop을 사용하지 않을 수도 있는)를 통해 이 상태를 전달해야 한다. 이것을 \"Prop Drilling\"이라 한다.</p>\n<p>현재 구성에서도 <code class=\"tui-language-text\">cart_products</code>가 상태에 사용되지 않더라도 <code class=\"tui-language-text\">App</code>에서 <code class=\"tui-language-text\">AppToCart</code> 컴포넌트로 전달 되기 위해 <code class=\"tui-language-text\">ProductDetail</code>과 <code class=\"tui-language-text\">Home</code> 컴포넌트를 거치는 것을 볼 수 있다. 같은 시나리오가 깊은 계층을 갖는 컴포넌트에서 일어난다고 생각해보라.</p>\n<p>이런 문제를 전역 상태를 통해 해결할 수 있다. 여기 어떻게 동작하는지 함께 살펴보자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354446-4a97f900-e084-11ea-8861-357045554f1e.png\" alt=\"13\"></p>\n<p>각 컴포넌트와 전역 상태가 어떻게 직접 연결이 되어 있는지를 주의 깊게 보자.</p>\n<p>불행하게도, Yew는 <a href=\"https://github.com/yewstack/yew/issues/576\">좋은 해결책</a>이 아직 존재하지 않는 것처럼 보인다. 권장되는 해결책은 pubsub을 통해 상태 변경을 브로드 캐스팅 하기 위해 <code class=\"tui-language-text\">Agents</code>를 사용하는 것이다. 이것은 빠르게 앱을 더럽힐 수 있어 사용을 하지 않고 있다. 미래에는 React의 <a href=\"https://reactjs.org/docs/context.html\">Context</a>나 Redux, Mobx 같은 것을 볼 수 있길 기대한다.</p>\n<p>그럼 상태를 호이스팅 해서 이 문제를 해결해보자.</p>\n<h2 id=\"상태-호이스팅\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"상태 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태 호이스팅</h2>\n<p><code class=\"tui-language-text\">cart_products</code> 상태를 <code class=\"tui-language-text\">App</code>으로 이동시키고 <code class=\"tui-language-text\">NavBar</code> 및 <code class=\"tui-language-text\">AtcButton</code>를 별도 컴포넌트로 구성하는 방식으로 리팩토링 해보자</p>\n<p><img src=\"https://user-images.githubusercontent.com/35371660/90354447-4a97f900-e084-11ea-9e9a-5276348f699f.png\" alt=\"14\"></p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/components/navbar.rs\nuse crate::types::CartProduct;\nuse yew::prelude::*;\n\npub struct Navbar {\n    props: Props,\n}\n\n#[derive(Properties, Clone)]\npub struct Props {\n    pub cart_products: Vec&lt;CartProduct&gt;,\n}\n\nimpl Component for Navbar {\n    type Message = ();\n    type Properties = Props;\n\n    fn create(props: Self::Properties, _link: ComponentLink&lt;Self&gt;) -&gt; Self {\n        Self { props }\n    }\n\n    fn update(&amp;mut self, _msg: Self::Message) -&gt; ShouldRender {\n        true\n    }\n\n    fn change(&amp;mut self, props: Self::Properties) -&gt; ShouldRender {\n        self.props = props;\n        true\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        let cart_value = self\n            .props\n            .cart_products\n            .iter()\n            .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));\n\n        html! {\n            &lt;div class=&quot;navbar&quot;&gt;\n                &lt;div class=&quot;navbar_title&quot;&gt;{&quot;RustMart&quot;}&lt;/div&gt;\n              &lt;div class=&quot;navbar_cart_value&quot;&gt;{format!(&quot;${:.2}&quot;, cart_value)}&lt;/div&gt;\n            &lt;/div&gt;\n        }\n    }\n}</code></pre></div>\n<p><code class=\"tui-language-text\">Navbar</code> 컴포넌트에서 <code class=\"tui-language-text\">change</code> 생명주기 메서드를 어떻게 사용했는지를 주목해보자. 부모에서 보낸 props가 변경된다면, UI가 다시 리렌더링 되도록 컴포넌트 내부의 props를 업데이트 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">// src/components/atc_button.rs\nuse crate::types::Product;\nuse yew::prelude::*;\n\npub struct AtcButton {\n    props: Props,\n    link: ComponentLink&lt;Self&gt;,\n}\n\n#[derive(Properties, Clone)]\npub struct Props {\n    pub product: Product,\n    pub on_add_to_cart: Callback&lt;Product&gt;,\n}\n\npub enum Msg {\n    AddToCart,\n}\n\nimpl Component for AtcButton {\n    type Message = Msg;\n    type Properties = Props;\n\n    fn create(props: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n        Self { props, link }\n    }\n\n    fn update(&amp;mut self, msg: Self::Message) -&gt; ShouldRender {\n        match msg {\n            Msg::AddToCart =&gt; self.props.on_add_to_cart.emit(self.props.product.clone()),\n        }\n        true\n    }\n\n    fn change(&amp;mut self, props: Self::Properties) -&gt; ShouldRender {\n        self.props = props;\n        true\n    }\n\n    fn view(&amp;self) -&gt; Html {\n        let onclick = self.link.callback(|_| Msg::AddToCart);\n\n        html! {\n          &lt;button class=&quot;product_atc_button&quot; onclick=onclick&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n        }\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/components/mod.rs\n+ mod atc_button;\n+ mod navbar;\n  mod product_card;\n\n+ pub use atc_button::AtcButton;\n+ pub use navbar::Navbar;\n  pub use product_card::ProductCard;</code></pre></div>\n<p>그리고 새로운 <code class=\"tui-language-text\">AtcButton</code> 컴포넌트를 <code class=\"tui-language-text\">ProductCard</code>와 <code class=\"tui-language-text\">ProductDetail</code>에서 사용하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/components/product_card.rs\n+ use crate::components::AtcButton;\n  use crate::route::Route;\n  use crate::types::Product;\n  use yew::prelude::*;\n  use yew_router::components::RouterAnchor;\n\n  pub struct ProductCard {\n      props: Props,\n  }\n\n  #[derive(Properties, Clone)]\n  pub struct Props {\n      pub product: Product,\n-     pub on_add_to_cart: Callback&lt;()&gt;,\n+     pub on_add_to_cart: Callback&lt;Product&gt;,\n  }\n\n  impl Component for ProductCard {\n      // No changes\n\n      fn view(&amp;self) -&gt; Html {\n          type Anchor = RouterAnchor&lt;Route&gt;;\n-         let onclick = self.props.on_add_to_cart.reform(|_| ());\n\n          html! {\n              &lt;div class=&quot;product_card_container&quot;&gt;\n                  &lt;Anchor route=Route::ProductDetail(self.props.product.id) classes=&quot;product_card_anchor&quot;&gt;\n                      &lt;img class=&quot;product_card_image&quot; src={&amp;self.props.product.image}/&gt;\n                      &lt;div class=&quot;product_card_name&quot;&gt;{&amp;self.props.product.name}&lt;/div&gt;\n                      &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;\n                  &lt;/Anchor&gt;\n-                 &lt;button class=&quot;product_atc_button&quot; onclick=onclick&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n+                 &lt;AtcButton product=self.props.product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&gt;\n              &lt;/div&gt;\n          }\n      }\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/pages/product_detail.rs\n  use crate::api;\n+ use crate::components::AtcButton;\n  use crate::types::Product;\n  use anyhow::Error;\n  use yew::format::Json;\n  use yew::prelude::*;\n  use yew::services::fetch::FetchTask;\n\n  // No changes\n\n  #[derive(Properties, Clone)]\n  pub struct Props {\n      pub id: i32,\n+     pub on_add_to_cart: Callback&lt;Product&gt;,\n  }\n\n  impl Component for ProductDetail {\n      // No changes\n\n      fn view(&amp;self) -&gt; Html {\n          if let Some(ref product) = self.state.product {\n              html! {\n                  &lt;div class=&quot;product_detail_container&quot;&gt;\n                      &lt;img class=&quot;product_detail_image&quot; src={&amp;product.image}/&gt;\n                      &lt;div class=&quot;product_card_name&quot;&gt;{&amp;product.name}&lt;/div&gt;\n                      &lt;div style=&quot;margin: 10px 0; line-height: 24px;&quot;&gt;{&amp;product.description}&lt;/div&gt;\n                      &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;\n-                     &lt;button class=&quot;product_atc_button&quot;&gt;{&quot;Add To Cart&quot;}&lt;/button&gt;\n+                     &lt;AtcButton product=product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&gt;\n                  &lt;/div&gt;\n              }\n          }\n\n          // No changes\n      }\n  }</code></pre></div>\n<p>마지막으로, <code class=\"tui-language-text\">cart_products</code>를 <code class=\"tui-language-text\">Home</code>에서 <code class=\"tui-language-text\">App</code>으로 옮긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/app.rs\n+ use crate::components::Navbar;\n+ use crate::types::{CartProduct, Product};\n  use yew::prelude::*;\n  use yew_router::prelude::*;\n\n  use crate::pages::{Home, ProductDetail};\n  use crate::route::Route;\n\n+ struct State {\n+     cart_products: Vec&lt;CartProduct&gt;,\n+ }\n\n- pub struct App {}\n+ pub struct App {\n+     state: State,\n+     link: ComponentLink&lt;Self&gt;,\n+ }\n\n+ pub enum Msg {\n+     AddToCart(Product),\n+ }\n\n  impl Component for App {\n-     type Message = ();\n+     type Message = Msg;\n      type Properties = ();\n\n-     fn create(_: Self::Properties, _link: ComponentLink&lt;Self&gt;) -&gt; Self {\n+     fn create(_: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n+         let cart_products = vec![];\n\n-         Self {}\n+         Self {\n+             state: State { cart_products },\n+             link,\n+         }\n      }\n\n-     fn update(&amp;mut self, _msg: Self::Message) -&gt; ShouldRender {\n+     fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {\n+         match message {\n+             Msg::AddToCart(product) =&gt; {\n+                 let cart_product = self\n+                     .state\n+                     .cart_products\n+                     .iter_mut()\n+                     .find(|cp: &amp;&amp;mut CartProduct| cp.product.id == product.id);\n\n+                 if let Some(cp) = cart_product {\n+                     cp.quantity += 1;\n+                 } else {\n+                     self.state.cart_products.push(CartProduct {\n+                         product: product.clone(),\n+                         quantity: 1,\n+                     })\n+                 }\n+                 true\n+             }\n+         }\n-         true\n      }\n\n      fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n          false\n      }\n\n      fn view(&amp;self) -&gt; Html {\n+         let handle_add_to_cart = self\n+             .link\n+             .callback(|product: Product| Msg::AddToCart(product));\n+         let cart_products = self.state.cart_products.clone();\n\n-         let render = Router::render(|switch: Route| match switch {\n-           Route::ProductDetail(id) =&gt; html! {&lt;ProductDetail id=id/&gt;},\n-           Route::HomePage =&gt; html! {&lt;Home/&gt;},\n+         let render = Router::render(move |switch: Route| match switch {\n+             Route::ProductDetail(id) =&gt; {\n+                 html! {&lt;ProductDetail id=id on_add_to_cart=handle_add_to_cart.clone() /&gt;}\n+             }\n+             Route::HomePage =&gt; {\n+                 html! {&lt;Home cart_products=cart_products.clone() on_add_to_cart=handle_add_to_cart.clone()/&gt;}\n+             }\n          });\n\n          html! {\n+             &lt;&gt;\n+                 &lt;Navbar cart_products=self.state.cart_products.clone() /&gt;\n                  &lt;Router&lt;Route, ()&gt; render=render/&gt;\n+             &lt;/&gt;\n          }\n      }\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"tui-language-rs\"><code class=\"tui-language-rs\">  // src/pages/home.rs\n  // No changes\n\n  struct State {\n      products: Vec&lt;Product&gt;,\n-     cart_products: Vec&lt;CartProduct&gt;,\n      get_products_error: Option&lt;Error&gt;,\n      get_products_loaded: bool,\n  }\n\n+ #[derive(Properties, Clone)]\n+ pub struct Props {\n+     pub cart_products: Vec&lt;CartProduct&gt;,\n+     pub on_add_to_cart: Callback&lt;Product&gt;,\n+ }\n\n  pub struct Home {\n+     props: Props,\n      state: State,\n      link: ComponentLink&lt;Self&gt;,\n      task: Option&lt;FetchTask&gt;,\n  }\n\n  pub enum Msg {\n-     AddToCart(i32),\n      GetProducts,\n      GetProductsSuccess(Vec&lt;Product&gt;),\n      GetProductsError(Error),\n  }\n\n  impl Component for Home {\n      type Message = Msg;\n-     type Properties = ();\n+     type Properties = Props;\n\n-     fn create(_: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n+     fn create(props: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {\n          let products = vec![];\n-         let cart_products = vec![];\n\n          link.send_message(Msg::GetProducts);\n\n          Self {\n              props,\n              state: State {\n                  products,\n-                 cart_products,\n                  get_products_error: None,\n                  get_products_loaded: false,\n              },\n              link,\n              task: None,\n          }\n      }\n\n      fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {\n          match message {\n              Msg::GetProducts =&gt; {\n                  self.state.get_products_loaded = false;\n                  let handler =\n                      self.link\n                          .callback(move |response: api::FetchResponse&lt;Vec&lt;Product&gt;&gt;| {\n                              let (_, Json(data)) = response.into_parts();\n                              match data {\n                                  Ok(products) =&gt; Msg::GetProductsSuccess(products),\n                                  Err(err) =&gt; Msg::GetProductsError(err),\n                              }\n                          });\n\n                  self.task = Some(api::get_products(handler));\n                  true\n              }\n              Msg::GetProductsSuccess(products) =&gt; {\n                  self.state.products = products;\n                  self.state.get_products_loaded = true;\n                  true\n              }\n              Msg::GetProductsError(error) =&gt; {\n                  self.state.get_products_error = Some(error);\n                  self.state.get_products_loaded = true;\n                  true\n              }\n-             Msg::AddToCart(product_id) =&gt; {\n-                 let product = self\n-                     .state\n-                     .products\n-                     .iter()\n-                     .find(|p: &amp;&amp;Product| p.id == product_id)\n-                     .unwrap();\n-                 let cart_product = self\n-                     .state\n-                     .cart_products\n-                     .iter_mut()\n-                     .find(|cp: &amp;&amp;mut CartProduct| cp.product.id == product_id);\n-                 if let Some(cp) = cart_product {\n-                     cp.quantity += 1;\n-                 } else {\n-                     self.state.cart_products.push(CartProduct {\n-                         product: product.clone(),\n-                         quantity: 1,\n-                     })\n-                 }\n-                 true\n-             }\n          }\n      }\n\n-     fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {\n+     fn change(&amp;mut self, props: Self::Properties) -&gt; ShouldRender {\n+         self.props = props;\n          true\n      }\n\n      fn view(&amp;self) -&gt; Html {\n          let products: Vec&lt;Html&gt; = self\n              .state\n              .products\n              .iter()\n              .map(|product: &amp;Product| {\n-                 let product_id = product.id;\n                  html! {\n-                   &lt;ProductCard product={product} on_add_to_cart=self.link.callback(move |_| Msg::AddToCart(product_id))/&gt;\n+                   &lt;ProductCard product={product} on_add_to_cart=self.props.on_add_to_cart.clone()/&gt;\n                  }\n              })\n              .collect();\n\n-        let cart_value = self\n-            .state\n-            .cart_products\n-            .iter()\n-            .fold(0.0, |acc, cp| acc + (cp.quantity as f64 * cp.product.price));\n\n          if !self.state.get_products_loaded {\n              // No changes\n          } else if let Some(_) = self.state.get_products_error {\n              // No changes\n          } else {\n              html! {\n-               &lt;div&gt;\n-                 &lt;div class=&quot;navbar&quot;&gt;\n-                     &lt;div class=&quot;navbar_title&quot;&gt;{&quot;RustMart&quot;}&lt;/div&gt;\n-                     &lt;div class=&quot;navbar_cart_value&quot;&gt;{format!(&quot;${:.2}&quot;, cart_value)}&lt;/div&gt;\n-                 &lt;/div&gt;\n                  &lt;div class=&quot;product_card_list&quot;&gt;{products}&lt;/div&gt;\n-               &lt;/div&gt;\n              }\n          }\n      }\n  }</code></pre></div>\n<p>이제 <code class=\"tui-language-text\">ProductDetail</code> 페이지에서도 장바구니에 추가 할수 있으며 모든 페이지에서 네비게이션 바를 갖게 되었다.</p>\n<img width=\"983\" alt=\"15\" src=\"https://user-images.githubusercontent.com/35371660/90354448-4b308f80-e084-11ea-8dd2-6c64c3c8b9a8.png\">\n<img width=\"983\" alt=\"16\" src=\"https://user-images.githubusercontent.com/35371660/90354449-4bc92600-e084-11ea-878a-2c284faeea54.png\">\n<p>Rust만으로 온전하게 SPA를 만들어내는 데 성공했다!</p>\n<p>이 <a href=\"https://rustmart-yew.netlify.app/\">데모 링크</a>에 들어가면 결과를 확인할 수 있으며 코드는 <a href=\"https://github.com/sheshbabu/rustmart-yew-example\">Github 저장소</a>에서 확인할 수 있다. 만약 질문이나 제안이 있다면, sheshbabu@gmail.com 로 연락 바란다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>Yew 커뮤니티는 <code class=\"tui-language-text\">html!</code>이나 <code class=\"tui-language-text\">Component</code> 등 여러 추상화를 잘 설계해 놔 React에 익숙한 나와 같은 사람들이 즉시 시작할 수 있게 했다. FetchTask의 잘 다듬어지지 않은 면이나 <a href=\"https://redux.js.org/introduction/motivation\"><em>예측 가능한(predictable)</em></a> 상태 관리의 부족, 문서의 부족 등 문제가 있지만 이러한 이슈들을 해결해 나간다면 React나 Vue의 좋은 대안이 될 가능성이 있다고 생각한다.</p>\n<p>읽어줘서 고맙다! 이런 글을 더 받아보고 싶다면 <a href=\"https://twitter.com/sheshbabu\">twitter</a>를 팔로우하라!</p>","frontmatter":{"id":"ko_20200818","title":"Rust로 SPA(Single Page Applications)만들기","description":"WebAssembly(wasm)을 사용하면 자바스크립트 외의 언어로 작성된 코드를 브라우저에서 실행할 수 있다. 대부분의 주요 브라우저에서 wasm을 지원하고 전 세계적으로 90% 이상의 사용자가 wasm을 동작시키는 브라우저를 사용한다.","date":"2020.08.18","author":"한정","tags":["WebAssembly"],"thumbnail":"https://user-images.githubusercontent.com/35371660/90354417-4075fa80-e084-11ea-9cca-f411292d25fb.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20200818","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}