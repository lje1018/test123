{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20161014","result":{"data":{"post":{"html":"<h1 id=\"vuejs\" style=\"position:relative;\"><a href=\"#vuejs\" aria-label=\"vuejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue.js</h1>\n<p>FE-Weekly-Pick에서는 최근에 팀 내에서 진행했던 스터디 내용을 정리하는 의미에서, 4회에 걸쳐 자바스크립트 (프론트엔드) 프레임워크를 소개하는 시리즈를 연재할 예정입니다. 금주부터 아래와 같은 목차로 진행되니 많은 관심 부탁드립니다.</p>\n<ol>\n<li>Cycle.js</li>\n<li>Angular 2</li>\n<li><strong>Vue.js</strong></li>\n<li>React</li>\n</ol>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<ol>\n<li>소개</li>\n<li>개발/구동 환경</li>\n<li>아키텍쳐</li>\n<li>컴포넌트</li>\n<li>테스트</li>\n<li>성능</li>\n<li>정리</li>\n</ol>\n<h2 id=\"소개\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EA%B0%9C\" aria-label=\"소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소개</h2>\n<p><img src=\"https://cloud.githubusercontent.com/assets/11814588/19755323/edb00678-9c4f-11e6-8976-6b2511215e81.png\" alt=\"vue js\"></p>\n<p><a href=\"http://vuejs.org/\">Vue.js</a>는 <a href=\"http://evanyou.me/\">Evan You</a>가 만들었으며, 2014년 릴리즈를 시작으로 꾸준히 발전하고 있는 자바스크립트 프레임워크이다. 앞서 소개된 Angular나 React보다 덜 알려져 있으나, 최근 <a href=\"http://archive.forum.vuejs.org/category/18/kor\">Vue.js 포럼</a>에 한국어 카테고리가 추가될 정도로 인지도에 상승 곡선을 그리는 추세이다. Vue.js를 접하는 사람들의 반응은 두 가지이다. 낯설거나 혹은 친절하거나. 전자는 (현재 이 글을 읽고 있는 당신을 포함하여) Vue.js를 처음 접하는 사람일 것이고, 후자는 단 한 번이라도 Vue.js의 가이드를 읽어보거나 사용해보고 싶다는 생각을 한 사람일 것이다.</p>\n<p>Vue.js는 발음대로 철저히 뷰(View)에 최적화 된 프레임워크이다. 컨트롤러 대신 뷰 모델을 가지는 <strong>MVVM(Model-View-ViewModel) 패턴</strong>을 기반으로 디자인 되었으며, <strong>컴포넌트(Components)</strong>를 사용하여 재사용이 가능한 UI들을 묶고 뷰 레이어를 정리하는 것을 가장 강력한 기능으로 꼽는다. 또한 <strong>템플릿(Template)</strong> 위주의 개발을 권장한다. 이러한 특징들은 다음 목차에서 다루어질 내용의 미리보기 격으로, 앞에서 장황하게 설명하기보다 본론으로 들어가 샘플 코드와 함께 Vue.js를 이해하는 것이 더 좋을 것이다. 최근 Vue.js는 2.0 버전으로 업데이트 되었으며 앞으로 보게 될 예제 또한 최신 버전 기준으로 작성된 점을 참고하길 바란다.</p>\n<h2 id=\"개발구동-환경\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EA%B5%AC%EB%8F%99-%ED%99%98%EA%B2%BD\" aria-label=\"개발구동 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발/구동 환경</h2>\n<h3 id=\"의존성\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"의존성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성</h3>\n<p>기본적으로 Vue.js는 사용할 때 신경 써야 할 의존성을 가지고 있지 않다. 2.0부터 Virtual DOM의 구현체인 <a href=\"https://github.com/snabbdom/snabbdom\">Snabbdom</a>을 사용하고 있지만, 필요에 의해 수정한 소스로 내장해 사용하고 있어 따로 설치하거나 버전을 신경 쓸 필요가 없다. Vue.js는 템플릿 엔진을 따로 사용하지 않고 <a href=\"https://www.w3.org/standards/techs/components#w3c_all\">웹 컴포넌트 스펙</a>과 유사하게 구현된 HTML 형식의 커스텀 엘리먼트를 이용해 Virtual DOM 렌더 함수로 컴파일하도록 내부에서 구현했다.</p>\n<h3 id=\"추가-도구\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-%EB%8F%84%EA%B5%AC\" aria-label=\"추가 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가 도구</h3>\n<h4 id=\"vue-cli\" style=\"position:relative;\"><a href=\"#vue-cli\" aria-label=\"vue cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vue-cli</h4>\n<p><a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a>는 프로젝트를 쉽게 구성할 수 있도록 미리 정의된 설정들을 사용할 수 있게 한다. Vue.js 전용 <a href=\"http://yeoman.io/\">Yeoman</a>이라고 생각하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install -g vue-cli</code></pre></div>\n<p><code class=\"tui-language-text\">npm</code>을 이용해 쉽게 설치가 가능하며, 아래와 같은 기본 설정들을 제공한다.</p>\n<ul>\n<li><code class=\"tui-language-text\">webpack</code> : Webpack, vue-loader, 정적 분석, 테스트 등 기본 빌드 프로세스 대부분을 설정</li>\n<li><code class=\"tui-language-text\">webpack-simple</code> : Webpack과 vue-loader로 구성된 간단한 조합</li>\n<li><code class=\"tui-language-text\">browserify</code> : Browserify, vueify, 정적 분석, 테스트 등 기본 빌드 프로세스 대부분을 설정</li>\n<li><code class=\"tui-language-text\">browserify-simple</code> : Browserify와 vueify로 구성된 간단한 조합</li>\n<li><code class=\"tui-language-text\">simple</code> : 특별한 모듈 관리 도구를 사용하지 않고 HTML 파일 1개로 구성하는 제일 간단한 조합</li>\n</ul>\n<p>아래와 같이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ vue init webpack projectName</code></pre></div>\n<p>프로젝트 규모나 필요에 의해 옵션을 선택해서 미리 구성된 설정들을 이용할 수 있기 때문에, 일일이 설정하면서 생기는 문제들로 스트레스를 받지 않는다.</p>\n<h4 id=\"vuex\" style=\"position:relative;\"><a href=\"#vuex\" aria-label=\"vuex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vuex</h4>\n<p>Vue.js는 인스턴스 생성 시 인자로 전달받는 <code class=\"tui-language-text\">data</code> 객체를 이용해 상태를 관리하게 되는데, <code class=\"tui-language-text\">data</code> 안의 내용이 변경되면 내부에서 인지하고 그 데이터를 사용하는 컴포넌트들이 스스로 업데이트를 한다. 이때 디버깅의 편의를 위해 <code class=\"tui-language-text\">data</code>에 직접 접근하지 않고 따로 스토어 패턴을 이용해서 데이터를 관리하는 객체를 구현할 수 있으며, 결국 <a href=\"http://haruair.github.io/flux/docs/overview.html\">Flux 아키텍처</a>와 유사한 구조도 생각해 볼 수 있다. 이렇게 간단하게 스토어를 구현할 수 있으나 직접 만들지 않고, Flux와 Elm 아키텍처에서 영감을 얻어 Vue.js를 확장한 <a href=\"http://vuex.vuejs.org/en/intro.html\">Vuex</a> 사용도 가능하다. 여기서 직접 다루진 않겠지만, 문서 내용을 보면 Flux 아키텍처를 알고 있는 사람이라면 익숙한 단어와 그림이 보일 것이다.</p>\n<h4 id=\"vue-devtools\" style=\"position:relative;\"><a href=\"#vue-devtools\" aria-label=\"vue devtools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vue-devtools</h4>\n<p>요즘 프론트엔드 프레임워크는 그 자체도 중요하지만, 개발할 때 사용할 전용 개발 도구의 지원도 필수가 된 것 같다. Vue.js도 React와 Redux의 개발 도구만큼 유용한 <a href=\"https://github.com/vuejs/vue-devtools\">전용 크롬 개발도구 플러그인</a>을 지원한다. react-devtools처럼 커스텀 엘리먼트의 계층 구조와 바인드 된 컴포넌트 정보를 볼 수 있으며 Vuex 관련 도구도 지원한다.</p>\n<p><img src=\"https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif\" alt=\"vue-devtools\"></p>\n<p>(출처: <a href=\"https://github.com/vuejs/vue-devtools\">https://github.com/vuejs/vue-devtools</a>)</p>\n<h4 id=\"단일-파일-컴포넌트를-위한-빌드-환경\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%ED%8C%8C%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B9%8C%EB%93%9C-%ED%99%98%EA%B2%BD\" aria-label=\"단일 파일 컴포넌트를 위한 빌드 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 파일 컴포넌트를 위한 빌드 환경</h4>\n<p>Vue.js에서는 <strong>단일 파일 컴포넌트(Single File Components)</strong>를 제공하는데, 이 단일 파일 컴포넌트를 정상적으로 사용하려면 Webpack이나 Browserify를 통해 빌드한 후 브라우저에서 사용 가능한 자바스크립트를 한 파일로 번들링하는 과정을 거쳐야 한다. 여기서 필요한 각 도구의 설정들은 직접 할 필요 없이 vue-cli를 이용해 쉽게 세팅 적용이 가능하다. (단일 파일 컴포넌트에 대한 설명은 <strong>4. 컴포넌트 목차</strong>에서 대신한다)</p>\n<h4 id=\"jsx-사용을-위한-빌드-환경\" style=\"position:relative;\"><a href=\"#jsx-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%B9%8C%EB%93%9C-%ED%99%98%EA%B2%BD\" aria-label=\"jsx 사용을 위한 빌드 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX 사용을 위한 빌드 환경</h4>\n<p>React에서 사용하는 JSX를 Vue.js에서도 이용하고자 한다면 <code class=\"tui-language-text\">render</code> 함수를 직접 작성하고 <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">바벨 플러그인</a>을 이용해 번들링 단계에서 적용할 수 있다.</p>\n<p>구현 코드는 React와 상당히 유사한데 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">import</span> AnchoredHeading <span class=\"token keyword\">from</span> <span class=\"token string\">\"./AnchoredHeading.vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#demo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>AnchoredHeading level<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span> world<span class=\"token operator\">!</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>AnchoredHeading<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"구동-환경\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EB%8F%99-%ED%99%98%EA%B2%BD\" aria-label=\"구동 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구동 환경</h3>\n<p>React, Angular 2와 마찬가지로 대부분의 모던 브라우저를 지원하며 인터넷 익스플로러는 9 버전부터 지원한다. Compatibility Note에 적혀있는 내용에 따르면 ES5 기능 중에 폴리필이 불가능한 기능을 이용하기 때문이라고 한다. 그래서 추가적인 폴리필을 이용해도 낮은 버전의 인터넷 익스플로러 지원은 불가능해 보인다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/19298790/5cbb49ae-908b-11e6-8380-0b834a42c46c.png\" alt=\"브라우저 지원\"></p>\n<h2 id=\"아키텍처\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"아키텍처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아키텍처</h2>\n<h3 id=\"vue-생성자\" style=\"position:relative;\"><a href=\"#vue-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"vue 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue 생성자</h3>\n<p><strong>뷰 모델(View Model)</strong>은 Vue.js의 기초이자 절대 놓쳐서는 안 될 개념 중 하나이다. 뷰 모델은 다음 한 줄로 요약할 수 있다.</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Model-view-viewmodel\">MVVM 패턴</a>의 VM에 해당하며, MVC 패턴에서 컨트롤러 역할처럼 데이터를 관리하고 액션을 처리한다.</p>\n</blockquote>\n<p><img src=\"https://cloud.githubusercontent.com/assets/4476469/19305302/3861605a-90ab-11e6-82b6-5b4690c9ae44.png\" alt=\"mvvmpattern\"></p>\n<p>(출처: <a href=\"https://en.wikipedia.org/wiki/Model-view-viewmodel\">https://en.wikipedia.org/wiki/Model-view-viewmodel</a>)</p>\n<p>Vue.js에서는 <code class=\"tui-language-text\">Vue</code> 생성자 함수의 인스턴스를 생성하면서 뷰 모델을 다루게 된다. 아래 예제와 같이 인스턴스를 생성할 때 뷰와 데이터를 연결하기 위한 옵션을 설정할 수 있다. 자주 사용되는 옵션 정보는 다음과 같으며, 더 많은 옵션은 <a href=\"http://vuejs.org/api/\">API 문서</a>에서 <code class=\"tui-language-text\">Options</code> 카테고리에서 확인할 수 있다.</p>\n<ul>\n<li>뷰 관련 옵션 : <code class=\"tui-language-text\">el</code>, <code class=\"tui-language-text\">template</code></li>\n<li>데이터 관련 옵션 : <code class=\"tui-language-text\">data</code>, <code class=\"tui-language-text\">methods</code>, <code class=\"tui-language-text\">computed</code></li>\n<li>컴포넌트 관련 옵션 : <code class=\"tui-language-text\">components</code></li>\n<li>생명 주기 훅 : <code class=\"tui-language-text\">created</code>, <code class=\"tui-language-text\">mounted</code>, <code class=\"tui-language-text\">updated</code>, <code class=\"tui-language-text\">destroyed</code></li>\n</ul>\n<p>뷰 모델의 인스턴스가 정상적으로 생성되었다면 Vue.js를 사용하기 위한 절반의 준비는 끝났다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span> <span class=\"token string\">'#example'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// DOM</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Plain Data</span>\n        firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span>\n        lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Bar'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">getFullName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Methods For Data</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">created</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Lifecycle Hooks</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vue.js에서 뷰 모델이 생성되는 순간부터 중요한 사이클이 시작된다. <strong>생명 주기(Lifecycle)</strong>라고 부르며 다음 다이어그램을 이해한다면, 위에서 뷰 모델을 생성하기 위해 설정된 옵션들이 어떠한 용도로 사용되었는지 파악할 수 있다. 다이어그램에서 빨간색 박스는 생명 주기의 단계를 나타내며, 뷰 모델 생성 옵션 중 <strong>생명 주기 훅</strong>에 해당하는 콜백 메서드들이 실행되는 시점이기도 하다. 생명 주기 훅을 기준으로 생명 주기 각 단계에서 하는 일을 정리하면 다음과 같다.</p>\n<ul>\n<li><code class=\"tui-language-text\">beforeCreate</code> ~ <code class=\"tui-language-text\">created</code> : 데이터 및 이벤트 초기화</li>\n<li><code class=\"tui-language-text\">created</code> ~ <code class=\"tui-language-text\">beforeMount</code> : 뷰 생성</li>\n<li><code class=\"tui-language-text\">mounted</code> ~ <code class=\"tui-language-text\">updated</code> : 데이터 바인딩, 데이터 변경 주시 및 뷰 업데이트</li>\n<li><code class=\"tui-language-text\">destroyed</code> : 자식 컴포넌트, 이벤트 리스너 해제</li>\n</ul>\n<p>자, 얼마나 많은 일이 뷰 모델 인스턴스 안에서 처리되고 있는가?</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/18183560/19237330/4b57e578-8f37-11e6-9e92-770ead269b23.png\" alt=\"lifecycle 2\"></p>\n<p>(출처: <a href=\"http://vuejs.org\">http://vuejs.org</a>)</p>\n<h3 id=\"템플릿\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-label=\"템플릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿</h3>\n<p>Vue.js의 데이터를 외부로 보여주기 위해서 어떻게 해야 될까? 뷰 모델 생성에 필요한 옵션 중 <code class=\"tui-language-text\">template</code> 혹은 <code class=\"tui-language-text\">el</code> 프로퍼티를 기억하는가? Vue.js에서 데이터는 렌더링 된 DOM에 바인딩 되어 처리되는데, 이러한 처리를 위해 템플릿이 사용되며 <strong>HTML 기반의 템플릿</strong> 사용을 권장한다. 이는 JSX와 같은 문법을 따로 배우지 않아도, 애플리케이션 개발자가 알고 있는 HTML 기초 지식 안에서 프로그래밍할 수 있다는 뜻이다. (물론 JSX 사용도 가능하다)</p>\n<p>다음은 뷰 모델의 템플릿을 실제 DOM과 매핑하고, 템플릿에 데이터 값 <code class=\"tui-language-text\">name</code>을 바인딩하여 <code class=\"tui-language-text\">&lt;span&gt;</code>에 출력하는 예제이다. Mustaches라고 불리는 <code class=\"tui-language-text\">{{ }}</code> 태그 안에 <code class=\"tui-language-text\">data</code> 객체의 프로퍼티 값을 출력하면 된다. 일반적인 자바스크립트 템플릿 엔진 사용 방법과 같다. 예제를 실행하면 'My framework is Vue.js!' 문장을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>My framework is {{ name + '!' }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#example\"</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Vue.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기에 조금의 양념을 더해 템플릿을 반응적(Reactive)으로 만들 수 있다. 이때 필요한 것이 <strong>지시자(Directives)</strong>이다. 지시자는 HTML 컴파일러가 실행될 때 해당 DOM을 찾기 위해 사용되는 특별한 형태의 속성(Attribute)이다. Vue.js의 지시자는 그 이름답게 접두사 <code class=\"tui-language-text\">v-</code>로 시작하며, 스타일에서부터 이벤트까지 DOM을 다룰 수 있는 모든 범위에서 <a href=\"http://012.vuejs.org/api/directives.html#v-style\">다양한 지시자</a>를 제공한다. 지시자를 가진 엘리먼트에 특정 액션이 발생했을 때, 지시자에 할당된 자바스크립트 구문이 실행되고 상황에 따라 데이터와 템플릿 상태가 변경된다. 이전 예제에 <code class=\"tui-language-text\">v-on</code> 지시자를 가진 버튼을 추가한 후 클릭 이벤트를 발생시키면 <code class=\"tui-language-text\">name</code> 값이 자동으로 업데이트된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>My framework is {{ name + '!' }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#example\"</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Vue.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">changeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Vue.js --> vue.js</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"데이터-플로우\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%8C%EB%A1%9C%EC%9A%B0\" aria-label=\"데이터 플로우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 플로우</h3>\n<p>뷰 모델과 템플릿으로 Vue.js의 외형을 살펴보았다면, 이번에는 깊은 범위에서 데이터를 살펴보려고 한다. 지시자를 설명하는 부분에서 <strong>반응적(Reactive)</strong>이라는 표현이 사용되었는데, 이는 Vue.js가 데이터를 다루는 방식을 명확하게 보여준다. Vue.js에서는 데이터가 변경되었을 때 해당 데이터를 참조하고 있는 뷰도 함께 업데이트 된다. 직접 DOM 엘리먼트를 찾아 텍스트를 변경해야만 하던 수고의 과정들을 Vue.js가 대신 처리하고 있는 셈이다. 어떻게 이러한 동작이 가능할까?</p>\n<p>뷰 모델 인스턴스는 <code class=\"tui-language-text\">watcher</code> 객체를 포함하고, 인스턴스 옵션 중 <code class=\"tui-language-text\">data</code>는 Vue.js의 데이터로써 순수한 자바스크립트 객체이다. <code class=\"tui-language-text\">watcher</code>의 역할은 데이터의 변경을 감시하고 있다가 값이 변경되면 지시자에게 이를 알리고 해당 지시자를 가진 DOM을 업데이트할 수 있도록 도와준다. 2.0 버전에서는 Virtual DOM을 사용하면서 DOM 업데이트 방식이 변경되었으나, <code class=\"tui-language-text\">watcher</code>라는 중요한 게이트를 두고 데이터가 이동된다는 핵심은 변함이 없다.</p>\n<p>아래 이미지는 각각 1.0 (상), 2.0 (하) 버전에서의 데이터 흐름 상태를 보여준다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/4476469/19268051/16ec32a6-8fed-11e6-9dcb-ab30244f6df5.png\" alt=\"data-1\">\n<img src=\"https://cloud.githubusercontent.com/assets/4476469/19268053/1927edc6-8fed-11e6-8845-d19c83a394a9.png\" alt=\"data\"></p>\n<p>(출처: <a href=\"http://vuejs.org\">http://vuejs.org</a>)</p>\n<h2 id=\"컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트</h2>\n<p>컴포넌트에 대해서 들어본 적이 있는가? 컴포넌트는 웹 애플리케이션을 구성하는 최소의 단위이자, 얼마나 UI를 깔끔하게 정리하고 재사용할 수 있는가에 대한 척도가 되는 중요한 기능이다. Vue.js에서도 컴포넌트가 제공되며, 컴포넌트를 사용했을 때 비로소 Vue.js를 제대로 만져보았다고 할 수 있다. 이번 목차를 따로 분류한 이유는 아키텍처에서 설명한 뷰 모델과 템플릿을 기초로 컴포넌트가 생성되기 때문이다. 응용 단계의 스텝을 밟아보자.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/4476469/19267892/4103c01e-8fec-11e6-9493-4b8f8ab04687.png\" alt=\"components\"></p>\n<p>(출처: <a href=\"http://vuejs.org\">http://vuejs.org</a>)</p>\n<p>뷰 모델 인스턴스의 생성부터 시작한다. 이때 생성되는 뷰 모델 인스턴스는 등록하려는 컴포넌트의 영역을 지정하고 컴포넌트들을 관리한다. 컴포넌트의 목적은 공통의 템플릿을 사용하여 여러 데이터를 표현하는 것이기 때문에 글로벌 영역에 컴포넌트를 등록해야 한다. (지역적으로도 등록하여 사용할 수 있지만 '공통'이라는 단어와 거리가 있어 보여 이번 설명에서는 제외한다)</p>\n<p>이 때 새로운 개념이 등장한다. <strong>커스텀 엘리먼트</strong>로 컴포넌트의 살을 붙이기 위한 일종의 뼈대라고 생각하면 이해하기 쉽다. 컴포넌트의 살은 템플릿에 해당하며, 컴포넌트가 등록될 때 매칭되는 커스텀 엘리먼트를 찾아 템플릿으로 교체된다. 예제에서는 <code class=\"tui-language-text\">&lt;my-component&gt;</code>가 커스텀 엘리먼트로, 컴포넌트 등록 이후에는 <code class=\"tui-language-text\">&lt;p&gt;My framework is Vue.js!&lt;/p&gt;</code>으로 바뀐다. 커스텀 엘리먼트 대신 지시자를 사용해 실제 DOM에 매핑할 수도 있는데, 자세한 사용 방법은 <a href=\"http://optimizely.github.io/vuejs.org/guide/composition.html\">조합된 컴포넌트 페이지</a>를 참고하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-component</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// 컴포넌트 등록</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-component\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;p>My framework is Vue.js!&lt;/p>\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 뷰 모델 인스턴스 생성</span>\n<span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#example\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번에는 데이터를 바인딩하고 <strong>재사용이 가능한</strong> 컴포넌트를 생성해 보려고 한다.</p>\n<p>아래 예제를 보았을 때 그림이 그려지는가? 3개의 버튼의 겉모습은 같지만 각 컴포넌트가 참조하는 데이터가 다르고 액션에 따라서 각각의 데이터가 변화하게 된다. 10개의 버튼을 등록한다고 할지라도 컴포넌트 등록은 한 번이면 충분하다. 컴포넌트의 데이터는 뷰 모델과 동일하게 <code class=\"tui-language-text\">data</code> 옵션으로 관리되며, <code class=\"tui-language-text\">Vue</code> 인스턴스의 <code class=\"tui-language-text\">data</code>와 다른 점으로 순수 객체 대신 <strong>콜백 함수를 통해 반환된 값</strong>을 사용한다. 이는 각각의 컴포넌트가 같은 데이터를 공유하지 않기 위함이다. 이러한 개념을 활용하면 여러 페이지 안에서 공통으로 사용되는 UI(예를 들어 게시판의 리스트와 같은)를 분리하고 데이터만 교체하여 사용이 가능해진다. 반복적인 일은 모두 Vue.js의 컴포넌트에게 맡기면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>simple-counter</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>simple-counter</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>simple-counter</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>simple-counter</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>simple-counter</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>simple-counter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple-counter\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">'&lt;button v-on:click=\"increase\">{{ counter }}&lt;/button>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">increase</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#example\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제처럼 항상 같은 레벨에 위치한 컴포넌트만 생성할 수 있는 것은 아니다. 컴포넌트는 또 다른 컴포넌트를 포함할 수도 있고, 1개의 템플릿 안에서 부모 - 자식 관계를 형성하면서 여러 종류의 컴포넌트 생성과 조합이 가능하다.</p>\n<p>여기서 눈여겨보아야 될 부분은 데이터 통신 방식이다. 부모 컴포넌트가 가지는 데이터는 자식 컴포넌트에서도 사용할 수 있으며, 부모에서 변경이 일어났을 때 관련된 자식 컴포넌트들이 최신 상태에 맞추어 업데이트된다는 특성이 있다. 자식 컴포넌트가 업데이트되었을 때는 부모에게 변경된 데이터를 전달하는 대신 '변경되었음!'을 알리는 이벤트를 발생하게 된다. 이러한 관계를 <strong>단방향 이벤트 플로우(One-Way Data Flow)</strong>라고 부르며, 규모가 큰 애플리케이션에서 데이터의 흐름을 쉽게 만들 수 있다는 장점이 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/4476469/19265887/2bef4f90-8fe2-11e6-8a2b-bbc9dd044784.png\" alt=\"props-events\"></p>\n<p>(출처: <a href=\"http://vuejs.org\">http://vuejs.org</a>)</p>\n<p>위에서 설명한 내용을 구현한 예제 코드이다. <code class=\"tui-language-text\">vm</code> 인스턴스는 부모 역할을 하며 자식 컴포넌트로 <code class=\"tui-language-text\">child-component</code>를 가지는데, 이때 자식 컴포넌트의 <code class=\"tui-language-text\">props</code> 속성을 통해 부모의 데이터를 전달받게 된다. 부모의 데이터 <code class=\"tui-language-text\">message</code>는 자식 컴포넌트에서 참조 가능하며, 버튼을 클릭했을 때 <code class=\"tui-language-text\">message</code> 값이 변경되면서 자식 컴포넌트의 뷰에서 보여지는 값도 자동으로 업데이트된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child-component</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>child-component</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeMessage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child-component\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;p>{{ fullMessage }}&lt;/p>\"</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Vue.js\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">fullMessage</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#example\"</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">\"My component is \"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">changeMessage</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"Your component is \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vue.js는 컴포넌트를 좀 더 효율적으로 관리할 방법도 제공한다. <code class=\"tui-language-text\">Vue.component</code> API로 컴포넌트를 생성하는 방식은 중소규모의 프로젝트에 적합하다. 하지만 몇 가지 주의해야 할 점이 있다.</p>\n<ul>\n<li>모든 컴포넌트는 중복되지 않는 고유한 이름을 가져야 한다.</li>\n<li>템플릿을 멀티 라인으로 정의할 때 가독성이 떨어지는 슬래시(<code class=\"tui-language-text\">/</code>)를 이용해야 한다.</li>\n<li>CSS도 함께 모듈화하기 어렵다.</li>\n</ul>\n<p>그래서 <code class=\"tui-language-text\">vue</code> 확장자로 저장되는 <strong>단일 파일 컴포넌트</strong>를 이용해, 파일 하나에 템플릿부터 CSS스타일 그리고 컴포넌트까지 모두 정의해 모듈화 할 수 있다. 단일 파일 컴포넌트를 사용하게 되면 컴포넌트의 물리적 관리가 쉬워진다. 또한 <code class=\"tui-language-text\">jade</code>, <code class=\"tui-language-text\">TypeScript</code>, <code class=\"tui-language-text\">SCSS</code> 등 특정 언어의 사용도 가능해진다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/4476469/19311065/c87fcec6-90c7-11e6-8d8e-38c4e8542369.png\" alt=\"vue-component\">\n<img src=\"https://cloud.githubusercontent.com/assets/4476469/19311076/cef07580-90c7-11e6-9248-6ed4473b9019.png\" alt=\"vue-component-with-preprocessors\"></p>\n<p>(출처: <a href=\"http://vuejs.org\">http://vuejs.org</a>)</p>\n<p>마지막으로 <a href=\"http://vuejs.org/guide/routing.html\">라우팅</a>까지 더하면 Vue.js의 컴포넌트 기능은 완벽해진다. 가장 작은 단위의 컴포넌트들을 묶고 조합하면 Vue.js만의 <a href=\"https://en.wikipedia.org/wiki/Single-page_application\">SPA</a>를 완성할 수 있다.</p>\n<h2 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h2>\n<p>번들링 환경만큼 테스트 환경도 처음 구성할 때 여러 가지 시행착오를 겪게 되고 적지 않은 시간을 사용하게 되는데, 간단하게 vue-cli를 이용해 미리 구성된 테스트 환경 이용을 추천한다. 어떤 조합의 테스트 환경도 적용이 가능하겠지만, vue-cli는 가장 대중적인 Karma와 테스트 프레임워크 조합으로 환경을 만들어 준다. vue-cli를 이용해 Webpack이나 Browserify의 풀 설정으로 설치를 해야하며, 설치를 시작하기 전에 터미널에서 Mocha 혹은 Jasmine으로 테스트 프레임워크를 선택할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm run test</code></pre></div>\n<p>위 스크립트를 실행하면 미리 설정된 테스트 환경에 의해 유닛 테스트가 하나씩 실행된다. 기본적으로 PhantomJS 환경만 설정되어 있지만 Karma 플러그인을 추가 설치하여 다양한 브라우저 환경도 간단히 추가할 수 있다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/389021/19298773/3e1248a4-908b-11e6-9a56-c32fc7e42d80.png\" alt=\"테스트 케이스 돌아가는 장면\"></p>\n<p>컴포넌트의 테스트 케이스를 작성할 때는 컴포넌트에 옵션을 각각의 케이스에 맞게 다르게 적용한 후 컴포넌트 안에서 만들어지는 Virtual DOM 객체를 확인하는 형태로 유닛 테스트를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">\"src/components/Hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello.vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should render correct contents\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      el<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".hello h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Hello Vue!\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제 코드는 아주 간단한 단일 파일 컴포넌트를 테스트하는 예제이며, 컴포넌트 인스턴스의 <code class=\"tui-language-text\">$el</code>로 Virtual DOM 객체에 접근해서 DOM을 테스트하듯 테스트할 수 있다.</p>\n<h2 id=\"성능\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5\" aria-label=\"성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능</h2>\n<p>Vue.js는 다른 프레임워크들과 성능 비교를 시도하고 그 결과도 제공하고 있어, 프레임워크 적용 시 퍼포먼스를 고려하는 사람들에게 많은 도움이 될 것이다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/4476469/19294924/d9f300ee-906b-11e6-871c-54c614c3bba4.png\" alt=\"2016-10-12 11 05 17\"></p>\n<p>(출처: <a href=\"http://vuejs.org\">http://vuejs.org</a>)</p>\n<p>Vue.js는 반응적(Reactive)이고 뷰 컴포넌트를 제공한다는 유사점으로 인해 React와 자주 비교된다. 위 수치는 React와 <a href=\"https://github.com/chrisvfritz/vue-render-performance-comparisons\">렌더링에 대한 성능 비교</a>를 한 결과이다. 다양한 상황에서 렌더링 속도를 측정하였으며, 어느 구간을 살펴보아도 React보다 Vue.js의 렌더링 속도가 빠르다는 것을 알 수 있다. Vue.js 1.0 버전에서는 Virtual DOM 대신 실제 DOM 템플릿을 사용하는 구조 때문에, 그리고 2.0 버전에서는 메모리 소모와 성능을 개선한 Virtual DOM을 도입함으로써 React보다 더 나은 성능을 보인다고 한다.</p>\n<p>Angular 1과 비교하였을 때도 우세하다. Angular 1의 경우 Dirty Checking을 수행하지만, Vue.js는 비동기 큐 옵저버 시스템을 이용해 의존 관계가 명시적이지 않은 경우에는 독립적으로 이벤트를 발생하도록 처리한다. 그래서 빠르다. Angular 2와 비교하면 성능에는 큰 차이가 없다고 언급되지만, Vue.js가 23kb의 <a href=\"http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html\">경량 프레임워크</a>라는 점에서 앞선다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>Vue.js를 만드는 사람들은 계속해서 그들의 프레임워크를 좀 더 보기 좋고 편하게 사용할 수 있도록 개선하고 있다. 이는 <a href=\"http://vuejs.org/guide/\">가이드 페이지</a>와 <a href=\"https://github.com/vuejs/vue\">깃헙</a>의 로그 몇 줄만 보아도 알 수 있다. Vue.js는 목표는 프론트엔드 개발자들이 부담 없이 입문하고 쉽게 애플리케이션을 생산해 낼 수 있도록 지원하는 것이 아닐까 추측된다.</p>\n<p>Vue.js는 다른 프레임워크들에 비해서 덜 복잡하고 덜 꾸며져 있다. Vue.js를 사용하기 위해 처음부터 어려운 개념들을 익힐 필요가 없으며, 필요에 따라 <a href=\"http://v1.vuejs.org/guide/plugins.html#Existing-Plugins-amp-Tools\">플러그인</a>과 <a href=\"http://vuejs.org/guide/state-management.html\">라이브러리</a>를 제공하기 때문에 유연하다. 또한 사용자 중심의 프레임워크가 분명하다. 2.0 버전 업데이트 내역을 살펴보면, Virtual DOM을 도입하는 등 내부적으로 큰 변화가 있었지만 API를 포함한 캡슐화 영역에서는 변동 사항이 거의 없었다. 사용자들을 당황스럽게 만들지 않기 위한 나름의 배려로 보인다. (심지어 <a href=\"http://vuejs.org/guide/migration.html\">마이그레이션 방법</a>도 제공한다!)</p>\n<p>Vue.js는 친절하다. 그리고 쉽다. 새로운 애플리케이션을 원한다면 지금 바로 Vue.js를 설치해보라!</p>","frontmatter":{"id":"ko_20161014","title":"자바스크립트 프레임워크 소개 3 - VueJs","description":"Vue.js는 Evan You가 만들었으며, 2014년 릴리즈를 시작으로 꾸준히 발전하고 있는 자바스크립트 프레임워크이다. 앞서 소개된 Angular나 React보다 덜 알려져 있으나, 최근 Vue.js 포럼에 한국어 카테고리가 추가될 정도로 인지도에 상승 곡선을 그리는 추세이다. Vue.js를 접하는 사람들의 반응은 두 가지이다. 낯설거나 혹은 친절하거나. 전자는 (현재 이 글을 읽고 있는 당신을 포함하여) Vue.js를 처음 접하는 사람일 것이고, 후자는 단 한 번이라도 Vue.js의 가이드를 읽어보거나 사용해보고 싶다는 생각을 한 사람일 것이다.","date":"2016.10.14","author":"류선임","tags":["VueJs","framework"],"thumbnail":"https://cloud.githubusercontent.com/assets/11814588/19755323/edb00678-9c4f-11e6-8976-6b2511215e81.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20161014","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}