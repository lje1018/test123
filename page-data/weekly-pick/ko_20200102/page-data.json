{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20200102","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트-데코레이터-이해하기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"자바스크립트 데코레이터 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 데코레이터 이해하기</h1>\n<blockquote>\n<p>원글: <a href=\"https://www.simplethread.com/understanding-js-decorators/\">Mike Green - Understanding JavaScript Decorators</a></p>\n</blockquote>\n<p>얼마 전 상태 관리를 위해 MobX를 사용하여 React 앱을 개발했다. 때론 흥미롭기도 하고 가끔은 혼란스럽기도 했지만, 바로 글을 쓰고 싶을 만큼 즐거운 경험이었다. <a href=\"https://mobx.js.org/README.html\">MobX</a> 개발에서 가장 흥미로웠던 점은 클래스의 속성을 작성하기 위해 데코레이터를 사용했다는 것이다. 실제로 사용해보지 못했을때는 깨닫지 못했지만, MobX개발에서 몇 번 작성해본 후에는 데코레이터가 엄청난 잠재력을 가진 기능이라고 생각하게 되었다.</p>\n<p>데코레이터는 아직 자바스크립트의 정식 기능이 아니다. 아직 <a href=\"https://github.com/tc39/proposals\">ECMA TC39의 표준화 절차</a>를 진행하고 있다. 그렇다고 해서 우리가 사용조차 못 한다는 것은 아니다. 가까운 시일 내에 노드(Node)와 브라우저에서 데코레이터를 지원할 것이다. 그리고 그때까지는 Babel을 사용하면 된다.</p>\n<h2 id=\"데코레이터란\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EB%9E%80\" aria-label=\"데코레이터란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터란?</h2>\n<p>데코레이터는 \"데코레이터 함수\"(또는 메서드)의 약자이다. 새 함수를 반환하여 전달 된 함수 또는 메서드의 동작을 수정하는 함수이다. 조금 전 “함수”라는 말을 많이 썼는데, 이는 우리가 <a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">고차(high-order)함수</a>에 대해 얘기 할 때 생긴 직업병이다.</p>\n<p>함수를 일급 시민으로서의 기능을 지원하는 모든 언어는 데코레이터를 구현할 수 있다(예를 들어, 자바스크립트는 함수를 변수에 할당하거나 다른 함수에 인자로 전달할 수 있다). 이런 언어 중 일부에는 데코레이터를 정의하고 사용하기 위한 특수한 구문(Syntactic sugar)이 있다. 파이선도 그런 언어 중 하나다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"tui-language-python\"><code class=\"tui-language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cashify</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$\"</span><span class=\"token punctuation\">)</span>\n        fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> wrap\n\n<span class=\"token decorator annotation punctuation\">@cashify</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span>\n\nsayHello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># $$$$</span>\n<span class=\"token comment\"># hello!</span>\n<span class=\"token comment\"># $$$$</span></code></pre></div>\n<p>위 코드에서 무슨 일이 일어나고 있는지 보자. 우리의 <code class=\"tui-language-text\">cashify</code> 함수는 데코레이터이다. 데코레이터는 함수를 인자로 하며 반환 값도 함수이다. 우리는 파이선의 파이(<code class=\"tui-language-text\">@</code>) 구문을 사용하여 데코레이터를 <code class=\"tui-language-text\">sayHello</code> 함수에 적용했다. 데코레이터를 적용한 <code class=\"tui-language-text\">sayHello</code>는 아래 정의한 <code class=\"tui-language-text\">sayHello</code>와 본질적으로 같다.\t</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"tui-language-python\"><code class=\"tui-language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span>\n\nsayHello <span class=\"token operator\">=</span> cashify<span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">)</span></code></pre></div>\n<p>최종 결과는 우리가 데코레이터를 적용한 함수로 출력하려고 하는 문자 앞, 뒤에 달러 기호를 출력한 모습이다.</p>\n<p>어째서 필자가 파이선 예제를 사용하여 ECMAScript 데코레이터를 설명했는지 궁금한가? 물어봐 줘서 고맙다!</p>\n<ul>\n<li>파이선의 데코레이터가 JS에서 데코레이터가 작동하는 방식보다 더 단순하기 때문에, 데코레이터를 설명하기 좋다.</li>\n<li>JS와 TypeScript는 파이선의 \"파이 구문\"을 사용하여 데코레이터를 클래스의 메서드와 속성에 적용하므로 시각적으로나, 구문적으로 비슷해 보이기 때문이다.</li>\n</ul>\n<p>그렇다면, 파이선의 데코레이터가 JS 데코레이터와 다른 점은 무엇일까?</p>\n<h2 id=\"자바스크립트-데코레이터와-속성-설명자\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EC%99%80-%EC%86%8D%EC%84%B1-%EC%84%A4%EB%AA%85%EC%9E%90\" aria-label=\"자바스크립트 데코레이터와 속성 설명자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 데코레이터와 속성 설명자</h2>\n<p>파이선의 데코레이터는 장식하는 함수의 모든 인자를 전달받지만, 자바스크립트의 데코레이터는 자바스크립트 객체의 작동 방식 때문에 정보가 조금 더 필요하다.</p>\n<p>자바스크립트의 객체는 속성이 있고, 각 속성은 값을 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> oatmeal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  viscosity<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  flavor<span class=\"token operator\">:</span> <span class=\"token string\">'Brown Sugar Cinnamon'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 각 속성은 값 외에도 화면 밖에 숨겨진 정보들이 있는데, 이런 정보들이 각 속성이 어떻게 작동할지를 정의한다. 이것을 속성 설명자라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">,</span> <span class=\"token string\">'viscosity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n{\n  configurable: true,\n  enumerable: true,\n  value: 20,\n  writable: true\n}\n*/</span></code></pre></div>\n<p>자바스크립트는 속성에 대한 몇 가지를 추적하고 관리한다.</p>\n<ul>\n<li><code class=\"tui-language-text\">구성 가능(configurable)</code>은 속성 유형을 변경하거나, 객체에서 속성을 삭제할 수 있는지를 결정한다.</li>\n<li><code class=\"tui-language-text\">열거 가능(enumerable)</code>은 <code class=\"tui-language-text\">Object.keys(oatmeal)</code>를 호출하거나 <code class=\"tui-language-text\">for</code> 루프에서 사용할 때처럼 객체의 속성을 열거할 때 속성을 표시할지 여부를 제어한다.</li>\n<li><code class=\"tui-language-text\">쓰기 가능(writable)</code>은 할당 연산자 <code class=\"tui-language-text\">=</code>를 통해 속성값을 변경할 수 있는지를 제어한다.</li>\n<li><code class=\"tui-language-text\">값(value)</code>은 접근할 때 표시되는 속성의 정적 값이다. 속성 설명자 중에 유일하게 쉽게 볼 수 있고, 주로 우리가 관심을 두고 보는 부분이다. 함수를 포함한 모든 자바스크립트의 값이 올 수 있으며, 이 속성은 속성을 자신이 속한 객체의 메소드로 만든다.</li>\n</ul>\n<p>속성 설명자에는 다른 두 속성이 더 있다. 그 두 가지 속성은 흔히 getter와 setter로 알고 있는 그 <code class=\"tui-language-text\">접근자 설명자</code>이다. </p>\n<ul>\n<li><code class=\"tui-language-text\">get</code>은 정적인 <code class=\"tui-language-text\">value</code> 대신 반환 값을 전달하는 함수이다.</li>\n<li><code class=\"tui-language-text\">set</code>은 속성에 값을 할당할 때, 등호 오른쪽에 넣는 모든 것을 인자로 전달하는 특수 함수이다.</li>\n</ul>\n<h3 id=\"장식-없이-꾸며보기\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%8B%9D-%EC%97%86%EC%9D%B4-%EA%BE%B8%EB%A9%B0%EB%B3%B4%EA%B8%B0\" aria-label=\"장식 없이 꾸며보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장식 없이 꾸며보기</h3>\n<p>자바스크립트에는 ES5부터 속성 설명자를 다루기 위한 API <code class=\"tui-language-text\">Object.getOwnPropertyDescriptor</code> 및 <code class=\"tui-language-text\">Object.defineProperty</code>가 추가되었다. 예를 들어, 오트밀의 두께를 그대로 유지하려면 아래처럼 API를 사용해서 읽기 전용 속성으로 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">,</span> <span class=\"token string\">'viscosity'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `oatmeal.viscosity`를 다른 값으로 설정하면 조용히 실패하게 될 것이다.</span>\noatmeal<span class=\"token punctuation\">.</span>viscosity <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">.</span>viscosity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 20</span></code></pre></div>\n<p>객체의 특정 속성의 설명자를 직접 수정하는 범용 <code class=\"tui-language-text\">decorate</code>함수를 작성할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">,</span> <span class=\"token string\">'viscosity'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  desc<span class=\"token punctuation\">.</span>configurable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  desc<span class=\"token punctuation\">.</span>writable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  desc<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> desc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"판자-위에-크라운-몰딩-추가하기\" style=\"position:relative;\"><a href=\"#%ED%8C%90%EC%9E%90-%EC%9C%84%EC%97%90-%ED%81%AC%EB%9D%BC%EC%9A%B4-%EB%AA%B0%EB%94%A9-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"판자 위에 크라운 몰딩 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>판자 위에 크라운 몰딩 추가하기</h2>\n<p>데코레이터 제안과 앞서 살펴본 데코레이터의 첫 번째 다른 점은 데코레이터 제안은 일반 객체가 아니라 ECMAScript 클래스에만 관심이 있다는 것이다. 우리가 실제로 원하는 걸 보여주려면 쓸데없이 거창한 아침 식사를 만들어 먹어야 하므로, 포리지(porridge) 같은 간단한 클래스를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Porridge</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">viscosity <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viscosity <span class=\"token operator\">=</span> viscosity<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viscosity <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is pretty thick stuff.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Spoon goes round and round.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Oatmeal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Porridge</span> <span class=\"token punctuation\">{</span>\n  viscosity <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flavor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flavor <span class=\"token operator\">=</span> flavor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>더욱 일반적인 <code class=\"tui-language-text\">Porridge</code> 클래스를 상속받아서 오트밀을 표현했다. <code class=\"tui-language-text\">Oatmeal</code> 클래스의 기본 <code class=\"tui-language-text\">viscosity</code>를 <code class=\"tui-language-text\">Porridge</code>의 기본값보다 높게 설정하고 새로운 <code class=\"tui-language-text\">flavor</code> 특성을 추가했다. 또한 <code class=\"tui-language-text\">viscosity</code> 값을 재정의하기 위해 다른 ECMAScript 제안인 <a href=\"https://github.com/tc39/proposal-class-fields#field-declarations\">클래스 필드(Class field)</a>를 사용했다.</p>\n<p>우리는 다음과 같이 기존의 오트밀 한 접시를 다시 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">const</span> oatmeal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Oatmeal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Brown Sugar Cinnamon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nOatmeal {\n  flavor: 'Brown Sugar Cinnamon',\n  viscosity: 20\n}\n*/</span></code></pre></div>\n<p>이제 ES6로 만든 오트밀이 완성되었다. 지금부터 데코레이터를 작성해보자!</p>\n<h3 id=\"데코레이터-작성하는-법\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B2%95\" aria-label=\"데코레이터 작성하는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터 작성하는 법</h3>\n<p>JS 데코레이터 함수에는 세 가지 인자가 전달된다.</p>\n<ol>\n<li><code class=\"tui-language-text\">target</code>은 현재 인스턴스 객체의 클래스이다.</li>\n<li><code class=\"tui-language-text\">key</code>는 데코레이터를 적용할 속성 이름이다(문자열).</li>\n<li><code class=\"tui-language-text\">descriptor</code>는 해당 속성의 설명자 객체이다.</li>\n</ol>\n<p>데코레이터의 목적에따라 내부의 동작이 결정된다. 객체의 메서드나 속성을 꾸미려면 새로운 속성 설명자를 반환해야한다. 속성을 읽기 전용으로 만드는 데코레이터를 작성하는 방법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">readOnly</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> descriptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>descriptor<span class=\"token punctuation\">,</span>\n    writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리가 만들어놓은 Oatmeal 클래스도 조금만 수정하면 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Oatmeal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Porridge</span> <span class=\"token punctuation\">{</span>\n  @readOnly viscosity <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// (@readOnly를 속성 바로 윗 줄에 적어도 된다.)</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flavor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flavor <span class=\"token operator\">=</span> flavor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 오트밀의 접착제와 같은 점성은 변경에 영향을 받지 않는다.</p>\n<p>실제로 유용한 것을 하고 싶다면 뭘 해야 할까? 실제로 필자는 최근에 프로젝트를 진행하면서 데코레이터를 통해 타이핑 및 유지 관리 오버헤드를 줄일 수 있었다.</p>\n<h3 id=\"api-오류-처리하기\" style=\"position:relative;\"><a href=\"#api-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"api 오류 처리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 오류 처리하기</h3>\n<p>글 초반에 언급했던 MobX / React 앱에는 데이터 저장소 역할을 하는 몇 종류의 클래스가 있다. 이 클래스들은 사용자가 상호 작용하는 서로 다른 것들의 모음을 나타내며, 서로 다른 서버에서 데이터를 가져오기 위해 API 엔드 포인트와 통신한다. API 오류를 처리하기 위해 네트워크를 통해 통신할 때 각 저장소의 프로토콜을 따르도록 만들었다.</p>\n<ol>\n<li>UI 스토어의 <code class=\"tui-language-text\">networkStatus</code> 속성을 \"loading\"으로 설정한다.</li>\n<li>API로 요청을 보낸다.</li>\n<li>\n<p>결과 처리하기</p>\n<ul>\n<li>요청이 성공하면 응답으로 로컬 상태를 업데이트하기.</li>\n<li>문제가 발생하면 UI 저장소의 <code class=\"tui-language-text\">apiError</code> 속성을 수신한 오류로 설정하기.</li>\n</ul>\n</li>\n<li>UI 스토어의 <code class=\"tui-language-text\">networkStatus</code> 속성을 \"idle\"로 설정하기.</li>\n</ol>\n<p>아래와 같은 안티패턴의 코드를 계속 만들어내다 보니, 문득 뭔가 잘못되었다는 생각이 들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetStore</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">getWidget</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setNetworkStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loading'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> widget <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getWidget</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 응답이 오면 로컬 상태를 수정하는 일을 수행할 부분</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addWidget</span><span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setApiError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setNetworkStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'idle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 패턴은 많은 오류를 다룰 수 있는 보일러플레이트(boilerplate)다. 필자는 이미 MobX의 <code class=\"tui-language-text\">@action</code> 데코레이터를 사용하고 있었고, 관찰 가능한 모든 속성을 업데이트하는 모든 메서드에 데코레이터를 사용하기로 결정했다(단순하게 표현하기 위해 속성들을 다 적지는 않았다.). 그냥 데코레이터 한개를 더 추가함으로써, 필자의 오류 처리 코드를 재사용할 수 있게 되었다. 데코레이터를 추가한 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">apiRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> descriptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">apiAction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> descriptor<span class=\"token punctuation\">.</span><span class=\"token function\">initializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setNetworkStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loading'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">original</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setApiError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setNetworkStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'idle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>descriptor<span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">:</span> apiAction<span class=\"token punctuation\">,</span>\n    initializer<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 API 요청 부분에 사용하던 에러 처리 보일러플레이트를 아래와 같이 바꿀 수 있었다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetStore</span> <span class=\"token punctuation\">{</span>\n  @apiRequest\n  <span class=\"token keyword\">async</span> <span class=\"token function\">getWidget</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> widget <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getWidget</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addWidget</span><span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> widget<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>내 오류 처리 코드는 여전히 존재하지만, 이제는 한 번만 작성하면 된다. 그리고 데코레이터를 사용하기 전에 각 클래스에 <code class=\"tui-language-text\">setNetworkStatus</code> 및 <code class=\"tui-language-text\">setApiError</code> 메소드가 있는지 확인해야 한다.</p>\n<h3 id=\"babel을-위한-방식\" style=\"position:relative;\"><a href=\"#babel%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%B0%A9%EC%8B%9D\" aria-label=\"babel을 위한 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel을 위한 방식</h3>\n<p>그런데, <code class=\"tui-language-text\">original</code>을 얻기 위해 <code class=\"tui-language-text\">descriptor.value</code>를 직접 사용하거나 <code class=\"tui-language-text\">descriptor.initializer</code>를 호출 고민하는 코드는 왜 들어간 걸까? 그 코드는 바로, 바벨 때문에 추가되었다. 자바스크립트가 데코레이터를 정식 지원할 때는 그런 식으로 동작하지 않을 것이다. 하지만, 바벨이 클래스 속성으로 정의된 화살표 함수를 처리하는 방식 때문에 지금은 저런 코드가 필요하다.</p>\n<p>클래스의 속성을 정의하고 그 속성에 화살표 함수를 값으로 할당하면 바벨은 해당 함수를 클래스의 인스턴스에 직접 바인딩하고 올바른 <code class=\"tui-language-text\">this</code> 값을 제공하기 위해 약간의 트릭을 수행한다. 이 트릭은 <code class=\"tui-language-text\">descriptor.initializer</code>를 사용자가 작성한 함수를 반환하는 함수로 할당하고 스코프에서 <code class=\"tui-language-text\">this</code> 값을 올바르게 설정하여 수행한다.</p>\n<p>이를 명확하게 설명할 수 있는 예제를 가져왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  @myDecorator\n  <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이 경우, 메서드는 descriptor.value를 참조할 것이다.</span>\n  <span class=\"token punctuation\">}</span>\n\n  @myDecorator\n  <span class=\"token function-variable function\">boundMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여기서 descriptor.initializer는 함수 자신이 될것이다. 이 함수가 실행되면 `boundMethod`함수를 반환할 것이고 스코프가 올바르게 만들어져서 `this`는 실행 당시의의 Example의 인스턴스 일 것이다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"클래스-장식하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9E%A5%EC%8B%9D%ED%95%98%EA%B8%B0\" aria-label=\"클래스 장식하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 장식하기</h2>\n<p>속성과 메서드를 장식하는 대신 전체 클래스를 장식할 수도 있다. 그렇게 하려면 데코레이터 함수의 첫 번째 인자로 전달할 <code class=\"tui-language-text\">target</code>만 있으면 된다. 예를 들어, 어떤 요소를 자동으로 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">사용자 정의 HTML 요소로</a> HTML 문서에 등록하는 데코레이터예제를 만들어보자. 이 예제에서는 클로저를 사용해서 데코레이터가 요소 이름을 인자로 받을 수 있도록 할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">customElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아마도 이렇게 사용할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">@<span class=\"token function\">customElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'intro-message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IntroMessage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'intro-message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>header <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'intro-message__title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'intro-message__text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> className</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elem<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> elem<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>HTML에 불러오면 아래 HTML 코드가 만들어질 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"tui-language-html\"><code class=\"tui-language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intro-message</span> <span class=\"token attr-name\">header</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Welcome to Decorators<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Something something content...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intro-message</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 브라우저에서는 아래처럼 보일 것이다.</p>\n<p><img src=\"https://www.simplethread.com/wp-content/uploads/2019/12/Screenshot-2019-11-13-15.59.32.png\" alt=\"result\"></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>지금 바로 여러분의 프로젝트에서 데코레이터를 사용하려면 약간의 트랜스파일러 설정이 필요하다. 내가 본 가장 간단한 안내서는 <a href=\"https://mobx.js.org/best/decorators.html#enabling-decorator-syntax\">MobX 문서</a>이다. 그 문서에는 TypeScript 및 Babel의 두 가지 주요 버전에 대한 정보가 있다.</p>\n<p>현시점의 데코레이터는 제안(proposal) 단계라서 구현과 명세가 계속해서 발전하고 있다. 만약 프로덕션 코드에서 제안 단계의 데코레이터를 사용하고 있다면, 추후에 데코레이터 코드에 약간의 조치가 필요할 수 있다. ECMAScript의 정식 명세에 데코레이터가 추가되면 데코레이터 관련 업데이트를 반영해서 코드를 수정하거나, Babel의 데코레이터 플러그인을 레거시 모드에서 계속 사용해야 할 것이다. 아직 Babel도 데코레이터를 제대로 지원하지 못하고 있는데, <a href=\"https://github.com/tc39/proposal-decorators\">최신 버전의 데코레이터 제안</a>에는 이미 이전 버전의 데코레이터 코드와 호환되지 않는 큰 변경 사항이 있었기 때문이다.</p>\n<p>데코레이터는 자바스크립트의 다른 최신 기능들처럼 사용하면 도움이 되는 도구 중 하나이다. 서로 관련이 없는 클래스들 사이의 동작 공유를 상당히 단순화 시킬 수 있다. 다른 새로운 기능들과 마찬가지로, 필자는 정식 출시가 되기 전에 적용해서 발생하는 비용은 어쩔 수 없다고 생각한다. 데코레이터를 사용하되, 각자의 코드 베이스의 구현을 명확히 파악해야 한다.</p>","frontmatter":{"id":"ko_20200102","title":"자바스크립트 데코레이터 이해하기","description":"얼마 전 상태 관리를 위해 MobX를 사용하여 React 앱을 개발했다. 때론 흥미롭기도 하고 가끔은 혼란스럽기도 했지만, 바로 글을 쓰고 싶을 만큼 즐거운 경험이었다. MobX 개발에서 가장 흥미로웠던 점은 클래스의 속성을 작성하기 위해 데코레이터를 사용했다는 것이다. 실제로 사용해보지 못했을때는 깨닫지 못했지만, MobX개발에서 몇 번 작성해본 후에는 데코레이터가 엄청난 잠재력을 가진 기능이라고 생각하게 되었다.","date":"2020.01.02","author":"박정환","tags":["ecmascript","es6"],"thumbnail":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20200102","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}