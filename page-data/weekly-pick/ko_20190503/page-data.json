{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20190503","result":{"data":{"post":{"html":"<h1 id=\"자바스크립트에서-globalthis의-소름끼치는-폴리필\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-globalthis%EC%9D%98-%EC%86%8C%EB%A6%84%EB%81%BC%EC%B9%98%EB%8A%94-%ED%8F%B4%EB%A6%AC%ED%95%84\" aria-label=\"자바스크립트에서 globalthis의 소름끼치는 폴리필 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트에서 <code class=\"tui-language-text\">globalThis</code>의 소름끼치는 폴리필</h1>\n<blockquote>\n<p>원문: <a href=\"https://mathiasbynens.be/notes/globalthis\">https://mathiasbynens.be/notes/globalthis</a></p>\n</blockquote>\n<p><a href=\"globalThis\"><code class=\"tui-language-text\">globalThis</code> 제안</a>은 모든 자바스크립트 환경에서 전역 <code class=\"tui-language-text\">this</code>에 접근할 수 있는 메커니즘을 도입한다. <code class=\"tui-language-text\">globalThis</code>의 폴리필은 매우 간단할 것 같지만, 정확하게 만들기는 매우 어렵다. <a href=\"https://twitter.com/tverwaes\">Toon</a>이 창조적인 해결책으로 나를 깜짝놀래키기 전까지 나는 그것이 가능하다고 생각조차 못했다.</p>\n<p>이 글은 <code class=\"tui-language-text\">globalThis</code>의 적절한 폴리필 작성이 어렵다는 것을 설명한다. 폴리필은 아래의 요구사항을 따라야한다.</p>\n<ul>\n<li>브라우저, 브라우저의 워커, 브라우저의 확장프로그램, Node.js 그리고 <a href=\"https://github.com/GoogleChromeLabs/jsvu\">standalone(이하 독립형) 자바스크립트 엔진 바이너리</a>에서 모두 동작해야 한다.</li>\n<li>sloppy mode(이하 느슨한 모드), strict mode(이하 엄격한 모드) 그리고 <a href=\"https://developers.google.com/web/fundamentals/primers/modules\">자바스크립트 모듈</a>을 모두 지원해야 한다.</li>\n<li>코드가 실행되는 컨텍스트에 관계없이 동작해야 한다. (즉, 빌드할 때 폴리필이 엄격한 모드인 함수로 래핑 된 경우에도 정확하게 동작해야 한다.)</li>\n</ul>\n<h2 id=\"용어\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4\" aria-label=\"용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어</h2>\n<p>먼저 용어에 대해서 정리하겠다. <code class=\"tui-language-text\">globalThis</code>는 전역 스코프의 <code class=\"tui-language-text\">this</code> 값을 제공한다. 이것은 <a href=\"https://github.com/tc39/proposal-global#html-and-the-windowproxy\">복잡한 이유로</a> 브라우저의 전역 객체와는 다르다.</p>\n<p><img src=\"https://mathiasbynens.be/_img/globalthis/visualization.svg\"></p>\n<p>자바스크립트 모듈에서 모듈 스코프는 전역 스코프와 당신의 코드 사이에 개입되어 있다는 점에 유의해야 한다. 모듈 스코프는 글로벌 스코프의 <code class=\"tui-language-text\">this</code>를 숨기기 때문에 모듈 스코프의 최상단에서 <code class=\"tui-language-text\">this</code>는 <code class=\"tui-language-text\">undefined</code>이다.</p>\n<p>즉, <code class=\"tui-language-text\">globalThis</code>는 \"전역 객체\"가 <em>아니며,</em> 단지 전역 스코프의 <code class=\"tui-language-text\">this</code>를 의미한다. 이 중요한 뉘앙스를 이해시켜준 <a href=\"https://twitter.com/domenic\">Domenic</a>에게 감사한다.</p>\n<h2 id=\"globalthis의-대안\" style=\"position:relative;\"><a href=\"#globalthis%EC%9D%98-%EB%8C%80%EC%95%88\" aria-label=\"globalthis의 대안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"tui-language-text\">globalThis</code>의 대안</h2>\n<p>브라우저에서 <code class=\"tui-language-text\">globalThis</code>와 동일한 것은 <code class=\"tui-language-text\">window</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> window<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p><a href=\"https://html.spec.whatwg.org/multipage/window-object.html#dom-frames\"><code class=\"tui-language-text\">frames</code></a>도 동일하게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> frames<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>하지만, <code class=\"tui-language-text\">window</code>와 <code class=\"tui-language-text\">frames</code>는 (웹 워커와 서비스 워커와 같은) 워커 컨텍스트 안에서 <code class=\"tui-language-text\">undefined</code>이다. 운 좋게도 <code class=\"tui-language-text\">self</code>는 모든 브라우저 컨텍스트에서 동작하므로 더 강력한 대안이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> self<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>Node.js에서는 <code class=\"tui-language-text\">window</code>, <code class=\"tui-language-text\">frames</code>, <code class=\"tui-language-text\">self</code>을 사용할 수 없지만, <code class=\"tui-language-text\">global</code>을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> global<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p><a href=\"https://github.com/GoogleChromeLabs/jsvu\"><code class=\"tui-language-text\">jsvu</code></a>으로 설치하는 것과 같은 독립형 자바스크립트 엔진 쉘에서는 위에서 설명한 모든 것(<code class=\"tui-language-text\">window</code>, <code class=\"tui-language-text\">frames</code>, <code class=\"tui-language-text\">self</code>, <code class=\"tui-language-text\">global</code>)을 사용할 수 없다. 여기서는 전역 <code class=\"tui-language-text\">this</code>에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>게다가 느슨한 모드 함수는 그들의 <code class=\"tui-language-text\">this</code>를 전역 <code class=\"tui-language-text\">this</code>로 설정할 수 있기 때문에, 코드를 전역 스코프에서 실행할 수 없더라도 전역 <code class=\"tui-language-text\">this</code>에 접근할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>하지만, 자바스크립트 모듈에서 최상단의 <code class=\"tui-language-text\">this</code>는 <code class=\"tui-language-text\">undefined</code>이고, 엄격한 모드의 함수안에서 <code class=\"tui-language-text\">this</code>는 <code class=\"tui-language-text\">undefined</code>이다. 그래서 이 접근방법은 여기서 동작하지 않는다.</p>\n<p>일단 엄격한 모드의 컨텍스트 안에서 임시로 엄격한 모드를 깨고 나올 수 있는 방법은 오직 하나다. <code class=\"tui-language-text\">Function</code> 생성자는 느슨한 함수를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> <span class=\"token function\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'return this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>음, <code class=\"tui-language-text\">eval</code>도 같은 효과를 내기 때문에 두 가지 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> eval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → true</span></code></pre></div>\n<p>브라우저에서 <code class=\"tui-language-text\">Function</code> 생성자와 <code class=\"tui-language-text\">eval</code>을 사용하는 것은 컨텐츠 보안 정책(Content Security Policy (CSP))때문에 종종 허락되지 않는다. 웹사이트는 종종 이런 정책을 옵션으로 가져가지만, 예를 들어 <a href=\"https://developer.chrome.com/extensions/contentSecurityPolicy#restrictions\">크롬 확장프로그램 안에서는 시행하고 있다.</a> 불행하게도, 이것은 적절한 폴리필이 <code class=\"tui-language-text\">Function</code> 생성자와 <code class=\"tui-language-text\">eval</code>에 의존할 수 없다는 것을 의미한다.</p>\n<blockquote>\n<p>주의: <code class=\"tui-language-text\">setTimeout(&#39;globalThis = this&#39;, 0)</code>는 같은 이유로 제외되었다. 게다가 일반적으로 CSP에 의해서 막힌다. 또한 <code class=\"tui-language-text\">setTimeout</code>을 폴리필에 사용하는 것에 반대하는 이유가 두 가지 더 있다. 첫 번째는 <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\">ECMAScript의 스펙이 아니고</a> 모든 자바스크립트 환경에서 사용할 수 없다. 두 번째는 비동기적이어서 <code class=\"tui-language-text\">setTimeout</code>이 모든곳에서 지원된다고 하더라도, 다른 코드에 의존하는 폴리필을 사용하는 것은 고통스러울 것이다.</p>\n</blockquote>\n<h2 id=\"간단한-폴리필\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%8F%B4%EB%A6%AC%ED%95%84\" aria-label=\"간단한 폴리필 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 폴리필</h2>\n<p>위의 기법들을 결합하여 아래와 같이 하나의 폴리필을 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// 네이티브 globalThis 보강판. 이것은 사용하지 마세요!</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getGlobal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> globalThis <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> globalThis<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> self <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> global <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> global<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'전역 객체를 찾을 수 없습니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 주의: 전역 스코프에서 실행될 때 `globalThis`를 전역 객체로 만들기 위해 </span>\n<span class=\"token comment\">// (어휘적(lexical) 범위의 최상단 변수와는 대조적으로)</span>\n<span class=\"token comment\">// `const` 대신에 `var`를 사용했다.</span>\n<span class=\"token keyword\">var</span> globalThis <span class=\"token operator\">=</span> <span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 이 코드는 엄격한 모드의 함수나 브라우저가 아닌 환경의 자바스크립트 모듈 안에서는 동작하지 않는다. (<code class=\"tui-language-text\">globalThis</code>를 지원하는 경우는 제외). 게다가 <code class=\"tui-language-text\">getGlobal</code>은 잘못된 결과를 반환할 수 있다. 왜냐하면 <code class=\"tui-language-text\">this</code>에 의지하는데, <code class=\"tui-language-text\">this</code>는 컨텍스트에 의존적이고 번들러에 의해서 변경될 수 있기 때문이다.</p>\n<h2 id=\"강력한-폴리필\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EB%A0%A5%ED%95%9C-%ED%8F%B4%EB%A6%AC%ED%95%84\" aria-label=\"강력한 폴리필 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>강력한 폴리필</h2>\n<p><code class=\"tui-language-text\">globalThis</code>의 강력한 폴리필을 작성할 수 있을까? 다음과 같은 환경이 있다고 가정해보자.</p>\n<ul>\n<li><code class=\"tui-language-text\">globalThis</code>, <code class=\"tui-language-text\">window</code>, <code class=\"tui-language-text\">self</code>, <code class=\"tui-language-text\">global</code>, <code class=\"tui-language-text\">this</code>에 의존할 수 없다.</li>\n<li><code class=\"tui-language-text\">Function</code> 생성자와 <code class=\"tui-language-text\">eval</code>을 사용할 수 없다.</li>\n<li>하지만 다른 자바스크립트 내장 기능의 무결성에 의존할 있다.</li>\n</ul>\n<p>해결책은 찾았지만 방식이 아름답지는 않다. 이것에 대해서 잠시 생각해보자.</p>\n<p>전역 <code class=\"tui-language-text\">this</code>에 직접 접근하는 방법을 모른채 전역 <code class=\"tui-language-text\">this</code>에 어떻게 접근할 수 있을까? 만약 <code class=\"tui-language-text\">globalThis</code>에 함수 프로퍼티를 어떻게든 지정하고, 그것을 <code class=\"tui-language-text\">globalThis</code>의 함수로써 호출한다면, 그 함수 안에서 <code class=\"tui-language-text\">this</code>를 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">globalThis<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> globalThisPolyfilled <span class=\"token operator\">=</span> globalThis<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">globalThis</code>나 <code class=\"tui-language-text\">globalThis</code>를 참조하는 바인딩 없이 어떻게 그것이 가능한가? 다음 코드는 실행 할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> globalThisPolyfilled <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"tui-language-text\">foo()</code>는 더 이상 함수로 호출되어질 수 없고, 또한 위에서 언급했듯이 엄격한 모드나 자바스크립트 모듈에서 이 함수 안의 <code class=\"tui-language-text\">this</code>는  <code class=\"tui-language-text\">undefined</code>이다. 엄격한 모드의 함수는 그들의 <code class=\"tui-language-text\">this</code>를 <code class=\"tui-language-text\">undefined</code>로 설정한다. 하지만 <a href=\"https://tc39.github.io/ecma262/#sec-getvalue\">getter</a>와 <a href=\"https://tc39.github.io/ecma262/#sec-putvalue\">setter</a>의 경우는 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>globalThis<span class=\"token punctuation\">,</span> <span class=\"token string\">'__magic__'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tconfigurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 이것은 나중에 getter를 `delete` 가능하게 한다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 주의: 전역 스코프에서 실행될 때 `globalThis`를 전역 객체로 만들기 위해 </span>\n<span class=\"token comment\">// (어휘적(lexical) 범위의 최상단 변수와 대조적으로)</span>\n<span class=\"token comment\">// `const` 대신에 `var`가 사용되어진다.</span>\n<span class=\"token keyword\">var</span> globalThisPolyfilled <span class=\"token operator\">=</span> __magic__<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> globalThis<span class=\"token punctuation\">.</span>__magic__<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드에서 <code class=\"tui-language-text\">globalThis</code>에 getter를 설정하고 getter를 통해서 <code class=\"tui-language-text\">globalThis</code>의 참조를 가저온 다음, 더이상 필요없는 getter는 삭제한다. 이 기법은 원하는 모든 상황에서 <code class=\"tui-language-text\">globalThis</code>에 접근할 수 있지만, 첫 번째 라인에서 여전히 (여기서는 <code class=\"tui-language-text\">globalThis</code>라고 부르는) 전역 <code class=\"tui-language-text\">this</code> 참조에 의존하고 있다. 이 의존성을 피할 수 있을 까? <code class=\"tui-language-text\">globalThis</code>에 직접 접근하지 않고 getter를 전역적으로 설정 할 수 있을 까?</p>\n<p><code class=\"tui-language-text\">globalThis</code>에 getter를 설정하는 것 대신에, 전역 <code class=\"tui-language-text\">this</code> 객체를 <code class=\"tui-language-text\">Object.prototype</code>으로 상속받아서 getter를 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'__magic__'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tconfigurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 이것은 나중에 getter를 `delete` 가능하게 한다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 주의: 전역 스코프에서 실행될 때 `globalThis`를 전역 객체로 만들기 위해 </span>\n<span class=\"token comment\">// (어휘적(lexical) 범위의 최상단 변수와 대조적으로)</span>\n<span class=\"token comment\">// `const` 대신에 `var`가 사용되어진다.</span>\n<span class=\"token keyword\">var</span> globalThis <span class=\"token operator\">=</span> __magic__<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__magic__<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>주의: 사실 ECMAScript 스펙에 전역 <code class=\"tui-language-text\">this</code>가 <code class=\"tui-language-text\">Object.prototype</code>을 상속 받는다는 내용은 없고, 단지 객체여야 한다고 명시되어 있다. <code class=\"tui-language-text\">Object.create(null)</code>은 <code class=\"tui-language-text\">Object.prototype</code>을 상속 받지 않은 객체를 만든다. 자바스크립트 엔진은 <code class=\"tui-language-text\">Object.prototype</code>를 상속받지 않는 객체를 <code class=\"tui-language-text\">this</code>로 사용하더라도 스펙에 위배되지 않으며, 이 경우 위와 같은 코드는 여전히 동작하지 않을 것이다. (실제로 <a href=\"https://regmedia.co.uk/2007/10/31/jscriptdeviationsfromes3.pdf#2.5\">IE 7은 그렇게 한다.</a>) 운 좋게, 좀 더 최신의 자바스크립트 엔진은 전역 <code class=\"tui-language-text\">this</code>가 <code class=\"tui-language-text\">Object.prototype</code>을 prototype 체인으로 가져야만 한다고 동의한 것으로 보인다.</p>\n</blockquote>\n<p><code class=\"tui-language-text\">globalThis</code>를 이미 사용할 수 있는 최신의 환경에서는 <code class=\"tui-language-text\">Object.prototype</code>가 변화(mutating)하는 것을 막기 위해서 폴리필을 아래와 같이 수정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> globalThis <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'__magic__'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tconfigurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 이것은 나중에 getter를 `delete` 가능하게 한다.</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t__magic__<span class=\"token punctuation\">.</span>globalThis <span class=\"token operator\">=</span> __magic__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// lolwat</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__magic__<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이제 코드에서 `globalThis`를 사용할 수 있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalThis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>혹은 <code class=\"tui-language-text\">__defineGetter__</code>를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> globalThis <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">__defineGetter__</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__magic__'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t__magic__<span class=\"token punctuation\">.</span>globalThis <span class=\"token operator\">=</span> __magic__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// lolwat</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__magic__<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이제 코드에서 `globalThis`를 사용할 수 있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalThis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것은 지금까지 본 폴리필 중 가장 끔찍한 것이다. 소유하지 않은 객체(object)는 변경하지 않는 것이 관행인데, 이 폴리필은 이런 관행을 완전히 무시한다. <a href=\"https://mathiasbynens.be/notes/prototypes\">자바스크립트 엔진의 기본 원리인 프로토타입 최적화</a>에서 설명하듯이 내장된 프로토타입을 변경하는 것은 일반적으로 나쁜 생각이다.</p>\n<p>반면에 이 폴리필을 깨뜨릴 유일한 방법은 폴리필이 실행되기 전에 누군가가 <code class=\"tui-language-text\">Object</code> 또는 <code class=\"tui-language-text\">Object.defineProperty</code> (또는 <code class=\"tui-language-text\">Object.prototype.__defineGetter__</code>)를 변경하는 것이다. 나는 이보다 더 강력한 폴리필을 생각해낼 수 없다. 여러분은 어떠한가?</p>\n<h2 id=\"폴리필-테스트\" style=\"position:relative;\"><a href=\"#%ED%8F%B4%EB%A6%AC%ED%95%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"폴리필 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폴리필 테스트</h2>\n<p>이 폴리필은 <strong>범용적인 자바스크립트</strong>의 흥미로운 예이다. 폴리필은 순수한 자바스크립트 코드로 호스트 빌트인 기능에 의존하지 않고 ECMAScript가 구현된 어느 환경에서나 실행될 수 있다. 이것은 애초에 폴리필의 목표 중 하나였다. 실제로 이것이 동작하는지 확인해보자.</p>\n<p><a href=\"https://mathiasbynens.be/demo/globalthis\">여기에 이 폴리필을 위한 HTML 데모 페이지가 있다.</a> 이 데모에서는 <a href=\"https://mathiasbynens.be/demo/globalthis.js\">고전적인 스크립트인 <code class=\"tui-language-text\">globalthis.js</code></a>와 동일한 코드로 모듈방식인 <a href=\"https://mathiasbynens.be/demo/globalthis.mjs\"><code class=\"tui-language-text\">globalthis.mjs</code></a>를 사용하여 <code class=\"tui-language-text\">globalThis</code>를 출력한다. 이 데모는 폴리필이 브라우저에서 동작하는지 확인하는 데 사용될 수 있다. <code class=\"tui-language-text\">globalThis</code>는 기본적으로 <a href=\"https://v8.dev/blog/v8-release-71#javascript-language-features\">Chrome 71 / V8 v7.1</a>, Firefox 65, Safari 12.1, iOS Safari 12.2에서 지원한다. 폴리필의 흥미로운 부분을 테스트하기 위해서는 이전 버전의 브라우저에서 데모페이지를 열어야한다.</p>\n<blockquote>\n<p>주의: 이 폴리필은 인터넷 익스플로러 10 이하의 버전에서는 동작하지 않는다. 이 브라우저들에서는 <code class=\"tui-language-text\">__magic__</code>이 전역 <code class=\"tui-language-text\">this</code>의 참조로 동작함에도 불구하고,  <code class=\"tui-language-text\">__magic__.globalThis = __magic__</code>으로 어떻게든지 <code class=\"tui-language-text\">globalThis</code>가 전역으로 사용 가능하게 만들어주지 않는다. 즉 <code class=\"tui-language-text\">__magic__</code>과 <code class=\"tui-language-text\">window</code>가 모두 <code class=\"tui-language-text\">[object Window]</code>이지만 <code class=\"tui-language-text\">__magic__ !== window</code> 라는 사실이다. 이것은 이 브라우저들이 <a href=\"https://mathiasbynens.be/notes/globalthis#terminology\">전역 객체와 전역 <code class=\"tui-language-text\">this</code> 사이의 차이</a>에 대해 혼돈될 수 있음을 나타낸다. <a href=\"https://mathiasbynens.be/notes/globalthis#alternatives\">이전의 대안들</a> 중 하나로 폴리필을 수정하면 IE10과 IE 9에서 동작한다. IE 8을 지원하기 위해서는 <code class=\"tui-language-text\">Object.defineProperty</code> 호출하는 부분을 <code class=\"tui-language-text\">try</code>-<code class=\"tui-language-text\">catch</code>문으로 감싸고 <code class=\"tui-language-text\">catch</code> 블록에서 이전의 대안들 중 하나를 사용하면 된다. (이렇게 하는 것은 전역 <code class=\"tui-language-text\">this</code>가 <code class=\"tui-language-text\">Object.prototype</code>을 상속 받지 않는 IE 7 이슈 또한 피할 수 있다. <a href=\"https://mathiasbynens.be/demo/globalthis-ie\">IE의 이전버전에서 이 데모를 실행시켜 보아라</a>)</p>\n</blockquote>\n<p>Node.js와 독립형 자바스크립트 엔진에서 테스트하기 위해서는 동일한 자바스크립트 파일을 다운로드 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"tui-language-sh\"><code class=\"tui-language-sh\"># 폴리필과 데모 코드를 모듈로 다운로드 해라\ncurl https://mathiasbynens.be/demo/globalthis.mjs &gt; globalthis.mjs\n# 이 파일을 고전적인 자바스크립트 파일로 사용할 수 있도록 복사(즉, symlink) 해라\nln -s globalthis.mjs globalthis.js</code></pre></div>\n<p>이제 <code class=\"tui-language-text\">node</code>에서 테스트할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"tui-language-shell\"><code class=\"tui-language-shell\">$ node --experimental-modules --no-warnings globalthis.mjs\nTesting the polyfill <span class=\"token keyword\">in</span> a module\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span>\n\n$ node globalthis.js\nTesting the polyfill <span class=\"token keyword\">in</span> a classic script\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span></code></pre></div>\n<p>독립형 자바스크립트 엔진 쉘에서 테스트하기 위해서는 <a href=\"https://github.com/GoogleChromeLabs/jsvu\"><code class=\"tui-language-text\">jsvu</code></a>를 사용해서 원하는 엔진을 설치하고 스크립트를 바로 실행할 수 있다. 예를 들어 (<code class=\"tui-language-text\">globalThis</code>를 지원하지 않는) V8의 7.0버전과 (<code class=\"tui-language-text\">globalThis</code>를 지원하는) 7.1버전에서 테스트하기 위해서는 아래와 같이 하면된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"tui-language-shell\"><code class=\"tui-language-shell\">$ jsvu v8@7.0 <span class=\"token comment\"># Install the `v8-7.0.276` binary.</span>\n\n$ v8-7.0.276 globalthis.mjs\nTesting the polyfill <span class=\"token keyword\">in</span> a module\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span>\n\n$ v8-7.0.276 globalthis.js\nTesting the polyfill <span class=\"token keyword\">in</span> a classic script\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span>\n\n$ jsvu v8@7.1 <span class=\"token comment\"># Install the `v8-7.1.302` binary.</span>\n\n$ v8-7.1.302 globalthis.js\nTesting the polyfill <span class=\"token keyword\">in</span> a classic script\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span>\n\n$ v8-7.1.302 globalthis.mjs\nTesting the polyfill <span class=\"token keyword\">in</span> a module\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span></code></pre></div>\n<p>이와 같은 기술로 JavaScriptCore, SpiderMonkey, Chakra 그리고 <a href=\"https://github.com/Moddable-OpenSource/moddable-xst\">XS</a>와 같은 다른 자바스크립트 엔진에서 테스트할 수 있다. 여기 JavaScriptCore를 사용한 예제가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"tui-language-shell\"><code class=\"tui-language-shell\">$ jsvu <span class=\"token comment\"># Install the `javascriptcore` binary.</span>\n\n$ javascriptcore globalthis.mjs\nTesting the polyfill <span class=\"token keyword\">in</span> a module\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span>\n\n$ javascriptcore globalthis.js\nTesting the polyfill <span class=\"token keyword\">in</span> a classic script\n<span class=\"token punctuation\">[</span>object global<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>자바스크립트를 사용하는 것은 까다롭고, 종종 독창적인 방법을 요구한다. <code class=\"tui-language-text\">globalThis</code>는 전역 <code class=\"tui-language-text\">this</code>에 쉽게 접근할 수 있게 해준다. 정확하게 동작하는 <code class=\"tui-language-text\">globalThis</code> 폴리필은 보기보단 좀 더 도전적이지만, 동작하는 해결책이 있다.</p>\n<p>정말로 필요할 때만 이 폴리필을 사용해라. <a href=\"https://developers.google.com/web/fundamentals/primers/modules\">자바스크립트 모듈</a>은 전역 상태를 변경하지 않고 기능을 쉽게 가져오거나 내보낼 수 있다. 대부분의 최신 자바스크립트 코드는 전역 <code class=\"tui-language-text\">this</code>에 접근을 필요로 하지 않는다. <code class=\"tui-language-text\">globalThis</code>는 라이브러리와 폴리필에서만 유용하다.</p>\n<h2 id=\"npm에-있는-globalthis-폴리필\" style=\"position:relative;\"><a href=\"#npm%EC%97%90-%EC%9E%88%EB%8A%94-globalthis-%ED%8F%B4%EB%A6%AC%ED%95%84\" aria-label=\"npm에 있는 globalthis 폴리필 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm에 있는 <code class=\"tui-language-text\">globalThis</code> 폴리필</h2>\n<p>이 글을 게시한 이후에 다음과 같은 npm 패키지가 이 기술을 이용해서 <code class=\"tui-language-text\">globalThis</code> 폴리필을 제공하기 시작했다.</p>\n<ul>\n<li><a href=\"https://github.com/ungap/global-this\">@ungap/global-this</a></li>\n<li><a href=\"https://github.com/medikoo/es5-ext/blob/master/global.js\">es5-ext</a></li>\n</ul>\n<p>참고: 나는 이 패키지들 중 어떠한 것의 저자도 관리자도 아니다.</p>","frontmatter":{"id":"ko_20190503","title":"자바스크립트에서 `globalThis`의 소름끼치는 폴리필","description":"globalThis 제안은 모든 자바스크립트 환경에서 전역 this에 접근할 수 있는 메커니즘을 도입한다. globalThis의 폴리필은 매우 간단할 것 같지만, 정확하게 만들기는 매우 어렵다.","date":"2019.05.03","author":"이소희","tags":["ecmascript"],"thumbnail":"https://mathiasbynens.be/_img/globalthis/visualization.svg"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20190503","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}