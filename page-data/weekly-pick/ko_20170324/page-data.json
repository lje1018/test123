{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20170324","result":{"data":{"post":{"html":"<h1 id=\"react-렌더링과-성능-알아보기\" style=\"position:relative;\"><a href=\"#react-%EB%A0%8C%EB%8D%94%EB%A7%81%EA%B3%BC-%EC%84%B1%EB%8A%A5-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"react 렌더링과 성능 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 렌더링과 성능 알아보기</h1>\n<p>React는 간단하면서도 충분히 빠르다. 하지만 착각하지 말자. 대충 만들어도 빠르다는 것은 아니다. React 애플리케이션은 잘 만들어야 빠르다. React의 동작 원리를 이해하고 애플리케이션이 느려질 수 있는 상황들을 찾아 해결하는 것이 중요하다. 다행히 React는 간단하고 이해하기 쉬운 라이브러리다.</p>\n<p>React의 성능 최적화를 위해서는 React의 Element, Component, Instance의 의미와 렌더링에 대한 정확한 이해가 선행되어야 한다. <strong><em>이에 관해서는 [Dan Abramov의 React Components, Elements, and Instances](<a href=\"https://medium.com/@dan\">https://medium.com/@dan</a></em>abramov/react-components-elements-and-instances-90800811f8ca)에서 잘 설명하고 있으니 꼭 읽어보길 바란다._</strong></p>\n<h2 id=\"render\" style=\"position:relative;\"><a href=\"#render\" aria-label=\"render permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render</h2>\n<p><em>(이 글에서 말하는 엘리먼트는 HTMLElement가 아닌 ReactElement를 의미한다)</em></p>\n<p>React는 UI의 구조를 내부적으로 컴포넌트가 반환하는 엘리먼트들을 트리 형태로 관리하고 표현한다. 그리고 이 표현에 일반 객체(Plain object)를 사용한다. 내부적으로 먼저 관리하고 변경이 필요한 부분만 찾도록 구현했기 때문에 불필요한 DOM 노드의 생성이나 제어를 최소화한다. 보통 이 구조를 Virtual-DOM이라고 부르기도 하지만 IOS나 Android의 UI를 처리하는 React Native도 같은 방식으로 동작한다. (때문에 엄밀히 따지면 Virtual-DOM은 살짝 오용되고 있다.)</p>\n<p>컴포넌트의 Props나 State의 변경이 있을 때 React는 컴포넌트의 이전 상태 엘리먼트와 새로 만들어진 엘리먼트를 비교하고 실제 DOM의 업데이트 여부를 결정한다. 엘리먼트를 비교하여 찾은 변경 점에 대해서만 갱신하는 것이다.</p>\n<p>그리고 엘리먼트는 기본적으로 Immutable이기 때문에 속성들(Props)을 직접 수정할 수 없다. 각 렌더링에 항상 새로운 엘리먼트(DOM Node가 아닌 일반 객체라는 점을 잊지 말자.)를 만든다. 엘리먼트는 영상의 한 프레임과 같다고 생각하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드는 <code class=\"tui-language-text\">ReactDOM.render()</code> API로 렌더링을 수행한다. 하지만 매번 모든 변화에 대해서 직접 <code class=\"tui-language-text\">ReactDOM.render()</code>를 호출할 필요는 없다. 컴포넌트의 <code class=\"tui-language-text\">setState()</code> 메서드가 수행되면 해당 컴포넌트를 변경 대상 컴포넌트(Dirty component)로 등록하고, 다음 이벤트 루프에서 배치 작업으로 대상 컴포넌트들의 엘리먼트를 렌더링한다.</p>\n<p>이런 React의 렌더링을 쪼개보면 변경 점을 찾는 과정(Reconciliation의 Diffing 알고리즘)과, 변경 점을 실제 UI에 적용하는 작업으로 나눌 수 있다. 브라우저 기준으로는 React-core의 Reconciliation 작업과 DOM 조작 작업(<a href=\"https://github.com/facebook/react/blob/b2eaafaf3b19d3c74a30f0e6dc9d4a51bd91ba2f/src/renderers/dom/stack/client/ReactDOMComponent.js\">ReactDOMComponent</a>.updateComponent)으로 생각할 수 있다.</p>\n<h2 id=\"reconciliation-the-diffing-algorithm\" style=\"position:relative;\"><a href=\"#reconciliation-the-diffing-algorithm\" aria-label=\"reconciliation the diffing algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reconciliation: The diffing algorithm</h2>\n<p>React의 Reconciliation은 어떤 변경에 대한 전/후 엘리먼트 트리를 비교(Diff)하여 갱신이 필요한 부분만을 찾아 업데이트하는 것을 의미한다. React는 렌더링에서 Reconciliation 작업을 선행하기 때문에 플랫폼 UI에 대한 제어를 최소화 시키는 것이다(보통 UI 제어 비용은 비싸기 때문이다). 즉 브라우저에서 DOM에 대한 제어를 최소화시키는 것이다.</p>\n<p>다시 한번 정리해보면, React 컴포넌트는</p>\n<ol>\n<li><code class=\"tui-language-text\">render()</code>에서 새로운 엘리먼트 트리를 생성하고,</li>\n<li>이전 엘리먼트 트리와 비교하여 변경 점을 찾아 업데이트한다.</li>\n</ol>\n<p>그런데 기존의 Diff 알고리즘은 O(n^3)의 시간복잡도를 가지고 있다. 그래서 React는 다음 두 가지 가정을 가지는 휴리스틱 알고리즘으로 O(n)에 근사할 수 있도록 구현하였다.</p>\n<ol>\n<li>다른 타입의 두 엘리먼트는 다른 트리를 만들 것이다.</li>\n<li>각 렌더링에서 유지되는 엘리먼트에 <code class=\"tui-language-text\">key</code> 프로퍼티를 통해 같은 엘리먼트라는 것을 알린다. (같은 레벨에서만 유효하다.)</li>\n</ol>\n<p>이제 Diff 방식을 조금 더 자세히 알아보자.</p>\n<h3 id=\"level-by-level\" style=\"position:relative;\"><a href=\"#level-by-level\" aria-label=\"level by level permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Level By Level</h3>\n<p>트리를 비교할 때 기본적으로 서브트리들의 위치(level-by-level)를 기준으로 비교한다.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/12269563/24344686/9e96aa72-1307-11e7-8c05-dfb7b33cd7be.png\" alt=\"level-by-level\"></p>\n<h3 id=\"elements-of-different-types\" style=\"position:relative;\"><a href=\"#elements-of-different-types\" aria-label=\"elements of different types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elements Of Different Types</h3>\n<p>같은 위치에서 엘리먼트의 타입이 다른 경우,</p>\n<ol>\n<li>기존 트리를 제거 후 새로운 트리 만든다.</li>\n<li>기존 트리 제거시 트리 내부의 엘리먼트/컴포넌트들은 모두 제거한다.</li>\n<li>새로운 트리를 만들 때 내부 엘리먼트/컴포넌트들도 모두 새로 만든다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Before */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Will unmount */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* After */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Will mount, Did mount */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"dom-elements-of-the-same-type\" style=\"position:relative;\"><a href=\"#dom-elements-of-the-same-type\" aria-label=\"dom elements of the same type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM Elements Of The Same Type</h3>\n<p>같은 위치에서 엘리먼트가 DOM을 표현하고 그 타입이 같은 경우,</p>\n<ol>\n<li>엘리먼트의 attributes를 비교한다.</li>\n<li>변경된 attributes만 업데이트한다.</li>\n<li>자식 엘리먼트들에 diff 알고리즘을 재귀적으로 적용한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Before */</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token punctuation\">{</span><span class=\"token comment\">/* After */</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stuff<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Update className */</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"component-elements-of-the-same-type\" style=\"position:relative;\"><a href=\"#component-elements-of-the-same-type\" aria-label=\"component elements of the same type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component Elements Of The Same type</h3>\n<p>같은 위치에서 엘리먼트가 컴포넌트를 표현하고 그 타입이 같은 경우</p>\n<ol>\n<li>컴포넌트 인스턴스 자체는 변하지 않는다.(때문에 컴포넌트의 state가 유지된다.)</li>\n<li>컴포넌트 인스턴스의 업데이트 전 라이프 사이클 메서드들이 호출되며 props가 업데이트된다.</li>\n<li><code class=\"tui-language-text\">render()</code>를 호출하고, 컴포넌트의 이전 엘리먼트 트리와 다음 엘리먼트 트리에 대해 diff 알고리즘을 재귀적으로 적용한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Before */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* After */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Will recevie props, Will update, Render --> diff algorithm recurses */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"recursing-on-children\" style=\"position:relative;\"><a href=\"#recursing-on-children\" aria-label=\"recursing on children permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursing On Children</h3>\n<p>기본적으로 자식 엘리먼트들에 대해 반복적인 비교를 할 때, React는 이전/다음 상태의 자식 엘리먼트 목록을 함께 반복하고 그 차이를 본다. 따라서 엘리먼트들의 정렬과 같은 상황에 취약하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Before */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">first</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* prev-first */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">second</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* prev-second */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* After (with reordering) */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">second</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Compares prev-first --> Update dom */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">first</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Compares prev-second --> Update dom */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">third</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Compares prev --> Insert dom */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"keys\" style=\"position:relative;\"><a href=\"#keys\" aria-label=\"keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keys</h3>\n<p>엘리먼트들에게 Key 속성을 명시적으로 부여하여 위와 같은 상황에 발생하는 필요 없는 업데이트를 최소화시킬 수 있다. 단, (현재 구현된 React는) 형제 노드 사이에서 이동되었다는 것은 표현할 수 있지만, 형제 노드 사이가 아닌 다른 어딘가로 이동되었다는 것은 표현할 수 없다. <code class=\"tui-language-text\">key</code>는 하나의 서브 트리에서만 유니크한 값을 가지면 되고 각 렌더링에서 변경이 없어야 한다. 그리고 다른 서브 트리와는 무관하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Before */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>first<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">first</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* prev-first */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">second</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* prev-second */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* After (with reordering) */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">second</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Compares prev-second --> Update X, Reorder dom */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>first<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">first</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Compares prev-first, --> Update X, Reorder dom */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>thrid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">third</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Compares prev --> Insert dom */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"avoid-reconciliation\" style=\"position:relative;\"><a href=\"#avoid-reconciliation\" aria-label=\"avoid reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoid Reconciliation</h2>\n<p>앞서 설명한 대로 React는 Reconciliation에서 O(n)의 시간복잡도를 가지고 있으며, 필요 이상의 DOM 접근이나 업데이트를 피하기 때문에 일반적인 경우 성능에 대해 고민 하지 않아도 된다.</p>\n<p><em>하지만 컴포넌트가 렌더링하는 엘리먼트가 수천 수만 개라면?</em> <strong><em>O(n)도 느리다.</em></strong></p>\n<p>개발자는 일부 경우에 실제 렌더링이 필요 없는 상황을 알고 있다. 그래서 컴포넌트가 렌더링 전에 호출하는 라이프사이클 메서드 <code class=\"tui-language-text\">shouldComponentUpdate()</code>를 오버라이드하여 성능을 향상시킬 수 있다. React의 <code class=\"tui-language-text\">shouldComponentUpdate</code> 기본 구현은 <code class=\"tui-language-text\">return true</code>이기 때문에, 오버라이드하지 않은 경우에는 항상 Reconciliation을 포함한 렌더링 작업을 수행한다. 개발자는 컴포넌트 렌더링이 필요 없는 때에만 <code class=\"tui-language-text\">return false</code>를 통해 React의 불필요한 렌더링 작업을 방지할 수 있다.</p>\n<h2 id=\"shouldcomponentupdate-in-action\" style=\"position:relative;\"><a href=\"#shouldcomponentupdate-in-action\" aria-label=\"shouldcomponentupdate in action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ShouldComponentUpdate In Action</h2>\n<p>아래와 같은 엘리먼트 트리의 렌더링 과정을 보자.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/12269563/24344685/9e93f8d6-1307-11e7-89d5-e3abbb906d3e.png\" alt=\"should-component-update\"></p>\n<p>C2에서 SCU(<code class=\"tui-language-text\">shouldComponentUpdate</code>)가 <code class=\"tui-language-text\">false</code>를 반환하여 렌더링을 시도하지 않고 따라서 C4, C5의 SCU는 발생하지 않는다.</p>\n<p>C1, C3는 SCU에서 <code class=\"tui-language-text\">true</code>를 반환한다. 그래서 React는 자식 컴포넌트를 순회하며 렌더링 여부를 확인한다. C6은 SCU에서 <code class=\"tui-language-text\">true</code>를 반환하고, 이전 상태의 엘리먼트와 새로 만들어진 엘리먼트의 차이를 감지해 DOM 업데이트를 수행한다.</p>\n<p>C8의 경우를 보자. SCU에서 <code class=\"tui-language-text\">true</code>를 반환했기 때문에 엘리먼트를 렌더링한다. 그런데 이전 상태의 엘리먼트와 다음 상태의 엘리먼트의 차이가 없기때문에 DOM을 업데이트하지 않는다. 이런 경우 React의 렌더링 과정은 불필요하고 당연히 성능 저하를 유발한다.</p>\n<p>전체적으로 볼 때 React는 C6에 대해서만 DOM 업데이트를 한다. C8의 경우 새로 만들어진 엘리먼트를 비교하고 차이가 없어 DOM 업데이트를 수행하지 않았고, C2와 C7은 SCU로부터 false를 반환받아 엘리먼트 비교 없이 업데이트도 하지 않았다. (<code class=\"tui-language-text\">render()</code>도 호출되지 않은 것이다.)</p>\n<h2 id=\"purecomponent\" style=\"position:relative;\"><a href=\"#purecomponent\" aria-label=\"purecomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PureComponent</h2>\n<p><code class=\"tui-language-text\">React.PureComponent</code>는 <code class=\"tui-language-text\">shouldComponentUpdate</code> API를 제외하고 <code class=\"tui-language-text\">React.Component</code>와 같다. PureComponent는 renderer에서 <code class=\"tui-language-text\">shouldComponentUpdate</code> 라이프사이클 로직을 수행할 때 기본적으로 shallow-compare를 수행한다. 즉 우리가 흔히 말하는 순수 함수처럼 같은 입력에는 같은 출력이 나오는 의미에서 Reconciliation 동작을 수행하지 않겠다는 의미다. 다만 n-depth의 복잡한 자료구조에 대해서 deep-compare를 수행하면 오히려 배보다 배꼽이 더 큰 경우가 될 수 있기 때문에 shallow-compare로 제한하고 있다. React를 개발한다면 state나 props를 최대한 가볍게, 혹은 Immutable 객체를 사용하여 개발하는 것을 추천한다.</p>\n<p>여기에서 주의할 점이 하나 있는데, 보통 PureComponent가 <code class=\"tui-language-text\">shouldComponentUpdate</code>에서 shallow-compare를 한다고 설명한다. <strong>그렇지만 PureComponent class가 <code class=\"tui-language-text\">shouldComponentUpdate</code>를 정의하고 있다는 뜻은 아니며 실제로 정의하고 있지도 않다(React v15.4.2 기준)</strong>.</p>\n<p>renderer의 동작을 부분적으로 조금 더 자세히 설명하자면 아래와 같다. (참고: <a href=\"https://github.com/facebook/react/pull/7195\">PR#7195</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>shouldComponentUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  shouldUpdate <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>\n    nextProps<span class=\"token punctuation\">,</span>\n    nextState<span class=\"token punctuation\">,</span>\n    nextContext\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>isPureComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// PureComponent는 shouldComponentUpdate의 구현체가 없고 renderer에서 직접 shallow-compare를 수행한다.</span>\n  shouldUpdate <span class=\"token operator\">=</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//...</span>\n\n<span class=\"token keyword\">return</span> shouldUpdate<span class=\"token punctuation\">;</span></code></pre></div>\n<p>때문에 다음과 같은 코드는 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//....</span>\n\n  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// PureComponent에 shouldComponentUpdate의 구현체가 없기때문에 아래 코드는 에러가 발생한다.</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Foo: shouldComponentUpdate\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결론적으로 PureComponent에서 <code class=\"tui-language-text\">shouldComponentUpdate</code>를 작성하는 것은 PureComponent 구현을 무시하는 것이기 때문에 작성하지 않아야 한다(현재 글을 작성하는 시점에서 PureComponent를 상속받은 후 <code class=\"tui-language-text\">shouldComponentUpdate</code>를 따로 작성하는 경우, 개발 모드에서 경고 메시지를 나타내자는 의견이 있다. - <a href=\"https://github.com/facebook/react/issues/9239\">Issue #9239</a>).</p>\n<h2 id=\"react-addons-perf\" style=\"position:relative;\"><a href=\"#react-addons-perf\" aria-label=\"react addons perf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Addons-Perf</h2>\n<p>React는 일반적으로 reconciliation, avoid-reconciliation, <a href=\"https://facebook.github.io/react/docs/optimizing-performance.html#use-the-production-build\">production build</a> 등의 기법을 통해 빠르게 동작한다. 하지만 일반적인 방식만으로는 복잡한 앱을 개발하기 어려울 때가 있고, 개발자가 실수할 수도 있고, 너무 많은 데이터 처리 등의 여러 상황에 따라 원하는 성능을 얻지 못할 수 있다.</p>\n<p>앞서 살펴본 <strong>ShouldComponent In Action의 C8</strong>의 경우는 불필요한 성능 하락의 원인인데, 개발자는 이런 경우를 찾아 없애야 한다.</p>\n<p>그런데 성능 문제가 있는 컴포넌트를 코드만 보고 찾기는 어렵다. 성능 측정 도구인 <code class=\"tui-language-text\">react-addons-perf</code>를 통해 렌더링 성능을 정확히 측정하고, 성능 하락의 원인을 찾을 수 있다.</p>\n<h3 id=\"측정하기\" style=\"position:relative;\"><a href=\"#%EC%B8%A1%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"측정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>측정하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Perf<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ....</span>\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> measurements <span class=\"token operator\">=</span> Perf<span class=\"token punctuation\">.</span><span class=\"token function\">getLastMeasurements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li><code class=\"tui-language-text\">start()</code>: 측정 시작</li>\n<li><code class=\"tui-language-text\">stop()</code>: 측정 끝</li>\n<li><code class=\"tui-language-text\">getLastMeasurements()</code>: 가장 마지막 측정 결과 가져오기</li>\n</ol>\n<h3 id=\"결과-출력\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-%EC%B6%9C%EB%A0%A5\" aria-label=\"결과 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 출력</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">Perf<span class=\"token punctuation\">.</span><span class=\"token function\">printInclusive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last measurements</span>\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printInclusive</span><span class=\"token punctuation\">(</span>measurements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printExclusive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last measurements</span>\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printExclusive</span><span class=\"token punctuation\">(</span>measurements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printWasted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last measurements</span>\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printWasted</span><span class=\"token punctuation\">(</span>measurements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last measurements</span>\nPerf<span class=\"token punctuation\">.</span><span class=\"token function\">printOperations</span><span class=\"token punctuation\">(</span>measurements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"tui-language-text\">printInclusive()</code>: 전체 소요 시간 출력\n<img src=\"https://facebook.github.io/react/img/docs/perf-inclusive.png\" alt=\"perf-inclusive\"></li>\n<li><code class=\"tui-language-text\">printExclusive()</code>: 컴포넌트가 마운트 되는 시간 제외하여 출력 (props 처리, <code class=\"tui-language-text\">componentWillMount()</code>, <code class=\"tui-language-text\">componentDidMount()</code> 등)\n<img src=\"https://facebook.github.io/react/img/docs/perf-exclusive.png\" alt=\"perf-exclusive\"></li>\n<li><code class=\"tui-language-text\">printWasted()</code>: <strong>실제 렌더링이 없는 컴포넌트에서 소비된 시간</strong> (ex - Diff 결과 차이가 없어 실제 DOM 변화가 없음)\n<img src=\"https://facebook.github.io/react/img/docs/perf-wasted.png\" alt=\"perf-wasted\"></li>\n<li><code class=\"tui-language-text\">printOperations()</code>: DOM 조작에 관한 로그\n<img src=\"https://facebook.github.io/react/img/docs/perf-dom.png\" alt=\"perf-operations\"></li>\n</ul>\n<h3 id=\"사용성\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%84%B1\" aria-label=\"사용성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용성</h3>\n<p>보통 성능 이슈는 <code class=\"tui-language-text\">printWasted()</code> API로 측정하고 해결할 수 있다. 그리고 대부분의 경우 PureComponent 분리를 통해 해결할 수 있다.</p>\n<p><code class=\"tui-language-text\">printInclusive()</code>나 <code class=\"tui-language-text\">printExclusive()</code>를 통해 컴포넌트의 마운트/업데이트 등에 대한 비용을 확인할 수 있다. 특히 LifeCycle의 로직이 복잡한 경우를 쉽게 확인할 수 있다. <code class=\"tui-language-text\">printOperations()</code>는 React가 실제로 DOM을 생성하거나 업데이트하는 로그를 나타낸다. 예상치 못한 DOM 접근/수정 등을 확인할 수 있다.</p>\n<h2 id=\"bad-cases\" style=\"position:relative;\"><a href=\"#bad-cases\" aria-label=\"bad cases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bad Cases</h2>\n<p>다음은 개발하면서 실수하기 쉬운 경우들이다. 사실 렌더링과 개발 시 주의할 점에 대해서 충분히 이해하고 넘어갈 수 있지만, 큰 애플리케이션을 개발하다 보면 쉽게 실수하고 놓칠 수 있는 부분들이다. 실수해서 놓치는 것은 빈번히 발생할 수 있다. 하지만 표면적으로 문제가 발생했을 때 이를 바로바로 알아채기 위해서 다음 2가지 경우는 기억하도록 하자.</p>\n<ol>\n<li>분리되지 않은 컴포넌트</li>\n<li>잘못된 Props 전달</li>\n</ol>\n<p><strong>사실 위 2가지 경우 모두 같은 원인을 가지고 있다</strong>. 그리고 위 경우가 아니더라도 React 렌더링에서 성능 저하가 발생할 수 있는 경우는 많지만, 그 경우들도 대부분은 모두 <strong>불필요한 Reconciliation에서 처리하는 시간이 문제일 것이다.</strong></p>\n<h3 id=\"분리되지-않은-컴포넌트\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A6%AC%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"분리되지 않은 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분리되지 않은 컴포넌트</h3>\n<p>컴포넌트의 적절한 분리가 이루어지지 않는다면 가독성, 유지보수 등뿐만 아니라 성능적으로도 매우 큰 손해를 볼 수 있다. 다음 예시를 살펴보자.</p>\n<p>테스트용 애플리케이션의 App 컴포넌트는 Root 컴포넌트로 자신의 <code class=\"tui-language-text\">title</code>과 <code class=\"tui-language-text\">listItems</code>를 관리한다. 따라서 다음과 같은 state를 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  listItmes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Test app\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음은 List를 하나의 컴포넌트로 분리하지 않은 코드이다. (테스트에서 Item 컴포넌트는 PureComponent를 상속받아 테스트에 큰 영향이 없도록 하였다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token comment\">// 아래는 간단히 나타낸 App 컴포넌트의 render 메서드이다.</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-intro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">item</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음은 List를 하나의 컴포넌트로 분리한 코드이다. 이때 List 컴포넌트는 PureComponent를 상속받도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token comment\">// 아래는 간단히 나타낸 App 컴포넌트의 render 메서드이다.</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    ...\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-intro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">items</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 렌더링하는 두 애플리케이션에서 <code class=\"tui-language-text\">title</code>을 변경하면 무엇이 더 빠를지 생각해보자.</p>\n<p>두 애플리케이션의 App 컴포넌트에서 <code class=\"tui-language-text\">componentWillUpdate()</code>부터 <code class=\"tui-language-text\">componentDidUpdate()</code>까지 시간을 <a href=\"http://www.html5rocks.com/en/tutorials/webperformance/usertiming/\">UserTimingAPI</a>로 측정하였다.</p>\n<ul>\n<li>List 컴포넌트로 분리 되지 않은 경우(App-bad)<br>\n<img src=\"https://cloud.githubusercontent.com/assets/12269563/24344688/9e98ba6a-1307-11e7-9919-651d3a45cbd8.png\" alt=\"app-bad\"></li>\n<li>List 컴포넌트로 분리된 경우(App)<br>\n<img src=\"https://cloud.githubusercontent.com/assets/12269563/24344687/9e97819a-1307-11e7-8656-498755349820.png\" alt=\"app\"></li>\n<li>App의 트리\n<img src=\"https://cloud.githubusercontent.com/assets/12269563/24435721/f907c034-1471-11e7-8ea6-f708c08258a2.jpg\" alt=\"app-tree\"></li>\n</ul>\n<p>테스트용 앱은 매우 간단한 앱임에도 불구하고 약 30~40배의 확연한 차이가 있었다. 조금 더 복잡한, 조금 더 큰 애플리케이션이라면 그 차이는 더욱 벌어질 것이다.</p>\n<p>그리고 또 중요한 점은, <code class=\"tui-language-text\">title</code>을 변경할 때 <code class=\"tui-language-text\">Perf.start()</code>, <code class=\"tui-language-text\">Perf.stop()</code>, <code class=\"tui-language-text\">Perf.printWasted()</code> API로 성능을 측정했지만, 두 경우 모두 WastedTime이 발생하지 않았다(ReactPerf.js에서 아무런 로그를 남기지 않았다). 즉 <strong><em>컴포넌트를 제대로 분리하지 않으면 성능에 손해가 있어도 쉽게 알아챌 수 없다는</em></strong> 것이다.</p>\n<p>물론 <code class=\"tui-language-text\">printInclusive()</code>, <code class=\"tui-language-text\">printExclusive()</code>, <code class=\"tui-language-text\">printOperations()</code> API, 브라우저 개발자도구 등을 가지고 위와 같은 문제 현상을 측정할 수는 있지만, 컴포넌트 분리로 간단하게 측정하고 해결할 수 있는 문제를 굳이 어렵게 측정하고 해결할 필요는 없다.</p>\n<h3 id=\"잘못된-props-전달\" style=\"position:relative;\"><a href=\"#%EC%9E%98%EB%AA%BB%EB%90%9C-props-%EC%A0%84%EB%8B%AC\" aria-label=\"잘못된 props 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잘못된 Props 전달</h3>\n<p>컴포넌트를 적절히 분리하고, PureComponent를 사용해도 여전히 의도치 않은 성능 하락을 일으킬 수 있다. 다음 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token comment\">// 아래는 간단히 나타낸 App 컴포넌트의 render 메서드이다.</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      ...\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-intro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span></span> <span class=\"token attr-name\">items</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">deleteItem</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteItem</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"tui-language-jsx\"><code class=\"tui-language-jsx\"><span class=\"token comment\">// List는 PureComponent를 상속받고 있으며,</span>\n<span class=\"token comment\">// List의 Item은 일반적인 SFC이다.</span>\n\n<span class=\"token comment\">// 아래는 간단히 나타낸 List 컴포넌트이다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span>\n    deleteItem<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span>\n          <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\n          <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">item</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">onClickDeleteButton</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>deleteItem<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>List에서 Item을 제거하기 위한 <code class=\"tui-language-text\">deleteItem</code>이라는 함수를 <code class=\"tui-language-text\">props</code>를 통해 전달했다. 언뜻 보면 별문제 없어 보이지만 사실은 엄청난 성능 하락을 일으키고 있다.</p>\n<p>App 컴포넌트에서 <code class=\"tui-language-text\">title</code>을 변경하는 경우에 대해 <code class=\"tui-language-text\">react-addons-perf</code>로 측정한 성능을 보자.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/12269563/24344689/9eb2ce32-1307-11e7-93d0-e94198fab15d.png\" alt=\"app-bad2\"></p>\n<p>이런 허비 시간이 발생하는 이유는 바로 <code class=\"tui-language-text\">deleteItem={id =&gt; this.deleteItem(id)}</code>구문이다. App의 <code class=\"tui-language-text\">render()</code>에서 List로 넘어가는 <code class=\"tui-language-text\">deleteItem</code>이 항상 새로운 함수로 생성되기 때문에, List가 PureComponent라도 Reconciliation 작업에 포함된 것이다. 그래서 보통 props로 넘어가는 함수는 생성자에서 미리 바인딩하고 <code class=\"tui-language-text\">deleteItem={this.deleteItem}</code> 구문처럼 새로운 함수 생성 없이 전달하는 것을 추천한다.</p>\n<p>그리고 react-redux의 connect HOC 에서도 이와 같은 경우가 자주 있는데, 아래 <code class=\"tui-language-text\">mapStateToProps</code>를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// State의 items는 Immutable객체이다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connet</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 아까보다 훨씬 더 큰 성능 저하를 일으킨다. Store의 모든 업데이트에서 React는 List를 항상 렌더링 작업에 포함한다. 그래서 이런 경우는 Immutable 객체를 array와 같은 형태로 변환하지 말고 그대로 컴포넌트에 전달하는 것을 추천한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이 경우 List는 items를 array가 아닌 Immutable 객체로 처리해야 한다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connet</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>React는 직접적인 UI 제어를 최소화시켜 동작하기 때문에 기본적으로 빠르다고 생각할 수 있지만, 제어를 최소화시키기 위해 선행되는 작업에 대한 비용을 무시해서는 안 된다.</p>\n<p>Reconciliation은 기본적인 개념이면서도 의도하지 않은 큰 성능 하락을 일으킬 수 있다. 사실 개발자가 모든 성능 하락에 대한 경우를 다 기억하고, 코드를 작성할 때 바로바로 파악하는 것은 어렵다. 처음부터 성능에 최적화된 애플리케이션을 고려하는 것 자체가 비효율적이다. 하지만 컴포넌트를 적절히 분리하는 것은 중요하다. 아무리 간단한 엘리먼트와 로직이라도 기능, 책임, 재사용성 등으로 컴포넌트를 적절히 분리하여 이슈를 빠르게 파악하고 대응할 수 있도록 개발하길 권장한다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<h3 id=\"react-docs\" style=\"position:relative;\"><a href=\"#react-docs\" aria-label=\"react docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Docs</h3>\n<ul>\n<li>Reconciliation: The diffing algorithm - <a href=\"https://facebook.github.io/react/docs/reconciliation.html#the-diffing-algorithm\">https://facebook.github.io/react/docs/reconciliation.html#the-diffing-algorithm</a></li>\n<li>Avoid Reconciliation - <a href=\"https://facebook.github.io/react/docs/optimizing-performance.html#avoid-reconciliation\">https://facebook.github.io/react/docs/optimizing-performance.html#avoid-reconciliation</a></li>\n<li>ShouldComponentUpdate In Action - <a href=\"https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action\">https://facebook.github.io/react/docs/optimizing-performance.html#shouldcomponentupdate-in-action</a></li>\n<li>PureComponent - <a href=\"https://facebook.github.io/react/docs/react-api.html#react.purecomponent\">https://facebook.github.io/react/docs/react-api.html#react.purecomponent</a></li>\n<li>React-Addons-Perf - <a href=\"https://facebook.github.io/react/docs/perf.html#using-perf\">https://facebook.github.io/react/docs/perf.html#using-perf</a></li>\n</ul>","frontmatter":{"id":"ko_20170324","title":"React 렌더링과 성능 알아보기","description":"React는 간단하면서도 충분히 빠르다. 하지만 착각하지 말자. 대충 만들어도 빠르다는 것은 아니다. React 애플리케이션은 잘 만들어야 빠르다. React의 동작 원리를 이해하고 애플리케이션이 느려질 수 있는 상황들을 찾아 해결하는 것이 중요하다. 다행히 React는 간단하고 이해하기 쉬운 라이브러리다.","date":"2017.03.24","author":"이민규","tags":["React","performance"],"thumbnail":"https://cloud.githubusercontent.com/assets/12269563/24344686/9e96aa72-1307-11e7-8c05-dfb7b33cd7be.png"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20170324","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}