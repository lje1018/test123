{"componentChunkName":"component---src-templates-weekly-pick-post-tsx","path":"/weekly-pick/ko_20160506","result":{"data":{"post":{"html":"<h1 id=\"지금-바로-시작하는-es6\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EA%B8%88-%EB%B0%94%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-es6\" aria-label=\"지금 바로 시작하는 es6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지금 바로 시작하는 ES6</h1>\n<p><img src=\"https://cloud.githubusercontent.com/assets/12269564/15312606/a70784ce-1c40-11e6-98de-b1e0c3df044c.jpg\" alt=\"meetup-vertical\"></p>\n<h3 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h3>\n<p>매일 쏟아져 나오는 ES6에 대한 글을 보면 그저 한낱 먼 미래의 이야기라는 생각이 든다. 서비스를 ES6 로 개발하기에 버전 별 브라우저 사용률이 발목을 잡고 있기 때문이다. b2c는 그나마 좀 낫다. b2b는 여러 제약 때문에 windows xp를 사용하는 고객도 있고 (우리의 xp는 IE8 까지만 사용 가능하다) 심지어 최신 브라우저를 쓰면서도 '호환성 보기 모드' (IE8 시뮬레이션 모드)를 설정해놓고 사용하는 경우도 있다.</p>\n<p>새로 시작하는 프로젝트가 IE8을 지원해야 하면 읽고 있던 ES6에 대한 글을 전부 닫고 나와 상관없는 이야기라며 멀리하게 된다. 하지만 조금 더 냉철하게 생각해 보자. ES6의 효율성을 포기하기에 너무 이르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">getASTNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    op  <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">,</span>\n    lhs <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>lhs<span class=\"token punctuation\">,</span>\n    rhs <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>rhs<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> op<span class=\"token punctuation\">,</span> lhs<span class=\"token punctuation\">,</span> rhs <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getASTNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// ----</span>\n\n\n<span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;span>'</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">'&lt;span class=\"'</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>cssClass <span class=\"token operator\">+</span> <span class=\"token string\">'\">'</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>description <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span>\n&lt;span class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>cssClass<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// ----</span>\n\n\n<span class=\"token comment\">// ES5</span>\n<span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ell'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// true</span>\n\n\n<span class=\"token comment\">// ----</span>\n\n\n<span class=\"token comment\">// ES5 의 배열 중복제거 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dedup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6의 배열 중복제거 함수</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dedup</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>국내외 브라우저 사용률 자료가 뭐라고 하던 ES6지원 브라우저의 점유율은 오르고 있다. 벤더들은 하위 버전 지원에 칼을 빼 들었다. 지금 xp를 사용하려 하면 운영체제 자체에서 하위지원 종료에 관한 메시지가 뜨고, IE8을 쓰면 최신 브라우저의 안내 페이지가 수시로 열린다. 브라우저들이 점점 evergreen 정책으로 배포된다. 뒤에서 밀고 앞에서 잡아당기는 형상이니 언젠간 끌려가지 않을까?</p>\n<p>다시 돌아와서 ES6를 사용하기 위해선 고객이 순순히 아래와 같이 따르면 된다.</p>\n<ol>\n<li>사용하고 있는 IE를 또는 운영체제를 업데이트 한다.</li>\n<li>다른 브라우저를 설치한다.</li>\n</ol>\n<p>하지만 브라우저가 뭔지 모른다거나 눈에 흙이 들어가기 전에 다른 브라우저는 안되거나 환경 때문에 어쩔 수 없다면? 그런 고객을 바꿀 순 없으니 우리가 바꾸면 된다. 적어도 IE8이상이면 말이다.</p>\n<p>이 글은 위의 상황에서도 ES6를 사용하는 방법에 대해 다룬다. 먼저 ES5만 지원하는 '모던' 브라우저에서 ES6를 사용하는 방법을 알아보고 더 내려가 IE8도 사용할 수 있는 설정에 대해 알아본다. 참고로 NHN Entermainment 기술본부의 서비스 기본 브라우저 지원 범위에서 IE7은 '비즈니스와 관계 없을 경우 지원하지 않음' 이다. 사실 얼마전에 변경된 이 정책으로 인해 이 글을 쓸 수 있게 되었다.</p>\n<h3 id=\"transpiler\" style=\"position:relative;\"><a href=\"#transpiler\" aria-label=\"transpiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transpiler</h3>\n<p>transpiler는 compiler와 같이 코드를 무언가로 변환한다. compiler는 코드를 바이트 코드로 변환하지만, transpiler는 코드를 같은 레벨의 다른 언어로 변환한다.</p>\n<p>JS transpiler는 coffeescript, typescript, babel, traceur 가 있다. 이 중 coffeescript, typescript는 고유의 문법을 JS로 변환하고, babel, traceur 는 <strong>JS 코드를 JS코드로 변환하는 transpiler</strong>이다. 왜 JS를 JS로 변환하는 transpiler가 있을까?</p>\n<p>현재 ES6 스펙을 100%지원하는 브라우저는 없다. Chrome이 93%정도를 지원하고 다른 브라우저는 그 보다 낮다. ES6코드를 원본 그대로 실행시킬수 있는 브라우저가 아직 없다는 이야기이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> name <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"john\"</span> <span class=\"token operator\">:</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 ES6의 스펙인 default function parameter를 사용하고 있다. 이 문법은 방어 코드를 간결하게 만드는 주요 문법 중 하나다. (파라미터 갯수에 비례해 드라마틱하게 코드가 간결해진다)</p>\n<p>비교적 최신 브라우저인 Edge13 (2015/12/05 출시) 버전 조차 이 문법을 지원하지 않는다. (실행하면 문법 자체가 없으니 Syntax Error를 발생한다) 또 IE11에서는 함수 중첩의 복잡함을 해소할 수 있는 Arrow function 스펙을 지원하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// ES6</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES5</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    success<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그럼 ES6버전의 코드를 미지원 브라우저에서 동작하게 하려면 어떻게 해야 할까? 결론은 하나하나 직접 수정해야 한다.</p>\n<p>이때 babel 또는 traceur transpiler를 사용한다. ES6코드들을 전부 ES5코드로 변환하기 때문에 현재까지 출시된 모든 '모던' 브라우저에서 문제 없이 동작한다. (물론 '꼬리호출'과 같은 native단의 최적화 스펙은 적용되지 않지만 일반적인 문법은 전부 지원한다)</p>\n<p>일반적으로 JS파일들은 성능 또는 보안 이슈 때문에 압축 후 배포한다. 압축 전에 transpiler가 ES5기반 코드로 변환하는 작업을 하도록 설정하면 된다. 듣기만 해도 복잡하고 어려울 것 같지만 변환과 압축을 한방에 해 주는 도구가 있다. 설정 파일을 만들고 명령어를 실행만 하면 된다.</p>\n<h3 id=\"babel은-무엇인가\" style=\"position:relative;\"><a href=\"#babel%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"babel은 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel은 무엇인가?</h3>\n<p>Babel은 ES6코드를 ES5로 변환하는 transpiler다. 앞서 이야기했던 Syntax Error가 발생하는 코드 자체를 자동으로 ES5지원 코드로 변환한다. 그럼 class키워드는 어떻게 변환될까?</p>\n<p>여러분도 알다시피 JS의 OOP는 시뮬레이팅 방식이기 때문에 헬퍼 함수 즉 클래스를 흉내내는 유틸리티 함수가 필요하다. Babel은 class키워드를 만났을 때 자동으로 Babel이 자체 구현한 클래스 시뮬레이션 함수를 포함시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// ORIGINAL</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Admin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TRANSPILED</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_possibleConstructorReturn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">self<span class=\"token punctuation\">,</span> call</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*생략*/</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subClass<span class=\"token punctuation\">,</span> superClass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*생략*/</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*생략*/</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Admin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_User</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">_inherits</span><span class=\"token punctuation\">(</span>Admin<span class=\"token punctuation\">,</span> _User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Admin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_possibleConstructorReturn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_User</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Admin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>_possibleConstructorReturn, _inherit, _classCallCheck은 babel이 가진 클래스 시뮬레이팅 유틸리티 함수다. transpiler가 class 키워드와 extends 키워드를 만났기 때문에 자동으로 소스에 추가된 것이다. 아래에는 User, Admin 함수가 일반적인 prototypal inheritance 패턴으로 변환되어 있는 것을 볼 수 있다.</p>\n<p>변환 후 코드가 조금 깔끔하지 않지만 babel은 google의 traceur 에 비해 훨씬 보기좋게 변환된다. JS transpiler 중에 제일 보기 좋게 변환된다고 한다.</p>\n<p>_callClassCheck은 생성되는 클래스가 new와 함께 쓰이지 않을 경우 오류를 내기 위한 함수이다. 즉 클래스를 클래스로 사용하는지 검사하는 것으로 볼 수 있는데 ES6명세에 맞게 쓰는지 검사하는 코드도 포함된다, 이는 옵션으로 조정 가능하다. 리얼 배포시엔 성능을 확보하기 위해 푼다.</p>\n<p>이제 변환된 코드를 사용하면 '모던' 브라우저 대부분에서 ES6를 문제 없이 사용할 수 있게 된다. 하지만 IE8에서 동작하게 하려면 조금 더 설정이 필요하다.</p>\n<h3 id=\"babel-하위지원을-위한-설정---polyfill\" style=\"position:relative;\"><a href=\"#babel-%ED%95%98%EC%9C%84%EC%A7%80%EC%9B%90%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95---polyfill\" aria-label=\"babel 하위지원을 위한 설정   polyfill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel 하위지원을 위한 설정 - Polyfill</h3>\n<p>Babel을 통해서 ES6 코드를 '모던' 브라우저에서도 동작할 수 있도록 했다. 그럼 IE8은 어떻게 할까? 다음의 코드를 변환했다고 가정해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// ORIGINAL</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TRANSPILED</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 생략 */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> UserList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> UserList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">UserList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> UserList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>UserList의 users 프로퍼티는 배열이고 contains() 메서드는 이 배열의 indexOf()로 포함 여부를 검사하고 있다. 이 코드가 IE8에서 동작할까? 답은 '아니오' 다.</p>\n<p><code class=\"tui-language-text\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].indexOf(&#39;b&#39;);</code> 는 IE8에서 오류가 발생한다. '없기' 때문이다. IE8이하는 배열의 요소를 검색할 수 있는 native 함수가 없다. 그래서 보통 같은 동작을 하는 함수를 만들어 프로젝트의 어딘가에 두고 쓴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> identity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>이런 패턴을 Fallback이라 한다. 없는 기능을 흉내내 쓰는 것이다. 하지만 이 코드를 쓰게 되면 indexOf를 native 에서 지원하는 브라우저에서도 Fallback을 쓰기 때문에 성능 저하의 원인이 된다. 그래서 다른 방법을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>indexOf <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">indexOf</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Array 라는 native 객체에 indexOf 메서드가 없을 경우 아까 만들었던 Fallback으로 대체한다. 이 패턴을 Polyfill이라고 한다. 이로써 native에 있으면 native 구현을 사용하고 없으면 Polyfill을 쓰게 된다.</p>\n<p>Babel은 ES6 코드를 'ES5를 지원하는 브라우저'에서 돌아가도록 하는 역할만 한다. 여기에 브라우저에 IE8은 포함되지 않는다. 그래서 IE8에서 빠진 ES5의 기능을 채울 수 있는 Polyfill 이 필요한 것이다. 노파심에 언급하지만 Babel과 Polyfill은 별개다. Polyfill만 추가해서 ES5의 기능을 IE8에서 쓰게 할 수도 있다.</p>\n<p>Babel은 공식적으로 core-js를 Polyfill '옵션'으로 제공하고 있다. 때문에 babel-polyfill 패키지를 설치하고 코드에 포함시키는 것으로 요구사항을 만족시킬 수 있다. 그럼 이제 IE8에서 코드를 실행하면? 오류가 발생한다. 아직 한 가지 설정이 남아있다.</p>\n<h3 id=\"babel-하위지원을-위한-설정---plugins\" style=\"position:relative;\"><a href=\"#babel-%ED%95%98%EC%9C%84%EC%A7%80%EC%9B%90%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95---plugins\" aria-label=\"babel 하위지원을 위한 설정   plugins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel 하위지원을 위한 설정 - Plugins</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token comment\">// ORIGINAL</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TRANSPILED</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 생략 */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> UserList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_classCallCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> UserList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">UserList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">delete</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_delete</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ERROR</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ERROR</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> UserList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번엔 users 프로퍼티를 ES6의 콜렉션인 Set 으로 변경했다. 그리고 <code class=\"tui-language-text\">delete</code> 메서드를 통해 user를 제거할 수 있도록 했고 이를 babel을 통해 transpile 했다. 이 코드를 IE8에서 실행하면? <code class=\"tui-language-text\">Expected identifier</code> 오류가 발생한다. 바로 <code class=\"tui-language-text\">delete</code> 라는 키워드를 접근자로 사용했기 때문이다.</p>\n<p>물론 이 코드는 ES5지원 브라우저에서는 유효하다. 때문에 transpile 중 접근자가 키워드일 때 <code class=\"tui-language-text\">obj[&#39;delete&#39;]();</code> 형태로 바뀌어야 한다. Plugin을 통해 해결할 수 있다. member-expression-literals, property-literals, 플러그인은 transpile 중 이런 member literal 표기를 콤마로 감싸준다. 그래서 <code class=\"tui-language-text\">obj[&#39;delete&#39;]();</code> 로 변환한다. 이제 IE8에서도 ES6문법을 사용할 수 있게 되었다! (확실히 더 해 줄건 없다. 실무에서 사용 중이고 문제가 발생한 적은 없다)</p>\n<p>하위호환을 위한 Plugin뿐만 아니라 ES6 이후의 스펙을 위한 Plugin도 있다. async, await 스펙은 ES7의 스펙이지만 ES6의 generator를 응용하여 변환해주는 Plugin도 있다. 각 스펙별로 Plugin이 존재하니 필요하면 그때그때 설치해 사용하면 된다.</p>\n<h3 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<p>길고 긴 이론 설명이 끝났으니 이제 쓰는 방법이다. npm을 통해 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"tui-language-bash\"><code class=\"tui-language-bash\">$ <span class=\"token function\">npm</span> i --save-dev babel-core babel-preset-es2015 babel-polyfill\n babel-plugin-transform-es3-member-expression-literals\n babel-plugin-transform-es3-property-literals</code></pre></div>\n<p>각 모듈을 설명한다</p>\n<ul>\n<li>babel-core: babel의 주요 모듈이다. transpiler가 포함되어있다고 보면 된다.</li>\n<li>babel-preset-es2015: babel은 각 Plugin을 스펙 단위로 사용하는 형태이다. es2015 즉 ES6문법도 스펙에 대응하는 Plugin하나하나가 모인 것이다. babel에서는 preset 이라고 부른다. preset-es2015 는 ES6스펙의 Plugin 모음이라고 보면 된다.</li>\n<li>babel-polyfill: 앞서 언급했던 Polyfill이다. core-js 와 facebook 의 regenerator가 포함되어 있다.</li>\n<li>babel-plugin-transform-es3-member-expression-literals: 키워드를 접근자로 쓸 때 콤마로 감싼다.</li>\n<li>babel-plugin-transform-es3-property-literals: 키워드로 프로퍼티명을 쓸 때 콤마로 감싼다.</li>\n</ul>\n<p>프로젝트 루트에 <code class=\"tui-language-text\">.babelrc</code> 를 만들고 아래와 같이 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"tui-language-json\"><code class=\"tui-language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"transform-es3-property-literals\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"transform-es3-member-expression-literals\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 후 <code class=\"tui-language-text\">babel</code> 명령어와 함께 대상 파일을 glob 패턴으로 적어주면 변환된 결과가 나온다. 자세한 사항은 공식 문서를 참고하기 바란다.</p>\n<h3 id=\"결론-및-요약\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0-%EB%B0%8F-%EC%9A%94%EC%95%BD\" aria-label=\"결론 및 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론 및 요약</h3>\n<p>지금까지의 과정을 요약하면 babel transpiler를 통해 ES6코드를 ES5에서 동작하게 할 수 있다. 이 때 IE8은 ES5 스펙 전체를 지원하지 않으므로 부족한 부분은 Polyfill을 사용한다. 추가적으로 이전 버전에서 키워드를 접근자로 사용할 때 오류가 나는 것을 방지하기 위해 Plugin으로 키워드는 문자로 감싸준다.</p>\n<p>마지막으로 기타 팁들을 적어 본다</p>\n<ul>\n<li>키워드 접근자는 babel이 만들어내는 코드에도 있으므로 IE8지원을 위해선 Plugin사용이 필수다.</li>\n<li>명령어 실행을 응용하면 자동화 도구와 연동이 가능할 것이다.</li>\n</ul>\n<p>ES6코드의 효율성은 정말 엄청나다. 간결해지면서도 코드의 역할을 충실히 코딩으로 기술할 수 있다. JS는 '비교적' 최근들어 등장한 프로그래밍 패러다임을 소화할 수 있도록 변화하고 있다. 상황이 받쳐주지 않지만 근 시일 내에 변화가 올 것이라고 생각한다. 그 때가 왔을 때 새로 개발하지 말고 원본소스를 그대로 배포하자.</p>\n<p>참고</p>\n<ul>\n<li>babeljs 공식 사이트: <a href=\"http://babeljs.io\">http://babeljs.io</a></li>\n</ul>","frontmatter":{"id":"ko_20160506","title":"지금 바로 시작하는 ES6","description":"매일 쏟아져 나오는 ES6에 대한 글을 보면 그저 한낱 먼 미래의 이야기라는 생각이 든다. 서비스를 ES6 로 개발하기에 버전 별 브라우저 사용률이 발목을 잡고 있기 때문이다. b2c는 그나마 좀 낫다. b2b는 여러 제약 때문에 windows xp를 사용하는 고객도 있고 (우리의 xp는 IE8 까지만 사용 가능하다) 심지어 최신 브라우저를 쓰면서도 '호환성 보기 모드' (IE8 시뮬레이션 모드)를 설정해놓고 사용하는 경우도 있다.","date":"2016.05.06","author":"김민형","tags":["ecmascript","es6"],"thumbnail":"https://cloud.githubusercontent.com/assets/12269564/15312606/a70784ce-1c40-11e6-98de-b1e0c3df044c.jpg"}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_20160506","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}