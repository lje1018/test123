{"componentChunkName":"component---src-templates-fe-guide-detail-tsx","path":"/fe-guide/en_TEST","result":{"data":{"post":{"html":"<h1 id=\"testing\" style=\"position:relative;\"><a href=\"#testing\" aria-label=\"testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h1>\n<p>In the recent years, JavaScript has been widening the scope of use through rapid development, and the application standards put forth by the front-end environment are growing in complexity every day. Furthermore, testing environment also went through spectacular changes in disproportionate amount of time, and with the rise of <a href=\"https://nodejs.org/en/\">Node.js</a>, numerous testing tools have innundated the market and continue to undergo massive evolutions. Front end tests must consider different environments of users (browser, device, operating system, and etc,) so there are plenty of variables to take into account. For this reason, it is critical that developers understand the different tools and environments related to JavaScript testing, and a veteran expertise is required to design strategical tests customized to different projects. </p>\n<p>This document will present the variety of tools used for JavaScript tests, and will explain which tools should be used for different situations. </p>\n<p><em>(Designing test strategies and writing effective test codes for different projects will be discussed in another guide in greater detail.)</em> </p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li>\n<p><a href=\"#defining-test-and-test-types\">Defining Test and Test Types</a></p>\n<ul>\n<li><a href=\"#what-is-a-test\">What is a test?</a></li>\n<li><a href=\"#unit-testing\">Unit Testing</a></li>\n<li><a href=\"#integration-testing\">Integration Testing</a></li>\n<li><a href=\"#e2e-testing\">E2E Testing</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-testing-tools\">JavaScript Testing Tools</a></p>\n<ul>\n<li><a href=\"#test-runner\">Test Runner</a></li>\n<li><a href=\"#testing-framework\">Testing Framework</a></li>\n<li><a href=\"#assertion-library\">Assertion Library</a></li>\n<li><a href=\"#test-double-library\">Test Double Library</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#javascript-testing-environments\">JavaScript Testing Environments</a></p>\n<ul>\n<li><a href=\"#browser\">Browser</a></li>\n<li><a href=\"#nodejs\">Node.js</a></li>\n<li><a href=\"#browser-vs-nodejs\">Browser vs. Node.js</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jasmine\">Jasmine</a></p>\n<ul>\n<li><a href=\"#defining-test-specs\">Defining Test Specs</a></li>\n<li><a href=\"#grouping-test-specs\">Grouping Test Specs</a></li>\n<li><a href=\"#resetting-tests\">Resetting Tests</a></li>\n<li><a href=\"#spy-class\">Spy Class</a></li>\n<li><a href=\"#clock-class\">Clock Class</a></li>\n<li><a href=\"#asynchronous-test\">Asynchronous Test</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#karma\">Karma</a></p>\n<ul>\n<li><a href=\"#install-and-usage\">Install and Usage</a></li>\n<li><a href=\"#measuring-code-coverage\">Measuring Code Coverage</a></li>\n<li><a href=\"#cross-browsing-test\">Cross Browsing Test</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jest\">Jest</a></p>\n<ul>\n<li><a href=\"#easy-install-and-usage\">Easy Install and Usage</a></li>\n<li><a href=\"#easy-code-coverage-measurement\">Easy Code Coverage Measurement</a></li>\n<li><a href=\"#built-in-jsdom\">Built-In jsdom</a></li>\n<li><a href=\"#snapshot-testing\">Snapshot Testing</a></li>\n<li><a href=\"#test-file-filtering\">Test File Filtering</a></li>\n<li><a href=\"#sandbox-parallel-testing\">Sandbox Parallel Testing</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#e2e-testing-tools\">E2E Testing Tools</a></p>\n<ul>\n<li><a href=\"#selenium-webdriver\">Selenium Webdriver</a></li>\n<li><a href=\"#cypress\">Cypress</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#installing-and-using-cypress\">Installing and Using Cypress</a></p>\n<ul>\n<li><a href=\"#install-and-set-up\">Install and Set Up</a></li>\n<li><a href=\"#running-on-interactive-mode\">Running on Interactive Mode</a></li>\n<li><a href=\"#running-in-the-background\">Running in the Background</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#writing-cypress-codes\">Writing Cypress Codes</a></p>\n<ul>\n<li><a href=\"#creating-and-running-test-files\">Creating and Running Test Files</a></li>\n<li><a href=\"#writing-test-codes\">Writing Test Codes</a></li>\n</ul>\n</li>\n<li><a href=\"#afterword\">Afterword</a></li>\n</ul>\n<h2 id=\"defining-test-and-test-types\" style=\"position:relative;\"><a href=\"#defining-test-and-test-types\" aria-label=\"defining test and test types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining Test and Test Types</h2>\n<h3 id=\"what-is-a-test\" style=\"position:relative;\"><a href=\"#what-is-a-test\" aria-label=\"what is a test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a test?</h3>\n<p>The word ‘test’ has different meanings in different fields due to the its universality. To define the word test from the software perspective, it is “an act to verify that the application functions appropriately under given requirements.” It is considered to be an independent field of development separate from programming, and in many large corporations, specialized testers from quality assurance (QA) organizations are hired to carry out such tasks. </p>\n<p>However, as Agile Methodology and <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">Test Driven Development</a> , emphasized in <a href=\"https://en.wikipedia.org/wiki/Extreme_programming\">Extreme programming</a>, gained public traction after the turn of the millennium, testing grew to be accepted more and more as a part of the development cycle. In this document, test will refer only to automated tests written in codes. If the developer designs and writes the test code himself, it allows for more active improvement of the quality of the code by refactoring, and with this improvement in quality in the development stage, resources can be saved from unnecessarily communicating with the outside testers.</p>\n<p><em>(This guide deals only with “automated tests that are written by the developer,” and does not cover anything beyond this scope)</em></p>\n<p>There are many known types of tests, and developers tend to mainly categorize them based on the coverage. According to scope, the tests can be broken down into unit test, integration test, and E2E (End to End) test. Many often mistakenly think that any test written by the author for the program is a unit test, but since different tests have different pros and cons, it is important to differentiate various tests and be able to choose the appropriate test for each situation. In order to highlight this importance, the following sections will explain each test methods in detail.</p>\n<h3 id=\"unit-testing\" style=\"position:relative;\"><a href=\"#unit-testing\" aria-label=\"unit testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit Testing</h3>\n<p>Unit tests refer to tests done on sections of the application (usually modules) independently in a separate environment. Because the test is conducted independently from the application, it is capable of testing very intricate details of a particular module or a class, and can be executed significantly faster than testing over a wider coverage. However, because unit tests require a <em>mock</em> object in order to control the dependency of modules, unit tests cannot verify whether the code functions harmoniously within the application as a whole. Also, since the application can be extremely sensitive even to subtlest changes to the API, unit tests are prone to error even with tiny refactoring. </p>\n<h3 id=\"integration-testing\" style=\"position:relative;\"><a href=\"#integration-testing\" aria-label=\"integration testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration Testing</h3>\n<p>Integration test covers a slightly larger scope than the unit test, and it tests for the connectivity within aggregates of two or more modules. Because the purpose of integration tests is to examine the mutual functionality within a collection of modules, mock objects are not required as much, and can detect intermodular errors. Also, due to the fact that integration test is only affected by a relatively large change in the API, it is less prone to errors during refactoring of codes than the unit test. However, if a single module contains a heavy algorithm or complicated conditional statement, integration testing becomes more complicated than the unit testing, and also becomes more prone to repetitive testing. </p>\n<h3 id=\"e2e-testing\" style=\"position:relative;\"><a href=\"#e2e-testing\" aria-label=\"e2e testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>E2E Testing</h3>\n<p>Both unit testing and integration testing are done from the perspective of developers who know the entire application inside and out to take a selection of the application to be tested. E2E test, on the other hand, is done from the perspective of the user, and for that reason, it is sometimes referred to as a Functional test or a User Interface (UI) test. E2E test can prevent errors that could happen with real users by running the test in an environment that mimics that of the users. Also, by directly manipulating the browser, E2E tests enable developers to test for conditions that cannot be simulated by the JavaScript API (such as manipulating the browser size and inputting items with real keyboards.) Furthermore, because E2E test codes are not directly affected by the internal structure of the project code, test does not fail even in the presence of wide coverage refactoring, and therefore, allows developers to take more blunt attempts at improvement. </p>\n<p>Despite E2E test’s obvious benefits, because E2E tests are significantly slower than unit tests and integration tests, it is difficult to get timely feedback during the development cycle, and are extremely complicated to write due to the fact that E2E tests must consider the intricate combinations of the aggregated modules. Also, since the larger features cannot be tested in smaller segments, repetitive results are almost inevitable. Furthermore, because the test is not hosted in a sandbox environment, unexpected environmental errors (network error, timeout caused by process delay, etc.) may occur, which prevents developers from trusting the test wholeheartedly.  </p>\n<h2 id=\"javascript-testing-tools\" style=\"position:relative;\"><a href=\"#javascript-testing-tools\" aria-label=\"javascript testing tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Testing Tools</h2>\n<p><em>(This chapter will only cover tools regarding unit/integration tests. Since E2E testing tools are characteristically different, E2E testing tools will be covered in a separate chapter.)</em></p>\n<p>Latest JavaScript testing tools provide a wide range of functionalities for testing, and different tool supports different features. In order to appropriately compare and select the tools, it can be helpful to first understand which features are needed to test JavaScript codes. Although there are no specific standards categorizing these features, features can mainly be categorized into a <strong>Test Runner</strong>, a feature that provides an environment in which to conduct tests in, and a <strong>Test Framework</strong>, a feature that provides a template for the test codes to be written. Other features include <strong>assertion library</strong> and <strong>test double library</strong> which facilitate efficient drafting of test codes. </p>\n<h3 id=\"test-runner\" style=\"position:relative;\"><a href=\"#test-runner\" aria-label=\"test runner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Runner</h3>\n<p>Test runners first read the test files to execute the wirtten code, and prints the results in a specific format. The test results can be returned in whatever format the developer desires by designating a <em>reporter</em>. Additionally, test runners provide a <em>watcher</em> feature that automatically tests the parts that are affected by changed test code or source code. </p>\n<p>Because, previously, JavaScript friendly environments were scarce, the test results could only be obtained through the webpage or the console after running the test code directly onto a browser. However, with the emergence of Node.js, it became possible to easily execute JavaScript codes, and consequently, it also became possible to use tools like test runners to automate these procedures.</p>\n<p>Test runners can be categorized mainly into runners that run directly on the browser like <a href=\"https://karma-runner.github.io/3.0/index.html\">Karma</a> and those that run on the Node.js environment like <a href=\"https://jestjs.io/\">Jest</a>. Since in using test runners based on Node.js do not need to separate the environment for the runner and the environment for the code execution, they are usually included in the testing framework. </p>\n<h3 id=\"testing-framework\" style=\"position:relative;\"><a href=\"#testing-framework\" aria-label=\"testing framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing Framework</h3>\n<p>Testing framework, as mentioned above, is a tool that provides a template for developers to use when writing test codes. The tests, created using the functions provided in the template, are executed automatically by the template, and the results are returned to the user according to the success or failure of the test. Most iconic testing frameworks include <a href=\"https://mochajs.org/\">Mocha</a>, <a href=\"https://jasmine.github.io/\">Jasmine</a>, <a href=\"https://github.com/avajs/ava\">AVA</a>, and recently, <a href=\"https://jestjs.io/\">Jest</a> has been growing in reputation rapidly.</p>\n<p>Below is a test code created using the Jasmine template. Functions like <code class=\"tui-language-text\">describe</code>, <code class=\"tui-language-text\">beforeEach</code>, <code class=\"tui-language-text\">it</code>, and <code class=\"tui-language-text\">expect</code> are global functions provided by Jasmine, and will be explained in greater detail in later chapters.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calculations'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum two number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'multiply two number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"assertion-library\" style=\"position:relative;\"><a href=\"#assertion-library\" aria-label=\"assertion library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assertion Library</h3>\n<p>Tests are usually composed of reset and assertion statements, and assertions are used to specifically restrict the passing requirements for tests. Most testing frameworks provide various assertion APIs, but only when using Mocha, it is recommended to use an external assertion library like <a href=\"https://www.chaijs.com/\">Chai</a>.</p>\n<p>Primitive assertion libraries were similar to <a href=\"https://junit.org/junit5/\">JUnit</a>, but Chai and Jasmine, libraries that are gaining popularity recently, are based on <a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\">BDD(Behavior-driven development</a> APIs, which bare close resemblance to the natural language constructs. Also, most assertion libraries provide plugins and extensions that allow users to add custom assertions.</p>\n<p>Presented below is a test code created using the Jasmine template. Multiple assertions like <code class=\"tui-language-text\">expect()</code>, <code class=\"tui-language-text\">toBeNull()</code>, <code class=\"tui-language-text\">toEqual()</code>, and <code class=\"tui-language-text\">toHaveBeenCalled()</code> have been used.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"test-double-library\" style=\"position:relative;\"><a href=\"#test-double-library\" aria-label=\"test double library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Double Library</h3>\n<p><a href=\"https://martinfowler.com/bliki/TestDouble.html\">Test double</a> is an object that is tested in place of the original object, and is often used to arbitrarily inject external dependencies during isolated unit tests. Test double libraries help developers to create dummy objects, and according to the characteristics of a given test, various objects like <em>spy</em>, <em>stub</em>, and <em>mock</em> can be created. Just like in the case of assertion libraries, most testing frameworks provide various functions to support test doubles, and only when using Mocha, it is recommended to use an external test double library like <a href=\"https://sinonjs.org/\">Sinon.JS</a>.</p>\n<p>Test doubles are generally used in tests where it directly changes or adds objects and functions, and in Jest, a feature that supports modular test doubles are also included. Furthermore by using <a href=\"https://jasmine.github.io/api/edge/Clock.html\">Clock</a> object in Jasmine or <a href=\"https://github.com/sinonjs/lolex\">Lolex</a> object in SinonJS, developers can override control of the JavaScript’s built-in timer API for tests. Also, for famous libraries like <a href=\"https://github.com/axios/axios\">Axios</a>, it is possible that there already exist <a href=\"https://github.com/ctimmerm/axios-mock-adapter\">premade Mock libraries</a>, so it is worth searching. </p>\n<p>The following is an example of a test double created by the <code class=\"tui-language-text\">spyOn</code> function from Jasmine. Spy is used to monitor if a certain method within an object has been called on, and if so, which inputs were passed on to it. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test spy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">'setName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">'getName'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>and<span class=\"token punctuation\">.</span><span class=\"token function\">callThrough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lee'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>setName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lee'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Kim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"javascript-testing-environments\" style=\"position:relative;\"><a href=\"#javascript-testing-environments\" aria-label=\"javascript testing environments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Testing Environments</h2>\n<p>As mentioned above, JavaScript tests can be hosted both in a browser environment and in a Node.js environment. However, it is necessary to acknowledge that both environments have different pros and cons; therefore, for each environment, runners must be selected with careful consideration. This chapter will include information regarding the strengths and weaknesses of each environment, and which tests are better suited. </p>\n<h3 id=\"browser\" style=\"position:relative;\"><a href=\"#browser\" aria-label=\"browser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Browser</h3>\n<p>Browser environment means running test codes in an actual browser, and currently, excluding the E2E testing tools, using Karma is the only way to achieve this goal. However, since Karma only acts as a test runner, Karma requires a separate testing framework, and it is generally recommended to use <a href=\"https://jasmine.github.io\">Jasmine</a>.</p>\n<p>When Karma is executed on the command line, it first builds its web server, creates an HTML page to run the test on, and proceeds to load the test codes and the entire source code on the webpage. Later, when the webpage is accessed directly through the browser, the loaded code will execute, and the results will be printed on the console. Karma, then, takes the resulting information and by using the designated reporter, presents the organized results on the command line. </p>\n<p>The biggest benefit of this method is that because the test is ran in a real browser environment, all of functionality provided by the browser (network IO, rendering engine, etc.) can be used to test the application. Also, by using tools like <a href=\"https://www.seleniumhq.org/\">Selenium</a>, the same test can be conducted on different environments (operating system, browser), so developers can carry out compatibility tests and other tests regarding device environments. </p>\n<p>However, the tests ran on an actual browser are inevitably slower than that of Node.js because a browser process is much heavier than a Node.js process. Also, in order to run tests in a browser environment, <a href=\"http://karma-runner.github.io/3.0/config/browsers.html\">browser launchers</a> have to be additionally installed, and the cost of creating and maintaining different browser environments cannot be overlooked. </p>\n<p>In order to address these issues, a <a href=\"https://en.wikipedia.org/wiki/Headless_browser\">headless browser</a> is often used during the development stages for the sake of timely feedback, and only when the product is ready to be distributed or is at the end of the development stage, can cross browsing test be recommended to be integrated with a CI server. Also by using external services like <a href=\"https://www.browserstack.com/\">Browser Stack</a> and <a href=\"https://saucelabs.com/\">Sauce Lab</a>, developers can use Karma without having to design the cross browsing environment manually.</p>\n<h3 id=\"nodejs\" style=\"position:relative;\"><a href=\"#nodejs\" aria-label=\"nodejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js</h3>\n<p>Node.js environment means running test codes on Node.js, and recently Mocha and Jest have been used most widely. As mentioned above, in Node.js environments, test runners and frameworks are integrated into a single item, so it is relatively easy to install and execute. Also, it is still difficult to run modular tests in browser, so browser environments are restricted to using bundlers like webpack, but in Node.js environment, desired modules can be directly imported from individual processes to be tested, which makes it much simpler and safer. </p>\n<p>However, the key disadvantage to using the Node.js environment is that it cannot aptly apply all of browser’s APIs because browsers maintained by Node.js lack APIs like <a href=\"https://en.wikipedia.org/wiki/Document_Object_Model\">DOM(Document Object Model)</a> and <a href=\"https://en.wikipedia.org/wiki/Browser_Object_Model\">BOM(Browser Object Model)</a>. Developers are using libraries like <a href=\"https://github.com/jsdom/jsdom\">jsdom</a> to create a virtual browser and address this issue, but it comes with numerous restrictions, since it cannot fully mimic a real browser. For example, a layout of an UI element cannot be tested due to the lack of the rendering engine, and navigation related modules cannot be tested. Furthermore, because the test cannot be ran on a browser, cross browsing tests cannot be done.</p>\n<h3 id=\"browser-vs-nodejs\" style=\"position:relative;\"><a href=\"#browser-vs-nodejs\" aria-label=\"browser vs nodejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Browser vs. Node.js</h3>\n<p>If the reader is still confused as to which environment should be used, consider the following suggestions.</p>\n<ol>\n<li>Use the browser environment if a cross browsing test is <strong>mandatory.</strong></li>\n<li>Use the browser environment if the project requires to be on actual browser features (rendering, network IO, navigation, etc.)</li>\n<li>Otherwise, use the Node.js environment.</li>\n</ol>\n<p>The reason “mandatory” is emphasized in the first item is that the necessity of cross browsing tests has decreased significantly in the recent years. Among the latest browsers, there is not a significant difference on how browsers handle standard representation of codes compared to older browsers. Also, since <a href=\"https://babeljs.io/\">Babel</a> takes care of syntactical issues regarding compatibility, and frameworks like React(<a href=\"https://reactjs.org\">https://reactjs.org</a>) and Vue(<a href=\"https://vuejs.org\">https://vuejs.org</a>) handle DOM manipulation, it is recommended to carefully consider whether the cross browsing test is truly necessary or not.</p>\n<p><em>(From the stand point of [QA(Quality assurance)](<a href=\"https://en.wikipedia.org/wiki/Quality\">https://en.wikipedia.org/wiki/Quality</a></em>assurance), it is only natural to ensure that the application will run flawlessly in any given environment. This guide discusses testing not from a QA’s perspective, but from a developer’s perspective, and in such case, it is paramount to weigh the benefits of writing and managing a cross browsing test.)_</p>\n<p>The following tools are not only recommended by the guide but are also currently widely used. </p>\n<ul>\n<li>Browser : Karma + Jasmine</li>\n<li>Node.js : Jest</li>\n</ul>\n<p>Each tool will be explained in greater detail in the following chapter.</p>\n<h2 id=\"jasmine\" style=\"position:relative;\"><a href=\"#jasmine\" aria-label=\"jasmine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jasmine</h2>\n<p>Jasmine is an integrated testing framework that uses BDD style assertion API, and works well with both Node.js and browser environments. While using assertion libraries and test doubles in Mocha require Chai and Sinon, respectively, Jasmine provides an integrated product, so it is unnecessary to install additional libraries and is easy to use. </p>\n<h3 id=\"defining-test-specs\" style=\"position:relative;\"><a href=\"#defining-test-specs\" aria-label=\"defining test specs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining Test Specs</h3>\n<p>Every test specs in Jasmine must be written using the <code class=\"tui-language-text\">it()</code> function. <code class=\"tui-language-text\">it()</code> function takes two parameters--the title of the spec as its first parameter and a function that will run the spec as its second parameter. Inside of the function that will run the specs, <code class=\"tui-language-text\">expect()</code> statement can be used to verify the assertions. Let’s create a simple example that adds two numbers as an example. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Below is an example of a spec to test the example function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The sum() function returns the sum of two inputs.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"grouping-test-specs\" style=\"position:relative;\"><a href=\"#grouping-test-specs\" aria-label=\"grouping test specs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grouping Test Specs</h3>\n<p>Grouping related tests according to the target or purpose makes it easier to manage the test when the number of specs increase drastically, and test results can be presented in an organized and grouped format. In Jasmine, <code class=\"tui-language-text\">describe()</code> can be used to group tests, and can be nested to form multiple lower level groups. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Simple Arithmetics'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum()'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'If there is only one input, raise an error.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'If there are two inputs, return the sum.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'multiply()'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"resetting-tests\" style=\"position:relative;\"><a href=\"#resetting-tests\" aria-label=\"resetting tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resetting Tests</h3>\n<p>Sometimes, when writing tests, repetitive resets are necessary. In this case, <code class=\"tui-language-text\">beforeEach()</code> and <code class=\"tui-language-text\">afterEach()</code> functions allow developers to separately define logics that are necessary before and after each specification is executed. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">let</span> uploader<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  uploader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uploader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token string\">'http://test.url'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  uploader<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Uploader'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request File Upload'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Import upload queue'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"spy-class\" style=\"position:relative;\"><a href=\"#spy-class\" aria-label=\"spy class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spy Class</h3>\n<p>When using mock objects in JavaScript, the spy class is one of the most useful test doubles. Spy can not only act as a test double, but also stores information like how many times a function was called or which inputs were passed. This stored information can be extremely useful in validating the test. Spies can be created with relative ease by using functions like <code class=\"tui-language-text\">createSpy()</code> and <code class=\"tui-language-text\">spyOn()</code>, included in Jasmine, and can be used to validate different results by using assertions like <code class=\"tui-language-text\">toHaveBeenCalledWith()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">let</span> counter<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> <span class=\"token string\">'inc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  counter<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  counter<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inc() Check number of calls'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inc() Check number of calls'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inc() Check number of calls'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"clock-class\" style=\"position:relative;\"><a href=\"#clock-class\" aria-label=\"clock class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clock Class</h3>\n<p>Jasmine allows developers to directly manipulate the JavaScript’s built-in timer API. However, when using timer, global functions like <code class=\"tui-language-text\">setTimeout</code> and <code class=\"tui-language-text\">Date</code> are affected internally, so it is <strong>critical</strong> to remember to exit the clock class after it has served its purpose. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clock starts</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">uninstall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clock exits</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout() The function will execute the callback function after given miliseconds'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> callback <span class=\"token operator\">=</span> jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">createSpy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Callback not yet executed</span>\n  jasmine<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// after 100 ms</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Callback executed</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"asynchronous-test\" style=\"position:relative;\"><a href=\"#asynchronous-test\" aria-label=\"asynchronous test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asynchronous Test</h3>\n<h4 id=\"using-callback-functions\" style=\"position:relative;\"><a href=\"#using-callback-functions\" aria-label=\"using callback functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Callback Functions</h4>\n<p>If the target test code is executed asynchronously, in order for test specs to finish, they have to wait until all asynchronous code is done executing. In this case, a separate parameter (usually named <code class=\"tui-language-text\">done</code>) is used in the callback function describing <code class=\"tui-language-text\">it</code>. When <code class=\"tui-language-text\">done</code> parameter is declared in this callback function, the spec will be put on hold until <code class=\"tui-language-text\">done</code> parameter is executed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetchData: After calling the API, executes the callback function asynchronously.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hold until this function executes</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"using-a-promise\" style=\"position:relative;\"><a href=\"#using-a-promise\" aria-label=\"using a promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a promise</h4>\n<p>If the callback function describing <code class=\"tui-language-text\">it</code> returns a promise, Jasmine intrinsically knows to wait until the promise is resolved. Had the previous example returned a promise instead of using a callback, the spec would have been able to be written in a more concise format. In this case, the promise, result of the <code class=\"tui-language-text\">fetchData()</code> function, is passed onto the <code class=\"tui-language-text\">it</code> to be returned, the test will not exit until the promise is resolved. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetchData: Returns a promise'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"using-asnycawait\" style=\"position:relative;\"><a href=\"#using-asnycawait\" aria-label=\"using asnycawait permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using asnyc/await</h4>\n<p>In environments that support the <code class=\"tui-language-text\">async/await</code>, newly added in ES2017, <code class=\"tui-language-text\">async</code> function can be passed on to <code class=\"tui-language-text\">it</code> as a callback function directly. Since <code class=\"tui-language-text\">async</code> function automatically returns a promise at the end, it does not need any additional return statements to operate identically as the example above, and the code becomes much more intuitive.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetchData: Returns a promise.'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"karma\" style=\"position:relative;\"><a href=\"#karma\" aria-label=\"karma permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Karma</h2>\n<p>Previously to run tests written in Jasmine in the browser environment, it was necessary to create a page and to load all of the source codes and test codes. Also, to check the test results, UI had to be added or the console from the browser developer tool was required. Karma is a tool that automates such series of operations when running tests in the browser environment, and also does the following. </p>\n<ul>\n<li>It builds a local web server, and creates an HTML page to load all of the codes and resources needed for tests.</li>\n<li>Automatically executes the defined browser’s process, and connects to the previously created page’s URL.</li>\n<li>Takes the results from the browser, and uses the designated reporter to present the data in various formats. </li>\n</ul>\n<h3 id=\"install-and-usage\" style=\"position:relative;\"><a href=\"#install-and-usage\" aria-label=\"install and usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install and Usage</h3>\n<p>Following sections will briefly introduce the process from installing and configuring Karma to actually using it.</p>\n<h4 id=\"installing-karma\" style=\"position:relative;\"><a href=\"#installing-karma\" aria-label=\"installing karma permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Karma</h4>\n<p>Using npm, the binary file can easily be downloaded. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install --save-dev karma</code></pre></div>\n<h4 id=\"installing-jasmine-plugin\" style=\"position:relative;\"><a href=\"#installing-jasmine-plugin\" aria-label=\"installing jasmine plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Jasmine Plugin</h4>\n<p>To use Jasmine with Karma, Jasmine’s source code has to be loaded manually through the Karma configuration file. If using Jasmine as a plugin, Jasmine can be used immediately without having to go through this step (assuming Jasmine is already installed.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install --save-dev karma-jasmine</code></pre></div>\n<h4 id=\"installing-the-chrome-launcher\" style=\"position:relative;\"><a href=\"#installing-the-chrome-launcher\" aria-label=\"installing the chrome launcher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing the Chrome Launcher</h4>\n<p>To automatically launch browsers, corresponding launchers must be installed. For example, to use the Chrome browser, <code class=\"tui-language-text\">karma-chrome-launcher</code> must be installed. Karma offers a wide range of options besides Chrome, and the list of compatible browsers can be found on the <a href=\"http://karma-runner.github.io/3.0/config/browsers.html\">official webpage</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install --save-dev karma-chrome-launcher</code></pre></div>\n<h4 id=\"configuration-file\" style=\"position:relative;\"><a href=\"#configuration-file\" aria-label=\"configuration file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration File</h4>\n<p>Karma can be configured using the <code class=\"tui-language-text\">karma.config.js</code> file at the root folder of the project. Below is an example of a simple config file that only includes the bare minimum configuration, and detailed explanations on each configuration can be found on the <a href=\"http://karma-runner.github.io/3.0/config/configuration-file.html\">official website</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  config<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    frameworks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jasmine'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// Using the Jasmine testing framework</span>\n    files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'src/**/*.js'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// Source file path</span>\n      <span class=\"token string\">'test/**/*.spec.js'</span>  <span class=\"token comment\">// Test file path</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    reporters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dots'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// Designating a reporter (will be printed in dots)</span>\n    browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Chrome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// Designating a launcher to automatically execute the Chrome browser</span>\n    singleRun<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>         <span class=\"token comment\">// Exit Karma after a single test</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"testing-1\" style=\"position:relative;\"><a href=\"#testing-1\" aria-label=\"testing 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h4>\n<p>First, register the npm script in the <code class=\"tui-language-text\">package.json</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"karma start\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, the test can be ran conveniently through the command line.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm test</code></pre></div>\n<p>After the Karma executes, the browser will open, and when the test is over, the results will be printed to the console as shown below. When the test is over, the browser will automatically close.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731228-3be76380-9280-11e9-969e-34c84cd5250e.png\" alt=\"Screen Shot 2018-10-23 at 12 55 52 PM\"></p>\n<h3 id=\"measuring-code-coverage\" style=\"position:relative;\"><a href=\"#measuring-code-coverage\" aria-label=\"measuring code coverage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Measuring Code Coverage</h3>\n<p>The coverage of the written code can be measured using the <a href=\"http://gotwarlost.github.io/istanbul/\">Istanbul</a> library. The Istanbul library operates by analyzing the source code and inserting a piece of code that measures the number of execution line by line. After the code finishes executing, the results can be printed in various formats including HTML, LCOV, and Cobertura, and can be integrated with the CI server to be used.</p>\n<p>Istanbul can be ran over the command line, but is generally recommended to use the plugin format provided by the test runner. The coverage can easily be monitored with Karma by using <a href=\"https://github.com/karma-runner/karma-coverage\">karma-coverage</a> plugin provided by Istanbul. </p>\n<h4 id=\"installing-karma-coverage-plugin\" style=\"position:relative;\"><a href=\"#installing-karma-coverage-plugin\" aria-label=\"installing karma coverage plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing karma-coverage plugin</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install --save-dev karma-coverage</code></pre></div>\n<h4 id=\"editing-the-config-file\" style=\"position:relative;\"><a href=\"#editing-the-config-file\" aria-label=\"editing the config file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editing the Config File</h4>\n<p>When it finishes installing, the config file must be customized. To the example config file, add <code class=\"tui-language-text\">coverage</code> to <code class=\"tui-language-text\">reporters</code>, and also in <code class=\"tui-language-text\">preprocessors</code>, add <code class=\"tui-language-text\">coverage</code> to the target source file. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  config<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    frameworks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jasmine'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'src/**/*.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'test/**/*.spec.js'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    reporters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dots'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'coverage'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Add coverage reporter</span>\n    coverageReporter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Define the coverage printing format</span>\n      dir<span class=\"token operator\">:</span> <span class=\"token string\">'coverage'</span> <span class=\"token comment\">// Define where the coverage measurement report will be stored</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Chrome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n    singleRun<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    preprocessors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>   \n      <span class=\"token string\">'src/**/*.js'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coverage'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Define the preprocessors for the coverage measurement of the entire code</span>\n    <span class=\"token punctuation\">}</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"running-and-checking-the-results\" style=\"position:relative;\"><a href=\"#running-and-checking-the-results\" aria-label=\"running and checking the results permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running and Checking the Results</h4>\n<p>Now, when Karma is executed, a folder named with the tested browser and the operating system <code class=\"tui-language-text\">Chrome 69.0.3497 (Mac OX X 10.14.0)</code> can be found in the <code class=\"tui-language-text\">coverage</code> folder. (If multiple launchers were used, a separate folder will be created for each environment.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731229-3be76380-9280-11e9-8da3-3c01844ca8ab.png\" alt=\"Screen Shot 2018-10-23 at 12 57 53 PM\"></p>\n<p>In the <code class=\"tui-language-text\">index.html</code> file located in <code class=\"tui-language-text\">src</code> folder, coverage measurements for each file will be listed.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731231-3c7ffa00-9280-11e9-933f-fba52684412e.png\" alt=\"Screen Shot 2018-10-23 at 12 58 56 PM\"></p>\n<p>Individual results can be viewed by clicking the corresponding file. The following image is a line by line coverage result of a <code class=\"tui-language-text\">calc.js</code> file. The <code class=\"tui-language-text\">1x</code> to the left of the file means that the corresponding line was executed once throughout the entire test.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731230-3c7ffa00-9280-11e9-8eeb-d94428c80a88.png\" alt=\"Screen Shot 2018-10-23 at 12 58 43 PM\"></p>\n<h3 id=\"cross-browsing-test\" style=\"position:relative;\"><a href=\"#cross-browsing-test\" aria-label=\"cross browsing test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross Browsing Test</h3>\n<p>This document has so far dealt mainly with hosting tests on the local PC. By using the browser launcher plugin provided by Karma, developers can conduct a variety of browser tests on a local PC. However, it may be impossible to test solely on the developer’s local PC if a project requires to be tested on more devices. For example, Internet Explorer can only be installed once on a Windows operating system, and using a virtual machine or multiple PCs are the only way to test for multiple versions of Internet Explorer. </p>\n<p>In such cases, by connecting Karma and <a href=\"https://www.seleniumhq.org/\">Selenium WebDriver</a>, tests can be conducted on remote PCs, and the results can be printed in a single file. To put it simply, instead of the Chrome launcher from the previous example, <a href=\"https://github.com/karma-runner/karma-webdriver-launcher\">karma-webdriver-launcher</a> is used. Then, the test can be executed by using a Hub like device to allow remote PCs to connect to the local Karma server.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731220-3ab63680-9280-11e9-9b81-24bd36846f44.png\" alt=\"31878040-9e9691a2-b813-11e7-8413-e54dfafc9781\"></p>\n<p>Although this guide does introduce Selenium WebDriver later in the “E2E testing tools” section, actual installation and test environment configuration are not discussed. Refer to <a href=\"/test123/weekly-pick/ko_20171020/\">Creating an environment for multi-browser testing (Korean)</a> for detailed information on installation and usage.</p>\n<h2 id=\"jest\" style=\"position:relative;\"><a href=\"#jest\" aria-label=\"jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jest</h2>\n<p><a href=\"https://jestjs.io/\">Jest</a> is an opensource test framework created by Facebook, and is a test tool that is currently most hotly used. Although it has been around for quite some time, developers have only recently started to use it due to a recent performance and durability enhancement. Unlike Karma, Jest is executed on Node.js environment, and internally uses Jasmine style assertion API, so users who are acclimated to Jasmine can easily make the change.</p>\n<p>Although this guide does not introduce specific usage, it will list out some of the benefits and useful features. </p>\n<h3 id=\"easy-install-and-usage\" style=\"position:relative;\"><a href=\"#easy-install-and-usage\" aria-label=\"easy install and usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easy Install and Usage</h3>\n<p>The biggest advantage of Jest is that it is very easy to install and to use. Not only does Jest provide test runner functionality, but also provides assertion, test double, code coverage, and basically every feature necessary for efficient testing; no additional installation is necessary. Also, since it can be executed without much configuration, or in default settings, novice users who are new to the tool can easily write tests to be applied to actual projects. </p>\n<p>Below is an example of a Jest code to demonstrate its simplicity. First, it can be installed using an npm command.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install --save-dev jest</code></pre></div>\n<p>To make sure that the test runs smoothly, register the <code class=\"tui-language-text\">test</code> to <code class=\"tui-language-text\">package.json</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the test is of <code class=\"tui-language-text\">*.spec.js</code> format, test can be ran without any additional setup. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm test</code></pre></div>\n<p>Then, the following result will be printed to the terminal.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731223-3b4ecd00-9280-11e9-8979-2f1de249a923.png\" alt=\"Screen Shot 2018-10-23 at 3 18 03 PM\"></p>\n<p>Jest is not only useful for the novices, but also extremely effective with the experts. A separate config file <code class=\"tui-language-text\">jest.conf.js</code> can be used to manipulate different settings, and <code class=\"tui-language-text\">jest</code> property can be used within the <code class=\"tui-language-text\">package.json</code> file to configure the tool as well. For example, to determine the path of the test file, use the <code class=\"tui-language-text\">testMatch</code> option in <code class=\"tui-language-text\">package.json</code> file as presented below. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">{\n  &quot;name&quot;: &quot;my-project&quot;,\n  &quot;jest&quot;: {\n    &quot;testMatch&quot;: [&quot;&lt;rootDir&gt;/test/**/*.spec.js&quot;]\n  }\n}</code></pre></div>\n<p>Detailed description about each option can be found on the <a href=\"https://jestjs.io/docs/en/configuration\">official website</a>.</p>\n<h3 id=\"easy-code-coverage-measurement\" style=\"position:relative;\"><a href=\"#easy-code-coverage-measurement\" aria-label=\"easy code coverage measurement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easy Code Coverage Measurement</h3>\n<p>Jest, much like Karma, uses Istanbul to measure code coverage. However, in Jest, this feature is also provided as an integrated functionality, users do not have to install additional files or change the setting file. To check for coverage for the previous example, simply add the <code class=\"tui-language-text\">--coverage</code> option to the command line. </p>\n<p>To execute an npm script, add <code class=\"tui-language-text\">--</code> as presented below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm test -- --coverage</code></pre></div>\n<p>After it finishes execution, the coverage measurement result will be printed in the command line, and a <code class=\"tui-language-text\">coverage</code> folder will have been created in the project folder.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731224-3b4ecd00-9280-11e9-9bba-04c04d8637eb.png\" alt=\"Screen Shot 2018-10-23 at 3 25 57 PM\">\n<img src=\"https://user-images.githubusercontent.com/35218826/59731226-3be76380-9280-11e9-9d3b-488fbd9cb36b.png\" alt=\"Screen Shot 2018-10-23 at 3 30 20 PM\"></p>\n<p>It can be seen that the <code class=\"tui-language-text\">index.html</code> file in the <code class=\"tui-language-text\">lcov-report</code> folder is identical to the one from the previous example using Karma. </p>\n<h3 id=\"built-in-jsdom\" style=\"position:relative;\"><a href=\"#built-in-jsdom\" aria-label=\"built in jsdom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-In jsdom</h3>\n<p>As mentioned above, <a href=\"https://developer.mozilla.org/en-US/docs/Gecko_DOM_Reference\">DOM</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">window</a> APIs provided by browsers cannot be used in Node.js environments. Therefore, when running front-end code tests, such APIs have to be created virtually, and <a href=\"https://github.com/jsdom/jsdom\">jsdom</a> is one of the libraries that is most widely used and most successfully created. However, since jsdom comes in a library format, a piece of reset code has to be executed each time a test is ran, and in the browser environment, it is a tedious task to say the least. </p>\n<p>However, in Jest, jsdom is built-in and is automatically provided with appropriate environment settings every time a test is ran, so it can be used as if it is being used on a browser environment without much additional work. </p>\n<h3 id=\"snapshot-testing\" style=\"position:relative;\"><a href=\"#snapshot-testing\" aria-label=\"snapshot testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snapshot Testing</h3>\n<p>Snapshot testing is Jest’s symbolic feature. In simplest terms, snapshot test stores the internal status of an object exactly as a file, and compares how the file has changed after a test is ran. It is sort of a regression test, and it allows developers to visually compare the effects of a test without having to assign expected values to an extremely complex object with equally complicated internal structure.  </p>\n<p>Snapshot test is usually done to compare virtual DOM structures of React, and it only requires <code class=\"tui-language-text\">toMatchSnapshot()</code> function to be added. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'./Link'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Confirm rendering'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://ui.toast.com\"</span><span class=\"token operator\">></span><span class=\"token constant\">TOAST</span> <span class=\"token constant\">UI</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Snapshot file will be created automatically after running the test, and the file will contain the identical information as the rendered DOM structure as shown below. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\">exports<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Check rendering 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n&lt;a\n  className=\"normal\"\n  href=\"http://ui.toast.com\"\n  onMouseEnter={[Function]}\n  onMouseLeave={[Function]}\n>\n  TOAST UI\n&lt;/a>\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once the snapshot file is created, the test will fail if the component returns a DOM that is different from the one that is saved. Developers can inspect the changes, and if the changes are intentional, renew the snapshot, and if not, developers can attempt to fix the issue. </p>\n<p>Such testing method can be used successfully with complex data structures even if the file is not a React file. However, snapshot testing does have a flaw that the purpose of the test may not be clear. Especially, if the developer composes or renews the snapshot without careful consideration of the resulting details, it may contribute to building inefficient testing habits.</p>\n<h3 id=\"test-file-filtering\" style=\"position:relative;\"><a href=\"#test-file-filtering\" aria-label=\"test file filtering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test File Filtering</h3>\n<p>Jest provides a feature that allows developers to specifically point out which file to run the test on. Jest, as default, synchronizes with a version control tool, like Git, and only includes files that changed since the last commit. This way, Jest prevents running redundant tests on already verified data. </p>\n<p>Using the command line interface, developers can set the target with even more precision. Unlike test runners that cannot be interrupted with additional commands, Jest provides an interactive command line interface so developers can change the target files in the middle of the testing process. With the CLI, developers can even pause a running test or inject a test filter so that only files that match the criteria are tested. Also, if the snapshot test fails, it is possible to <a href=\"https://jestjs.io/docs/en/snapshot-testing#interactive-snapshot-mode\">immediately renew the snapshot after checking the results.</a>.</p>\n<p>The following video clip shows the process of using the <code class=\"tui-language-text\">a</code> key to run the test on all files, <code class=\"tui-language-text\">q</code> key to quit, and <code class=\"tui-language-text\">p</code> key to run test only on desired patterns. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731221-3b4ecd00-9280-11e9-8b95-fc4b0e193f8f.gif\" alt=\"Screen Recording 2018-10-23 at 3 36 57 PM 2018-10-23 15_41_40\"></p>\n<h3 id=\"sandbox-parallel-testing\" style=\"position:relative;\"><a href=\"#sandbox-parallel-testing\" aria-label=\"sandbox parallel testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sandbox Parallel Testing</h3>\n<p>The biggest advantage of running tests in the Node.js environment is the “speed.” Node.js processes are much lighter than that of the browsers, so initial running speed has to be faster than the browsers. Jest exploits this characteristic to run test files from independent processes. In this case, the global scope defined in each test cannot influence others and executes as if it were running in a sandbox, so the test becomes much safer. </p>\n<p>However, if tests create children tests while being executed serially, it becomes slower than running the test in a single process. In order to address this issue, Jest <a href=\"https://jestjs.io/docs/en/jest-platform#jest-worker\">parallelly executes multiple processes</a>, and optimizes the processing speed by aptly monitoring the internal processes and the number of CPU cores. Also, by using the, previously explained, “test filtering” feature, Jest saves even more time by not running redundant tests. </p>\n<p>As such, Jest maintains the high processing speed as well as a much safer testing environment. </p>\n<h2 id=\"e2e-testing-tools\" style=\"position:relative;\"><a href=\"#e2e-testing-tools\" aria-label=\"e2e testing tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>E2E Testing Tools</h2>\n<p>So far, the tests mentioned in this guide like Karma and Jest are all tools best suited for unit and integration testing. E2E tests have been unfavored by developers because they are difficult to write, executes extremely slowly, and cannot be conducted in a controlled environment. However, since front end development and UI/UX cannot be completely isolated from the real users’ environment, E2E tests, tests held from the users’ perspective, have always been required. </p>\n<p>In such trend, recently, tools like <a href=\"https://www.cypress.io\">Cypress</a> and <a href=\"https://devexpress.github.io/testcafe/\">TestCafe</a> emerged, and they minimize the disadvantages the original E2E tests had while maximizing the benefits. This chapter will compare <a href=\"https://www.seleniumhq.org/projects/webdriver/\">Selenium Webdriver</a>, previously most famous tool, and Cypress, currently most famous tool, and will attempt to observe the growth of E2E testing tools. </p>\n<h3 id=\"selenium-webdriver\" style=\"position:relative;\"><a href=\"#selenium-webdriver\" aria-label=\"selenium webdriver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selenium WebDriver</h3>\n<p>Selenium WebDriver, often referred to as Selenium or WebDriver, is a name that collectively refers to the <a href=\"https://www.w3.org/TR/webdriver/\">WebDriver API</a>, newly introduced in Selenium 2.0, and the Selenium itself. While Selenium 1.0 operated by injecting JavaScript inside of the browsers, from 2.0, Selenium operates by controlling the browser from the outside, therefore allowing more intricate controls. Also, <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a> provides developers a way to use the same test code to execute the tests on multiple devices. </p>\n<p>WebDriver is an HTTP based protocol created to control the browser based on uniform APIs, and although it started as an individual specification, is now a standard maintained by W3C. In WebDriver, the browser acts as the server and the device requesting control (developer’s PC or CI server) acts as the client, forming a server-client architecture. It is used by installing browser drivers and developer client. </p>\n<p>For example, in order for the browser to process the client’s request, a separate driver must be installed, and <a href=\"https://www.seleniumhq.org/download/\">Selenium’s official webpage</a> offers multiple drivers for different browsers like Chrome, Internet Explorer, Firefox, and Safari. Furthermore, since WebDriver is a protocol based on JSON supported by HTTP, it does not restrict languages when writing test codes, and so far, provides clients that support not only JavaScript, but also Java, C#, Ruby, Python, and much more. </p>\n<p>Especially with JavaScript, there already is a variety of testing frameworks based on Node.js that uses WebDriver API, and here are some examples. </p>\n<ul>\n<li><a href=\"http://www.protractortest.org/\">Protractor</a> : Testing framework for Angular projects</li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs\">WebdriverJS</a> : Official Node.js representation by Selenium WebDriver; supports low-level API </li>\n<li><a href=\"http://nightwatchjs.org/\">NightWatch</a> : Provides wide range of features like Mocha based test runner, intuitive API, and integrated CI server</li>\n<li><a href=\"http://webdriver.io/\">WebdriverIO</a> : Provides wide range of features like test runner, static web server, integrated CI server, REPL interface, etc, and has the most active community.</li>\n</ul>\n<p>WebDriver can be said to be the most widely used E2E test as of current. It can be used by developers and specialized testers, and is used to perform numerous automatizations using the browser. However, WebDriver is still subjected to all of the disadvantages mentioned above, so is expensive to maintain and is not very plausible to be used in the development stages. </p>\n<h2 id=\"cypress\" style=\"position:relative;\"><a href=\"#cypress\" aria-label=\"cypress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cypress</h2>\n<p>Cypress, along with TestCafe, is <em>the</em> E2E test tool that stands in the spotlight today, and unlike WebDriver, operates by processing the actual application and the test code on the same browser. By doing so, Cypress eliminates the unnecessary communication between processes using protocols like HTTP and runs the tests in the same internal process, which makes testing faster and safer. Cypress also provides useful functionalities like allowing developers to check the current state of the test and to debug through a GUI based on the browser.</p>\n<p>For example, Cypress stores all of the test commands and corresponding snapshots of the UI, so developers can visually inspect the UI at a certain point in the test. Also, the entire testing process can be stored as a recoding or the failed states can be stored as screenshots, so developers can easily track down the problem. Furthermore, because the tests run on the browser, if necessary, developers can use the Chrome developer tools to debug.</p>\n<p>However, the disadvantage that it runs in the browser still exists, and such issue is explained in greater detail on the <a href=\"https://docs.cypress.io/guides/references/trade-offs.html\">Cypress official documentation</a>. For example, developers cannot open a new tab or a new page, and cannot navigate to a page that violates the same-origin policy. Also, because only JavaScript can run on browsers, testing code is restricted to be only written in JavaScript. </p>\n<p>However, these disadvantages hold true for all E2E tests, and do not cause much trouble when testing JavaScript code. Cypress is built with a completely different purpose compared to Selenium WebDriver, and is optimized to be used by front end developers during the development stage. Especially, since Cypress eliminates the main disadvantage of E2E tests, the high maintenance cost and long runtime, developers can now use E2E tests as simply as using unit tests or integration tests. Given the benefits E2E tests provide, as tools like Cypress continue to be developed, more and more developers will compose and use E2E tests. </p>\n<h3 id=\"installing-and-using-cypress\" style=\"position:relative;\"><a href=\"#installing-and-using-cypress\" aria-label=\"installing and using cypress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing and Using Cypress</h3>\n<p>Now, let’s actually install Cypress and use it to test a simple ToDoMVC application.</p>\n<h3 id=\"install-and-set-up\" style=\"position:relative;\"><a href=\"#install-and-set-up\" aria-label=\"install and set up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install and Set Up</h3>\n<p>Cypress can easily be installed using npm.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm install cypress --save-dev</code></pre></div>\n<p>Although Cypress can be ran without additional configuration, it is useful to register the npm script. Enter the following script in <code class=\"tui-language-text\">package.json</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"cypress:open\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress open\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"running-on-interactive-mode\" style=\"position:relative;\"><a href=\"#running-on-interactive-mode\" aria-label=\"running on interactive mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running on Interactive Mode</h3>\n<p>Entering the following command in the command line will start Cypress.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm run cypress:open</code></pre></div>\n<p>A <code class=\"tui-language-text\">cypress</code> folder will be created in the project folder when Cypress is first ran. This folder contains useful sample codes for developers who are new to Cypress. The <code class=\"tui-language-text\">integration/examples</code> folder contains multiple test specs for different scenarios, so can be extremely useful when starting out with Cypress.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731232-3c7ffa00-9280-11e9-8eca-8e01ebefa4a1.png\" alt=\"Screen Shot 2018-12-03 at 3 58 39 PM\"></p>\n<p>When Cypress is executed, a GUI application created using <a href=\"https://electronjs.org\">Electron</a> will appear as presented below. The current test specs will be shown in the <strong>Tests</strong> tab, and even shows sample files in <code class=\"tui-language-text\">integration/examples</code> folder. Let’s pick <code class=\"tui-language-text\">actions.specs.js</code> file and actually run a test on it. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731234-3d189080-9280-11e9-90ce-ecf38034d524.png\" alt=\"Screen Shot 2018-12-03 at 4 14 30 PM\"></p>\n<p>Test runner and individual tests will run sequentially when a test is selected as in the screenshot above. Listed below are brief introductions on each view of the test runner, and more detailed information can be found on the <a href=\"https://docs.cypress.io/guides/core-concepts/test-runner.html\">official website</a>. </p>\n<p><strong>(1) Test Status Menu</strong>\n- Number of currently running and failed tests will be presented here along with the time-spent.<br>\n<strong>(2) URL Preview</strong>\n- The URL of the currently running application will be presented here.\n<strong>(3) Command Logs</strong>\n- All commands executed within the test specs will be presented here.\n- Developers can visually inspect the state of the corresponding command by hovering or clicking on the command.\n<strong>(4) App Preview</strong>\n-The application will be presented here as it executes. </p>\n<p>Highlighted in purple in the screenshot above (A), is the currently running command, and in this case, the app preview shows the effect on the DOM element the current command has on it (B). Also, the layer (C) at the bottom of the app preview allows testers to compare the before and after of the command running. </p>\n<h3 id=\"running-in-the-background\" style=\"position:relative;\"><a href=\"#running-in-the-background\" aria-label=\"running in the background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running in the Background</h3>\n<p>Cypress will execute with the GUI as presented above when executed with the <code class=\"tui-language-text\">open</code> command. While this feature is useful during the development stages, it is unnecessary in the CI server environment, and in this case, Cypress can be executed in background mode, without the GUI, by the <code class=\"tui-language-text\">run</code> command. Add the following script to <code class=\"tui-language-text\">package.json</code> and run the following npm commands. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"cypress:run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress run\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"tui-language-text\"><code class=\"tui-language-text\">$ npm run cypress:run</code></pre></div>\n<p>Executing the <code class=\"tui-language-text\">run</code> command without specifying different options will take some time since it runs every single test. As tests run, each test result will be printed on the terminal as presented below. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731240-3e49bd80-9280-11e9-98dd-01daec1fa884.png\" alt=\"Screen Shot 2018-12-03 at 5 08 56 PM\"></p>\n<p>When the last test finishes running, Cypress will print out the collective test results. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731235-3d189080-9280-11e9-88cd-d5278cdc295d.png\" alt=\"Screen Shot 2018-12-03 at 5 08 26 PM\"></p>\n<p>The recording for the entire testing process is saved automatically, and will be created in <code class=\"tui-language-text\">cypress/videos/examples</code> folder as <code class=\"tui-language-text\">mp3</code> files. </p>\n<h2 id=\"writing-cypress-codes\" style=\"position:relative;\"><a href=\"#writing-cypress-codes\" aria-label=\"writing cypress codes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Cypress Codes</h2>\n<p>Now, let’s experience the Cypress API by writing a simple test using <a href=\"http://todomvc.com\">Todo MVC</a> application. The ToDo MVC example can easily be obtained from the website, and since the installation process does not vary with frameworks, will not be discussed. This guide assumes that ToDo MVC is hosted on <code class=\"tui-language-text\">http://localhost:8888</code>.</p>\n<h3 id=\"creating-and-running-test-files\" style=\"position:relative;\"><a href=\"#creating-and-running-test-files\" aria-label=\"creating and running test files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating and Running Test Files</h3>\n<p>The first thing in order is to add the test file. Insert the <code class=\"tui-language-text\">todo.spec.js</code> file to the <code class=\"tui-language-text\">cypress/integration</code> folder, and enter the following. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Todo MVC'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8888'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cypress uses Mocha API internally, so it can be observed that the functions like <code class=\"tui-language-text\">describe</code> and <code class=\"tui-language-text\">beforeEach</code> are similar to the previously explained Jasmine API. The only notable difference is the global object <code class=\"tui-language-text\">cy</code>, and in Cypress, every command goes through the <code class=\"tui-language-text\">cy</code> object. The <code class=\"tui-language-text\">cy.visit</code> in the code above, is a command to load the page using the URL that was passed in as an input.</p>\n<h3 id=\"writing-test-codes\" style=\"position:relative;\"><a href=\"#writing-test-codes\" aria-label=\"writing test codes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Test Codes</h3>\n<p>Now, let’s execute the test file by entering <code class=\"tui-language-text\">npm run cypress:open</code> in the command line to run Cypress and clicking the <code class=\"tui-language-text\">todo.spec.js</code> in the test runner. “No tests found in file” message will appear in the command log since no tests have been written. Now let’s actually write the tests. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"tui-language-js\"><code class=\"tui-language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Todo MVC'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8888'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter Todo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Press enter after typing \"Cypress Exercise\" in a new-todo element</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.new-todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cypress Exercise{enter}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// The new-todo element's value should be an empty string.</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.new-todo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.value'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// The first child of todo-list element will include the \"Cypress Exercise\" text. </span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.todo-list li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cypress Exercise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// The todo-count element will include \"1 item left\" text. </span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.todo-count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1 item left'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As the code above demonstrate, most of the functions used within the <code class=\"tui-language-text\">cy</code> object returns the <code class=\"tui-language-text\">cy</code> object again, so can be called by <em>chaining</em>. This guide does not discuss the <code class=\"tui-language-text\">cy</code> object any more than absolutely necessary, and recommends that readers refer to the <a href=\"https://docs.cypress.io/api/api/table-of-contents.html\">official API documentation</a>. However, since APIs like <code class=\"tui-language-text\">get</code>, <code class=\"tui-language-text\">type</code>, and <code class=\"tui-language-text\">should</code> are extremely intuitive and simply built, it should not be difficult to understand what the tests are trying to prove without much explanation. </p>\n<p>When the code above is saved, Cypress will notice that there have been changes in the code, and it can be seen that the test runner has started again. At the end of the tests, Cypress will present the following screens. In the command log area left of the screen, is every single command executed in this test, and each command can be hovered or clicked on to show the state of the application that corresponds to the command. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/59731241-3ee25400-9280-11e9-9085-6817830bf8a8.png\" alt=\"Screen Shot 2018-12-03 at 9 08 26 PM\"></p>\n<p>So far, it has been a brief introduction to Cypress. Cypress offers much more than discussed above. The <a href=\"https://docs.cypress.io/\">official Cypress documentation</a> presents tutorials, test writing guide, and API documentation, which are all incredibly well written, and the author recommends the readers to take the time to read each document carefully.</p>\n<h2 id=\"afterword\" style=\"position:relative;\"><a href=\"#afterword\" aria-label=\"afterword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Afterword</h2>\n<p>So far, this document explored variety of testing tools used in the front-end environment like Jasmine, Karma, Jest, Selenium WebDriver, and Cypress. The numerous testing tools stand to reason that JavaScript is being used in wide range of areas, and that along with JavaScript, the testing tools are evolving as well. Through this document, author hopes that readers may understand the pros and cons of each tool, and to use them according to the characteristics of the project in order to better the quality of the product and the code. </p>\n<hr>\n<p>The employee training provided at FE Development Lab related to this document are as listed below. It is recommended to take these courses as well. </p>\n<ul>\n<li>Testing</li>\n<li>Real World JavaScript Development using Webpacks</li>\n</ul>\n<hr>\n<p>This document is an official Web Front-End development guide written and maintained by NHN FE Development Lab.\nAny errors, questions, and points of improvement pertaining to this document should be addressed to the official support channel (<a href=\"mailto:dl_javascript@nhn.com\">dl_javascript@nhn.com</a>).</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Last Modified</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">2019. 03. 29</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"id":"en_TEST","title":"Testing","description":"In the recent years, JavaScript has been widening the scope of use through rapid development, and the application standards put forth by the front-end environment are growing in complexity every day. Furthermore, testing environment also went through spectacular changes in disproportionate amount of time, and with the rise of Node.js, numerous testing tools have innundated the market and continue to undergo massive evolutions. Front end tests must consider different environments of users (browser, device, operating system, and etc,) so there are plenty of variables to take into account. For this reason, it is critical that developers understand the different tools and environments related to JavaScript testing, and a veteran expertise is required to design strategical tests customized to different projects.","date":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_TEST","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}