{"componentChunkName":"component---src-templates-fe-guide-detail-tsx","path":"/fe-guide/ko_STATIC-ANALYSIS","result":{"data":{"post":{"html":"<h1 id=\"정적-분석\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D\" aria-label=\"정적 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 분석</h1>\n<p>자바스크립트는 다른 언어에 비해 유연한 문법구조를 갖는다. 이런 특징이 가끔 뜻하지 않은 문제를 일으킨다. 가령, 문법적 오류가 아니라서 찾기 어려운 버그를 만들거나, 개발자의 의도를 파악하기 어려운 코드를 만들거나, 컴파일 단계가 없어서 코드를 실행하기 전까지는 알 수 없는 오류를 만든다. <strong>코딩 컨벤션</strong>을 준수하면 가독성이 좋아지고 안티 패턴의 코드를 예방할 수 있으므로 어느 정도 해결 방법이 될 수 있다. 하지만 개발자가 코딩 컨벤션을 잘 따르고 있는지는 여전히 확인하기 힘들다. 하지만 <strong>정적 분석</strong>을 이용하면 코딩컨벤션을 자동으로 검증하고 잠재에러를 찾아내 자바스크립트의 단점을 보완한다.</p>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<ul>\n<li>\n<p><a href=\"#%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D-%EB%8F%84%EA%B5%AC\">정적 분석 도구</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%97%AD%ED%95%A0\">정적 분석 도구의 역할</a></li>\n<li><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D-%EB%8F%84%EA%B5%AC\">대표적인 정적 분석 도구</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#eslint\">ESLint</a></p>\n<ul>\n<li><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\">설치 방법</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#prettier\">Prettier</a></p>\n<ul>\n<li><a href=\"#prettier-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\">prettier 설치 방법</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%A7%BA%EC%9D%8C%EB%A7%90\">맺음말</a></li>\n</ul>\n<h2 id=\"정적-분석-도구\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D-%EB%8F%84%EA%B5%AC\" aria-label=\"정적 분석 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 분석 도구</h2>\n<h3 id=\"정적-분석-도구의-역할\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"정적 분석 도구의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 분석 도구의 역할</h3>\n<ul>\n<li>코드를 정적으로 분석해서 문법 오류나 오타 등의 잠재적 에러를 찾아낸다.</li>\n<li><strong>코딩 컨벤션</strong> 검증을 자동화할 수 있다.</li>\n<li>개발도구와 연동해서 빠른 피드백을 줄 수 있다.</li>\n</ul>\n<h3 id=\"대표적인-정적-분석-도구\" style=\"position:relative;\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%A0%95%EC%A0%81-%EB%B6%84%EC%84%9D-%EB%8F%84%EA%B5%AC\" aria-label=\"대표적인 정적 분석 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대표적인 정적 분석 도구</h3>\n<ul>\n<li><strong>ESLint</strong> : 가장 최근에 만들어졌고, 유연성/확장성 높다.</li>\n<li><strong>Prettier</strong> : 코드 스타일과 자동 포맷팅 기능만을 강조해서 나온 도구이다.</li>\n<li>JSLint : 더글라스 크록포드가 2002년에 만들었다. 설정이나 확장이 불가능하다.</li>\n<li>JSHint : JSLint를 발전시켜 설정이나 확장성을 추가하였다.</li>\n<li>JSCS : 코딩 컨벤션 체커로 ESLint로 통합되었다.</li>\n</ul>\n<h2 id=\"eslint\" style=\"position:relative;\"><a href=\"#eslint\" aria-label=\"eslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint</h2>\n<p>ESLint는 니콜라스 자카스(Nicholas C. Zakas)가 만든 도구로 최근 가장 널리 사용된다. 특히 Airbnb, PayPal, facebook 와 같은 대형회사에서도 활발하게 사용될 정도로 신뢰할 수 있는 도구이다. 자바스크립트 구문 분석기인 <a href=\"https://github.com/eslint/espree\">Espree</a>를 사용해 AST(Abstract Syntax Tree)를 만들어 코드를 직접 평가하는 것으로 알려져 있고 방대한 규칙(Rule) 뿐만 아니라 다양한 환경과 포맷터를 지원한다. 규칙이나 포맷터를 직접 만들 수 있는 기능도 제공하기 때문에, 프로젝트의 특성에 따라 다양한 방식으로 커스터마이징할 수 있다. 자세한 <a href=\"http://eslint.org/docs/rules/\">규칙</a>이나 <a href=\"http://eslint.org/demo/\">데모</a>는 연결된 링크를 통하여 확인할 수 있다.</p>\n<h3 id=\"설치-방법\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\" aria-label=\"설치 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 방법</h3>\n<p>npm을 사용하여 간단하게 설치할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint</code></pre></div>\n<h3 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<p>설정 파일을 만들어 프로젝트마다 다른 규칙으로 정적 분석을 수행할 수 있다. ESLint를 지원하는 에디터는 프로젝트 폴더에 설정된 ESLint 규칙을 가지고 코딩 컨벤션을 검증하여 오류를 빠르게 확인하고 수정할 수 있다. 또한 Webpack과 같은 번들러에 통합하여 <a href=\"https://webpack.js.org/concepts/mode/\">development 모드와 production 모드</a>에서 다르게 동작시킬 수 있다. 특히 production 모드에서는 경고 레벨 이상의 에러가 정적 분석에서 발생할 경우 빌드 과정을 중단시킬 수 있다.</p>\n<h4 id=\"옵션\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%98\" aria-label=\"옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵션</h4>\n<p>옵션은 큰 분류로 Possible Errors, Best Practices, Strict Mode, Variables, Stylistic Issues, ES6로 나누어져 있으며 규칙이 방대하기 때문에 자세한 규칙은 <a href=\"https://eslint.org/docs/rules/\">공식 문서</a>에서 확인하기 바란다. <code class=\"tui-language-text\">.eslintrc.js</code> 설정 파일을 통해 옵션을 적용할 수 있으며 <code class=\"tui-language-text\">프로젝트 적용 방법</code>에  간략하게 설명하였다. <a href=\"https://eslint.org/docs/user-guide/configuring\">공식 문서</a>에 보다 상세한 적용 방법이 설명되어 있다.</p>\n<h4 id=\"cli-사용-방법\" style=\"position:relative;\"><a href=\"#cli-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"cli 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI 사용 방법</h4>\n<p>ESLint를 사용하기 위해서는 기본 규칙을 포함하는 설정 파일(<code class=\"tui-language-text\">.eslintrc.js</code>)이 필요하다.  아래와 같이 CLI에서 제공하는 <code class=\"tui-language-text\">--init</code> 옵션(설정 마법사)을 사용하여 간단하게 설정 파일을 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npx eslint <span class=\"token operator\">--</span>init</code></pre></div>\n<p>이제 CLI를 통해 ESLint를 실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npx eslint app<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>CLI를 수행하고 나면 ESLint는 app.js 파일을 정적 분석하여 규칙에 맞지 않는 부분들을 오류로 검출하고 아래와 같이 출력한다. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/48070070-61a48880-e21a-11e8-8a13-0b040b9977d7.png\" alt=\"filterimage\"> <br></p>\n<p>자주 사용되는 CLI옵션으로는 <code class=\"tui-language-text\">--fix</code>가 있다. <code class=\"tui-language-text\">--fix</code>를 사용하면 자동으로 잘못된 부분을 수정하여 저장해준다. 자동 저장을 원하지 않고 변경된 부분만 보고 싶다면 <code class=\"tui-language-text\">--fix-dry-run</code>을 사용할 수도 있다.</p>\n<p>더 많은 옵션은 <a href=\"https://eslint.org/docs/user-guide/command-line-interface\">ESLint 공식 사이트</a>에서 자세한 설명을 볼 수 있다.<br></p>\n<h4 id=\"프로젝트-적용-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"프로젝트 적용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 적용 방법</h4>\n<p><strong>1. <code class=\"tui-language-text\">.eslintrc.js</code> 파일을 생성하기</strong></p>\n<blockquote>\n<p>참고\n앞에서 설명한 CLI의 <code class=\"tui-language-text\">--init</code> 옵션을 통해 기본 규칙을 설정할 수도 있다</p>\n</blockquote>\n<p>아래는 설정파일에 간단한 규칙을 적용한 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    sourceType<span class=\"token operator\">:</span> <span class=\"token string\">'module'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    jasmine<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tui'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// add your custom rules here</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'indent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>SwitchCase<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ignoreComments<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> ImportDeclaration<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'semi'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"tui-language-text\">parserOptions속성</code>\n지원하려는 자바스크립트 언어 옵션을 지정할 수 있다. ecmaVersion, sourceType, ecmaFeatures 등을 지정할 수 있으며 자세한 옵션은 <a href=\"https://eslint.org/docs/user-guide/configuring#specifying-parser-options\">여기</a> 에서 확인할 수 있다.</li>\n<li><code class=\"tui-language-text\">env속성</code>\n코드가 실행되는 환경을 지정할 수 있다. 예시에서는 <code class=\"tui-language-text\">browser</code>, <code class=\"tui-language-text\">es6</code>, <code class=\"tui-language-text\">jasmine</code>을 설정하였다. </li>\n<li><code class=\"tui-language-text\">extends속성</code>\n미리 지정해 놓은 규칙 세트를 사용할 수 있다. 예시에서는 <strong>FE개발랩</strong> 내에서 정한 규칙 세트(<code class=\"tui-language-text\">eslint-config-tui</code>)를 설정하고 있다. (뒤의 내용인 <strong>'2. 이미 잘 정의된 ESLint 규칙을 활용하기'</strong> 에 보다 자세히 설명하였다)</li>\n<li><code class=\"tui-language-text\">rules속성</code>\nextends에서 지정한 규칙 세트에서 새로운 규칙을 확장하거나 재정의 할 수 있다.</li>\n</ul>\n<p>예시에서는 문장 끝에 세미콜론을 강제하는 규칙(<code class=\"tui-language-text\">semi</code>)을 적용하여 세미콜론의 적용여부를 지정하였다.  또한 들여쓰기규칙(<code class=\"tui-language-text\">indent</code>)으로 2 space를 지정하였고 옵션으로 switchCase(swith문에서 적용여부), ignoreComments(주석 줄에서의 적용여부), ImportDeclaration(import문에서의 들여쓰기 수준)을 true로 설정하고 있다.</p>\n<p><strong>2. 이미 잘 정의된 ESLint 규칙을 활용하기</strong></p>\n<p>ESLint는 매우 많은 규칙이 있기 때문에 프로젝트를 시작할 때부터 모든 규칙을 검토하고 적용하기는 어렵다. 구글이나 마이크로소프트, airbnb와 같은 대형 개발회사는 자체 코딩 컨벤션과 그에 따른 ESLint 규칙도 공개하고 있으므로 활용하면 좋다.</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">vscode-eslint</a></li>\n<li><a href=\"https://github.com/google/eslint-config-google\">eslint-config-google</a></li>\n</ul>\n<p><strong>FE개발랩</strong>에서 사용하는 코딩 컨벤션은 규칙 항목별로 사용 여부를 토론하고 합의를 통해 결정한 규칙이므로 유용한 가이드가 될 수 있다. 잘 정의된 ESLint 규칙도 제공하고 있으므로 활용하면 좋다. <strong>FE개발랩</strong>의 코딩 컨벤션과 <code class=\"tui-language-text\">eslint-config-tui</code>는 아래 링크에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"/test123/fe-guide/ko_CODING-CONVENSION\">[FE가이드] 코딩 컨벤션</a></li>\n<li><a href=\"https://github.com/nhn/tui.eslint.config\">eslint-config-tui</a></li>\n</ul>\n<p><code class=\"tui-language-text\">eslint-config</code> 적용 방법은 사용하고 싶은 config를 npm을 사용해 설치한 후 설정 파일(.eslintrc.js)의 extends 속성에 추가하면 된다. extends 속성 값은 패키지 이름의 접두어인 <code class=\"tui-language-text\">eslint-config-</code>를 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// config 설치</span>\nnpm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>tui</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// .eslintrc.js 수정</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint-config-tui'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 추천 설정은 보통 단독으로 사용하지 않고 프로젝트의 기본 속성에 추가로 확장되는 부분임을 잊지 말아야 한다. 상세한 기본 설정 속성들은 앞에서 더 자세히 설명하였다. 프로젝트에서 ECMAScript의 모듈 시스템을 사용하면 아래와 같이 <code class=\"tui-language-text\">parserOptions.sourceType</code>을 <code class=\"tui-language-text\">module</code>로 설정해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// .eslintrc.js 수정</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint-config-tui'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또 다른 예로 browser와 ES6의 전역변수를 사용해야 한다면 <code class=\"tui-language-text\">env</code> 속성을 아래와 같이 추가해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// .eslintrc.js 수정</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint-config-tui'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. 여러 개의 추천 설정을 사용하기 위한 팁</strong></p>\n<p>실제 프로젝트에서는 여러 가지 추천 설정을 상속받아서 쓰는 경우가 있다. 아래의 예는 <strong>FE개발랩</strong>의 ESLint 규칙을 정리한 <a href=\"https://github.com/nhn/tui.eslint.config\">TOAST UI 규칙</a>과 <a href=\"https://github.com/vuejs/eslint-plugin-vue\">vue 프레임워크의 추천 설정</a>을 같이 사용한 모습이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plugin:vue/recommended'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이처럼 여러 추천 설정이 사용될 때, 뒤에 선언된 규칙이 우선순위가 높다.</p>\n<p><strong>4. npm 스크립트 추가하기</strong></p>\n<p>package.json</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint src\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>5. CLI 명령 실행하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"tui-language-bash\"><code class=\"tui-language-bash\"><span class=\"token function\">npm</span> run lint\n<span class=\"token function\">npm</span> run lint -- --fix // <span class=\"token punctuation\">(</span>자동 수정<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"prettier\" style=\"position:relative;\"><a href=\"#prettier\" aria-label=\"prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prettier</h2>\n<p>Prettier는 다른 정적 분석 도구와 같이 모든 문법 상황을 분석하기보다는 엄격한 코드 스타일에만 초점을 두어 탄생한 도구이다. 가장 큰 장점은 코드 스타일을 자동으로 정리해주기 때문에 이와 관련된 불필요한 노력이 없어지는 것이다. 따라서 개발자는 프로젝트의 코드 스타일에 대한 걱정은 Prettier에게 맡기고 오직 코드의 로직에만 집중할 수 있게 된다. 다만, 포맷팅과 관련된 부분만 도움이 되므로 코드 품질 규칙과 관련해서는 ESLint와 같은 도구와 함께 사용하는 것이 좋다. Prettier는 다양한 언어(Javascript, JSX, Flow, TypeScript, CSS, Less, SCSS, JSON, GraphQL)를 지원하며 대부분의 에디터에서 통합 사용이 가능하다.</p>\n<blockquote>\n<p>아래 이미지는 왼쪽이 포맷팅이 적용되지 않은 코드이고, 오른쪽이 Prettier를 거쳐 자동으로 포맷팅된 코드이다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/45609883-cd793900-ba94-11e8-9773-10741ea1b324.png\" alt=\"demo_image\"></p>\n<br>\n<p><a href=\"https://prettier.io/playground/\">다음 페이지</a>에서 Prettier를 사용해볼 수 있다.</p>\n<h3 id=\"설치-방법-1\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95-1\" aria-label=\"설치 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 방법</h3>\n<h4 id=\"npm\" style=\"position:relative;\"><a href=\"#npm\" aria-label=\"npm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>exact prettier\n# or globally\nnpm install <span class=\"token operator\">--</span>global prettier</code></pre></div>\n<h4 id=\"yarn\" style=\"position:relative;\"><a href=\"#yarn\" aria-label=\"yarn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yarn</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">yarn add prettier <span class=\"token operator\">--</span>dev <span class=\"token operator\">--</span>exact\n# or globally\nyarn global add prettier</code></pre></div>\n<h3 id=\"사용법-1\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95-1\" aria-label=\"사용법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<h4 id=\"에디터에-prettier를-적용하는-방법\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%94%94%ED%84%B0%EC%97%90-prettier%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"에디터에 prettier를 적용하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에디터에 Prettier를 적용하는 방법</h4>\n<p>Atom, Emacs, Vim, Visual Studio, Sublime, JetBrains WebStorm 등의 에디터에 통합하여 사용할 수 있다. 에디터의 통합된 플러그인을 설치하면, 소스 코드를 저장하려고 할 때 자동으로 Prettier를 실행한 다음 포맷팅이 변경된 결과를 저장해준다. 자세한 적용 법은 <a href=\"https://prettier.io/docs/en/editors.html\">여기</a>를 참고하기 바란다. 아래는 JetBrains WebStorm 에디터에서 파일 저장 시 자동으로 포맷팅해주는 모습이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/47416290-5714d880-d7b0-11e8-8601-f6e9dbf742a1.gif\" alt=\"preview\"></p>\n<h4 id=\"프로젝트에-prettier를-적용하는-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-prettier%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"프로젝트에 prettier를 적용하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트에 Prettier를 적용하는 방법</h4>\n<p>Prettier는 코딩 컨벤션에 대한 논쟁을 없애기 위한 도구이다. 따라서 스타일과 관련된 복잡한 옵션이 없다. 다만 탭 vs 스페이스, 큰따옴표 vs 작은따옴표, 들여 쓰기 수준과 같은 논쟁의 여지가 많은 부분에 대해서만 옵션을 제공하고 있다. 이미 ESlint를 사용한다면 단지 <code class=\"tui-language-text\">eslint-plugin-prettier</code>를 설치하는 것 만으로 Prettier를 쉽게 통합할 수 있다. 이 장에서는 Prettier 설정파일을 추가하고 ESLint에 통합하여 사용하는 부분까지 알아보기로 한다.</p>\n<p><strong>1. 설정파일 추가하기</strong></p>\n<p>프로젝트 폴더에 .prettierrc 파일을 만들고 <a href=\"https://prettier.io/docs/en/options.html\"><strong>공식 문서</strong></a>를 참고하여 옵션을 만든다. 옵션에 대한 설명은 문서의 마지막에 추가하였다. 사용되는 <code class=\"tui-language-text\">.prettierrc</code> 파일은 아래와 같은 모습이 될 것이다.</p>\n<blockquote>\n<p>Prettier의 경우 ESLint에 비해 옵션이 많지 않다. 이유는 Prettier는 코드 스타일에 대한 논쟁을 멈추게 하기 위해 만들어졌고, 옵션을 많이 가지고 있을수록 원래의 Prettier을 사용하는 목적에서 더 멀어진다고 여기기 때문이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"bracketSpacing\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"jsxBracketSameLine\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>2. ESLint에 플러그인으로 Prettier를 추가하기</strong></p>\n<p>Prettier와 ESLint가 같은 문법에 대해서 다르게 처리될 수 있기 때문에 Prettier를 ESLint에 통합하여 사용하는 것이 좋다. <code class=\"tui-language-text\">eslint-plugin-prettier</code>를 설치하고 .eslintrc.js파일의 프러그인에 추가하는 것 만으로 쉽게 확장하여 사용할 수 있다.</p>\n<p>1) <code class=\"tui-language-text\">eslint-plugin-prettier</code> 를 사용하여 ESLint 규칙에 Prettier를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>prettier</code></pre></div>\n<p>2) .eslintrc.js에 Prettier플러그인을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"prettier/prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. ESLint의 포맷팅 규칙 끄기</strong></p>\n<p>ESLint와 Prettier가 포맷팅 규칙을 중복해서 리포팅하기 때문에, ESLint의 포맷팅 관련 옵션은 비활성화하는 것이 좋다. <code class=\"tui-language-text\">eslint-config-prettier</code>를 설치하면 중복되는 포맷팅 규칙은 비활성화해 줄 수 있다. </p>\n<p>다음 예는 함수명 뒤의 공백 규칙에 대하여 ESLint와 prettier가 중복으로 에러를 출력하는 상황을 보여준다. function 뒤의 공백이 없어야 함을 강제하는 ESLint 규칙인 <code class=\"tui-language-text\">space-before-function-paran</code> error와 prettier의 <code class=\"tui-language-text\">DELETE &#39;.&#39;</code> error가 중복해서 표시되고 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/45535071-3021c900-b838-11e8-8374-3e5ed2efd085.png\" alt=\"2018-09-14 4 06 25\"></p>\n<p>아래와 같이 설정하면 중복 리포팅에 대한 혼란을 해소할 수 있다.</p>\n<p>1) 아래와 같이 <code class=\"tui-language-text\">eslint-config-prettier</code>를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>prettier</code></pre></div>\n<p>2) .eslintrc.js에 Prettier 설정을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ESLint는 사용자가 추가로 확장하고 싶은 기능을 직접 만들어 사용할 수 있도록 하는 <a href=\"https://eslint.org/docs/developer-guide/working-with-plugins\">플러그인</a>을 지원한다. Prettier는 ESLint를 위한 <code class=\"tui-language-text\">eslint-plugin-prettier</code>플러그인을 제공함으로써 ESLint 규칙으로 Prettier를 실행할 수 있게 하며, <code class=\"tui-language-text\">eslint-config-prettier</code>는 <code class=\"tui-language-text\">eslint-plugin-prettier</code>로 확장된 규칙과 기존 ESLint규칙의 중복되는 규칙을 해제한 구성을 사용하도록 도와준다.</p>\n<p><strong>4. 권장 설정을 이용하여 불필요한 config 없애기</strong></p>\n<p>아래와 같이 권장 설정을 사용하면 .eslintrc.js의 플러그인 프로퍼티에 prettier를 명시해 주지 않아도 된다. 하지만 이 경우에도 동일하게 <code class=\"tui-language-text\">eslint-plugin-prettier</code>와 <code class=\"tui-language-text\">eslint-config-prettier</code>를 둘 다 설치해줘야 한다. <code class=\"tui-language-text\">plugin:prettier/recommended</code>는 플러그인에 자동으로 prettier를 추가하고 중복되는 포맷팅 규칙은 비활성화시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:prettier/recommended\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"옵션-1\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%98-1\" aria-label=\"옵션 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵션</h4>\n<ol>\n<li><code class=\"tui-language-text\">printWidth</code> - 줄바꿈이 길이를 지정</li>\n<li><code class=\"tui-language-text\">tabWidth</code> - 들여쓰기 레벨 (공백수)</li>\n<li><code class=\"tui-language-text\">useTabs</code> - 스페이스 대신 탭으로 들여쓰기</li>\n<li><code class=\"tui-language-text\">semi</code> - 명령의 끝에 세미콜론여부</li>\n<li><code class=\"tui-language-text\">singleQuote</code> - 큰따움표 대신 작은따움표 사용</li>\n<li><code class=\"tui-language-text\">trailingComma</code> - 여러줄 입력시 후행 쉼표 사용</li>\n<li><code class=\"tui-language-text\">bracketSpacing</code> - 객체 리터럴 괄호 사이에 공백 여부</li>\n<li><code class=\"tui-language-text\">jsxBracketSameLine</code> - jsx의 닫는 꺽쇄를 홀로 남기지 않게 함</li>\n<li><code class=\"tui-language-text\">arrowParens</code> - arrow 함수의 파라미터에 괄호를 강제함</li>\n<li><code class=\"tui-language-text\">parser</code> - 구문 분석기 지정 (사용하는 언어를 설정)</li>\n<li><code class=\"tui-language-text\">filepath</code> - 구문 분석기 유추를 위한 입력파일 패스지정</li>\n<li><code class=\"tui-language-text\">requirePragma</code> - pragma 헤더 사용유무</li>\n<li><code class=\"tui-language-text\">insertPragma</code> - 자동 pragma 헤더 삽입 사용유무</li>\n<li><code class=\"tui-language-text\">proseWrap</code> - 줄바꿈 적용 여부</li>\n</ol>\n<p>각 옵션은 Prettier <a href=\"https://prettier.io/docs/en/options.html\"><strong>공식 문서</strong></a>에서 자세히 볼 수 있다.<br></p>\n<h4 id=\"cli-사용-방법-1\" style=\"position:relative;\"><a href=\"#cli-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95-1\" aria-label=\"cli 사용 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI 사용 방법</h4>\n<p>Prettier은 보통 사용하는 에디터에 통합하여 사용하는 경우가 많지만 CLI 환경에서도 실행할 수도 있다. 아래는 CLI로 Prettier를 실행하는 예제이다 (<code class=\"tui-language-text\">--no-config</code> 옵션을 사용하여 기본 설정으로 실행하고 있다)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">prettier <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>config javascriptCode<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>특정 규칙을 추가하여 실행하고 싶을 때는 <a href=\"https://prettier.io/docs/en/options.html\"><strong>공식 옵션 문서</strong></a>를 참고하여 인자를 추가하면 된다. 아래 예는 <code class=\"tui-language-text\">--single-quote</code>로 문자열 선언 시 작은 따옴표를 사용하며 <code class=\"tui-language-text\">--no-semi</code>로 세미콜론을 생략하도록 코드 스타일을 정의하였고 <code class=\"tui-language-text\">--write</code> 옵션을 사용하여 변경된 결과를 저장해주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">prettier <span class=\"token operator\">--</span>single<span class=\"token operator\">-</span>quote <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>semi <span class=\"token operator\">--</span>write javascriptCode<span class=\"token punctuation\">.</span>js\"</code></pre></div>\n<p>좀 더 자세한 CLI 사용 방법은 <a href=\"https://prettier.io/docs/en/cli.html\"><strong>공식 문서</strong></a>에서 확인할 수 있다.</p>\n<h2 id=\"맺음말\" style=\"position:relative;\"><a href=\"#%EB%A7%BA%EC%9D%8C%EB%A7%90\" aria-label=\"맺음말 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맺음말</h2>\n<p>지금까지 정적 분석에 대해 알아보았다. 정적 분석은 코드의 일관성을 유지하고 버그를 피하기 위해 실행 전에 미리 코드를 분석하는 방법이다. 이 가이드는 정적 분석의 필요성과 도구에 대해 설명하였으며 특히 많이 사용되는 ESLint와 Prettier를 손쉽게 적용할 수 있도록 문서화했다. 이 가이드가 프로젝트에 정적 분석 도구를 보다 쉽게 적용하는데 도움이 되길 바란다.</p>\n<p>이 문서는 NHN의 FE개발랩에서 작성하고 관리하는 공식 웹 프론트 개발 가이드이다.\n가이드 적용 관련 문의나 문서의 오류, 개선 제안은 공식 문의 채널(<a href=\"mailto:dl_javascript@nhn.com\">dl_javascript@nhn.com</a>)을 통해 할 수 있다.</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Last Modified</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">2019. 04. 15</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"id":"ko_STATIC-ANALYSIS","title":"정적 분석","description":"자바스크립트는 다른 언어에 비해 유연한 문법구조를 갖는다. 이런 특징이 가끔 뜻하지 않은 문제를 일으킨다. 가령, 문법적 오류가 아니라서 찾기 어려운 버그를 만들거나, 개발자의 의도를 파악하기 어려운 코드를 만들거나, 컴파일 단계가 없어서 코드를 실행하기 전까지는 알 수 없는 오류를 만든다. 코딩 컨벤션을 준수하면 가독성이 좋아지고 안티 패턴의 코드를 예방할 수 있으므로 어느 정도 해결 방법이 될 수 있다. 하지만 개발자가 코딩 컨벤션을 잘 따르고 있는지는 여전히 확인하기 힘들다. 하지만 정적 분석을 이용하면 코딩컨벤션을 자동으로 검증하고 잠재에러를 찾아내 자바스크립트의 단점을 보완한다.","date":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"ko_STATIC-ANALYSIS","lang":"ko"}},"staticQueryHashes":["2997033868","414700122","542722004"]}