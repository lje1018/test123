{"componentChunkName":"component---src-templates-fe-guide-detail-tsx","path":"/fe-guide/en_STATIC-ANALYSIS","result":{"data":{"post":{"html":"<h1 id=\"static-analysis\" style=\"position:relative;\"><a href=\"#static-analysis\" aria-label=\"static analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Analysis</h1>\n<p>JavaScript, compared to other languages, has a more flexible syntax. Such characteristic sometimes causes unintended problems. For example, the flexible syntax creates accidental errors that are not, from syntactical perspective, bugs, and also leads to codes of which purpose is not transparent. Because JavaScript does not have a compile stage, such errors are undetectable before actually running the program. While adhering to the <strong>Coding Convention</strong> to increase readability and prevents anti-patterns is a temporary solution, it is still difficult for developers to ensure that they are following the Coding Convention by themselves. In order to compensate for the JavaScript’s shortcoming, Static Analysis is used to automatically validate the Coding Convention and sniff out possible errors. </p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li>\n<p><a href=\"#static-analysis-tools\">Static Analysis Tools</a></p>\n<ul>\n<li><a href=\"#roles-of-static-analysis-tools\">Roles of Static Analysis Tools</a></li>\n<li><a href=\"#iconic-static-analysis-tools\">Iconic Static Analysis Tools</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#eslint\">ESLint</a></p>\n<ul>\n<li><a href=\"#install\">Install</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#prettier\">Prettier</a></p>\n<ul>\n<li><a href=\"#install-1\">Install</a></li>\n<li><a href=\"#usage-1\">Usage</a></li>\n</ul>\n</li>\n<li><a href=\"#afterword\">Afterword</a></li>\n</ul>\n<h2 id=\"static-analysis-tools\" style=\"position:relative;\"><a href=\"#static-analysis-tools\" aria-label=\"static analysis tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Analysis Tools</h2>\n<h3 id=\"roles-of-static-analysis-tools\" style=\"position:relative;\"><a href=\"#roles-of-static-analysis-tools\" aria-label=\"roles of static analysis tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Roles of Static Analysis Tools</h3>\n<ul>\n<li>Detects possible errors including syntax errors and typos by statically analyzing the code. </li>\n<li>Automates <strong>Coding Convention</strong> verification.</li>\n<li>Provides prompt feedbacks, integrated with development environments. </li>\n</ul>\n<h3 id=\"iconic-static-analysis-tools\" style=\"position:relative;\"><a href=\"#iconic-static-analysis-tools\" aria-label=\"iconic static analysis tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iconic Static Analysis Tools</h3>\n<ul>\n<li><strong>ESLint</strong>: It is the most recently built tool, and is very flexible and extensible. </li>\n<li><strong>Prettier</strong>: It is a tool that only emphasizes code style and automatic formatting</li>\n<li>JSLint: Built by Douglas Crockford, and cannot be configured or extended.</li>\n<li>JSHint: JSHint is built by adding configurability and extensibility to JSLint. </li>\n<li>JSCS: As a coding convention checker, it has been integrated into ESLint. </li>\n</ul>\n<h2 id=\"eslint\" style=\"position:relative;\"><a href=\"#eslint\" aria-label=\"eslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint</h2>\n<p>Built by Nicholas C. Zakas, ESLint is currently the most widely used static analysis tool. The tool’s credibility has been verified by the fact that giants like Facebook, PayPal, and Airbnb feel comfortable enough to use it in their development environments. ESLint uses the <a href=\"https://github.com/eslint/espree\">Espree</a> parser to built Abstract Syntax Tree (AST) to directly evaluate the code, and it not only supports diverse rules, but also supports various environments and formatters. Because it also provides features to add custom rules or formatters, it can be customized flexibly in accordance with the project’s characteristics. To learn more about <a href=\"https://eslint.org/docs/rules/\">rules</a> and <a href=\"https://eslint.org/demo/\">demos</a>, follow the respective links. </p>\n<h3 id=\"install\" style=\"position:relative;\"><a href=\"#install\" aria-label=\"install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install</h3>\n<p>ESlint can be installed using npm. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint</code></pre></div>\n<h3 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h3>\n<p>It is possible to create a config file for each project, and use it to enforce different rules to carry out static analysis. Also, editors that support ESLint give feedback according to the custom ESLint rule in the project folder, which allows faster debugging and prompt error validation. ESLint can even be integrated into bundlers like Webpack and can be configured to suit the <a href=\"https://webpack.js.org/concepts/mode/\">development mode or production mode</a>. Especially in production mode, if more errors are raised than the alert threshold, it can even stop the build process. </p>\n<h4 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h4>\n<p>Options in ESLint can be categorized into six modes: Possible Errors, Best Practices, Strict Mode, Variables, Stylistic Issues, and ES6, and detailed explanation on each option can be found in the official <a href=\"https://eslint.org/docs/rules/\">documentation</a>. Options can be applied on the <code class=\"tui-language-text\">.eslintrc.js</code> config file, and will be explained briefly in the <code class=\"tui-language-text\">Applying it to Projects</code> section. More in depth explanation can be found in the official <a href=\"https://eslint.org/docs/user-guide/configuring\">documentation</a>.</p>\n<h4 id=\"using-the-cli\" style=\"position:relative;\"><a href=\"#using-the-cli\" aria-label=\"using the cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the CLI</h4>\n<p>In order to use ESLint, a config file containing the basic rules (<code class=\"tui-language-text\">.eslintrc.js</code>) is required. Use the <code class=\"tui-language-text\">--init</code> option provided by the CLI to create the config file as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npx eslint <span class=\"token operator\">--</span>init</code></pre></div>\n<p>Now, ESLint can be executed using the CLI.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npx eslint app<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>When the CLI command finishes executing, ESLint statically analyzes the app.js file, and detects and prints the lines that contain errors or do not conform to the Coding Convention as in the following image.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/48070070-61a48880-e21a-11e8-8a13-0b040b9977d7.png\" alt=\"filterimage\"> <br></p>\n<p><code class=\"tui-language-text\">--fix</code> is one of the commonly used options in the CLI. <code class=\"tui-language-text\">--fix</code> automatically corrects the pieces of code marked as error and saves the code. In order to only display the corrections without saving them, use <code class=\"tui-language-text\">--fix-dry-run</code>.</p>\n<p>More options and their detailed explanations can be found on the <a href=\"https://eslint.org/docs/user-guide/command-line-interface\">official website</a>.</p>\n<h4 id=\"applying-it-to-projects\" style=\"position:relative;\"><a href=\"#applying-it-to-projects\" aria-label=\"applying it to projects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Applying it to Projects</h4>\n<p><strong>1. Creating <code class=\"tui-language-text\">.eslintrc.js</code> file</strong></p>\n<blockquote>\n<p>Note\nThe previously explained method of using the <code class=\"tui-language-text\">--init</code> option from the CLI also works. </p>\n</blockquote>\n<p>Below is an example of a config file with some basic rules.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    sourceType<span class=\"token operator\">:</span> <span class=\"token string\">'module'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    jasmine<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tui'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// add your custom rules here</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'indent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>SwitchCase<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ignoreComments<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> ImportDeclaration<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'semi'</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"tui-language-text\">parserOptions</code>\nESLint can be configured to support different JavaScript language options. The parseOptions can take values like ecmaVersion, sourceType, ecmaFeatures, and etc., and more examples can be found on the <a href=\"https://eslint.org/docs/user-guide/configuring#specifying-parser-options\">user guide</a>.</li>\n<li><code class=\"tui-language-text\">env</code>\nThe env option allows developers to define the environment on which the code is being executed. The example above has <code class=\"tui-language-text\">browser</code>, <code class=\"tui-language-text\">es6</code>, and <code class=\"tui-language-text\">jasmine</code> as values.</li>\n<li><code class=\"tui-language-text\">extends</code>\nThe extends option allows developers to use predefined custom rule sets. In the example above, the file is configured to use the <code class=\"tui-language-text\">eslint-config-tui</code>, set of rules used in <strong>FE Development Lab</strong>. (This property will be explained in greater detail in the <strong>2. Using Predefined ESLint Rules</strong>)</li>\n<li><code class=\"tui-language-text\">rules</code>\nUsing the <code class=\"tui-language-text\">rules</code>, rules in the collection defined in the <code class=\"tui-language-text\">extends</code> property can be added and redefined. </li>\n</ul>\n<p>In the example file, a rule making the semicolon mandatory <code class=\"tui-language-text\">semi</code> has been defined and enforced. Also, the <code class=\"tui-language-text\">indent</code> is set to only accept 2 spaces for indentation, and more detailed options like switchCase (applicable in switch statements), ignoreComments (applicable for comments), and ImportDeclaration (applicable in import declarations) have been set to true. </p>\n<p><strong>2. Using Predefined ESLint Rules</strong></p>\n<p>ESLint contains incredibly large collection of rules, so it could be difficult to go through each one to pick out the rules suitable for each project. Luckily, tech-giants like Google, Microsoft, and Airbnb have released their corresponding Coding Conventions and respective ESLint rules, and such collections can be adopted reliably. </p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">vscode-eslint</a></li>\n<li><a href=\"https://github.com/google/eslint-config-google\">eslint-config-google</a></li>\n</ul>\n<p>The Coding Convention produced by the <strong>FE Development Lab</strong> has been reviewed one rule at a time, and can prove to be a useful guide. It contains a set of well-written predefined rules, so it is recommended that readers take advantage of it. The <strong>FE Development Lab</strong>’s <strong>Coding Convention</strong> and <code class=\"tui-language-text\">eslint-config-tui</code> file can be found in the link below. </p>\n<ul>\n<li><a href=\"/test123/fe-guide/ko_CODING-CONVENSION\">[FE Guide] Coding Convention</a></li>\n<li><a href=\"https://github.com/nhn/tui.eslint.config\">eslint-config-tui</a></li>\n</ul>\n<p>To use the <code class=\"tui-language-text\">eslint-config</code> files, simply download the desired config file using npm, and include it in the <code class=\"tui-language-text\">.eslintrc.js</code> file’s <code class=\"tui-language-text\">extends</code> property. When writing the value for the <code class=\"tui-language-text\">extends</code> attribute, the <code class=\"tui-language-text\">eslint-config-</code> prefix can be omitted.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// Install the config file</span>\nnpm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>tui</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// Edit the .eslintrc.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint-config-tui'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n<p>It is important to keep in mind that the predefined should be used cooperatively with default rules, not independently. The default rules have been explained in greater detail in earlier sections. In order to use ECMAScript’s module system in the project, it is necessary to set <code class=\"tui-language-text\">parserOptions.sourceType</code> to <code class=\"tui-language-text\">module</code> as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// Edit the .eslintrc.js </span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint-config-tui'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To use global variables from the browser and ES6, configure the <code class=\"tui-language-text\">env</code> attribute as shown below. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token comment\">// Edit the .eslintrc.js.</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'eslint-config-tui'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Tips for Using Multiple Recommended Configurations</strong></p>\n<p>It is actually common to inherit multiple recommended configurations for projects. The below is an example of using the <a href=\"https://github.com/nhn/tui.eslint.config\">TOAST UI Rules</a> and <a href=\"https://github.com/vuejs/eslint-plugin-vue\">Vue framework’s recommended configurations</a> together at <strong>FE Development Lab</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tui'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plugin:vue/recommended'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As such, when using multiple configurations, the set declared last holds highest priority. </p>\n<p><strong>4. Editing the npm Script</strong></p>\n<p>package.json</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint src\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>5. Running the CLI Command</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"tui-language-bash\"><code class=\"tui-language-bash\"><span class=\"token function\">npm</span> run lint\n<span class=\"token function\">npm</span> run lint -- --fix // <span class=\"token punctuation\">(</span>Fix automatically<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"prettier\" style=\"position:relative;\"><a href=\"#prettier\" aria-label=\"prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prettier</h2>\n<p>Prettier, unlike other static analysis tools that analyze every code for syntax, focuses strictly on the code’s style. The biggest advantage Prettier offers is that it automatically formats the code, eliminating the need for each developer to pay attention to making the codes look “pretty.” It allows developers to forget about styling the code, and only focus on the program’s logic. However, since Prettier <em>does</em> only focus on formatting, it is recommended to use tools like ESLint to guarantee the quality of the code. Prettier supports many different languages (JavaScript, JSX, Flow, TypeScript, CSS, Less, SCSS, JSON, GraphQL) and can be integrated on to most of the editors. </p>\n<blockquote>\n<p>In the image below, the left side is unformatted code, and the codes on the right have been formatted using Prettier. </p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/45609883-cd793900-ba94-11e8-9773-10741ea1b324.png\" alt=\"demo_image\"></p>\n<p>To test Prettier, click <a href=\"https://prettier.io/playground\">here</a>. </p>\n<h3 id=\"install-1\" style=\"position:relative;\"><a href=\"#install-1\" aria-label=\"install 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install</h3>\n<h4 id=\"npm\" style=\"position:relative;\"><a href=\"#npm\" aria-label=\"npm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>exact prettier\n# or globally\nnpm install <span class=\"token operator\">--</span>global prettier</code></pre></div>\n<h4 id=\"yarn\" style=\"position:relative;\"><a href=\"#yarn\" aria-label=\"yarn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yarn</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">yarn add prettier <span class=\"token operator\">--</span>dev <span class=\"token operator\">--</span>exact\n# or globally\nyarn global add prettier</code></pre></div>\n<h3 id=\"usage-1\" style=\"position:relative;\"><a href=\"#usage-1\" aria-label=\"usage 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h3>\n<h4 id=\"using-prettier-on-editors\" style=\"position:relative;\"><a href=\"#using-prettier-on-editors\" aria-label=\"using prettier on editors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Prettier on Editors</h4>\n<p>Many modern editors like Atom, Emacs, Vim, Visual Studio, Sublime, and JetBrains WebStorm supports integrated application of Prettier. Using the integrated plugin, when the source code is being saved, it automatically goes through the Prettier and is saved in formatted version. Refer to the official <a href=\"https://prettier.io/docs/en/editors.html\">documentation</a> for more thorough instructions about using Prettier on editors. The following is an example of Prettier formatting the code before it is saved in JetBrains WebStorm editor.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/47416290-5714d880-d7b0-11e8-8601-f6e9dbf742a1.gif\" alt=\"preview\"></p>\n<h4 id=\"applying-prettier-to-projects\" style=\"position:relative;\"><a href=\"#applying-prettier-to-projects\" aria-label=\"applying prettier to projects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Applying Prettier to Projects</h4>\n<p>Prettier is a tool to eliminate any debate over the coding convention, so it does not have complicated options about style. However, Prettier does provide options regarding specific cases like tabs vs. spaces or single quotes vs. double quotes. If ESLint is already installed, Prettier can be adopted just by installing the <code class=\"tui-language-text\">eslint-plugin-prettier</code>. This section will discuss how to add config files to Prettier and how it can be used with ESLint. </p>\n<p><strong>1. Adding the Config File</strong>\nFirst create a <code class=\"tui-language-text\">.prettierrc</code> file in the project folder, and edit the file according to the <a href=\"https://prettier.io/docs/en/options.html\"><strong>official documentation</strong></a>. An explanation on options have been included in the end of the document. The starter template for <code class=\"tui-language-text\">.prettierrc</code> file should look like the following code. </p>\n<blockquote>\n<p>Prettier, compared to ESLint, does not have many options. This is because it is built to settle any disagreements on style, and the original creators of Prettier thought that enabling never ending list of options would defeat the purpose. </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"bracketSpacing\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"jsxBracketSameLine\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>2. Using Prettier as a Plugin in ESLint</strong></p>\n<p>Because Prettier and ESLint can have different opinions on the same piece of code, it is recommended to use them together. The two can be integrated simply by installing <code class=\"tui-language-text\">eslint-plugin-prettier</code> and adding to the <code class=\"tui-language-text\">eslintrc.js</code> file’s list of plugins. </p>\n<p>1) Include Prettier in ESLint’s list of rules, by using <code class=\"tui-language-text\">eslint-plugin-prettier</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>prettier</code></pre></div>\n<p>2) Add Prettier plugin to <code class=\"tui-language-text\">eslintrc.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"prettier/prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3. Turn off the ESLint’s formatting rule.</strong></p>\n<p>It can be confusing for the program if ESLint and Prettier send redundant reports to it, so it is recommended to just turn off the ESLint’s formatting options. If the Prettier is integrated using <code class=\"tui-language-text\">eslint-config-prettier</code>, it automatically deactivates any redundant rules. </p>\n<p>The following example demonstrates how ESLint and Prettier can produce redundant reports regarding the empty space after the function name. As shown below, both ESLint’s <code class=\"tui-language-text\">space-before-function-paran</code> error and Prettier’s <code class=\"tui-language-text\">DELETE ‘.’</code> errors are printed together. </p>\n<p><img src=\"https://user-images.githubusercontent.com/35218826/45535071-3021c900-b838-11e8-8374-3e5ed2efd085.png\" alt=\"2018-09-14 4 06 25\"></p>\n<p>By following the steps below, the redundant reporting issue can be resolved.</p>\n<p>1) Install <code class=\"tui-language-text\">eslint-config-prettier</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev eslint<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>prettier</code></pre></div>\n<p>2) Add Prettier setting to <code class=\"tui-language-text\">.eslintrc.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ESLint provides <a href=\"https://eslint.org/docs/developer-guide/working-with-plugins\">plugins</a> so that users can customize and add features of their own. Prettier also provides <code class=\"tui-language-text\">eslint-plugin-prettier</code> plugin just for ESLint, and allows users to run Prettier rules with ESLint. <code class=\"tui-language-text\">eslint-config-prettier</code> enables the existing rules in ESLint to cancel out redundant rules so that the program can be ran more efficiently.</p>\n<p><strong>4. Using the Recommended Rules to Eliminate the Unnecessary config</strong></p>\n<p>By using the recommended rules like the following, users do not have to specify the <code class=\"tui-language-text\">prettier</code> in <code class=\"tui-language-text\">.eslintrc.js</code>’s plugin property. However, even in this case, it is required to install both <code class=\"tui-language-text\">eslint-plugin-prettier</code> and <code class=\"tui-language-text\">eslint-config-prettier</code>. <code class=\"tui-language-text\">plugin-prettier/recommended</code> automatically adds the <code class=\"tui-language-text\">prettier</code> value to plugin property, and deactivates the redundant rules. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:prettier/recommended\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"options-1\" style=\"position:relative;\"><a href=\"#options-1\" aria-label=\"options 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options</h4>\n<ol>\n<li><code class=\"tui-language-text\">printWidth</code> - Specifies the line length of the printer wrap</li>\n<li><code class=\"tui-language-text\">tabWidth</code> - Specifies the number of empty spaces</li>\n<li><code class=\"tui-language-text\">useTabs</code> - Uses tabs instead of spaces to indent</li>\n<li><code class=\"tui-language-text\">semi</code> - Enforces semicolons at end of statements</li>\n<li><code class=\"tui-language-text\">singleQuote</code> - Uses single quotes instead of double quotes</li>\n<li><code class=\"tui-language-text\">trailingComma</code> - Prints trailing commas for multiline codes</li>\n<li><code class=\"tui-language-text\">bracketSpacing</code> - Enforces spacing between the object literal parenthesis</li>\n<li><code class=\"tui-language-text\">jsxBracketSameLine</code> - Ensures that the closing bracket is not left alone its own line when using jsx.</li>\n<li><code class=\"tui-language-text\">arrowParens</code> - Enforces parenthesis for arrow function parameters</li>\n<li><code class=\"tui-language-text\">parser</code> - Specifies the parser</li>\n<li><code class=\"tui-language-text\">filepath</code> - Specifies the filepath for the parser</li>\n<li><code class=\"tui-language-text\">requirePragma</code> - Enables/disables pragma headers</li>\n<li><code class=\"tui-language-text\">insertPragma</code> - Enables/disables automatic pragma header insertions</li>\n<li><code class=\"tui-language-text\">proseWrap</code> - Specifies wrap type</li>\n</ol>\n<p>Each option is explained in greater detail on the <a href=\"https://prettier.io/docs/en/options.html\"><strong>official documentation</strong></a>. </p>\n<h4 id=\"using-the-cli-1\" style=\"position:relative;\"><a href=\"#using-the-cli-1\" aria-label=\"using the cli 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the CLI</h4>\n<p>Although Prettier is often used integrated with editors, it can also be used in CLI environment. Shown below is an example of using the CLI to run Prettier. (The example is using the <code class=\"tui-language-text\">--no-config</code> to check the javascriptCode.js with default settings.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">prettier <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>config javascriptCode<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>To add other options, refer to the <a href=\"https://prettier.io/docs/en/options.html\"><strong>official documentation</strong></a> and find the desired input to use with the CLI. The example below is using <code class=\"tui-language-text\">--single-quote</code> and <code class=\"tui-language-text\">--no-semi</code> to make sure that string is declared with single quotes and semicolons will be placed at the end of each statement. Finally, it uses the <code class=\"tui-language-text\">--write</code> option to save the changes made. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"tui-language-javascript\"><code class=\"tui-language-javascript\">prettier <span class=\"token operator\">--</span>single<span class=\"token operator\">-</span>quote <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>semi <span class=\"token operator\">--</span>write javascriptCode<span class=\"token punctuation\">.</span>js\"</code></pre></div>\n<p>To learn more about using the CLI to access Prettier’s functionalities, refer to the <a href=\"https://prettier.io/docs/en/cli.html\"><strong>official documentation</strong></a>.</p>\n<h2 id=\"afterword\" style=\"position:relative;\"><a href=\"#afterword\" aria-label=\"afterword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Afterword</h2>\n<p>This document has explored the Static Analysis. Static analysis enables developers to analyze the code before execution to maintain the consistency inside of the code and to prevent bugs. This guide is focused on the importance of static analysis and the tools related to it, especially ESLint and Prettier. The author hopes that this document helps the readers adopt the static analysis methods efficiently. </p>\n<p>This document is an official Web Front-End development guide written and maintained by NHN FE Development Lab.\nAny errors, questions, and points of improvement pertaining to this document should be addressed to the official support channel (<a href=\"mailto:dl_javascript@nhn.com\">dl_javascript@nhn.com</a>).</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Last Modified</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">2019. 04. 15</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"id":"en_STATIC-ANALYSIS","title":"Static Analysis","description":"JavaScript, compared to other languages, has a more flexible syntax. Such characteristic sometimes causes unintended problems. For example, the flexible syntax creates accidental errors that are not, from syntactical perspective, bugs, and also leads to codes of which purpose is not transparent. Because JavaScript does not have a compile stage, such errors are undetectable before actually running the program. While adhering to the Coding Convention to increase readability and prevents anti-patterns is a temporary solution, it is still difficult for developers to ensure that they are following the Coding Convention by themselves. In order to compensate for the JavaScript’s shortcoming, Static Analysis is used to automatically validate the Coding Convention and sniff out possible errors.","date":null}},"allProductsJson":{"edges":[{"node":{"id":"tui-chart","packageName":null,"name":"Chart","type":"application","description":"The Chart makes your data pop, and it is easy to use. It provides you with multiple charts like Bar, Column, Line, and more.","detailDesc":"Chart makes your data pop. Its numerous charts like Line, Bar, Pie, and more are easy to use, and you can export your data to excel or even as images.","link":"","logo":null}},{"node":{"id":"tui-editor","packageName":"@toast-ui/editor","name":"Editor","type":"application","description":"The Editor allows you to edit your Markdown documents using text or WYSIWYG and comes with Syntax Highlighting, Scroll-Sync, Live Preview, and Chart features.","detailDesc":"Editor allows you to interact with their Markdown documents through both text and WYSIWYG. With Syntax Highlighting, Scroll-Sync, Live Preview, Charts, and much more diverse features and UI, it takes your word processing to the next level.","link":"https://nhn.github.io/tui.editor/latest","logo":null}},{"node":{"id":"tui-grid","packageName":null,"name":"Grid","type":"application","description":"The Grid is a powerful library with features like data editing, filtering, sorting, and more, and can be used to customize the editor or the renderer to your desired format.","detailDesc":"Grid is a powerful grid library with data editing, filtering, sorting, pagination features, and more. Furthermore, you can customize the editor and the renderer to your desired format and visualize your data however you like.","link":"https://nhn.github.io/tui.grid/latest/","logo":null}},{"node":{"id":"tui-calendar","packageName":null,"name":"Calendar","type":"application","description":"The Calendar supports monthly, weekly, daily views and more, and you can create or edit your schedule with a simple dragging motion.","detailDesc":"Calendar provides monthly, weekly, multi-weekly, daily views, and more, as well as a basic pop-up UI you can use to add/edit/delete your schedules. You can manage your schedule simply by dragging the schedules around. Managing your calendar has never been easier.","link":"","logo":null}},{"node":{"id":"tui-image-editor","packageName":null,"name":"Image-editor","type":"application","description":"With the UI that is the perfect combination of simple and beautiful, the Image Editor is a Full-Featured one that is perfect for everyday use.","detailDesc":"With the UI that is the perfect combination of simple and beautiful, Image Editor is a Full-Featured image editor that provides you with editing, drawing, and typing capabilities as well as a collection of great image filters that you can apply all at once.","link":"https://nhn.github.io/tui.image-editor/latest/","logo":null}},{"node":{"id":"tui-app-loader","packageName":null,"name":"App Loader","type":"component","description":"AppLoader is a library that you can use to load or install a certain app on the mobile device.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-auto-complete","packageName":null,"name":"Auto Complete","type":"component","description":"AutoComplete component can suggest and even fill in the rest of the word and sentences given the inputted text.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-color-picker","packageName":null,"name":"Color Picker","type":"component","description":"ColorPicker is a simple and efficient color picker, true to its name.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-context-menu","packageName":null,"name":"Context Menu","type":"component","description":"ContextMenu displays the menu items that you can access via the right click.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-date-picker","packageName":null,"name":"Date Picker","type":"component","description":"DatePicker allows you to pick a date using a pop-up calendar.\n\n","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-pagination","packageName":null,"name":"Pagination","type":"component","description":"Pagination component can show you the current page within a multi-page document and also provides links for included pages.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-rolling","packageName":null,"name":"Rolling","type":"component","description":"Rolling is a slider component that lets you view multiple contents in a selected area.","detailDesc":"","link":"","logo":null}},{"node":{"id":"select-box","packageName":"@toast-ui/select-box","name":"Select Box","type":"component","description":"SelectBox is a dropdown list component that you can use to select multiple menus easily.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-time-picker","packageName":null,"name":"Time Picker","type":"component","description":"TimePicker component allows you to use the SelectBox or the SpinBox to select the time.","detailDesc":"","link":"","logo":null}},{"node":{"id":"tui-tree","packageName":null,"name":"Tree","type":"component","description":"Tree component displays the data structure of the hierarchy and allows you to view and edit the node names.","detailDesc":"","link":"","logo":null}},{"node":{"id":"@toast-ui/doc","packageName":null,"name":"TOAST UI Doc","type":"tool","description":"Documentation generator that creates the example page and the API document by parsing the JSDoc comments.","detailDesc":"","link":"https://github.com/nhn/toast-ui.doc","logo":null}},{"node":{"id":"tui-eslint-config","packageName":null,"name":"ESLint Config","type":"tool","description":"ESLint configuration used with TOAST UI products to help find and fix problems in JavaScript code.","detailDesc":"","link":"https://github.com/nhn/tui.eslint.config","logo":null}},{"node":{"id":"tui-release-notes","packageName":null,"name":"Release Note","type":"tool","description":"Github release note generator to automatically summarize and classify the updates based on the commit logs.","detailDesc":"","link":"https://github.com/nhn/toast-ui.release-notes","logo":null}},{"node":{"id":"toast","packageName":null,"name":"TOAST Cloud","type":"references","description":"references is TOAST Cloud","detailDesc":"","link":"https://www.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-nhntoast.png"}},{"node":{"id":"toastfile","packageName":null,"name":"TOAST File","type":"references","description":"references is TOAST File","detailDesc":"","link":"https://file.toast.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastfile.png"}},{"node":{"id":"dooray","packageName":null,"name":"Dooray","type":"references","description":"references is Dooray","detailDesc":"","link":"https://dooray.com/home","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-toastdooray.png"}},{"node":{"id":"ncp","packageName":null,"name":"NCP","type":"references","description":"references is NCP","detailDesc":"","link":"https://www.e-ncp.com/","logo":"https://uicdn.toast.com/toastui/img/toast-ui-bi-ncp.png"}}]}},"pageContext":{"id":"en_STATIC-ANALYSIS","lang":"en"}},"staticQueryHashes":["2997033868","414700122","542722004"]}